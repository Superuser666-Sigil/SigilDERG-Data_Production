[
  {
    "execution_id": "exec-84ae39b3-f4a15268-1751259430",
    "timestamp": "2025-06-30T04:57:10.083982+00:00",
    "sacred_chain": {
      "input_data": "avro-rs",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'avro-rs' -> 'avro-rs'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "avro-rs",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/avro-rs",
            "title": "avro-rs v0.13.0",
            "content": {
              "raw_markdown": "#  avro-rs v0.13.0\nLibrary for working with Apache Avro in Rust \n  * [ Readme ](https://crates.io/crates/avro-rs)\n  * [ 24 Versions ](https://crates.io/crates/avro-rs/versions)\n  * [ Dependencies ](https://crates.io/crates/avro-rs/dependencies)\n  * [ Dependents ](https://crates.io/crates/avro-rs/reverse_dependencies)\n\n\n## Metadata\nover 4 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n102 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add avro-rs\nOr add the following line to your Cargo.toml:\navro-rs = \"0.13.0\"\n## Repository\n[ github.com/flavray/avro-rs ](https://github.com/flavray/avro-rs)\n## Owners\n[ Report crate ](https://crates.io/support?crate=avro-rs&inquire=crate-violation)\n### Stats Overview\n1,524,088 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  avro-rs v0.13.0\nLibrary for working with Apache Avro in Rust \n  *  Readme \u27e81\u27e9\n  *  24 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nover 4 years ago \n2018 edition \n MIT \u27e85\u27e9\n102 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add avro-rs\nOr add the following line to your Cargo.toml:\navro-rs = \"0.13.0\"\n## Repository\n github.com/flavray/avro-rs \u27e86\u27e9\n## Owners\n Report crate \u27e87\u27e9\n### Stats Overview\n1,524,088 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/avro-rs:  Readme \n\u27e82\u27e9 https://crates.io/crates/avro-rs/versions:  24 Versions \n\u27e83\u27e9 https://crates.io/crates/avro-rs/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/avro-rs/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://github.com/flavray/avro-rs:  github.com/flavray/avro-rs \n\u27e87\u27e9 https://crates.io/support?crate=avro-rs&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 2.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 916,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113219.8039204"
          },
          "docs_rs": {
            "url": "https://docs.rs/avro-rs",
            "title": "Crate avro_rsCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\n[Settings](https://docs.rs/avro-rs/latest/settings.html)\n[Help](https://docs.rs/avro-rs/latest/help.html)\nSummary[Source](https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959)\nExpand description\nA library for working with [Apache Avro](https://avro.apache.org/) in Rust.\nPlease check our [documentation](https://docs.rs/avro-rs) for examples, tutorials and API reference.\n**[Apache Avro](https://avro.apache.org/)** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library)Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version)Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the [version upgrade guide](https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema)Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#writing-data)Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way)The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way)The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data)Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s [Snappy](http://google.github.io/snappy/) compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reading-data)Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1)The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1)The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together)Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the [Avro specification](https://avro.apache.org/docs/current/spec.html#Logical+Types):\n  1. `Decimal` using the [`num_bigint`](https://docs.rs/num-bigint/0.2.6/num_bigint) crate\n  2. UUID using the [`uuid`](https://docs.rs/uuid/0.8.1/uuid) crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types)Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint)Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data)Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s [`std::sync::Once`](https://doc.rust-lang.org/std/sync/struct.Once.html) mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility)Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reexports)\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#modules)\n\n[rabin](https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html \"mod avro_rs::rabin\")\n    Implementation of the Rabin fingerprint algorithm\n\n[schema](https://docs.rs/avro-rs/latest/avro_rs/schema/index.html \"mod avro_rs::schema\")\n    Logic for parsing and interacting with schemas in Avro format.\n\n[schema_compatibility](https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html \"mod avro_rs::schema_compatibility\")\n    Logic for checking schema compatibility\n\n[types](https://docs.rs/avro-rs/latest/avro_rs/types/index.html \"mod avro_rs::types\")\n    Logic handling the intermediate representation of Avro values.\n## Structs[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#structs)\n\n[Days](https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html \"struct avro_rs::Days\")\n\n\n[Decimal](https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html \"struct avro_rs::Decimal\")\n\n\n[Duration](https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html \"struct avro_rs::Duration\")\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\n[Millis](https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html \"struct avro_rs::Millis\")\n\n\n[Months](https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html \"struct avro_rs::Months\")\n\n\n[Reader](https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html \"struct avro_rs::Reader\")\n    Main interface for reading Avro formatted values.\n\n[Writer](https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html \"struct avro_rs::Writer\")\n    Main interface for writing Avro formatted values.\n## Enums[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#enums)\n\n[Codec](https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html \"enum avro_rs::Codec\")\n    The compression codec used to compress blocks.\n\n[DeError](https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html \"enum avro_rs::DeError\")\n\n\n[Error](https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html \"enum avro_rs::Error\")\n\n\n[SerError](https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html \"enum avro_rs::SerError\")\n\n## Functions[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#functions)\n\n[from_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html \"fn avro_rs::from_avro_datum\")\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\n[from_value](https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html \"fn avro_rs::from_value\")\n    Interpret a `Value` as an instance of type `D`.\n\n[max_allocation_bytes](https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html \"fn avro_rs::max_allocation_bytes\")\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\n[to_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html \"fn avro_rs::to_avro_datum\")\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\n[to_value](https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html \"fn avro_rs::to_value\")\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#types)\n\n[AvroResult](https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html \"type avro_rs::AvroResult\")\n    A convenience type alias for `Result`s with `Error`s.\n",
              "markdown_with_citations": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for working with Apache Avro\u27e84\u27e9 in Rust.\nPlease check our documentation\u27e85\u27e9 for examples, tutorials and API reference.\n**Apache Avro\u27e84\u27e9** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## \u00a7\u27e86\u27e9Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## \u00a7\u27e87\u27e9Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the version upgrade guide\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the Avro Specification\u27e810\u27e9.\n## \u00a7\u27e811\u27e9Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### \u00a7\u27e812\u27e9The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### \u00a7\u27e813\u27e9The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### \u00a7\u27e814\u27e9Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s Snappy\u27e815\u27e9 compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## \u00a7\u27e816\u27e9Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the Avro Specification\u27e810\u27e9.\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### \u00a7\u27e817\u27e9The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### \u00a7\u27e818\u27e9The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## \u00a7\u27e819\u27e9Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the Avro specification\u27e820\u27e9:\n  1. `Decimal` using the `num_bigint`\u27e821\u27e9 crate\n  2. UUID using the `uuid`\u27e822\u27e9 crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### \u00a7\u27e823\u27e9Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### \u00a7\u27e824\u27e9Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### \u00a7\u27e825\u27e9Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s `std::sync::Once`\u27e826\u27e9 mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### \u00a7\u27e827\u27e9Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules\u00a7\u27e829\u27e9\n\nrabin\u27e830\u27e9\n    Implementation of the Rabin fingerprint algorithm\n\nschema\u27e831\u27e9\n    Logic for parsing and interacting with schemas in Avro format.\n\nschema_compatibility\u27e832\u27e9\n    Logic for checking schema compatibility\n\ntypes\u27e833\u27e9\n    Logic handling the intermediate representation of Avro values.\n## Structs\u00a7\u27e834\u27e9\n\nDays\u27e835\u27e9\n\n\nDecimal\u27e836\u27e9\n\n\nDuration\u27e837\u27e9\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\nMillis\u27e838\u27e9\n\n\nMonths\u27e839\u27e9\n\n\nReader\u27e840\u27e9\n    Main interface for reading Avro formatted values.\n\nWriter\u27e841\u27e9\n    Main interface for writing Avro formatted values.\n## Enums\u00a7\u27e842\u27e9\n\nCodec\u27e843\u27e9\n    The compression codec used to compress blocks.\n\nDeError\u27e844\u27e9\n\n\nError\u27e845\u27e9\n\n\nSerError\u27e846\u27e9\n\n## Functions\u00a7\u27e847\u27e9\n\nfrom_avro_datum\u27e848\u27e9\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\nfrom_value\u27e849\u27e9\n    Interpret a `Value` as an instance of type `D`.\n\nmax_allocation_bytes\u27e850\u27e9\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\nto_avro_datum\u27e851\u27e9\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\nto_value\u27e852\u27e9\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases\u00a7\u27e853\u27e9\n\nAvroResult\u27e854\u27e9\n    A convenience type alias for `Result`s with `Error`s.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/avro-rs/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/avro-rs/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959: Source\n\u27e84\u27e9 https://avro.apache.org/: Apache Avro\n\u27e85\u27e9 https://docs.rs/avro-rs: documentation\n\u27e86\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library: \u00a7\n\u27e87\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version: \u00a7\n\u27e88\u27e9 https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md: version upgrade guide\n\u27e89\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema: \u00a7\n\u27e810\u27e9 https://avro.apache.org/docs/current/spec.html#schemas: Avro Specification\n\u27e811\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#writing-data: \u00a7\n\u27e812\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way: \u00a7\n\u27e813\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way: \u00a7\n\u27e814\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data: \u00a7\n\u27e815\u27e9 http://google.github.io/snappy/: Snappy\n\u27e816\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reading-data: \u00a7\n\u27e817\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1: \u00a7\n\u27e818\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1: \u00a7\n\u27e819\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together: \u00a7\n\u27e820\u27e9 https://avro.apache.org/docs/current/spec.html#Logical+Types: Avro specification\n\u27e821\u27e9 https://docs.rs/num-bigint/0.2.6/num_bigint: `num_bigint`\n\u27e822\u27e9 https://docs.rs/uuid/0.8.1/uuid: `uuid`\n\u27e823\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types: \u00a7\n\u27e824\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint: \u00a7\n\u27e825\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data: \u00a7\n\u27e826\u27e9 https://doc.rust-lang.org/std/sync/struct.Once.html: `std::sync::Once`\n\u27e827\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility: \u00a7\n\u27e828\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#modules: \u00a7\n\u27e830\u27e9 https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html: mod avro_rs::rabin - rabin\n\u27e831\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema/index.html: mod avro_rs::schema - schema\n\u27e832\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html: mod avro_rs::schema_compatibility - schema_compatibility\n\u27e833\u27e9 https://docs.rs/avro-rs/latest/avro_rs/types/index.html: mod avro_rs::types - types\n\u27e834\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#structs: \u00a7\n\u27e835\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html: struct avro_rs::Days - Days\n\u27e836\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html: struct avro_rs::Decimal - Decimal\n\u27e837\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html: struct avro_rs::Duration - Duration\n\u27e838\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html: struct avro_rs::Millis - Millis\n\u27e839\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html: struct avro_rs::Months - Months\n\u27e840\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html: struct avro_rs::Reader - Reader\n\u27e841\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html: struct avro_rs::Writer - Writer\n\u27e842\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html: enum avro_rs::Codec - Codec\n\u27e844\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html: enum avro_rs::DeError - DeError\n\u27e845\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html: enum avro_rs::Error - Error\n\u27e846\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html: enum avro_rs::SerError - SerError\n\u27e847\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html: fn avro_rs::from_avro_datum - from_avro_datum\n\u27e849\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html: fn avro_rs::from_value - from_value\n\u27e850\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html: fn avro_rs::max_allocation_bytes - max_allocation_bytes\n\u27e851\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html: fn avro_rs::to_avro_datum - to_avro_datum\n\u27e852\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html: fn avro_rs::to_value - to_value\n\u27e853\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html: type avro_rs::AvroResult - AvroResult\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 21709,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113220.6423014"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/avro-rs",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [23 releases](https://lib.rs/crates/avro-rs/versions) (12 breaking)\n0.13.0 |  Jan 29, 2021   \n---|---  \n0.12.0 |  Nov 27, 2020   \n0.11.0 |  Aug 13, 2020   \n0.10.0 |  May 31, 2020   \n0.4.1 |  Jun 17, 2018   \n#**597** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 2260/week @ 2025-02-12 2411/week @ 2025-02-19 2896/week @ 2025-02-26 2810/week @ 2025-03-05 2636/week @ 2025-03-12 2670/week @ 2025-03-19 2378/week @ 2025-03-26 2322/week @ 2025-04-02 2829/week @ 2025-04-09 2808/week @ 2025-04-16 3150/week @ 2025-04-23 2438/week @ 2025-04-30 2242/week @ 2025-05-07 1775/week @ 2025-05-14 1945/week @ 2025-05-21 1473/week @ 2025-05-28\n**7,807** downloads per month Used in [**29** crates (19 directly)](https://lib.rs/crates/avro-rs/rev)\n**MIT** license \n315KB  6.5K  SLoC\n# avro-rs\n[![Latest Version](https://img.shields.io/crates/v/avro-rs.svg)](https://crates.io/crates/avro-rs) [![Continuous Integration](https://img.gs/czjpqfbdkz/full/https://github.com/flavray/avro-rs/workflows/Continuous%20Integration/badge.svg)](https://github.com/flavray/avro-rs/actions) [![Latest Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/avro-rs/badge.svg)](https://docs.rs/avro-rs) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/flavray/avro-rs/blob/main/LICENSE)\nA library for working with [Apache Avro](https://avro.apache.org/) in Rust.\nPlease check our [documentation](https://docs.rs/avro-rs) for examples, tutorials and API reference.\n**[Apache Avro](https://avro.apache.org/)** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n```{`\n  ``\"`type`\"```:` ``\"`record`\"```,`\n  ``\"`name`\"```:` ``\"`test`\"```,`\n  ``\"`fields`\"```:` `[`\n    `{```\"`name`\"```:` ``\"`a`\"```,` ``\"`type`\"```:` ``\"`long`\"```,` ``\"`default`\"```:` `42``}``,`\n    `{```\"`name`\"```:` ``\"`b`\"```,` ``\"`type`\"```:` ``\"`string`\"```}`\n  `]`\n```}``\n`\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving ``Serialize`` and ``Deserialize``;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## Installing the library\nAdd to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`avro-rs ``=` ``\"`x.y`\"``\n``\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n```[``dependencies.avro-rs``]`\n`version ``=` ``\"`x.y`\"``\n`features ``=` ``[```\"`snappy`\"```]``\n``\n```\n\n## Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the [version upgrade guide](https://github.com/flavray/avro-rs/blob/f0c2ac2f0e9df12da7a135aba290e4fc2f727f81/migration_guide.md).\n## Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\n``use` `avro_rs`::``Schema`;`\n`let` raw_schema `=` ``r``#\"`\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n`\"#```;`\n``//` if the schema is not valid, this function will return an error`\n`let` schema `=` `Schema`::``parse_str`(`raw_schema`)``.``unwrap``(``)``;`\n``//` schemas can be printed for debugging`\n`println!``(```\"``{:?}``\"```,` schema`)``;`\n`\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\n``use` `avro_rs`::``Schema`;`\n`let` raw_schema_1 `=` ``r``#\"`{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }`\"#```;`\n``//` This definition depends on the definition of A above`\n`let` raw_schema_2 `=` ``r``#\"`{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }`\"#```;`\n``//` if the schemas are not valid, this function will return an error`\n`let` schemas `=` `Schema`::``parse_list`(``&``[`raw_schema_1`,` raw_schema_2`]``)``.``unwrap``(``)``;`\n``//` schemas can be printed for debugging`\n`println!``(```\"``{:?}``\"```,` schemas`)``;`\n`\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\n## Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the ``Writer`` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\n``use` `avro_rs`::```types`::``Record`;`\n`use` `avro_rs`::``Writer`;`\n`#`\n``//` a writer needs a schema and something to write to`\n`let` `mut` writer `=` `Writer`::``new`(``&`schema`,` `Vec```::``new`(``)``)``;`\n``//` the Record type models our Record schema`\n`let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\nrecord`.``put``(```\"`a`\"```,` `27``i64``)``;`\nrecord`.``put``(```\"`b`\"```,` ``\"`foo`\"```)``;`\n``//` schema validation happens here`\nwriter`.``append``(`record`)``.``unwrap``(``)``;`\n``//` this is how to get back the resulting avro bytecode`\n``//` this performs a flush operation to make sure data has been written, so it can fail`\n``//` you can also call `writer.flush()` yourself without consuming the writer`\n`let` encoded `=` writer`.``into_inner``(``)``.``unwrap``(``)``;`\n`\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the ``Value`` interface.\n```\n``use` `avro_rs`::```types`::``Value`;`\n`let` `mut` value `=` `Value`::``String`(```\"`foo`\"```.``to_string``(``)``)``;`\n`\n```\n\n### The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving ``Serialize`` to model our data:\n```\n``use` `avro_rs`::``Writer`;`\n``#``[``derive```(```Debug`,` Serialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n``//` a writer needs a schema and something to write to`\n`let` `mut` writer `=` `Writer`::``new`(``&`schema`,` `Vec```::``new`(``)``)``;`\n``//` the structure models our Record schema`\n`let` test `=` Test ``{`\n  a`:` `27``,`\n  b`:` ``\"`foo`\"```.``to_owned``(``)``,`\n```}```;`\n``//` schema validation happens here`\nwriter`.``append_ser``(`test`)``.``unwrap``(``)``;`\n``//` this is how to get back the resulting avro bytecode`\n``//` this performs a flush operation to make sure data is written, so it can fail`\n``//` you can also call `writer.flush()` yourself without consuming the writer`\n`let` encoded `=` writer`.``into_inner``(``)``;`\n`\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing ``Serialize`` should work.\n```\n``let` `mut` value `=` ``\"`foo`\"```.``to_string``(``)``;`\n`\n```\n\n### Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google's [Snappy](http://google.github.io/snappy/) compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the ``snappy`` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a ``Writer``:\n```\n``use` `avro_rs`::``Writer`;`\n`use` `avro_rs`::``Codec`;`\n`#`\n`let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n`\n```\n\n## Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\n``use` `avro_rs`::``Reader`;`\n`#`\n``//` reader creation can fail in case the input to read from is not Avro-compatible or malformed`\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n`\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\n``use` `avro_rs`::``Schema`;`\n`use` `avro_rs`::``Reader`;`\n`#`\n`let` reader_raw_schema `=` ``r``#\"`\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n`\"#```;`\n`let` reader_schema `=` `Schema`::``parse_str`(`reader_raw_schema`)``.``unwrap``(``)``;`\n``//` reader creation can fail in case the input to read from is not Avro-compatible or malformed`\n`let` reader `=` `Reader`::``with_schema`(``&`reader_schema`,` `&`input`[``..``]``)``.``unwrap``(``)``;`\n`\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the ``Reader`` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### The avro way\nWe can just read directly instances of ``Value`` out of the ``Reader`` iterator:\n```\n``use` `avro_rs`::``Reader`;`\n`#`\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n``//` value is a Result of an Avro Value in case the read operation fails`\n`for` value `in` reader ``{`\n  `println!``(```\"``{:?}``\"```,` value`.``unwrap``(``)``)``;`\n```}``\n`\n```\n\n### The serde way\nAlternatively, we can use a Rust type implementing ``Deserialize`` and representing our schema to read the data into:\n```\n``use` `avro_rs`::``Reader`;`\n`use` `avro_rs`::``from_value`;`\n``#``[``derive```(```Debug`,` Deserialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n``//` value is a Result in case the read operation fails`\n`for` value `in` reader ``{`\n  `println!``(```\"``{:?}``\"```,` `from_value`::````<`Test`>```(``&`value`.``unwrap``(``)``)``)``;`\n```}``\n`\n```\n\n## Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\n``use` `avro_rs`::````{`Codec`,` Reader`,` Schema`,` Writer`,` from_value`,` `types`::``Record`,` Error```}```;`\n`use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``derive```(```Debug`,` Deserialize`,` Serialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{:?}``\"```,` schema`)``;`\n  `let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n  `let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\n  record`.``put``(```\"`a`\"```,` `27``i64``)``;`\n  record`.``put``(```\"`b`\"```,` ``\"`foo`\"```)``;`\n  writer`.``append``(`record`)``?``;`\n  `let` test `=` Test `{`\n    a`:` `27``,`\n    b`:` ``\"`foo`\"```.``to_owned``(``)``,`\n  `}``;`\n  writer`.``append_ser``(`test`)``?``;`\n  `let` input `=` writer`.``into_inner``(``)``?``;`\n  `let` reader `=` `Reader`::``with_schema`(``&`schema`,` `&`input`[``..``]``)``?``;`\n  `for` record `in` reader `{`\n    `println!``(```\"``{:?}``\"```,` `from_value`::````<`Test`>```(``&`record`?``)``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n``avro-rs`` also supports the logical types listed in the [Avro specification](https://avro.apache.org/docs/current/spec.html#Logical+Types):\n  1. ``Decimal`` using the [``num_bigint``](https://docs.rs/num-bigint/0.2.6/num_bigint) crate\n  2. UUID using the [``uuid``](https://docs.rs/uuid/0.8.1/uuid) crate\n  3. Date, Time (milli) as ```i32``` and Time (micro) as ```i64```\n  4. Timestamp (milli and micro) as ```i64```\n  5. Duration as a custom type with ``months``, ``days`` and ``millis`` accessor methods each of which returns an ```i32```\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### Read and write logical types\n```\n``use` `avro_rs`::````{`\n  `types`::``Record`,` `types`::``Value`,` Codec`,` Days`,` Decimal`,` Duration`,` Millis`,` Months`,` Reader`,` Schema`,`\n  Writer`,` Error`,`\n```}```;`\n`use` `num_bigint`::``ToBigInt`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{:?}``\"```,` schema`)``;`\n  `let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n  `let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\n  record`.``put``(```\"`decimal_fixed`\"```,` `Decimal`::``from`(``9936.``to_bigint``(``)``.``unwrap``(``)``.``to_signed_bytes_be``(``)``)``)``;`\n  record`.``put``(```\"`decimal_var`\"```,` `Decimal`::``from`(``(``-``32442.``to_bigint``(``)``.``unwrap``(``)``)``.``to_signed_bytes_be``(``)``)``)``;`\n  record`.``put``(```\"`uuid`\"```,` `uuid`::```Uuid`::``new_v4`(``)``)``;`\n  record`.``put``(```\"`date`\"```,` `Value`::``Date`(``1``)``)``;`\n  record`.``put``(```\"`time_millis`\"```,` `Value`::``TimeMillis`(``2``)``)``;`\n  record`.``put``(```\"`time_micros`\"```,` `Value`::``TimeMicros`(``3``)``)``;`\n  record`.``put``(```\"`timestamp_millis`\"```,` `Value`::``TimestampMillis`(``4``)``)``;`\n  record`.``put``(```\"`timestamp_micros`\"```,` `Value`::``TimestampMicros`(``5``)``)``;`\n  record`.``put``(```\"`duration`\"```,` `Duration`::``new`(``Months`::``new`(``6``)``,` `Days`::``new`(``7``)``,` `Millis`::``new`(``8``)``)``)``;`\n  writer`.``append``(`record`)``?``;`\n  `let` input `=` writer`.``into_inner``(``)``?``;`\n  `let` reader `=` `Reader`::``with_schema`(``&`schema`,` `&`input`[``..``]``)``?``;`\n  `for` record `in` reader `{`\n    `println!``(```\"``{:?}``\"```,` record`?``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\n``use` `avro_rs`::```rabin`::``Rabin`;`\n`use` `avro_rs`::````{`Schema`,` Error```}```;`\n`use` `md5`::``Md5`;`\n`use` `sha2`::``Sha256`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Sha256`>```(``)``)``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Md5`>```(``)``)``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Rabin`>```(``)``)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a ``Reader`` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, ``avro-rs`` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the ``max_allocation_bytes`` function before reading **any** data (we leverage Rust's [```std`::```sync`::``Once``](https://doc.rust-lang.org/std/sync/struct.Once.html) mechanism to initialize this value, if any call to decode is made before a call to ``max_allocation_bytes``, the limit will be 512MB throughout the lifetime of the program).\n```\n``use` `avro_rs`::``max_allocation_bytes`;`\n`max_allocation_bytes``(``2` `*` `1024` `*` `1024` `*` `1024``)``;` ``//` 2GB`\n``//` ... happily decode large data`\n`\n```\n\n### Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on <https://github.com/flavray/avro-rs/pull/76>).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\n``use` `avro_rs`::````{`Schema`,` `schema_compatibility`::``SchemaCompatibility```}```;`\n`let` writers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"int\"}`\"#```)``.``unwrap``(``)``;`\n`let` readers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"long\"}`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(``true``,` `SchemaCompatibility`::``can_read`(``&`writers_schema`,` `&`readers_schema`)``)``;`\n`\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\n``use` `avro_rs`::````{`Schema`,` `schema_compatibility`::``SchemaCompatibility```}```;`\n`let` writers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"long\"}`\"#```)``.``unwrap``(``)``;`\n`let` readers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"int\"}`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(``false``,` `SchemaCompatibility`::``can_read`(``&`writers_schema`,` `&`readers_schema`)``)``;`\n`\n```\n\n## License\nThis project is licensed under [MIT License](https://github.com/flavray/avro-rs/blob/main/LICENSE). Please note that this is not an official project maintained by [Apache Avro](https://avro.apache.org/).\n## Contributing\nEveryone is encouraged to contribute! You can contribute by forking the GitHub repo and making a pull request or opening an issue. All contributions will be licensed under [MIT License](https://github.com/flavray/avro-rs/blob/main/LICENSE).\nPlease consider adding documentation, tests and a line for your change under the Unreleased section in the [CHANGELOG](https://github.com/flavray/avro-rs/blob/main/CHANGELOG.md). If you introduce a backward-incompatible change, please consider adding instruction to migrate in the [Migration Guide](https://github.com/flavray/avro-rs/blob/f0c2ac2f0e9df12da7a135aba290e4fc2f727f81/migration_guide.md) If you modify the crate documentation in ``lib.rs``, run ````make``` readme``` to sync the README file.\n#### Dependencies\n~4.5\u20135.5MB  ~104K SLoC\n  * [byteorder](https://lib.rs/crates/byteorder \"1.0.0\")\n  * [snappy?](https://lib.rs/crates/avro-rs/features#feature-snappy \"optional feature\") [crc](https://lib.rs/crates/crc \"obsolete\") 1.3\n  * [snappy?](https://lib.rs/crates/avro-rs/features#feature-snappy \"optional feature\") [snap](https://lib.rs/crates/snap \"obsolete\") 0.2.3\n  * [digest](https://lib.rs/crates/digest \"obsolete\") 0.9\n  * [lazy_static](https://lib.rs/crates/lazy_static \"^1.1\")\n  * [libflate](https://lib.rs/crates/libflate \"obsolete\") 1.0\n  * [num-bigint](https://lib.rs/crates/num-bigint \"obsolete\") 0.2.6\n  * [rand](https://lib.rs/crates/rand \"obsolete\") 0.7\n  * [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * [strum](https://lib.rs/crates/strum \"obsolete\") 0.18\n  * [strum_macros](https://lib.rs/crates/strum_macros \"obsolete\") 0.18\n  * [thiserror](https://lib.rs/crates/thiserror \"outdated\") 1.0\n  * [typed-builder](https://lib.rs/crates/typed-builder \"obsolete\") 0.5.1\n  * [uuid](https://lib.rs/crates/uuid \"obsolete\") 0.8.1[+serde](https://lib.rs/crates/uuid/features#feature-serde)[+v4](https://lib.rs/crates/uuid/features#feature-v4)\n  * [zerocopy](https://lib.rs/crates/zerocopy \"obsolete\") 0.3\n\n\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0.31\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"obsolete\") 0.3.1\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"outdated\") 0.3.1\n  * dev  [md-5](https://lib.rs/crates/md-5 \"obsolete\") 0.9\n  * dev  [sha2](https://lib.rs/crates/sha2 \"obsolete\") 0.9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  23 releases\u27e81\u27e9 (12 breaking)\n0.13.0 |  Jan 29, 2021   \n---|---  \n0.12.0 |  Nov 27, 2020   \n0.11.0 |  Aug 13, 2020   \n0.10.0 |  May 31, 2020   \n0.4.1 |  Jun 17, 2018   \n#**597** in Encoding\u27e82\u27e9\nDownload history 2260/week @ 2025-02-12 2411/week @ 2025-02-19 2896/week @ 2025-02-26 2810/week @ 2025-03-05 2636/week @ 2025-03-12 2670/week @ 2025-03-19 2378/week @ 2025-03-26 2322/week @ 2025-04-02 2829/week @ 2025-04-09 2808/week @ 2025-04-16 3150/week @ 2025-04-23 2438/week @ 2025-04-30 2242/week @ 2025-05-07 1775/week @ 2025-05-14 1945/week @ 2025-05-21 1473/week @ 2025-05-28\n**7,807** downloads per month Used in **29** crates (19 directly)\u27e83\u27e9\n**MIT** license \n315KB  6.5K  SLoC\n# avro-rs\n![Latest Version\u27e84\u27e9](https://crates.io/crates/avro-rs) ![Continuous Integration\u27e85\u27e9](https://github.com/flavray/avro-rs/actions) ![Latest Documentation\u27e86\u27e9](https://docs.rs/avro-rs) ![MIT licensed\u27e87\u27e9](https://github.com/flavray/avro-rs/blob/main/LICENSE)\nA library for working with Apache Avro\u27e88\u27e9 in Rust.\nPlease check our documentation\u27e89\u27e9 for examples, tutorials and API reference.\n**Apache Avro\u27e88\u27e9** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n```{`\n  ``\"`type`\"```:` ``\"`record`\"```,`\n  ``\"`name`\"```:` ``\"`test`\"```,`\n  ``\"`fields`\"```:` `[`\n    `{```\"`name`\"```:` ``\"`a`\"```,` ``\"`type`\"```:` ``\"`long`\"```,` ``\"`default`\"```:` `42``}``,`\n    `{```\"`name`\"```:` ``\"`b`\"```,` ``\"`type`\"```:` ``\"`string`\"```}`\n  `]`\n```}``\n`\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving ``Serialize`` and ``Deserialize``;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## Installing the library\nAdd to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`avro-rs ``=` ``\"`x.y`\"``\n``\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n```[``dependencies.avro-rs``]`\n`version ``=` ``\"`x.y`\"``\n`features ``=` ``[```\"`snappy`\"```]``\n``\n```\n\n## Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the version upgrade guide\u27e810\u27e9.\n## Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\n``use` `avro_rs`::``Schema`;`\n`let` raw_schema `=` ``r``#\"`\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n`\"#```;`\n``//` if the schema is not valid, this function will return an error`\n`let` schema `=` `Schema`::``parse_str`(`raw_schema`)``.``unwrap``(``)``;`\n``//` schemas can be printed for debugging`\n`println!``(```\"``{:?}``\"```,` schema`)``;`\n`\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\n``use` `avro_rs`::``Schema`;`\n`let` raw_schema_1 `=` ``r``#\"`{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }`\"#```;`\n``//` This definition depends on the definition of A above`\n`let` raw_schema_2 `=` ``r``#\"`{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }`\"#```;`\n``//` if the schemas are not valid, this function will return an error`\n`let` schemas `=` `Schema`::``parse_list`(``&``[`raw_schema_1`,` raw_schema_2`]``)``.``unwrap``(``)``;`\n``//` schemas can be printed for debugging`\n`println!``(```\"``{:?}``\"```,` schemas`)``;`\n`\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the Avro Specification\u27e811\u27e9.\n## Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the ``Writer`` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\n``use` `avro_rs`::```types`::``Record`;`\n`use` `avro_rs`::``Writer`;`\n`#`\n``//` a writer needs a schema and something to write to`\n`let` `mut` writer `=` `Writer`::``new`(``&`schema`,` `Vec```::``new`(``)``)``;`\n``//` the Record type models our Record schema`\n`let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\nrecord`.``put``(```\"`a`\"```,` `27``i64``)``;`\nrecord`.``put``(```\"`b`\"```,` ``\"`foo`\"```)``;`\n``//` schema validation happens here`\nwriter`.``append``(`record`)``.``unwrap``(``)``;`\n``//` this is how to get back the resulting avro bytecode`\n``//` this performs a flush operation to make sure data has been written, so it can fail`\n``//` you can also call `writer.flush()` yourself without consuming the writer`\n`let` encoded `=` writer`.``into_inner``(``)``.``unwrap``(``)``;`\n`\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the ``Value`` interface.\n```\n``use` `avro_rs`::```types`::``Value`;`\n`let` `mut` value `=` `Value`::``String`(```\"`foo`\"```.``to_string``(``)``)``;`\n`\n```\n\n### The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving ``Serialize`` to model our data:\n```\n``use` `avro_rs`::``Writer`;`\n``#``[``derive```(```Debug`,` Serialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n``//` a writer needs a schema and something to write to`\n`let` `mut` writer `=` `Writer`::``new`(``&`schema`,` `Vec```::``new`(``)``)``;`\n``//` the structure models our Record schema`\n`let` test `=` Test ``{`\n  a`:` `27``,`\n  b`:` ``\"`foo`\"```.``to_owned``(``)``,`\n```}```;`\n``//` schema validation happens here`\nwriter`.``append_ser``(`test`)``.``unwrap``(``)``;`\n``//` this is how to get back the resulting avro bytecode`\n``//` this performs a flush operation to make sure data is written, so it can fail`\n``//` you can also call `writer.flush()` yourself without consuming the writer`\n`let` encoded `=` writer`.``into_inner``(``)``;`\n`\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing ``Serialize`` should work.\n```\n``let` `mut` value `=` ``\"`foo`\"```.``to_string``(``)``;`\n`\n```\n\n### Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google's Snappy\u27e812\u27e9 compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the ``snappy`` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a ``Writer``:\n```\n``use` `avro_rs`::``Writer`;`\n`use` `avro_rs`::``Codec`;`\n`#`\n`let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n`\n```\n\n## Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\n``use` `avro_rs`::``Reader`;`\n`#`\n``//` reader creation can fail in case the input to read from is not Avro-compatible or malformed`\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n`\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\n``use` `avro_rs`::``Schema`;`\n`use` `avro_rs`::``Reader`;`\n`#`\n`let` reader_raw_schema `=` ``r``#\"`\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n`\"#```;`\n`let` reader_schema `=` `Schema`::``parse_str`(`reader_raw_schema`)``.``unwrap``(``)``;`\n``//` reader creation can fail in case the input to read from is not Avro-compatible or malformed`\n`let` reader `=` `Reader`::``with_schema`(``&`reader_schema`,` `&`input`[``..``]``)``.``unwrap``(``)``;`\n`\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the Avro Specification\u27e811\u27e9.\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the ``Reader`` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### The avro way\nWe can just read directly instances of ``Value`` out of the ``Reader`` iterator:\n```\n``use` `avro_rs`::``Reader`;`\n`#`\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n``//` value is a Result of an Avro Value in case the read operation fails`\n`for` value `in` reader ``{`\n  `println!``(```\"``{:?}``\"```,` value`.``unwrap``(``)``)``;`\n```}``\n`\n```\n\n### The serde way\nAlternatively, we can use a Rust type implementing ``Deserialize`` and representing our schema to read the data into:\n```\n``use` `avro_rs`::``Reader`;`\n`use` `avro_rs`::``from_value`;`\n``#``[``derive```(```Debug`,` Deserialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n`let` reader `=` `Reader`::``new`(``&`input`[``..``]``)``.``unwrap``(``)``;`\n``//` value is a Result in case the read operation fails`\n`for` value `in` reader ``{`\n  `println!``(```\"``{:?}``\"```,` `from_value`::````<`Test`>```(``&`value`.``unwrap``(``)``)``)``;`\n```}``\n`\n```\n\n## Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\n``use` `avro_rs`::````{`Codec`,` Reader`,` Schema`,` Writer`,` from_value`,` `types`::``Record`,` Error```}```;`\n`use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``derive```(```Debug`,` Deserialize`,` Serialize```)```]``\n``struct` ```Test` ````{`\n  `a``:` `i64`,\n  `b``:` String,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{:?}``\"```,` schema`)``;`\n  `let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n  `let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\n  record`.``put``(```\"`a`\"```,` `27``i64``)``;`\n  record`.``put``(```\"`b`\"```,` ``\"`foo`\"```)``;`\n  writer`.``append``(`record`)``?``;`\n  `let` test `=` Test `{`\n    a`:` `27``,`\n    b`:` ``\"`foo`\"```.``to_owned``(``)``,`\n  `}``;`\n  writer`.``append_ser``(`test`)``?``;`\n  `let` input `=` writer`.``into_inner``(``)``?``;`\n  `let` reader `=` `Reader`::``with_schema`(``&`schema`,` `&`input`[``..``]``)``?``;`\n  `for` record `in` reader `{`\n    `println!``(```\"``{:?}``\"```,` `from_value`::````<`Test`>```(``&`record`?``)``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n``avro-rs`` also supports the logical types listed in the Avro specification\u27e813\u27e9:\n  1. ``Decimal`` using the ``num_bigint``\u27e814\u27e9 crate\n  2. UUID using the ``uuid``\u27e815\u27e9 crate\n  3. Date, Time (milli) as ```i32``` and Time (micro) as ```i64```\n  4. Timestamp (milli and micro) as ```i64```\n  5. Duration as a custom type with ``months``, ``days`` and ``millis`` accessor methods each of which returns an ```i32```\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### Read and write logical types\n```\n``use` `avro_rs`::````{`\n  `types`::``Record`,` `types`::``Value`,` Codec`,` Days`,` Decimal`,` Duration`,` Millis`,` Months`,` Reader`,` Schema`,`\n  Writer`,` Error`,`\n```}```;`\n`use` `num_bigint`::``ToBigInt`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{:?}``\"```,` schema`)``;`\n  `let` `mut` writer `=` `Writer`::``with_codec`(``&`schema`,` `Vec```::``new`(``)``,` `Codec`::``Deflate`)``;`\n  `let` `mut` record `=` `Record`::``new`(`writer`.``schema``(``)``)``.``unwrap``(``)``;`\n  record`.``put``(```\"`decimal_fixed`\"```,` `Decimal`::``from`(``9936.``to_bigint``(``)``.``unwrap``(``)``.``to_signed_bytes_be``(``)``)``)``;`\n  record`.``put``(```\"`decimal_var`\"```,` `Decimal`::``from`(``(``-``32442.``to_bigint``(``)``.``unwrap``(``)``)``.``to_signed_bytes_be``(``)``)``)``;`\n  record`.``put``(```\"`uuid`\"```,` `uuid`::```Uuid`::``new_v4`(``)``)``;`\n  record`.``put``(```\"`date`\"```,` `Value`::``Date`(``1``)``)``;`\n  record`.``put``(```\"`time_millis`\"```,` `Value`::``TimeMillis`(``2``)``)``;`\n  record`.``put``(```\"`time_micros`\"```,` `Value`::``TimeMicros`(``3``)``)``;`\n  record`.``put``(```\"`timestamp_millis`\"```,` `Value`::``TimestampMillis`(``4``)``)``;`\n  record`.``put``(```\"`timestamp_micros`\"```,` `Value`::``TimestampMicros`(``5``)``)``;`\n  record`.``put``(```\"`duration`\"```,` `Duration`::``new`(``Months`::``new`(``6``)``,` `Days`::``new`(``7``)``,` `Millis`::``new`(``8``)``)``)``;`\n  writer`.``append``(`record`)``?``;`\n  `let` input `=` writer`.``into_inner``(``)``?``;`\n  `let` reader `=` `Reader`::``with_schema`(``&`schema`,` `&`input`[``..``]``)``?``;`\n  `for` record `in` reader `{`\n    `println!``(```\"``{:?}``\"```,` record`?``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\n``use` `avro_rs`::```rabin`::``Rabin`;`\n`use` `avro_rs`::````{`Schema`,` Error```}```;`\n`use` `md5`::``Md5`;`\n`use` `sha2`::``Sha256`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, Error`>``` ````{`\n  `let` raw_schema `=` ``r``#\"`\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  `\"#```;`\n  `let` schema `=` `Schema`::``parse_str`(`raw_schema`)``?``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Sha256`>```(``)``)``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Md5`>```(``)``)``;`\n  `println!``(```\"``{}``\"```,` schema`.``fingerprint`::````<`Rabin`>```(``)``)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a ``Reader`` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, ``avro-rs`` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the ``max_allocation_bytes`` function before reading **any** data (we leverage Rust's ```std`::```sync`::``Once``\u27e816\u27e9 mechanism to initialize this value, if any call to decode is made before a call to ``max_allocation_bytes``, the limit will be 512MB throughout the lifetime of the program).\n```\n``use` `avro_rs`::``max_allocation_bytes`;`\n`max_allocation_bytes``(``2` `*` `1024` `*` `1024` `*` `1024``)``;` ``//` 2GB`\n``//` ... happily decode large data`\n`\n```\n\n### Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on <https://github.com/flavray/avro-rs/pull/76>).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\n``use` `avro_rs`::````{`Schema`,` `schema_compatibility`::``SchemaCompatibility```}```;`\n`let` writers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"int\"}`\"#```)``.``unwrap``(``)``;`\n`let` readers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"long\"}`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(``true``,` `SchemaCompatibility`::``can_read`(``&`writers_schema`,` `&`readers_schema`)``)``;`\n`\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\n``use` `avro_rs`::````{`Schema`,` `schema_compatibility`::``SchemaCompatibility```}```;`\n`let` writers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"long\"}`\"#```)``.``unwrap``(``)``;`\n`let` readers_schema `=` `Schema`::``parse_str`(```r``#\"`{\"type\": \"array\", \"items\":\"int\"}`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(``false``,` `SchemaCompatibility`::``can_read`(``&`writers_schema`,` `&`readers_schema`)``)``;`\n`\n```\n\n## License\nThis project is licensed under MIT License\u27e817\u27e9. Please note that this is not an official project maintained by Apache Avro\u27e88\u27e9.\n## Contributing\nEveryone is encouraged to contribute! You can contribute by forking the GitHub repo and making a pull request or opening an issue. All contributions will be licensed under MIT License\u27e817\u27e9.\nPlease consider adding documentation, tests and a line for your change under the Unreleased section in the CHANGELOG\u27e818\u27e9. If you introduce a backward-incompatible change, please consider adding instruction to migrate in the Migration Guide\u27e810\u27e9 If you modify the crate documentation in ``lib.rs``, run ````make``` readme``` to sync the README file.\n#### Dependencies\n~4.5\u20135.5MB  ~104K SLoC\n  * byteorder\u27e819\u27e9\n  * snappy?\u27e820\u27e9 crc\u27e821\u27e9 1.3\n  * snappy?\u27e820\u27e9 snap\u27e822\u27e9 0.2.3\n  * digest\u27e823\u27e9 0.9\n  * lazy_static\u27e824\u27e9\n  * libflate\u27e825\u27e9 1.0\n  * num-bigint\u27e826\u27e9 0.2.6\n  * rand\u27e827\u27e9 0.7\n  * serde\u27e828\u27e9+derive\u27e829\u27e9\n  * serde_json\u27e830\u27e9\n  * strum\u27e831\u27e9 0.18\n  * strum_macros\u27e832\u27e9 0.18\n  * thiserror\u27e833\u27e9 1.0\n  * typed-builder\u27e834\u27e9 0.5.1\n  * uuid\u27e835\u27e9 0.8.1+serde\u27e836\u27e9+v4\u27e837\u27e9\n  * zerocopy\u27e838\u27e9 0.3\n\n\n  * dev  anyhow\u27e839\u27e9\n  * dev  criterion\u27e840\u27e9 0.3.1\n  * dev  hex-literal\u27e841\u27e9 0.3.1\n  * dev  md-5\u27e842\u27e9 0.9\n  * dev  sha2\u27e843\u27e9 0.9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/avro-rs/versions: 23 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/avro-rs/rev: **29** crates (19 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/avro-rs.svg: ![Latest Version\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/flavray/avro-rs/workflows/Continuous%20Integration/badge.svg: ![Continuous Integration\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/avro-rs/badge.svg: ![Latest Documentation\n\u27e87\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e88\u27e9 https://avro.apache.org/: Apache Avro\n\u27e89\u27e9 https://docs.rs/avro-rs: documentation\n\u27e810\u27e9 https://github.com/flavray/avro-rs/blob/f0c2ac2f0e9df12da7a135aba290e4fc2f727f81/migration_guide.md: version upgrade guide\n\u27e811\u27e9 https://avro.apache.org/docs/current/spec.html#schemas: Avro Specification\n\u27e812\u27e9 http://google.github.io/snappy/: Snappy\n\u27e813\u27e9 https://avro.apache.org/docs/current/spec.html#Logical+Types: Avro specification\n\u27e814\u27e9 https://docs.rs/num-bigint/0.2.6/num_bigint: ``num_bigint``\n\u27e815\u27e9 https://docs.rs/uuid/0.8.1/uuid: ``uuid``\n\u27e816\u27e9 https://doc.rust-lang.org/std/sync/struct.Once.html: ```std`::```sync`::``Once``\n\u27e817\u27e9 https://github.com/flavray/avro-rs/blob/main/LICENSE: MIT License\n\u27e818\u27e9 https://github.com/flavray/avro-rs/blob/main/CHANGELOG.md: CHANGELOG\n\u27e819\u27e9 https://lib.rs/crates/byteorder: 1.0.0 - byteorder\n\u27e820\u27e9 https://lib.rs/crates/avro-rs/features#feature-snappy: optional feature - snappy?\n\u27e821\u27e9 https://lib.rs/crates/crc: obsolete - crc\n\u27e822\u27e9 https://lib.rs/crates/snap: obsolete - snap\n\u27e823\u27e9 https://lib.rs/crates/digest: obsolete - digest\n\u27e824\u27e9 https://lib.rs/crates/lazy_static: ^1.1 - lazy_static\n\u27e825\u27e9 https://lib.rs/crates/libflate: obsolete - libflate\n\u27e826\u27e9 https://lib.rs/crates/num-bigint: obsolete - num-bigint\n\u27e827\u27e9 https://lib.rs/crates/rand: obsolete - rand\n\u27e828\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e829\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e830\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e831\u27e9 https://lib.rs/crates/strum: obsolete - strum\n\u27e832\u27e9 https://lib.rs/crates/strum_macros: obsolete - strum_macros\n\u27e833\u27e9 https://lib.rs/crates/thiserror: outdated - thiserror\n\u27e834\u27e9 https://lib.rs/crates/typed-builder: obsolete - typed-builder\n\u27e835\u27e9 https://lib.rs/crates/uuid: obsolete - uuid\n\u27e836\u27e9 https://lib.rs/crates/uuid/features#feature-serde: +serde\n\u27e837\u27e9 https://lib.rs/crates/uuid/features#feature-v4: +v4\n\u27e838\u27e9 https://lib.rs/crates/zerocopy: obsolete - zerocopy\n\u27e839\u27e9 https://lib.rs/crates/anyhow: 1.0.31 - anyhow\n\u27e840\u27e9 https://lib.rs/crates/criterion: obsolete - criterion\n\u27e841\u27e9 https://lib.rs/crates/hex-literal: outdated - hex-literal\n\u27e842\u27e9 https://lib.rs/crates/md-5: obsolete - md-5\n\u27e843\u27e9 https://lib.rs/crates/sha2: obsolete - sha2\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 23871,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113221.1461848"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@0.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-0.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-0.3.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libitoa-a49f5c35256abd2f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler32@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler32-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler32-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libadler32-9a7525959247dc76.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rle-decode-fast@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rle-decode-fast-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rle_decode_fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rle-decode-fast-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librle_decode_fast-4b31aae92279daed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libbyteorder-e06fe1d4e8c8e169.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-124b648600f18efc\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-124b648600f18efc\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-d55fbc4e47e2a424\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-d55fbc4e47e2a424\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-50a6fb2cc34f47bb\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-50a6fb2cc34f47bb\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-d9c80ffda1ce1e3c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-d9c80ffda1ce1e3c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-1c1112897f306ae3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-1c1112897f306ae3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "linked_libs": [
                "bcrypt"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-03d92751e0e084af\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-d3b8c9ccad5c1537\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-d3b8c9ccad5c1537\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libflate_lz77@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate_lz77-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libflate_lz77",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate_lz77-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblibflate_lz77-2355ed8df365e782.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "linked_libs": [
                "advapi32"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-db324682445cc72d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum@0.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.18.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libstrum-6ffd89b968ff0ec9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dtoa@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtoa-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dtoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtoa-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libdtoa-61aaa9569178ea43.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libppv_lite86-f8323a7164d43fd0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "underscore_consts"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-c7c7ffaef849afac\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "crc32fast_stdarchx86"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-964e875ac19949b3\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "ops_bound",
                "core_reverse",
                "de_boxed_c_str",
                "de_boxed_path",
                "de_rc_dst",
                "core_duration",
                "integer128",
                "range_inclusive",
                "num_nonzero",
                "serde_derive",
                "core_try_from",
                "num_nonzero_signed",
                "std_atomic64",
                "std_atomic"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-566c12f2894e5af5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.41\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_traits-ce95a861578f252a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\build\\main.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-aff60a4c24e6936b\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-aff60a4c24e6936b\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "lexerror_display",
                "hygiene",
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-343d25629b2cb8fa\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-30f3332d2ea0a38e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgetrandom-be9ce884e3abda32.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgetrandom-df41e02e1a194d3c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [
                [
                  "TYPENUM_BUILD_CONSTS",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out\\consts.rs"
                ],
                [
                  "TYPENUM_BUILD_OP",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out\\op.rs"
                ]
              ],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libcrc32fast-c05995e5b87f0b06.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-23c7baa73f5f0382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-23c7baa73f5f0382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-448ea9491d601587\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-448ea9491d601587\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-d96abd75f1c4e791\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-d96abd75f1c4e791\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-e2ce21467fabfea1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-e2ce21467fabfea1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libheck-993602f39d8c35ba.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libheck-993602f39d8c35ba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "getrandom",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand_core-e6f2d2d96f75a8dd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-897f92cd040ab05a\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-d5b0ae942631915e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "relaxed_coherence"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-aa138686cdcfded8\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128",
                "has_to_int_unchecked"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-2621520e7cfe9884\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand_chacha-1ac82859f32fb1d0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libquote-e8fbc13f56abbfb7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libquote-e8fbc13f56abbfb7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libflate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libflate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate-1.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblibflate-ae879e3bfbfbd735.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libtypenum-7f94ef9604dda657.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "generic_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgeneric_array-f019bb7310e7b1ae.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_traits-adcd625398dc4730.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libdigest-8bc9961afd522f4d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_integer-faa2933462c49c3b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.7.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.7.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.7.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "getrandom",
                "getrandom_package",
                "libc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand-f54765e4a3fd9a2f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_bigint-43f3d0fa85b86344.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#synstructure@0.12.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\synstructure-0.12.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "synstructure",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\synstructure-0.12.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsynstructure-c2bfad8850d7e079.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsynstructure-c2bfad8850d7e079.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsyn-14700d83499436ed.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsyn-14700d83499436ed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "zerocopy_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typed-builder@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typed-builder-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "typed_builder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typed-builder-0.5.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.23\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.23\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum_macros@0.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum_macros-0.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "strum_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum_macros-0.18.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.23\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libthiserror-a7501a3fad29e634.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libzerocopy-0977204e49f3a905.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libserde-3d7c06b632c65614.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-0.8.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "serde",
                "std",
                "v4"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libuuid-eaaf013025614c98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libserde_json-8cd7a8bff67ef765.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: elided lifetime has a name\n  --> src\\ser.rs:46:69\n   |\n45 | impl<'a> SeqVariantSerializer<'a> {\n   |      -- lifetime `'a` declared here\n46 |     pub fn new(index: u32, variant: &'a str, len: Option<usize>) -> SeqVariantSerializer {\n   |                                                                     ^^^^^^^^^^^^^^^^^^^^ this elided lifetime gets resolved as `'a`\n   |\n   = note: `#[warn(elided_named_lifetimes)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(elided_named_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "elided_named_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "elided lifetime has a name",
                "spans": [
                  {
                    "byte_end": 1002,
                    "byte_start": 982,
                    "column_end": 89,
                    "column_start": 69,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": "this elided lifetime gets resolved as `'a`",
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 69,
                        "text": "    pub fn new(index: u32, variant: &'a str, len: Option<usize>) -> SeqVariantSerializer {"
                      }
                    ]
                  },
                  {
                    "byte_end": 885,
                    "byte_start": 883,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": false,
                    "label": "lifetime `'a` declared here",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> SeqVariantSerializer<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: elided lifetime has a name\n  --> src\\ser.rs:79:61\n   |\n78 | impl<'a> StructVariantSerializer<'a> {\n   |      -- lifetime `'a` declared here\n79 |     pub fn new(index: u32, variant: &'a str, len: usize) -> StructVariantSerializer {\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^ this elided lifetime gets resolved as `'a`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "elided_named_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "elided lifetime has a name",
                "spans": [
                  {
                    "byte_end": 1838,
                    "byte_start": 1815,
                    "column_end": 84,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": "this elided lifetime gets resolved as `'a`",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 61,
                        "text": "    pub fn new(index: u32, variant: &'a str, len: usize) -> StructVariantSerializer {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1723,
                    "byte_start": 1721,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": false,
                    "label": "lifetime `'a` declared here",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> StructVariantSerializer<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition value: `std`\n   --> src\\rabin.rs:105:1\n    |\n105 | digest::impl_write!(Rabin);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `crc`, `snap`, and `snappy`\n    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate\n    = help: try referring to `digest::impl_write` crate for guidance on how handle this unexpected cfg\n    = help: the macro `digest::impl_write` may come from an old version of the `digest` crate, try updating your dependency with `cargo update -p digest`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: this warning originates in the macro `digest::impl_write` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "expected values for `feature` are: `crc`, `snap`, and `snappy`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try referring to `digest::impl_write` crate for guidance on how handle this unexpected cfg",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the macro `digest::impl_write` may come from an old version of the `digest` crate, try updating your dependency with `cargo update -p digest`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition value: `std`",
                "spans": [
                  {
                    "byte_end": 3250,
                    "byte_start": 3235,
                    "column_end": 30,
                    "column_start": 15,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 3193,
                        "byte_start": 3170,
                        "column_end": 24,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write {"
                          }
                        ]
                      },
                      "macro_decl_name": "digest::impl_write!",
                      "span": {
                        "byte_end": 2930,
                        "byte_start": 2904,
                        "column_end": 27,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\rabin.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "digest::impl_write!(Rabin);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 15,
                        "text": "        #[cfg(feature = \"std\")]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libavro_rs-718d1ab1026cb458.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "lexerror_display",
                "hygiene",
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\proc-macro2-343d25629b2cb8fa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-d3b8c9ccad5c1537\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-d3b8c9ccad5c1537\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-d55fbc4e47e2a424\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-d55fbc4e47e2a424\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-50a6fb2cc34f47bb\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-50a6fb2cc34f47bb\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\build\\main.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-aff60a4c24e6936b\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-aff60a4c24e6936b\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-1c1112897f306ae3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-1c1112897f306ae3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-d9c80ffda1ce1e3c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-d9c80ffda1ce1e3c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-124b648600f18efc\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-124b648600f18efc\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libppv_lite86-f8323a7164d43fd0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libbyteorder-e06fe1d4e8c8e169.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler32@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler32-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler32",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler32-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libadler32-9a7525959247dc76.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\syn-30f3332d2ea0a38e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "linked_libs": [
                "advapi32"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-db324682445cc72d\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "underscore_consts"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde_derive-c7c7ffaef849afac\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-d96abd75f1c4e791\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-d96abd75f1c4e791\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-e2ce21467fabfea1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-e2ce21467fabfea1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "ops_bound",
                "core_reverse",
                "de_boxed_c_str",
                "de_boxed_path",
                "de_rc_dst",
                "core_duration",
                "integer128",
                "range_inclusive",
                "num_nonzero",
                "serde_derive",
                "core_try_from",
                "num_nonzero_signed",
                "std_atomic64",
                "std_atomic"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\serde-566c12f2894e5af5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-448ea9491d601587\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-448ea9491d601587\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [
                [
                  "TYPENUM_BUILD_CONSTS",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out\\consts.rs"
                ],
                [
                  "TYPENUM_BUILD_OP",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out\\op.rs"
                ]
              ],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\typenum-31d22d2846f5fe9a\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "crc32fast_stdarchx86"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\crc32fast-964e875ac19949b3\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "linked_libs": [
                "bcrypt"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\getrandom-03d92751e0e084af\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-23c7baa73f5f0382\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-23c7baa73f5f0382\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libheck-993602f39d8c35ba.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libheck-993602f39d8c35ba.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dtoa@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtoa-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dtoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dtoa-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libdtoa-61aaa9569178ea43.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libflate_lz77@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate_lz77-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libflate_lz77",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate_lz77-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblibflate_lz77-2355ed8df365e782.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@0.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-0.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-0.3.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libitoa-a49f5c35256abd2f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libquote-e8fbc13f56abbfb7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libquote-e8fbc13f56abbfb7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128",
                "has_to_int_unchecked"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-traits-2621520e7cfe9884\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.1.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgetrandom-df41e02e1a194d3c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-integer-d5b0ae942631915e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.12.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libtypenum-7f94ef9604dda657.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "relaxed_coherence"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\generic-array-aa138686cdcfded8\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgetrandom-be9ce884e3abda32.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_i128"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\build\\num-bigint-897f92cd040ab05a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libcrc32fast-c05995e5b87f0b06.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rle-decode-fast@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rle-decode-fast-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rle_decode_fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rle-decode-fast-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librle_decode_fast-4b31aae92279daed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.1.41\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_traits-ce95a861578f252a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum@0.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.18.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libstrum-6ffd89b968ff0ec9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.60\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsyn-14700d83499436ed.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsyn-14700d83499436ed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "getrandom",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand_core-e6f2d2d96f75a8dd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.14\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_traits-adcd625398dc4730.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "generic_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libgeneric_array-f019bb7310e7b1ae.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libflate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libflate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libflate-1.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\liblibflate-ae879e3bfbfbd735.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.123\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\serde_derive-229ac3c8be60ffe9.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#synstructure@0.12.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\synstructure-0.12.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "synstructure",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\synstructure-0.12.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsynstructure-c2bfad8850d7e079.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libsynstructure-c2bfad8850d7e079.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.2.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand_chacha-1ac82859f32fb1d0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.23\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.23\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\thiserror_impl-029dd8000ce1f1d5.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.44\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_integer-faa2933462c49c3b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libdigest-8bc9961afd522f4d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum_macros@0.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum_macros-0.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "strum_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum_macros-0.18.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\strum_macros-1132c30d08d24e7f.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typed-builder@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typed-builder-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "typed_builder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typed-builder-0.5.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\typed_builder-144fd09ea3deb39f.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.123",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.123\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libserde-3d7c06b632c65614.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "zerocopy_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\zerocopy_derive-cac02b40aab43855.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.2.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libnum_bigint-43f3d0fa85b86344.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.7.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.7.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.7.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "getrandom",
                "getrandom_package",
                "libc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\librand-f54765e4a3fd9a2f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.23\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libthiserror-a7501a3fad29e634.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libzerocopy-0977204e49f3a905.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libserde_json-8cd7a8bff67ef765.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-0.8.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "serde",
                "std",
                "v4"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libuuid-eaaf013025614c98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: elided lifetime has a name\n  --> src\\ser.rs:46:69\n   |\n45 | impl<'a> SeqVariantSerializer<'a> {\n   |      -- lifetime `'a` declared here\n46 |     pub fn new(index: u32, variant: &'a str, len: Option<usize>) -> SeqVariantSerializer {\n   |                                                                     ^^^^^^^^^^^^^^^^^^^^ this elided lifetime gets resolved as `'a`\n   |\n   = note: `#[warn(elided_named_lifetimes)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(elided_named_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "elided_named_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "elided lifetime has a name",
                "spans": [
                  {
                    "byte_end": 1002,
                    "byte_start": 982,
                    "column_end": 89,
                    "column_start": 69,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": "this elided lifetime gets resolved as `'a`",
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 69,
                        "text": "    pub fn new(index: u32, variant: &'a str, len: Option<usize>) -> SeqVariantSerializer {"
                      }
                    ]
                  },
                  {
                    "byte_end": 885,
                    "byte_start": 883,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": false,
                    "label": "lifetime `'a` declared here",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> SeqVariantSerializer<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: elided lifetime has a name\n  --> src\\ser.rs:79:61\n   |\n78 | impl<'a> StructVariantSerializer<'a> {\n   |      -- lifetime `'a` declared here\n79 |     pub fn new(index: u32, variant: &'a str, len: usize) -> StructVariantSerializer {\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^ this elided lifetime gets resolved as `'a`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "elided_named_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "elided lifetime has a name",
                "spans": [
                  {
                    "byte_end": 1838,
                    "byte_start": 1815,
                    "column_end": 84,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": "this elided lifetime gets resolved as `'a`",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 61,
                        "text": "    pub fn new(index: u32, variant: &'a str, len: usize) -> StructVariantSerializer {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1723,
                    "byte_start": 1721,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": false,
                    "label": "lifetime `'a` declared here",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> StructVariantSerializer<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:167:23\n    |\n167 |     fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>\n    |                       ^\n168 |     where\n169 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n    = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::multiple_bound_locations)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 4387,
                    "byte_start": 4386,
                    "column_end": 24,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 23,
                        "text": "    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Self::Ok, Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 4466,
                    "byte_start": 4465,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 169,
                    "line_start": 169,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:192:33\n    |\n192 |     fn serialize_newtype_struct<T: ?Sized>(\n    |                                 ^\n...\n198 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 5066,
                    "byte_start": 5065,
                    "column_end": 34,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 192,
                    "line_start": 192,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 33,
                        "text": "    fn serialize_newtype_struct<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 5193,
                    "byte_start": 5192,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 198,
                    "line_start": 198,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:203:34\n    |\n203 |     fn serialize_newtype_variant<T: ?Sized>(\n    |                                  ^\n...\n211 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 5283,
                    "byte_start": 5282,
                    "column_end": 35,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 203,
                    "line_start": 203,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 34,
                        "text": "    fn serialize_newtype_variant<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 5461,
                    "byte_start": 5460,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 211,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:278:26\n    |\n278 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                          ^\n279 |     where\n280 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7235,
                    "byte_start": 7234,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 278,
                    "line_start": 278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7313,
                    "byte_start": 7312,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 280,
                    "line_start": 280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:296:26\n    |\n296 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                          ^\n297 |     where\n298 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7657,
                    "byte_start": 7656,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 296,
                    "line_start": 296,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7735,
                    "byte_start": 7734,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:312:24\n    |\n312 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                        ^\n313 |     where\n314 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 8038,
                    "byte_start": 8037,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 312,
                    "line_start": 312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 8116,
                    "byte_start": 8115,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:328:26\n    |\n328 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                          ^\n329 |     where\n330 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 8428,
                    "byte_start": 8427,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 328,
                    "line_start": 328,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 8506,
                    "byte_start": 8505,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:353:24\n    |\n353 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                        ^\n354 |     where\n355 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 9103,
                    "byte_start": 9102,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 353,
                    "line_start": 353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 9181,
                    "byte_start": 9180,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 355,
                    "line_start": 355,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:369:22\n    |\n369 |     fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>\n    |                      ^\n370 |     where\n371 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 9479,
                    "byte_start": 9478,
                    "column_end": 23,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 369,
                    "line_start": 369,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 22,
                        "text": "    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 9555,
                    "byte_start": 9554,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 371,
                    "line_start": 371,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:383:24\n    |\n383 |     fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>\n    |                        ^\n384 |     where\n385 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 9876,
                    "byte_start": 9875,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 383,
                    "line_start": 383,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Self::Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 9954,
                    "byte_start": 9953,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 385,
                    "line_start": 385,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:408:24\n    |\n408 |     fn serialize_field<T: ?Sized>(\n    |                        ^\n...\n414 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 10506,
                    "byte_start": 10505,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 408,
                    "line_start": 408,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 10635,
                    "byte_start": 10634,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 414,
                    "line_start": 414,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\ser.rs:432:24\n    |\n432 |     fn serialize_field<T: ?Sized>(\n    |                        ^\n...\n438 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 11043,
                    "byte_start": 11042,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 432,
                    "line_start": 432,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 11172,
                    "byte_start": 11171,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 438,
                    "line_start": 438,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition value: `std`\n   --> src\\rabin.rs:105:1\n    |\n105 | digest::impl_write!(Rabin);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected values for `feature` are: `crc`, `snap`, and `snappy`\n    = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate\n    = help: try referring to `digest::impl_write` crate for guidance on how handle this unexpected cfg\n    = help: the macro `digest::impl_write` may come from an old version of the `digest` crate, try updating your dependency with `cargo update -p digest`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: this warning originates in the macro `digest::impl_write` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "expected values for `feature` are: `crc`, `snap`, and `snappy`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try referring to `digest::impl_write` crate for guidance on how handle this unexpected cfg",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the macro `digest::impl_write` may come from an old version of the `digest` crate, try updating your dependency with `cargo update -p digest`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition value: `std`",
                "spans": [
                  {
                    "byte_end": 3250,
                    "byte_start": 3235,
                    "column_end": 30,
                    "column_start": 15,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 3193,
                        "byte_start": 3170,
                        "column_end": 24,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_write {"
                          }
                        ]
                      },
                      "macro_decl_name": "digest::impl_write!",
                      "span": {
                        "byte_end": 2930,
                        "byte_start": 2904,
                        "column_end": 27,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\rabin.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "digest::impl_write!(Rabin);"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.9.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 15,
                        "text": "        #[cfg(feature = \"std\")]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\lib.rs:25:5\n   |\n25 | //! `Deserialize`;\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n25 | //!   `Deserialize`;\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_lazy_continuation)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 870,
                        "byte_start": 870,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 25,
                        "line_start": 25,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! `Deserialize`;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 870,
                    "byte_start": 870,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! `Deserialize`;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\lib.rs:241:5\n    |\n241 | //! typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n241 | //!   typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in\n    |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8217,
                        "byte_start": 8217,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 241,
                        "line_start": 241,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 8217,
                    "byte_start": 8217,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 241,
                    "line_start": 241,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! typically implemented using the zlib library. Note that this format (unlike the \"zlib format\" in"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\lib.rs:242:5\n    |\n242 | //! RFC 1950) does not have a checksum.\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n242 | //!   RFC 1950) does not have a checksum.\n    |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8318,
                        "byte_start": 8318,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 242,
                        "line_start": 242,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! RFC 1950) does not have a checksum."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 8318,
                    "byte_start": 8318,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 242,
                    "line_start": 242,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! RFC 1950) does not have a checksum."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\lib.rs:244:5\n    |\n244 | //! compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n244 | //!   compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in\n    |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8458,
                        "byte_start": 8458,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 244,
                        "line_start": 244,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 8458,
                    "byte_start": 8458,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 244,
                    "line_start": 244,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n   --> src\\lib.rs:245:5\n    |\n245 | //! the block. You must enable the `snappy` feature to use this codec.\n    |     ^\n    |\n    = help: if this is supposed to be its own paragraph, add a blank line\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n    |\n245 | //!   the block. You must enable the `snappy` feature to use this codec.\n    |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8559,
                        "byte_start": 8559,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 245,
                        "line_start": 245,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! the block. You must enable the `snappy` feature to use this codec."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 8559,
                    "byte_start": 8559,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 245,
                    "line_start": 245,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! the block. You must enable the `snappy` feature to use this codec."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\de.rs:154:68\n    |\n154 |                   (field, Value::String(_)) => Err(de::Error::custom(format!(\n    |  ____________________________________________________________________^\n155 | |                     \"Expected first field named 'type': got '{}' instead\",\n156 | |                     field\n157 | |                 ))),\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3954,
                        "byte_start": 3954,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": "field",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "                    \"Expected first field named 'type': got '{}' instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3992,
                        "byte_start": 3965,
                        "column_end": 26,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 156,
                        "line_start": 155,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 74,
                            "text": "                    \"Expected first field named 'type': got '{}' instead\","
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "                    field"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4010,
                    "byte_start": 3883,
                    "column_end": 18,
                    "column_start": 68,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 76,
                        "highlight_start": 68,
                        "text": "                (field, Value::String(_)) => Err(de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 75,
                        "highlight_start": 1,
                        "text": "                    \"Expected first field named 'type': got '{}' instead\","
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "                    field"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de.rs:219:6\n    |\n219 | impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {\n    |      ^^                                  ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n219 - impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {\n219 + impl<'de> de::Deserializer<'de> for &Deserializer<'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5657,
                        "byte_start": 5653,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 219,
                        "line_start": 219,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 5692,
                        "byte_start": 5689,
                        "column_end": 45,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 219,
                        "line_start": 219,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 42,
                            "text": "impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 5655,
                    "byte_start": 5653,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 219,
                    "line_start": 219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5691,
                    "byte_start": 5689,
                    "column_end": 44,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 219,
                    "line_start": 219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 42,
                        "text": "impl<'a, 'de> de::Deserializer<'de> for &'a Deserializer<'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\de.rs:439:83\n    |\n439 |             Value::Record(ref fields) => visitor.visit_enum(EnumDeserializer::new(&fields)),\n    |                                                                                   ^^^^^^^ help: change this to: `fields`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13113,
                        "byte_start": 13106,
                        "column_end": 90,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 439,
                        "line_start": 439,
                        "suggested_replacement": "fields",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 90,
                            "highlight_start": 83,
                            "text": "            Value::Record(ref fields) => visitor.visit_enum(EnumDeserializer::new(&fields)),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 13113,
                    "byte_start": 13106,
                    "column_end": 90,
                    "column_start": 83,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 439,
                    "line_start": 439,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 83,
                        "text": "            Value::Record(ref fields) => visitor.visit_enum(EnumDeserializer::new(&fields)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\de.rs:441:92\n    |\n441 |             Value::Enum(_index, ref field) => visitor.visit_enum(EnumUnitDeserializer::new(&field)),\n    |                                                                                            ^^^^^^ help: change this to: `field`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13256,
                        "byte_start": 13250,
                        "column_end": 98,
                        "column_start": 92,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 441,
                        "line_start": 441,
                        "suggested_replacement": "field",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 92,
                            "text": "            Value::Enum(_index, ref field) => visitor.visit_enum(EnumUnitDeserializer::new(&field)),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 13256,
                    "byte_start": 13250,
                    "column_end": 98,
                    "column_start": 92,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 441,
                    "line_start": 441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 98,
                        "highlight_start": 92,
                        "text": "            Value::Enum(_index, ref field) => visitor.visit_enum(EnumUnitDeserializer::new(&field)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\de.rs:469:63\n    |\n469 |             Some(item) => seed.deserialize(&Deserializer::new(&item)).map(Some),\n    |                                                               ^^^^^ help: change this to: `item`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13996,
                        "byte_start": 13991,
                        "column_end": 68,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 469,
                        "line_start": 469,
                        "suggested_replacement": "item",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 63,
                            "text": "            Some(item) => seed.deserialize(&Deserializer::new(&item)).map(Some),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 13996,
                    "byte_start": 13991,
                    "column_end": 68,
                    "column_start": 63,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 469,
                    "line_start": 469,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 63,
                        "text": "            Some(item) => seed.deserialize(&Deserializer::new(&item)).map(Some),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this pattern creates a reference to a reference\n   --> src\\de.rs:483:18\n    |\n483 |             Some(ref key) => seed\n    |                  ^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\nhelp: try\n    |\n483 ~             Some(key) => seed\n484 |                 .deserialize(StringDeserializer {\n485 ~                     input: key.clone(),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14337,
                        "byte_start": 14330,
                        "column_end": 25,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 483,
                        "line_start": 483,
                        "suggested_replacement": "key",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 18,
                            "text": "            Some(ref key) => seed"
                          }
                        ]
                      },
                      {
                        "byte_end": 14430,
                        "byte_start": 14424,
                        "column_end": 34,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 485,
                        "line_start": 485,
                        "suggested_replacement": "key",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 28,
                            "text": "                    input: (*key).clone(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this pattern creates a reference to a reference",
                "spans": [
                  {
                    "byte_end": 14337,
                    "byte_start": 14330,
                    "column_end": 25,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 483,
                    "line_start": 483,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 18,
                        "text": "            Some(ref key) => seed"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this pattern creates a reference to a reference\n   --> src\\de.rs:497:18\n    |\n497 |             Some(ref value) => seed.deserialize(&Deserializer::new(value)),\n    |                  ^^^^^^^^^ help: try: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14729,
                        "byte_start": 14720,
                        "column_end": 27,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 497,
                        "line_start": 497,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 18,
                            "text": "            Some(ref value) => seed.deserialize(&Deserializer::new(value)),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this pattern creates a reference to a reference",
                "spans": [
                  {
                    "byte_end": 14729,
                    "byte_start": 14720,
                    "column_end": 27,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 497,
                    "line_start": 497,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 18,
                        "text": "            Some(ref value) => seed.deserialize(&Deserializer::new(value)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary closure used to substitute value for `Option::None`\n   --> src\\decode.rs:168:27\n    |\n168 |               let variant = variants\n    |  ___________________________^\n169 | |                 .get(usize::try_from(index).map_err(|e| Error::ConvertI64ToUsize(e, index))?)\n170 | |                 .ok_or_else(|| Error::GetUnionVariant {\n171 | |                     index,\n172 | |                     num_variants: variants.len(),\n173 | |                 })?;\n    | |__________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations\n    = note: `#[warn(clippy::unnecessary_lazy_evaluations)]` on by default\nhelp: use `ok_or` instead\n    |\n170 ~                 .ok_or(Error::GetUnionVariant {\n171 +                     index,\n172 +                     num_variants: variants.len(),\n173 ~                 })?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_lazy_evaluations)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `ok_or` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6236,
                        "byte_start": 6102,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\decode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 173,
                        "line_start": 170,
                        "suggested_replacement": "ok_or(Error::GetUnionVariant {\n                    index,\n                    num_variants: variants.len(),\n                })",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 18,
                            "text": "                .ok_or_else(|| Error::GetUnionVariant {"
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "                    index,"
                          },
                          {
                            "highlight_end": 50,
                            "highlight_start": 1,
                            "text": "                    num_variants: variants.len(),"
                          },
                          {
                            "highlight_end": 19,
                            "highlight_start": 1,
                            "text": "                })?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_lazy_evaluations",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary closure used to substitute value for `Option::None`",
                "spans": [
                  {
                    "byte_end": 6236,
                    "byte_start": 5982,
                    "column_end": 19,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\decode.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 173,
                    "line_start": 168,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 27,
                        "text": "            let variant = variants"
                      },
                      {
                        "highlight_end": 94,
                        "highlight_start": 1,
                        "text": "                .get(usize::try_from(index).map_err(|e| Error::ConvertI64ToUsize(e, index))?)"
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "                .ok_or_else(|| Error::GetUnionVariant {"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "                    index,"
                      },
                      {
                        "highlight_end": 50,
                        "highlight_start": 1,
                        "text": "                    num_variants: variants.len(),"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "                })?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\encode.rs:14:16\n   |\n14 |     encode_ref(&value, schema, buffer)\n   |                ^^^^^^ help: change this to: `value`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 439,
                        "byte_start": 433,
                        "column_end": 22,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 14,
                        "line_start": 14,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 16,
                            "text": "    encode_ref(&value, schema, buffer)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 439,
                    "byte_start": 433,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\encode.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    encode_ref(&value, schema, buffer)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: deref on an immutable reference\n  --> src\\encode.rs:97:28\n   |\n97 |                 encode_ref(&*item, inner_schema, buffer);\n   |                            ^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\n   = note: `#[warn(clippy::borrow_deref_ref)]` on by default\nhelp: if you would like to reborrow, try removing `&*`\n   |\n97 -                 encode_ref(&*item, inner_schema, buffer);\n97 +                 encode_ref(item, inner_schema, buffer);\n   |\nhelp: if you would like to deref, try using `&**`\n   |\n97 |                 encode_ref(&**item, inner_schema, buffer);\n   |                              +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::borrow_deref_ref)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you would like to reborrow, try removing `&*`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3990,
                        "byte_start": 3984,
                        "column_end": 34,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "item",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 28,
                            "text": "                encode_ref(&*item, inner_schema, buffer);"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you would like to deref, try using `&**`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3990,
                        "byte_start": 3984,
                        "column_end": 34,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "&**item",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 28,
                            "text": "                encode_ref(&*item, inner_schema, buffer);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::borrow_deref_ref",
                  "explanation": null
                },
                "level": "warning",
                "message": "deref on an immutable reference",
                "spans": [
                  {
                    "byte_end": 3990,
                    "byte_start": 3984,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\encode.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "                encode_ref(&*item, inner_schema, buffer);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\encode.rs:129:25\n    |\n129 |                 for (i, &(_, ref value)) in fields.iter().enumerate() {\n    |                         ^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n    = note: `#[warn(clippy::needless_borrowed_reference)]` on by default\nhelp: try removing the `&` and `ref` parts\n    |\n129 -                 for (i, &(_, ref value)) in fields.iter().enumerate() {\n129 +                 for (i, (_, value)) in fields.iter().enumerate() {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrowed_reference)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5074,
                        "byte_start": 5070,
                        "column_end": 34,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 30,
                            "text": "                for (i, &(_, ref value)) in fields.iter().enumerate() {"
                          }
                        ]
                      },
                      {
                        "byte_end": 5066,
                        "byte_start": 5065,
                        "column_end": 26,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 25,
                            "text": "                for (i, &(_, ref value)) in fields.iter().enumerate() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 5080,
                    "byte_start": 5065,
                    "column_end": 40,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\encode.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 25,
                        "text": "                for (i, &(_, ref value)) in fields.iter().enumerate() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\encode.rs:139:12\n    |\n139 |     encode(&value, schema, &mut buffer);\n    |            ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5353,
                        "byte_start": 5347,
                        "column_end": 18,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\encode.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 139,
                        "line_start": 139,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 12,
                            "text": "    encode(&value, schema, &mut buffer);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 5353,
                    "byte_start": 5347,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\encode.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "    encode(&value, schema, &mut buffer);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this pattern creates a reference to a reference\n   --> src\\reader.rs:282:14\n    |\n282 |         Some(ref schema) => value.resolve(schema),\n    |              ^^^^^^^^^^ help: try: `schema`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9407,
                        "byte_start": 9397,
                        "column_end": 24,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\reader.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 282,
                        "line_start": 282,
                        "suggested_replacement": "schema",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 14,
                            "text": "        Some(ref schema) => value.resolve(schema),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this pattern creates a reference to a reference",
                "spans": [
                  {
                    "byte_end": 9407,
                    "byte_start": 9397,
                    "column_end": 24,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\reader.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 282,
                    "line_start": 282,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 14,
                        "text": "        Some(ref schema) => value.resolve(schema),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:128:22\n    |\n128 |         if v <= i32::max_value() as u32 {\n    |                      ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n    = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n    |\n128 -         if v <= i32::max_value() as u32 {\n128 +         if v <= i32::MAX as u32 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3294,
                        "byte_start": 3283,
                        "column_end": 33,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 22,
                            "text": "        if v <= i32::max_value() as u32 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 3294,
                    "byte_start": 3283,
                    "column_end": 33,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 128,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 22,
                        "text": "        if v <= i32::max_value() as u32 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:136:22\n    |\n136 |         if v <= i64::max_value() as u64 {\n    |                      ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n136 -         if v <= i64::max_value() as u64 {\n136 +         if v <= i64::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3526,
                        "byte_start": 3515,
                        "column_end": 33,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 22,
                            "text": "        if v <= i64::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 3526,
                    "byte_start": 3515,
                    "column_end": 33,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 22,
                        "text": "        if v <= i64::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this lifetime isn't used in the impl\n   --> src\\ser.rs:274:6\n    |\n274 | impl<'a> ser::SerializeSeq for SeqSerializer {\n    |      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n    = note: `#[warn(clippy::extra_unused_lifetimes)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::extra_unused_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::extra_unused_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "this lifetime isn't used in the impl",
                "spans": [
                  {
                    "byte_end": 7123,
                    "byte_start": 7121,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> ser::SerializeSeq for SeqSerializer {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this lifetime isn't used in the impl\n   --> src\\ser.rs:292:6\n    |\n292 | impl<'a> ser::SerializeTuple for SeqSerializer {\n    |      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::extra_unused_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "this lifetime isn't used in the impl",
                "spans": [
                  {
                    "byte_end": 7543,
                    "byte_start": 7541,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 292,
                    "line_start": 292,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> ser::SerializeTuple for SeqSerializer {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: enclosing `Ok` and `?` operator are unneeded\n   --> src\\ser.rs:361:9\n    |\n361 |         Ok(ser::SerializeSeq::end(self)?)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark\n    = note: `#[warn(clippy::needless_question_mark)]` on by default\nhelp: remove the enclosing `Ok` and `?` operator\n    |\n361 -         Ok(ser::SerializeSeq::end(self)?)\n361 +         ser::SerializeSeq::end(self)\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_question_mark)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove the enclosing `Ok` and `?` operator",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9328,
                        "byte_start": 9325,
                        "column_end": 12,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 361,
                        "line_start": 361,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 9,
                            "text": "        Ok(ser::SerializeSeq::end(self)?)"
                          }
                        ]
                      },
                      {
                        "byte_end": 9358,
                        "byte_start": 9356,
                        "column_end": 42,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 361,
                        "line_start": 361,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 40,
                            "text": "        Ok(ser::SerializeSeq::end(self)?)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_question_mark",
                  "explanation": null
                },
                "level": "warning",
                "message": "enclosing `Ok` and `?` operator are unneeded",
                "spans": [
                  {
                    "byte_end": 9358,
                    "byte_start": 9325,
                    "column_end": 42,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 361,
                    "line_start": 361,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 9,
                        "text": "        Ok(ser::SerializeSeq::end(self)?)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\util.rs:3:29\n  |\n3 | use std::{convert::TryFrom, i64, io::Read, sync::Once};\n  |                             ^^^\n  |\n  = help: remove this import\n  = note: then `i64::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `i64::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 93,
                    "byte_start": 90,
                    "column_end": 32,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\util.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 3,
                    "line_start": 3,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 29,
                        "text": "use std::{convert::TryFrom, i64, io::Read, sync::Once};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\writer.rs:264:41\n    |\n264 |         self.append_bytes(encode_to_vec(&value, schema).as_ref())\n    |                                         ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9398,
                        "byte_start": 9392,
                        "column_end": 47,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\writer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 264,
                        "line_start": 264,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 41,
                            "text": "        self.append_bytes(encode_to_vec(&value, schema).as_ref())"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 9398,
                    "byte_start": 9392,
                    "column_end": 47,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\writer.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 264,
                    "line_start": 264,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 41,
                        "text": "        self.append_bytes(encode_to_vec(&value, schema).as_ref())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\schema.rs:26:29\n   |\n26 |                 .map(|byte| format!(\"{:02x}\", byte))\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n26 -                 .map(|byte| format!(\"{:02x}\", byte))\n26 +                 .map(|byte| format!(\"{byte:02x}\"))\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 929,
                        "byte_start": 929,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "byte",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "                .map(|byte| format!(\"{:02x}\", byte))"
                          }
                        ]
                      },
                      {
                        "byte_end": 941,
                        "byte_start": 935,
                        "column_end": 51,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 45,
                            "text": "                .map(|byte| format!(\"{:02x}\", byte))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 942,
                    "byte_start": 919,
                    "column_end": 52,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 26,
                    "line_start": 26,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 29,
                        "text": "                .map(|byte| format!(\"{:02x}\", byte))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\schema.rs:438:44\n    |\n438 |                 let fullname = Name::parse(&inner)?.fullname(None);\n    |                                            ^^^^^^ help: change this to: `inner`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14913,
                        "byte_start": 14907,
                        "column_end": 50,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 438,
                        "line_start": 438,
                        "suggested_replacement": "inner",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 44,
                            "text": "                let fullname = Name::parse(&inner)?.fullname(None);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 14913,
                    "byte_start": 14907,
                    "column_end": 50,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 438,
                    "line_start": 438,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 44,
                        "text": "                let fullname = Name::parse(&inner)?.fullname(None);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\schema.rs:555:22\n    |\n555 |                 Some(&Value::Number(ref value)) => parse_json_integer_for_decimal(value),\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n555 -                 Some(&Value::Number(ref value)) => parse_json_integer_for_decimal(value),\n555 +                 Some(Value::Number(value)) => parse_json_integer_for_decimal(value),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19588,
                        "byte_start": 19584,
                        "column_end": 41,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 37,
                            "text": "                Some(&Value::Number(ref value)) => parse_json_integer_for_decimal(value),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19570,
                        "byte_start": 19569,
                        "column_end": 23,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 23,
                            "highlight_start": 22,
                            "text": "                Some(&Value::Number(ref value)) => parse_json_integer_for_decimal(value),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 19594,
                    "byte_start": 19569,
                    "column_end": 47,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 555,
                    "line_start": 555,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 22,
                        "text": "                Some(&Value::Number(ref value)) => parse_json_integer_for_decimal(value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\schema.rs:595:18\n    |\n595 |             Some(&Value::String(ref t)) => match t.as_str() {\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n595 -             Some(&Value::String(ref t)) => match t.as_str() {\n595 +             Some(Value::String(t)) => match t.as_str() {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21155,
                        "byte_start": 21151,
                        "column_end": 37,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 595,
                        "line_start": 595,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 33,
                            "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                          }
                        ]
                      },
                      {
                        "byte_end": 21137,
                        "byte_start": 21136,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 595,
                        "line_start": 595,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 18,
                            "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 21157,
                    "byte_start": 21136,
                    "column_end": 39,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 595,
                    "line_start": 595,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 18,
                        "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\schema.rs:650:18\n    |\n650 |             Some(&Value::String(ref t)) => match t.as_str() {\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n650 -             Some(&Value::String(ref t)) => match t.as_str() {\n650 +             Some(Value::String(t)) => match t.as_str() {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23540,
                        "byte_start": 23536,
                        "column_end": 37,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 650,
                        "line_start": 650,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 33,
                            "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                          }
                        ]
                      },
                      {
                        "byte_end": 23522,
                        "byte_start": 23521,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 650,
                        "line_start": 650,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 18,
                            "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 23542,
                    "byte_start": 23521,
                    "column_end": 39,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 650,
                    "line_start": 650,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 18,
                        "text": "            Some(&Value::String(ref t)) => match t.as_str() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\schema.rs:658:18\n    |\n658 |             Some(&Value::Object(ref data)) => self.parse_complex(data),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n658 -             Some(&Value::Object(ref data)) => self.parse_complex(data),\n658 +             Some(Value::Object(data)) => self.parse_complex(data),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23942,
                        "byte_start": 23938,
                        "column_end": 37,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 658,
                        "line_start": 658,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 33,
                            "text": "            Some(&Value::Object(ref data)) => self.parse_complex(data),"
                          }
                        ]
                      },
                      {
                        "byte_end": 23924,
                        "byte_start": 23923,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 658,
                        "line_start": 658,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 18,
                            "text": "            Some(&Value::Object(ref data)) => self.parse_complex(data),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 23947,
                    "byte_start": 23923,
                    "column_end": 42,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 658,
                    "line_start": 658,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 18,
                        "text": "            Some(&Value::Object(ref data)) => self.parse_complex(data),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\schema.rs:659:18\n    |\n659 |             Some(&Value::Array(ref variants)) => self.parse_union(variants),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n659 -             Some(&Value::Array(ref variants)) => self.parse_union(variants),\n659 +             Some(Value::Array(variants)) => self.parse_union(variants),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24013,
                        "byte_start": 24009,
                        "column_end": 36,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 659,
                        "line_start": 659,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 32,
                            "text": "            Some(&Value::Array(ref variants)) => self.parse_union(variants),"
                          }
                        ]
                      },
                      {
                        "byte_end": 23996,
                        "byte_start": 23995,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 659,
                        "line_start": 659,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 18,
                            "text": "            Some(&Value::Array(ref variants)) => self.parse_union(variants),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 24022,
                    "byte_start": 23995,
                    "column_end": 45,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 659,
                    "line_start": 659,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 18,
                        "text": "            Some(&Value::Array(ref variants)) => self.parse_union(variants),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\schema.rs:961:32\n    |\n961 |                     Cow::Owned(format!(\"{}.{}\", namespace, name))\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n961 -                     Cow::Owned(format!(\"{}.{}\", namespace, name))\n961 +                     Cow::Owned(format!(\"{namespace}.{name}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35210,
                        "byte_start": 35210,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 961,
                        "line_start": 961,
                        "suggested_replacement": "namespace",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "                    Cow::Owned(format!(\"{}.{}\", namespace, name))"
                          }
                        ]
                      },
                      {
                        "byte_end": 35213,
                        "byte_start": 35213,
                        "column_end": 45,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 961,
                        "line_start": 961,
                        "suggested_replacement": "name",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 45,
                            "text": "                    Cow::Owned(format!(\"{}.{}\", namespace, name))"
                          }
                        ]
                      },
                      {
                        "byte_end": 35226,
                        "byte_start": 35215,
                        "column_end": 58,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 961,
                        "line_start": 961,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 47,
                            "text": "                    Cow::Owned(format!(\"{}.{}\", namespace, name))"
                          }
                        ]
                      },
                      {
                        "byte_end": 35232,
                        "byte_start": 35226,
                        "column_end": 64,
                        "column_start": 58,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 961,
                        "line_start": 961,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 58,
                            "text": "                    Cow::Owned(format!(\"{}.{}\", namespace, name))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 35233,
                    "byte_start": 35200,
                    "column_end": 65,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 961,
                    "line_start": 961,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 32,
                        "text": "                    Cow::Owned(format!(\"{}.{}\", namespace, name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: deref which would be done by auto-deref\n   --> src\\schema.rs:966:72\n    |\n966 |             fields.push((k, format!(\"{}:{}\", pcf_string(k), pcf_string(&*n))));\n    |                                                                        ^^^ help: try: `&n`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n    = note: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::explicit_auto_deref)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35385,
                        "byte_start": 35382,
                        "column_end": 75,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 966,
                        "line_start": 966,
                        "suggested_replacement": "&n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 72,
                            "text": "            fields.push((k, format!(\"{}:{}\", pcf_string(k), pcf_string(&*n))));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::explicit_auto_deref",
                  "explanation": null
                },
                "level": "warning",
                "message": "deref which would be done by auto-deref",
                "spans": [
                  {
                    "byte_end": 35385,
                    "byte_start": 35382,
                    "column_end": 75,
                    "column_start": 72,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 966,
                    "line_start": 966,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 72,
                        "text": "            fields.push((k, format!(\"{}:{}\", pcf_string(k), pcf_string(&*n))));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\schema.rs:994:5\n    |\n994 |     format!(\"{{{}}}\", inter)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n994 -     format!(\"{{{}}}\", inter)\n994 +     format!(\"{{{inter}}}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36291,
                        "byte_start": 36291,
                        "column_end": 17,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 994,
                        "line_start": 994,
                        "suggested_replacement": "inter",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 17,
                            "text": "    format!(\"{{{}}}\", inter)"
                          }
                        ]
                      },
                      {
                        "byte_end": 36302,
                        "byte_start": 36295,
                        "column_end": 28,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 994,
                        "line_start": 994,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 21,
                            "text": "    format!(\"{{{}}}\", inter)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 36303,
                    "byte_start": 36279,
                    "column_end": 29,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 994,
                    "line_start": 994,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 5,
                        "text": "    format!(\"{{{}}}\", inter)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n    --> src\\schema.rs:1003:5\n     |\n1003 |     format!(\"[{}]\", inter)\n     |     ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1003 -     format!(\"[{}]\", inter)\n1003 +     format!(\"[{inter}]\")\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36501,
                        "byte_start": 36501,
                        "column_end": 16,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1003,
                        "line_start": 1003,
                        "suggested_replacement": "inter",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 16,
                            "text": "    format!(\"[{}]\", inter)"
                          }
                        ]
                      },
                      {
                        "byte_end": 36511,
                        "byte_start": 36504,
                        "column_end": 26,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1003,
                        "line_start": 1003,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 19,
                            "text": "    format!(\"[{}]\", inter)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 36512,
                    "byte_start": 36490,
                    "column_end": 27,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1003,
                    "line_start": 1003,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 5,
                        "text": "    format!(\"[{}]\", inter)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n    --> src\\schema.rs:1007:5\n     |\n1007 |     format!(\"\\\"{}\\\"\", s)\n     |     ^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1007 -     format!(\"\\\"{}\\\"\", s)\n1007 +     format!(\"\\\"{s}\\\"\")\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36567,
                        "byte_start": 36567,
                        "column_end": 17,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1007,
                        "line_start": 1007,
                        "suggested_replacement": "s",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 17,
                            "text": "    format!(\"\\\"{}\\\"\", s)"
                          }
                        ]
                      },
                      {
                        "byte_end": 36574,
                        "byte_start": 36571,
                        "column_end": 24,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\schema.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1007,
                        "line_start": 1007,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 21,
                            "text": "    format!(\"\\\"{}\\\"\", s)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 36575,
                    "byte_start": 36555,
                    "column_end": 25,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\schema.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1007,
                    "line_start": 1007,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 5,
                        "text": "    format!(\"\\\"{}\\\"\", s)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: called `is_none()` after searching an `Iterator` with `find`\n  --> src\\schema_compatibility.rs:82:32\n   |\n82 |                         return w_symbols.iter().find(|e| !r_symbols.contains(e)).is_none();\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `!w_symbols.iter().any(|e| !r_symbols.contains(&e))`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n   = note: `#[warn(clippy::search_is_some)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::search_is_some)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2900,
                        "byte_start": 2841,
                        "column_end": 91,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\schema_compatibility.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": "!w_symbols.iter().any(|e| !r_symbols.contains(&e))",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 91,
                            "highlight_start": 32,
                            "text": "                        return w_symbols.iter().find(|e| !r_symbols.contains(e)).is_none();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::search_is_some",
                  "explanation": null
                },
                "level": "warning",
                "message": "called `is_none()` after searching an `Iterator` with `find`",
                "spans": [
                  {
                    "byte_end": 2900,
                    "byte_start": 2841,
                    "column_end": 91,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\schema_compatibility.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 91,
                        "highlight_start": 32,
                        "text": "                        return w_symbols.iter().find(|e| !r_symbols.contains(e)).is_none();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\types.rs:9:84\n  |\n9 | use std::{collections::HashMap, convert::TryFrom, hash::BuildHasher, str::FromStr, u8};\n  |                                                                                    ^^\n  |\n  = help: remove this import\n  = note: then `u8::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `u8::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 361,
                    "byte_start": 359,
                    "column_end": 86,
                    "column_start": 84,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 86,
                        "highlight_start": 84,
                        "text": "use std::{collections::HashMap, convert::TryFrom, hash::BuildHasher, str::FromStr, u8};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:334:14\n    |\n334 |             (&Value::Bytes(ref b), &Schema::Fixed { size, .. }) => b.len() == size,\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n334 -             (&Value::Bytes(ref b), &Schema::Fixed { size, .. }) => b.len() == size,\n334 +             (Value::Bytes(b), &Schema::Fixed { size, .. }) => b.len() == size,\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11914,
                        "byte_start": 11910,
                        "column_end": 32,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 334,
                        "line_start": 334,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 28,
                            "text": "            (&Value::Bytes(ref b), &Schema::Fixed { size, .. }) => b.len() == size,"
                          }
                        ]
                      },
                      {
                        "byte_end": 11897,
                        "byte_start": 11896,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 334,
                        "line_start": 334,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::Bytes(ref b), &Schema::Fixed { size, .. }) => b.len() == size,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 11916,
                    "byte_start": 11896,
                    "column_end": 34,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 334,
                    "line_start": 334,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 14,
                        "text": "            (&Value::Bytes(ref b), &Schema::Fixed { size, .. }) => b.len() == size,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:338:14\n    |\n338 |             (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),\n    |              ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n338 -             (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),\n338 +             (Value::String(s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12180,
                        "byte_start": 12176,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                          }
                        ]
                      },
                      {
                        "byte_end": 12162,
                        "byte_start": 12161,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12182,
                    "byte_start": 12161,
                    "column_end": 35,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 338,
                    "line_start": 338,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 14,
                        "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a struct pattern where every field's pattern takes a reference\n   --> src\\types.rs:338:37\n    |\n338 |             (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n338 -             (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),\n338 +             (&Value::String(ref s), Schema::Enum { symbols, .. }) => symbols.contains(s),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12204,
                        "byte_start": 12200,
                        "column_end": 57,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 53,
                            "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                          }
                        ]
                      },
                      {
                        "byte_end": 12185,
                        "byte_start": 12184,
                        "column_end": 38,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 37,
                            "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a struct pattern where every field's pattern takes a reference",
                "spans": [
                  {
                    "byte_end": 12217,
                    "byte_start": 12184,
                    "column_end": 70,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 338,
                    "line_start": 338,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 37,
                        "text": "            (&Value::String(ref s), &Schema::Enum { ref symbols, .. }) => symbols.contains(s),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a struct pattern where every field's pattern takes a reference\n   --> src\\types.rs:339:38\n    |\n339 |             (&Value::Enum(i, ref s), &Schema::Enum { ref symbols, .. }) => symbols\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n339 -             (&Value::Enum(i, ref s), &Schema::Enum { ref symbols, .. }) => symbols\n339 +             (&Value::Enum(i, ref s), Schema::Enum { symbols, .. }) => symbols\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12300,
                        "byte_start": 12296,
                        "column_end": 58,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 339,
                        "line_start": 339,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 54,
                            "text": "            (&Value::Enum(i, ref s), &Schema::Enum { ref symbols, .. }) => symbols"
                          }
                        ]
                      },
                      {
                        "byte_end": 12281,
                        "byte_start": 12280,
                        "column_end": 39,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 339,
                        "line_start": 339,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 38,
                            "text": "            (&Value::Enum(i, ref s), &Schema::Enum { ref symbols, .. }) => symbols"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a struct pattern where every field's pattern takes a reference",
                "spans": [
                  {
                    "byte_end": 12313,
                    "byte_start": 12280,
                    "column_end": 71,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 339,
                    "line_start": 339,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 71,
                        "highlight_start": 38,
                        "text": "            (&Value::Enum(i, ref s), &Schema::Enum { ref symbols, .. }) => symbols"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:344:14\n    |\n344 |             (&Value::Union(ref value), &Schema::Union(ref inner)) => {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n344 -             (&Value::Union(ref value), &Schema::Union(ref inner)) => {\n344 +             (Value::Union(value), &Schema::Union(ref inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12538,
                        "byte_start": 12534,
                        "column_end": 32,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 28,
                            "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12521,
                        "byte_start": 12520,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12544,
                    "byte_start": 12520,
                    "column_end": 38,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 344,
                    "line_start": 344,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 14,
                        "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:344:40\n    |\n344 |             (&Value::Union(ref value), &Schema::Union(ref inner)) => {\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n344 -             (&Value::Union(ref value), &Schema::Union(ref inner)) => {\n344 +             (&Value::Union(ref value), Schema::Union(inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12565,
                        "byte_start": 12561,
                        "column_end": 59,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 55,
                            "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12547,
                        "byte_start": 12546,
                        "column_end": 41,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 40,
                            "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12571,
                    "byte_start": 12546,
                    "column_end": 65,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 344,
                    "line_start": 344,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 40,
                        "text": "            (&Value::Union(ref value), &Schema::Union(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:347:14\n    |\n347 |             (&Value::Array(ref items), &Schema::Array(ref inner)) => {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n347 -             (&Value::Array(ref items), &Schema::Array(ref inner)) => {\n347 +             (Value::Array(items), &Schema::Array(ref inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12674,
                        "byte_start": 12670,
                        "column_end": 32,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 347,
                        "line_start": 347,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 28,
                            "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12657,
                        "byte_start": 12656,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 347,
                        "line_start": 347,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12680,
                    "byte_start": 12656,
                    "column_end": 38,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 14,
                        "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:347:40\n    |\n347 |             (&Value::Array(ref items), &Schema::Array(ref inner)) => {\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n347 -             (&Value::Array(ref items), &Schema::Array(ref inner)) => {\n347 +             (&Value::Array(ref items), Schema::Array(inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12701,
                        "byte_start": 12697,
                        "column_end": 59,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 347,
                        "line_start": 347,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 55,
                            "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12683,
                        "byte_start": 12682,
                        "column_end": 41,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 347,
                        "line_start": 347,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 40,
                            "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12707,
                    "byte_start": 12682,
                    "column_end": 65,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 40,
                        "text": "            (&Value::Array(ref items), &Schema::Array(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:350:14\n    |\n350 |             (&Value::Map(ref items), &Schema::Map(ref inner)) => {\n    |              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n350 -             (&Value::Map(ref items), &Schema::Map(ref inner)) => {\n350 +             (Value::Map(items), &Schema::Map(ref inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12819,
                        "byte_start": 12815,
                        "column_end": 30,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 350,
                        "line_start": 350,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 26,
                            "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12804,
                        "byte_start": 12803,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 350,
                        "line_start": 350,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12825,
                    "byte_start": 12803,
                    "column_end": 36,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 350,
                    "line_start": 350,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 14,
                        "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:350:38\n    |\n350 |             (&Value::Map(ref items), &Schema::Map(ref inner)) => {\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n350 -             (&Value::Map(ref items), &Schema::Map(ref inner)) => {\n350 +             (&Value::Map(ref items), Schema::Map(inner)) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12844,
                        "byte_start": 12840,
                        "column_end": 55,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 350,
                        "line_start": 350,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 51,
                            "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12828,
                        "byte_start": 12827,
                        "column_end": 39,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 350,
                        "line_start": 350,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 38,
                            "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12850,
                    "byte_start": 12827,
                    "column_end": 61,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 350,
                    "line_start": 350,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 38,
                        "text": "            (&Value::Map(ref items), &Schema::Map(ref inner)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:353:14\n    |\n353 |             (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n353 -             (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {\n353 +             (Value::Record(record_fields), &Schema::Record { ref fields, .. }) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12972,
                        "byte_start": 12968,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 353,
                        "line_start": 353,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12954,
                        "byte_start": 12953,
                        "column_end": 15,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 353,
                        "line_start": 353,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 14,
                            "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 12986,
                    "byte_start": 12953,
                    "column_end": 47,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 353,
                    "line_start": 353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 14,
                        "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a struct pattern where every field's pattern takes a reference\n   --> src\\types.rs:353:49\n    |\n353 |             (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n353 -             (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {\n353 +             (&Value::Record(ref record_fields), Schema::Record { fields, .. }) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13010,
                        "byte_start": 13006,
                        "column_end": 71,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 353,
                        "line_start": 353,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 67,
                            "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 12989,
                        "byte_start": 12988,
                        "column_end": 50,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 353,
                        "line_start": 353,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 49,
                            "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a struct pattern where every field's pattern takes a reference",
                "spans": [
                  {
                    "byte_end": 13022,
                    "byte_start": 12988,
                    "column_end": 83,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 353,
                    "line_start": 353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 49,
                        "text": "            (&Value::Record(ref record_fields), &Schema::Record { ref fields, .. }) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: dereferencing a tuple pattern where every element takes a reference\n   --> src\\types.rs:356:34\n    |\n356 |                         |(field, &(ref name, ref value))| {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\nhelp: try removing the `&` and `ref` parts\n    |\n356 -                         |(field, &(ref name, ref value))| {\n356 +                         |(field, (name, value))| {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try removing the `&` and `ref` parts",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13188,
                        "byte_start": 13184,
                        "column_end": 40,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 356,
                        "line_start": 356,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 36,
                            "text": "                        |(field, &(ref name, ref value))| {"
                          }
                        ]
                      },
                      {
                        "byte_end": 13198,
                        "byte_start": 13194,
                        "column_end": 50,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 356,
                        "line_start": 356,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 46,
                            "text": "                        |(field, &(ref name, ref value))| {"
                          }
                        ]
                      },
                      {
                        "byte_end": 13183,
                        "byte_start": 13182,
                        "column_end": 35,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\types.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 356,
                        "line_start": 356,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 34,
                            "text": "                        |(field, &(ref name, ref value))| {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrowed_reference",
                  "explanation": null
                },
                "level": "warning",
                "message": "dereferencing a tuple pattern where every element takes a reference",
                "spans": [
                  {
                    "byte_end": 13204,
                    "byte_start": 13182,
                    "column_end": 56,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\types.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 356,
                    "line_start": 356,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 34,
                        "text": "                        |(field, &(ref name, ref value))| {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: useless use of `vec!`\n   --> src\\schema_compatibility.rs:273:16\n    |\n273 |             && vec![SchemaKind::Long, SchemaKind::Float, SchemaKind::Double]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can use an array directly: `[SchemaKind::Long, SchemaKind::Float, SchemaKind::Double]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n    = note: `#[warn(clippy::useless_vec)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::useless_vec)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you can use an array directly",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10728,
                        "byte_start": 10667,
                        "column_end": 77,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\schema_compatibility.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 273,
                        "line_start": 273,
                        "suggested_replacement": "[SchemaKind::Long, SchemaKind::Float, SchemaKind::Double]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 16,
                            "text": "            && vec![SchemaKind::Long, SchemaKind::Float, SchemaKind::Double]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::useless_vec",
                  "explanation": null
                },
                "level": "warning",
                "message": "useless use of `vec!`",
                "spans": [
                  {
                    "byte_end": 10728,
                    "byte_start": 10667,
                    "column_end": 77,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\schema_compatibility.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 273,
                    "line_start": 273,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 16,
                        "text": "            && vec![SchemaKind::Long, SchemaKind::Float, SchemaKind::Double]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: useless use of `vec!`\n   --> src\\schema_compatibility.rs:281:16\n    |\n281 |             && vec![SchemaKind::Float, SchemaKind::Double]\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: you can use an array directly: `[SchemaKind::Float, SchemaKind::Double]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you can use an array directly",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10934,
                        "byte_start": 10891,
                        "column_end": 59,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\schema_compatibility.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 281,
                        "line_start": 281,
                        "suggested_replacement": "[SchemaKind::Float, SchemaKind::Double]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 16,
                            "text": "            && vec![SchemaKind::Float, SchemaKind::Double]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::useless_vec",
                  "explanation": null
                },
                "level": "warning",
                "message": "useless use of `vec!`",
                "spans": [
                  {
                    "byte_end": 10934,
                    "byte_start": 10891,
                    "column_end": 59,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\schema_compatibility.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 281,
                    "line_start": 281,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 16,
                        "text": "            && vec![SchemaKind::Float, SchemaKind::Double]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjkg5ppqd/avro-rs-0.13.0#avro-rs@0.13.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "avro_rs",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjkg5ppqd\\avro-rs-0.13.0\\target\\debug\\deps\\libavro_rs-4a16bf7071d2084c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 115
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 3,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0093",
                    "package": "crossbeam-deque",
                    "title": "Data race in crossbeam-deque",
                    "description": "In the affected version of this crate, the result of the race condition is that one or more tasks in the worker queue can be popped twice instead of other tasks that are forgotten and never popped. If tasks are allocated on the heap, this can cause double free and a memory leak. If not, this still can cause a logical bug.\n\nCrates using `Stealer::steal`, `Stealer::steal_batch`, or `Stealer::steal_batch_and_pop` are affected by this issue.\n\nCredits to @kmaork for discovering, reporting and fixing the bug.",
                    "date": "2021-07-30",
                    "aliases": [
                      "GHSA-pqqp-xmhj-wgcw",
                      "CVE-2021-32810"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-pqqp-xmhj-wgcw",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.7.4, <0.8.0",
                      ">=0.8.1"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "crossbeam-deque",
                    "version": "0.8.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "94af6efb46fef72616855b036a624cf27ba656ffc9be1b9a3c931cfc7749a9a9",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-epoch",
                        "version": "0.9.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0013",
                    "package": "regex",
                    "title": "Regexes with large repetitions on empty sub-expressions take a very long time to parse",
                    "description": "The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                    "date": "2022-03-08",
                    "aliases": [
                      "CVE-2022-24713",
                      "GHSA-m5pq-gvj9-9vr8"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.5.5"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "regex",
                    "version": "1.4.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9251239e129e16308e70d853559389de218ac275b515068abc96829d05b948a",
                    "dependencies": [
                      {
                        "name": "regex-syntax",
                        "version": "0.6.22",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0074",
                    "package": "zerocopy",
                    "title": "Some Ref methods are unsound with some type parameters",
                    "description": "The `Ref` methods `into_ref`, `into_mut`, `into_slice`, and `into_slice_mut` are unsound\nand may allow safe code to exhibit undefined behavior when used with `Ref<B, T>` where `B`\nis [`cell::Ref`](https://doc.rust-lang.org/core/cell/struct.Ref.html) or\n[`cell::RefMut`](https://doc.rust-lang.org/core/cell/struct.RefMut.html). Note that these\nmethods remain sound when used with `B` types other than `cell::Ref` or `cell::RefMut`.\n\nSee https://github.com/google/zerocopy/issues/716 for a more in-depth analysis.\n\nThe current plan is to yank the affected versions soon. See\nhttps://github.com/google/zerocopy/issues/679 for more detail.",
                    "date": "2023-12-14",
                    "aliases": [
                      "GHSA-3mv5-343c-w2qg",
                      "GHSA-rjhf-4mh8-9xjq"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "ref",
                      "refcell",
                      "mutable-aliasing"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/google/zerocopy/issues/716",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.2.9, <0.3.0",
                      ">=0.3.2, <0.4.0",
                      ">=0.4.1, <0.5.0",
                      ">=0.5.2, <0.6.0",
                      ">=0.6.6, <0.7.0",
                      ">=0.7.31"
                    ],
                    "unaffected": [
                      "<0.2.2"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "zerocopy::Ref::into_mut": [
                        ">=0.2.2, <0.2.9",
                        ">=0.3.0, <0.3.2",
                        ">=0.4.0, <0.4.1",
                        ">=0.5.0, <0.5.2",
                        ">=0.6.0, <0.6.6",
                        ">=0.7.0, <0.7.31"
                      ],
                      "zerocopy::Ref::into_mut_slice": [
                        ">=0.2.2, <0.2.9",
                        ">=0.3.0, <0.3.2",
                        ">=0.4.0, <0.4.1",
                        ">=0.5.0, <0.5.2",
                        ">=0.6.0, <0.6.6",
                        ">=0.7.0, <0.7.31"
                      ],
                      "zerocopy::Ref::into_ref": [
                        ">=0.2.2, <0.2.9",
                        ">=0.3.0, <0.3.2",
                        ">=0.4.0, <0.4.1",
                        ">=0.5.0, <0.5.2",
                        ">=0.6.0, <0.6.6",
                        ">=0.7.0, <0.7.31"
                      ],
                      "zerocopy::Ref::into_slice": [
                        ">=0.2.2, <0.2.9",
                        ">=0.3.0, <0.3.2",
                        ">=0.4.0, <0.4.1",
                        ">=0.5.0, <0.5.2",
                        ">=0.6.0, <0.6.6",
                        ">=0.7.0, <0.7.31"
                      ]
                    }
                  },
                  "package": {
                    "name": "zerocopy",
                    "version": "0.3.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6580539ad917b7c026220c4b3f2c08d52ce54d6ce0dc491e66002e35388fab46",
                    "dependencies": [
                      {
                        "name": "byteorder",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "zerocopy-derive",
                        "version": "0.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.83",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "cpuid-bool",
                    "version": "0.1.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0064",
                    "package": "cpuid-bool",
                    "title": "`cpuid-bool` has been renamed to `cpufeatures`",
                    "description": "Please use the `cpufeatures`` crate going forward:\n\n<https://github.com/RustCrypto/utils/tree/master/cpufeatures>\n\nThere will be no further releases of `cpuid-bool`.",
                    "date": "2021-05-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/RustCrypto/utils/pull/381",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "serde_cbor",
                    "version": "0.11.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1e18acfa2f90e8b735b2836ab8d538de304cbb6729a7360729ea5a895d15a622",
                    "dependencies": [
                      {
                        "name": "half",
                        "version": "1.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.123",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0127",
                    "package": "serde_cbor",
                    "title": "serde_cbor is unmaintained",
                    "description": "The `serde_cbor` crate is unmaintained. The author has archived the github repository.\n\nAlternatives proposed by the author:\n\n * [`ciborium`](https://crates.io/crates/ciborium)\n * [`minicbor`](https://crates.io/crates/minicbor)",
                    "date": "2021-08-15",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/pyfisch/cbor",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.83",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "bumpalo",
                    "version": "3.5.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "f07aa6688c702439a1be0307b6a94dffe1168569e45b9500c1372bc580740d59",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0078",
                    "package": "bumpalo",
                    "title": "Use-after-free due to a lifetime error in `Vec::into_iter()`",
                    "description": "In affected versions of this crate, the lifetime of the iterator produced by\n`Vec::into_iter()` is not constrained to the lifetime of the `Bump` that\nallocated the vector's memory. Using the iterator after the `Bump` is dropped\ncauses use-after-free accesses.\n\nThe following example demonstrates memory corruption arising from a misuse of\nthis unsoundness.\n\n```rust\nuse bumpalo::{collections::Vec, Bump};\n\nfn main() {\n    let bump = Bump::new();\n    let mut vec = Vec::new_in(&bump);\n    vec.extend([0x01u8; 32]);\n    let into_iter = vec.into_iter();\n    drop(bump);\n\n    for _ in 0..100 {\n        let reuse_bump = Bump::new();\n        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);\n    }\n\n    for x in into_iter {\n        print!(\"0x{:02x} \", x);\n    }\n    println!();\n}\n```\n\nThe issue was corrected in version 3.11.1 by adding a lifetime to the `IntoIter`\ntype, and updating the signature of `Vec::into_iter()` to constrain this\nlifetime.",
                    "date": "2022-01-14",
                    "aliases": [
                      "GHSA-f85w-wvc7-crwc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "memory-exposure"
                    ],
                    "keywords": [
                      "use-after-free"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "bumpalo::collections::vec::Vec::into_iter": [
                        "<3.11.1"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=3.11.1"
                    ],
                    "unaffected": [
                      "<1.1.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "02d96d1e189ef58269ebe5b97953da3274d83a93af647c2ddd6f9dab28cedb8d",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "memoffset",
                    "version": "0.6.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "157b4208e3059a8f9e78d559edc658e13df41410cb3ae03979c83130067fdd87",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0045",
                    "package": "memoffset",
                    "title": "memoffset allows reading uninitialized memory",
                    "description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of<T>` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in <https://github.com/Gilnaa/memoffset/pull/50>.",
                    "date": "2023-06-21",
                    "aliases": [
                      "GHSA-wfg4-322g-9vqv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "memoffset",
                      "offset"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Gilnaa/memoffset/issues/24",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "memoffset::offset_of": [
                        "<0.6.2"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.2"
                    ],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-deque",
                    "version": "0.8.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "94af6efb46fef72616855b036a624cf27ba656ffc9be1b9a3c931cfc7749a9a9",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-epoch",
                        "version": "0.9.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-epoch",
                    "version": "0.9.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "a1aaa739f95311c2c7887a76863f500026092fb1dce0161dab577e559ef3569d",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "const_fn",
                        "version": "0.4.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memoffset",
                        "version": "0.6.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "scopeguard",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "02d96d1e189ef58269ebe5b97953da3274d83a93af647c2ddd6f9dab28cedb8d",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "zerocopy",
                    "version": "0.3.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6580539ad917b7c026220c4b3f2c08d52ce54d6ce0dc491e66002e35388fab46",
                    "dependencies": [
                      {
                        "name": "byteorder",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "zerocopy-derive",
                        "version": "0.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "avro-rs",
          "version": "0.13.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\n[Settings](https://docs.rs/avro-rs/latest/settings.html)\n[Help](https://docs.rs/avro-rs/latest/help.html)\nSummary[Source](https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959)\nExpand description\nA library for working with [Apache Avro](https://avro.apache.org/) in Rust.\nPlease check our [documentation](https://docs.rs/avro-rs) for examples, tutorials and API reference.\n**[Apache Avro](https://avro.apache.org/)** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library)Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version)Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the [version upgrade guide](https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema)Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#writing-data)Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way)The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way)The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data)Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s [Snappy](http://google.github.io/snappy/) compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reading-data)Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1)The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1)The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together)Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the [Avro specification](https://avro.apache.org/docs/current/spec.html#Logical+Types):\n  1. `Decimal` using the [`num_bigint`](https://docs.rs/num-bigint/0.2.6/num_bigint) crate\n  2. UUID using the [`uuid`](https://docs.rs/uuid/0.8.1/uuid) crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types)Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint)Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data)Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s [`std::sync::Once`](https://doc.rust-lang.org/std/sync/struct.Once.html) mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility)Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reexports)\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#modules)\n\n[rabin](https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html \"mod avro_rs::rabin\")\n    Implementation of the Rabin fingerprint algorithm\n\n[schema](https://docs.rs/avro-rs/latest/avro_rs/schema/index.html \"mod avro_rs::schema\")\n    Logic for parsing and interacting with schemas in Avro format.\n\n[schema_compatibility](https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html \"mod avro_rs::schema_compatibility\")\n    Logic for checking schema compatibility\n\n[types](https://docs.rs/avro-rs/latest/avro_rs/types/index.html \"mod avro_rs::types\")\n    Logic handling the intermediate representation of Avro values.\n## Structs[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#structs)\n\n[Days](https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html \"struct avro_rs::Days\")\n\n\n[Decimal](https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html \"struct avro_rs::Decimal\")\n\n\n[Duration](https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html \"struct avro_rs::Duration\")\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\n[Millis](https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html \"struct avro_rs::Millis\")\n\n\n[Months](https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html \"struct avro_rs::Months\")\n\n\n[Reader](https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html \"struct avro_rs::Reader\")\n    Main interface for reading Avro formatted values.\n\n[Writer](https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html \"struct avro_rs::Writer\")\n    Main interface for writing Avro formatted values.\n## Enums[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#enums)\n\n[Codec](https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html \"enum avro_rs::Codec\")\n    The compression codec used to compress blocks.\n\n[DeError](https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html \"enum avro_rs::DeError\")\n\n\n[Error](https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html \"enum avro_rs::Error\")\n\n\n[SerError](https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html \"enum avro_rs::SerError\")\n\n## Functions[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#functions)\n\n[from_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html \"fn avro_rs::from_avro_datum\")\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\n[from_value](https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html \"fn avro_rs::from_value\")\n    Interpret a `Value` as an instance of type `D`.\n\n[max_allocation_bytes](https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html \"fn avro_rs::max_allocation_bytes\")\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\n[to_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html \"fn avro_rs::to_avro_datum\")\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\n[to_value](https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html \"fn avro_rs::to_value\")\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#types)\n\n[AvroResult](https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html \"type avro_rs::AvroResult\")\n    A convenience type alias for `Result`s with `Error`s.\n",
            "markdown_with_citations": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for working with Apache Avro\u27e84\u27e9 in Rust.\nPlease check our documentation\u27e85\u27e9 for examples, tutorials and API reference.\n**Apache Avro\u27e84\u27e9** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## \u00a7\u27e86\u27e9Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## \u00a7\u27e87\u27e9Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the version upgrade guide\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the Avro Specification\u27e810\u27e9.\n## \u00a7\u27e811\u27e9Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### \u00a7\u27e812\u27e9The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### \u00a7\u27e813\u27e9The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### \u00a7\u27e814\u27e9Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s Snappy\u27e815\u27e9 compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## \u00a7\u27e816\u27e9Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the Avro Specification\u27e810\u27e9.\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### \u00a7\u27e817\u27e9The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### \u00a7\u27e818\u27e9The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## \u00a7\u27e819\u27e9Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the Avro specification\u27e820\u27e9:\n  1. `Decimal` using the `num_bigint`\u27e821\u27e9 crate\n  2. UUID using the `uuid`\u27e822\u27e9 crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### \u00a7\u27e823\u27e9Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### \u00a7\u27e824\u27e9Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### \u00a7\u27e825\u27e9Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s `std::sync::Once`\u27e826\u27e9 mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### \u00a7\u27e827\u27e9Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules\u00a7\u27e829\u27e9\n\nrabin\u27e830\u27e9\n    Implementation of the Rabin fingerprint algorithm\n\nschema\u27e831\u27e9\n    Logic for parsing and interacting with schemas in Avro format.\n\nschema_compatibility\u27e832\u27e9\n    Logic for checking schema compatibility\n\ntypes\u27e833\u27e9\n    Logic handling the intermediate representation of Avro values.\n## Structs\u00a7\u27e834\u27e9\n\nDays\u27e835\u27e9\n\n\nDecimal\u27e836\u27e9\n\n\nDuration\u27e837\u27e9\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\nMillis\u27e838\u27e9\n\n\nMonths\u27e839\u27e9\n\n\nReader\u27e840\u27e9\n    Main interface for reading Avro formatted values.\n\nWriter\u27e841\u27e9\n    Main interface for writing Avro formatted values.\n## Enums\u00a7\u27e842\u27e9\n\nCodec\u27e843\u27e9\n    The compression codec used to compress blocks.\n\nDeError\u27e844\u27e9\n\n\nError\u27e845\u27e9\n\n\nSerError\u27e846\u27e9\n\n## Functions\u00a7\u27e847\u27e9\n\nfrom_avro_datum\u27e848\u27e9\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\nfrom_value\u27e849\u27e9\n    Interpret a `Value` as an instance of type `D`.\n\nmax_allocation_bytes\u27e850\u27e9\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\nto_avro_datum\u27e851\u27e9\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\nto_value\u27e852\u27e9\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases\u00a7\u27e853\u27e9\n\nAvroResult\u27e854\u27e9\n    A convenience type alias for `Result`s with `Error`s.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/avro-rs/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/avro-rs/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959: Source\n\u27e84\u27e9 https://avro.apache.org/: Apache Avro\n\u27e85\u27e9 https://docs.rs/avro-rs: documentation\n\u27e86\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library: \u00a7\n\u27e87\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version: \u00a7\n\u27e88\u27e9 https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md: version upgrade guide\n\u27e89\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema: \u00a7\n\u27e810\u27e9 https://avro.apache.org/docs/current/spec.html#schemas: Avro Specification\n\u27e811\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#writing-data: \u00a7\n\u27e812\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way: \u00a7\n\u27e813\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way: \u00a7\n\u27e814\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data: \u00a7\n\u27e815\u27e9 http://google.github.io/snappy/: Snappy\n\u27e816\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reading-data: \u00a7\n\u27e817\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1: \u00a7\n\u27e818\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1: \u00a7\n\u27e819\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together: \u00a7\n\u27e820\u27e9 https://avro.apache.org/docs/current/spec.html#Logical+Types: Avro specification\n\u27e821\u27e9 https://docs.rs/num-bigint/0.2.6/num_bigint: `num_bigint`\n\u27e822\u27e9 https://docs.rs/uuid/0.8.1/uuid: `uuid`\n\u27e823\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types: \u00a7\n\u27e824\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint: \u00a7\n\u27e825\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data: \u00a7\n\u27e826\u27e9 https://doc.rust-lang.org/std/sync/struct.Once.html: `std::sync::Once`\n\u27e827\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility: \u00a7\n\u27e828\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#modules: \u00a7\n\u27e830\u27e9 https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html: mod avro_rs::rabin - rabin\n\u27e831\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema/index.html: mod avro_rs::schema - schema\n\u27e832\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html: mod avro_rs::schema_compatibility - schema_compatibility\n\u27e833\u27e9 https://docs.rs/avro-rs/latest/avro_rs/types/index.html: mod avro_rs::types - types\n\u27e834\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#structs: \u00a7\n\u27e835\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html: struct avro_rs::Days - Days\n\u27e836\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html: struct avro_rs::Decimal - Decimal\n\u27e837\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html: struct avro_rs::Duration - Duration\n\u27e838\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html: struct avro_rs::Millis - Millis\n\u27e839\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html: struct avro_rs::Months - Months\n\u27e840\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html: struct avro_rs::Reader - Reader\n\u27e841\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html: struct avro_rs::Writer - Writer\n\u27e842\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html: enum avro_rs::Codec - Codec\n\u27e844\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html: enum avro_rs::DeError - DeError\n\u27e845\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html: enum avro_rs::Error - Error\n\u27e846\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html: enum avro_rs::SerError - SerError\n\u27e847\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html: fn avro_rs::from_avro_datum - from_avro_datum\n\u27e849\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html: fn avro_rs::from_value - from_value\n\u27e850\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html: fn avro_rs::max_allocation_bytes - max_allocation_bytes\n\u27e851\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html: fn avro_rs::to_avro_datum - to_avro_datum\n\u27e852\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html: fn avro_rs::to_value - to_value\n\u27e853\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html: type avro_rs::AvroResult - AvroResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "avro-rs",
          "version": "0.13.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\n[Settings](https://docs.rs/avro-rs/latest/settings.html)\n[Help](https://docs.rs/avro-rs/latest/help.html)\nSummary[Source](https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959)\nExpand description\nA library for working with [Apache Avro](https://avro.apache.org/) in Rust.\nPlease check our [documentation](https://docs.rs/avro-rs) for examples, tutorials and API reference.\n**[Apache Avro](https://avro.apache.org/)** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library)Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version)Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the [version upgrade guide](https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema)Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#writing-data)Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way)The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way)The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data)Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s [Snappy](http://google.github.io/snappy/) compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reading-data)Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the [Avro Specification](https://avro.apache.org/docs/current/spec.html#schemas).\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1)The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1)The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together)Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the [Avro specification](https://avro.apache.org/docs/current/spec.html#Logical+Types):\n  1. `Decimal` using the [`num_bigint`](https://docs.rs/num-bigint/0.2.6/num_bigint) crate\n  2. UUID using the [`uuid`](https://docs.rs/uuid/0.8.1/uuid) crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types)Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint)Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data)Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s [`std::sync::Once`](https://doc.rust-lang.org/std/sync/struct.Once.html) mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### [\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility)Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#reexports)\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#modules)\n\n[rabin](https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html \"mod avro_rs::rabin\")\n    Implementation of the Rabin fingerprint algorithm\n\n[schema](https://docs.rs/avro-rs/latest/avro_rs/schema/index.html \"mod avro_rs::schema\")\n    Logic for parsing and interacting with schemas in Avro format.\n\n[schema_compatibility](https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html \"mod avro_rs::schema_compatibility\")\n    Logic for checking schema compatibility\n\n[types](https://docs.rs/avro-rs/latest/avro_rs/types/index.html \"mod avro_rs::types\")\n    Logic handling the intermediate representation of Avro values.\n## Structs[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#structs)\n\n[Days](https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html \"struct avro_rs::Days\")\n\n\n[Decimal](https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html \"struct avro_rs::Decimal\")\n\n\n[Duration](https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html \"struct avro_rs::Duration\")\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\n[Millis](https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html \"struct avro_rs::Millis\")\n\n\n[Months](https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html \"struct avro_rs::Months\")\n\n\n[Reader](https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html \"struct avro_rs::Reader\")\n    Main interface for reading Avro formatted values.\n\n[Writer](https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html \"struct avro_rs::Writer\")\n    Main interface for writing Avro formatted values.\n## Enums[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#enums)\n\n[Codec](https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html \"enum avro_rs::Codec\")\n    The compression codec used to compress blocks.\n\n[DeError](https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html \"enum avro_rs::DeError\")\n\n\n[Error](https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html \"enum avro_rs::Error\")\n\n\n[SerError](https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html \"enum avro_rs::SerError\")\n\n## Functions[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#functions)\n\n[from_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html \"fn avro_rs::from_avro_datum\")\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\n[from_value](https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html \"fn avro_rs::from_value\")\n    Interpret a `Value` as an instance of type `D`.\n\n[max_allocation_bytes](https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html \"fn avro_rs::max_allocation_bytes\")\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\n[to_avro_datum](https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html \"fn avro_rs::to_avro_datum\")\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\n[to_value](https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html \"fn avro_rs::to_value\")\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases[\u00a7](https://docs.rs/avro-rs/latest/avro_rs/#types)\n\n[AvroResult](https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html \"type avro_rs::AvroResult\")\n    A convenience type alias for `Result`s with `Error`s.\n",
            "markdown_with_citations": "[](https://docs.rs/avro-rs/latest/avro_rs/all.html \"show sidebar\")\n# Crate avro_rsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for working with Apache Avro\u27e84\u27e9 in Rust.\nPlease check our documentation\u27e85\u27e9 for examples, tutorials and API reference.\n**Apache Avro\u27e84\u27e9** is a data serialization system which provides rich data structures and a compact, fast, binary data format.\nAll data in Avro is schematized, as in the following example:\n```\n{\n  \"type\": \"record\",\n  \"name\": \"test\",\n  \"fields\": [\n    {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n    {\"name\": \"b\", \"type\": \"string\"}\n  ]\n}\n```\n\nThere are basically two ways of handling Avro data in Rust:\n  * **as Avro-specialized data types** based on an Avro schema;\n  * **as generic Rust serde-compatible types** implementing/deriving `Serialize` and `Deserialize`;\n\n\n**avro-rs** provides a way to read and write both these data representations easily and efficiently.\n## \u00a7\u27e86\u27e9Installing the library\nAdd to your `Cargo.toml`:\n```\n[dependencies]\navro-rs = \"x.y\"\n```\n\nOr in case you want to leverage the **Snappy** codec:\n```\n[dependencies.avro-rs]\nversion = \"x.y\"\nfeatures = [\"snappy\"]\n```\n\n## \u00a7\u27e87\u27e9Upgrading to a newer minor version\nThe library is still in beta, so there might be backward-incompatible changes between minor versions. If you have troubles upgrading, check the version upgrade guide\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Defining a schema\nAn Avro data cannot exist without an Avro schema. Schemas **must** be used while writing and **can** be used while reading and they carry the information regarding the type of data we are handling. Avro schemas are used for both schema validation and resolution of Avro data.\nAvro schemas are defined in **JSON** format and can just be parsed out of a raw string:\n```\nuse avro_rs::Schema;\nlet raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"}\n    ]\n  }\n\"#;\n// if the schema is not valid, this function will return an error\nlet schema = Schema::parse_str(raw_schema).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schema);\n```\n\nAdditionally, a list of of definitions (which may depend on each other) can be given and all of them will be parsed into the corresponding schemas.\n```\nuse avro_rs::Schema;\nlet raw_schema_1 = r#\"{\n    \"name\": \"A\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"float\"}\n    ]\n  }\"#;\n// This definition depends on the definition of A above\nlet raw_schema_2 = r#\"{\n    \"name\": \"B\",\n    \"type\": \"record\",\n    \"fields\": [\n      {\"name\": \"field_one\", \"type\": \"A\"}\n    ]\n  }\"#;\n// if the schemas are not valid, this function will return an error\nlet schemas = Schema::parse_list(&[raw_schema_1, raw_schema_2]).unwrap();\n// schemas can be printed for debugging\nprintln!(\"{:?}\", schemas);\n```\n\n_N.B._ It is important to note that the composition of schema definitions requires schemas with names. For this reason, only schemas of type Record, Enum, and Fixed should be input into this function.\nThe library provides also a programmatic interface to define schemas without encoding them in JSON (for advanced use), but we highly recommend the JSON interface. Please read the API reference in case you are interested.\nFor more information about schemas and what kind of information you can encapsulate in them, please refer to the appropriate section of the Avro Specification\u27e810\u27e9.\n## \u00a7\u27e811\u27e9Writing data\nOnce we have defined a schema, we are ready to serialize data in Avro, validating them against the provided schema in the process. As mentioned before, there are two ways of handling Avro data in Rust.\n**NOTE:** The library also provides a low-level interface for encoding a single datum in Avro bytecode without generating markers and headers (for advanced use), but we highly recommend the `Writer` interface to be totally Avro-compatible. Please read the API reference in case you are interested.\n### \u00a7\u27e812\u27e9The avro way\nGiven that the schema we defined above is that of an Avro _Record_ , we are going to use the associated type provided by the library to specify the data we want to serialize:\n```\nuse avro_rs::types::Record;\nuse avro_rs::Writer;\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the Record type models our Record schema\nlet mut record = Record::new(writer.schema()).unwrap();\nrecord.put(\"a\", 27i64);\nrecord.put(\"b\", \"foo\");\n// schema validation happens here\nwriter.append(record).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data has been written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner().unwrap();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, the library offers that capability via the `Value` interface.\n```\nuse avro_rs::types::Value;\nlet mut value = Value::String(\"foo\".to_string());\n```\n\n### \u00a7\u27e813\u27e9The serde way\nGiven that the schema we defined above is an Avro _Record_ , we can directly use a Rust struct deriving `Serialize` to model our data:\n```\nuse avro_rs::Writer;\n#[derive(Debug, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\n// a writer needs a schema and something to write to\nlet mut writer = Writer::new(&schema, Vec::new());\n// the structure models our Record schema\nlet test = Test {\n  a: 27,\n  b: \"foo\".to_owned(),\n};\n// schema validation happens here\nwriter.append_ser(test).unwrap();\n// this is how to get back the resulting avro bytecode\n// this performs a flush operation to make sure data is written, so it can fail\n// you can also call `writer.flush()` yourself without consuming the writer\nlet encoded = writer.into_inner();\n```\n\nThe vast majority of the times, schemas tend to define a record as a top-level container encapsulating all the values to convert as fields and providing documentation for them, but in case we want to directly define an Avro value, any type implementing `Serialize` should work.\n```\nlet mut value = \"foo\".to_string();\n```\n\n### \u00a7\u27e814\u27e9Using codecs to compress data\nAvro supports three different compression codecs when encoding data:\n  * **Null** : leaves data uncompressed;\n  * **Deflate** : writes the data block using the deflate algorithm as specified in RFC 1951, and typically implemented using the zlib library. Note that this format (unlike the \u201czlib format\u201d in RFC 1950) does not have a checksum.\n  * **Snappy** : uses Google\u2019s Snappy\u27e815\u27e9 compression library. Each compressed block is followed by the 4-byte, big-endianCRC32 checksum of the uncompressed data in the block. You must enable the `snappy` feature to use this codec.\n\n\nTo specify a codec to use to compress data, just specify it while creating a `Writer`:\n```\nuse avro_rs::Writer;\nuse avro_rs::Codec;\nlet mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n```\n\n## \u00a7\u27e816\u27e9Reading data\nAs far as reading Avro encoded data goes, we can just use the schema encoded with the data to read them. The library will do it automatically for us, as it already does for the compression codec:\n```\nuse avro_rs::Reader;\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::new(&input[..]).unwrap();\n```\n\nIn case, instead, we want to specify a different (but compatible) reader schema from the schema the data has been written with, we can just do as the following:\n```\nuse avro_rs::Schema;\nuse avro_rs::Reader;\nlet reader_raw_schema = r#\"\n  {\n    \"type\": \"record\",\n    \"name\": \"test\",\n    \"fields\": [\n      {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n      {\"name\": \"b\", \"type\": \"string\"},\n      {\"name\": \"c\", \"type\": \"long\", \"default\": 43}\n    ]\n  }\n\"#;\nlet reader_schema = Schema::parse_str(reader_raw_schema).unwrap();\n// reader creation can fail in case the input to read from is not Avro-compatible or malformed\nlet reader = Reader::with_schema(&reader_schema, &input[..]).unwrap();\n```\n\nThe library will also automatically perform schema resolution while reading the data.\nFor more information about schema compatibility and resolution, please refer to the Avro Specification\u27e810\u27e9.\nAs usual, there are two ways to handle Avro data in Rust, as you can see below.\n**NOTE:** The library also provides a low-level interface for decoding a single datum in Avro bytecode without markers and header (for advanced use), but we highly recommend the `Reader` interface to leverage all Avro features. Please read the API reference in case you are interested.\n### \u00a7\u27e817\u27e9The avro way\nWe can just read directly instances of `Value` out of the `Reader` iterator:\n```\nuse avro_rs::Reader;\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result of an Avro Value in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", value.unwrap());\n}\n\n```\n\n### \u00a7\u27e818\u27e9The serde way\nAlternatively, we can use a Rust type implementing `Deserialize` and representing our schema to read the data into:\n```\nuse avro_rs::Reader;\nuse avro_rs::from_value;\n#[derive(Debug, Deserialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nlet reader = Reader::new(&input[..]).unwrap();\n// value is a Result in case the read operation fails\nfor value in reader {\n  println!(\"{:?}\", from_value::<Test>(&value.unwrap()));\n}\n```\n\n## \u00a7\u27e819\u27e9Putting everything together\nThe following is an example of how to combine everything showed so far and it is meant to be a quick reference of the library interface:\n```\nuse avro_rs::{Codec, Reader, Schema, Writer, from_value, types::Record, Error};\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct Test {\n  a: i64,\n  b: String,\n}\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"a\", 27i64);\n  record.put(\"b\", \"foo\");\n  writer.append(record)?;\n  let test = Test {\n    a: 27,\n    b: \"foo\".to_owned(),\n  };\n  writer.append_ser(test)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", from_value::<Test>(&record?));\n  }\n  Ok(())\n}\n```\n\n`avro-rs` also supports the logical types listed in the Avro specification\u27e820\u27e9:\n  1. `Decimal` using the `num_bigint`\u27e821\u27e9 crate\n  2. UUID using the `uuid`\u27e822\u27e9 crate\n  3. Date, Time (milli) as `i32` and Time (micro) as `i64`\n  4. Timestamp (milli and micro) as `i64`\n  5. Duration as a custom type with `months`, `days` and `millis` accessor methods each of which returns an `i32`\n\n\nNote that the on-disk representation is identical to the underlying primitive/complex type.\n#### \u00a7\u27e823\u27e9Read and write logical types\n```\nuse avro_rs::{\n  types::Record, types::Value, Codec, Days, Decimal, Duration, Millis, Months, Reader, Schema,\n  Writer, Error,\n};\nuse num_bigint::ToBigInt;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n  {\n   \"type\": \"record\",\n   \"name\": \"test\",\n   \"fields\": [\n    {\n     \"name\": \"decimal_fixed\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 2,\n      \"name\": \"decimal\"\n     },\n     \"logicalType\": \"decimal\",\n     \"precision\": 4,\n     \"scale\": 2\n    },\n    {\n     \"name\": \"decimal_var\",\n     \"type\": \"bytes\",\n     \"logicalType\": \"decimal\",\n     \"precision\": 10,\n     \"scale\": 3\n    },\n    {\n     \"name\": \"uuid\",\n     \"type\": \"string\",\n     \"logicalType\": \"uuid\"\n    },\n    {\n     \"name\": \"date\",\n     \"type\": \"int\",\n     \"logicalType\": \"date\"\n    },\n    {\n     \"name\": \"time_millis\",\n     \"type\": \"int\",\n     \"logicalType\": \"time-millis\"\n    },\n    {\n     \"name\": \"time_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"time-micros\"\n    },\n    {\n     \"name\": \"timestamp_millis\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-millis\"\n    },\n    {\n     \"name\": \"timestamp_micros\",\n     \"type\": \"long\",\n     \"logicalType\": \"timestamp-micros\"\n    },\n    {\n     \"name\": \"duration\",\n     \"type\": {\n      \"type\": \"fixed\",\n      \"size\": 12,\n      \"name\": \"duration\"\n     },\n     \"logicalType\": \"duration\"\n    }\n   ]\n  }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{:?}\", schema);\n  let mut writer = Writer::with_codec(&schema, Vec::new(), Codec::Deflate);\n  let mut record = Record::new(writer.schema()).unwrap();\n  record.put(\"decimal_fixed\", Decimal::from(9936.to_bigint().unwrap().to_signed_bytes_be()));\n  record.put(\"decimal_var\", Decimal::from((-32442.to_bigint().unwrap()).to_signed_bytes_be()));\n  record.put(\"uuid\", uuid::Uuid::new_v4());\n  record.put(\"date\", Value::Date(1));\n  record.put(\"time_millis\", Value::TimeMillis(2));\n  record.put(\"time_micros\", Value::TimeMicros(3));\n  record.put(\"timestamp_millis\", Value::TimestampMillis(4));\n  record.put(\"timestamp_micros\", Value::TimestampMicros(5));\n  record.put(\"duration\", Duration::new(Months::new(6), Days::new(7), Millis::new(8)));\n  writer.append(record)?;\n  let input = writer.into_inner()?;\n  let reader = Reader::with_schema(&schema, &input[..])?;\n  for record in reader {\n    println!(\"{:?}\", record?);\n  }\n  Ok(())\n}\n```\n\n### \u00a7\u27e824\u27e9Calculate Avro schema fingerprint\nThis library supports calculating the following fingerprints:\n  * SHA-256\n  * MD5\n  * Rabin\n\n\nAn example of fingerprinting for the supported fingerprints:\n```\nuse avro_rs::rabin::Rabin;\nuse avro_rs::{Schema, Error};\nuse md5::Md5;\nuse sha2::Sha256;\nfn main() -> Result<(), Error> {\n  let raw_schema = r#\"\n    {\n      \"type\": \"record\",\n      \"name\": \"test\",\n      \"fields\": [\n        {\"name\": \"a\", \"type\": \"long\", \"default\": 42},\n        {\"name\": \"b\", \"type\": \"string\"}\n      ]\n    }\n  \"#;\n  let schema = Schema::parse_str(raw_schema)?;\n  println!(\"{}\", schema.fingerprint::<Sha256>());\n  println!(\"{}\", schema.fingerprint::<Md5>());\n  println!(\"{}\", schema.fingerprint::<Rabin>());\n  Ok(())\n}\n```\n\n### \u00a7\u27e825\u27e9Ill-formed data\nIn order to ease decoding, the Binary Encoding specification of Avro data requires some fields to have their length encoded alongside the data.\nIf encoded data passed to a `Reader` has been ill-formed, it can happen that the bytes meant to contain the length of data are bogus and could result in extravagant memory allocation.\nTo shield users from ill-formed data, `avro-rs` sets a limit (default: 512MB) to any allocation it will perform when decoding data.\nIf you expect some of your data fields to be larger than this limit, be sure to make use of the `max_allocation_bytes` function before reading **any** data (we leverage Rust\u2019s `std::sync::Once`\u27e826\u27e9 mechanism to initialize this value, if any call to decode is made before a call to `max_allocation_bytes`, the limit will be 512MB throughout the lifetime of the program).\n```\nuse avro_rs::max_allocation_bytes;\nmax_allocation_bytes(2 * 1024 * 1024 * 1024); // 2GB\n// ... happily decode large data\n\n```\n\n### \u00a7\u27e827\u27e9Check schemas compatibility\nThis library supports checking for schemas compatibility.\nNote: It does not yet support named schemas (more on https://github.com/flavray/avro-rs/pull/76).\nExamples of checking for compatibility:\n  1. Compatible schemas\n\n\nExplanation: an int array schema can be read by a long array schema- an int (32bit signed integer) fits into a long (64bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nassert_eq!(true, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n  1. Incompatible schemas (a long array schema cannot be read by an int array schema)\n\n\nExplanation: a long array schema cannot be read by an int array schema- a long (64bit signed integer) does not fit into an int (32bit signed integer)\n```\nuse avro_rs::{Schema, schema_compatibility::SchemaCompatibility};\nlet writers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"long\"}\"#).unwrap();\nlet readers_schema = Schema::parse_str(r#\"{\"type\": \"array\", \"items\":\"int\"}\"#).unwrap();\nassert_eq!(false, SchemaCompatibility::can_read(&writers_schema, &readers_schema));\n```\n\n## Re-exports\u00a7\u27e828\u27e9\n\n`pub use schema::Schema[](https://docs.rs/avro-rs/latest/avro_rs/schema/enum.Schema.html \"enum avro_rs::schema::Schema\");`\n\n## Modules\u00a7\u27e829\u27e9\n\nrabin\u27e830\u27e9\n    Implementation of the Rabin fingerprint algorithm\n\nschema\u27e831\u27e9\n    Logic for parsing and interacting with schemas in Avro format.\n\nschema_compatibility\u27e832\u27e9\n    Logic for checking schema compatibility\n\ntypes\u27e833\u27e9\n    Logic handling the intermediate representation of Avro values.\n## Structs\u00a7\u27e834\u27e9\n\nDays\u27e835\u27e9\n\n\nDecimal\u27e836\u27e9\n\n\nDuration\u27e837\u27e9\n    A struct representing duration that hides the details of endianness and conversion between platform-native u32 and byte arrays.\n\nMillis\u27e838\u27e9\n\n\nMonths\u27e839\u27e9\n\n\nReader\u27e840\u27e9\n    Main interface for reading Avro formatted values.\n\nWriter\u27e841\u27e9\n    Main interface for writing Avro formatted values.\n## Enums\u00a7\u27e842\u27e9\n\nCodec\u27e843\u27e9\n    The compression codec used to compress blocks.\n\nDeError\u27e844\u27e9\n\n\nError\u27e845\u27e9\n\n\nSerError\u27e846\u27e9\n\n## Functions\u00a7\u27e847\u27e9\n\nfrom_avro_datum\u27e848\u27e9\n    Decode a `Value` encoded in Avro format given its `Schema` and anything implementing `io::Read` to read from.\n\nfrom_value\u27e849\u27e9\n    Interpret a `Value` as an instance of type `D`.\n\nmax_allocation_bytes\u27e850\u27e9\n    Set a new maximum number of bytes that can be allocated when decoding data. Once called, the limit cannot be changed.\n\nto_avro_datum\u27e851\u27e9\n    Encode a compatible value (implementing the `ToAvro` trait) into Avro format, also performing schema validation.\n\nto_value\u27e852\u27e9\n    Interpret a serializeable instance as a `Value`.\n## Type Aliases\u00a7\u27e853\u27e9\n\nAvroResult\u27e854\u27e9\n    A convenience type alias for `Result`s with `Error`s.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/avro-rs/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/avro-rs/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/avro-rs/latest/src/avro_rs/lib.rs.html#1-959: Source\n\u27e84\u27e9 https://avro.apache.org/: Apache Avro\n\u27e85\u27e9 https://docs.rs/avro-rs: documentation\n\u27e86\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#installing-the-library: \u00a7\n\u27e87\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#upgrading-to-a-newer-minor-version: \u00a7\n\u27e88\u27e9 https://docs.rs/avro-rs/latest/avro_rs/migration_guide.md: version upgrade guide\n\u27e89\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#defining-a-schema: \u00a7\n\u27e810\u27e9 https://avro.apache.org/docs/current/spec.html#schemas: Avro Specification\n\u27e811\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#writing-data: \u00a7\n\u27e812\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way: \u00a7\n\u27e813\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way: \u00a7\n\u27e814\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#using-codecs-to-compress-data: \u00a7\n\u27e815\u27e9 http://google.github.io/snappy/: Snappy\n\u27e816\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reading-data: \u00a7\n\u27e817\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-avro-way-1: \u00a7\n\u27e818\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#the-serde-way-1: \u00a7\n\u27e819\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#putting-everything-together: \u00a7\n\u27e820\u27e9 https://avro.apache.org/docs/current/spec.html#Logical+Types: Avro specification\n\u27e821\u27e9 https://docs.rs/num-bigint/0.2.6/num_bigint: `num_bigint`\n\u27e822\u27e9 https://docs.rs/uuid/0.8.1/uuid: `uuid`\n\u27e823\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#read-and-write-logical-types: \u00a7\n\u27e824\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#calculate-avro-schema-fingerprint: \u00a7\n\u27e825\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#ill-formed-data: \u00a7\n\u27e826\u27e9 https://doc.rust-lang.org/std/sync/struct.Once.html: `std::sync::Once`\n\u27e827\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#check-schemas-compatibility: \u00a7\n\u27e828\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#reexports: \u00a7\n\u27e829\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#modules: \u00a7\n\u27e830\u27e9 https://docs.rs/avro-rs/latest/avro_rs/rabin/index.html: mod avro_rs::rabin - rabin\n\u27e831\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema/index.html: mod avro_rs::schema - schema\n\u27e832\u27e9 https://docs.rs/avro-rs/latest/avro_rs/schema_compatibility/index.html: mod avro_rs::schema_compatibility - schema_compatibility\n\u27e833\u27e9 https://docs.rs/avro-rs/latest/avro_rs/types/index.html: mod avro_rs::types - types\n\u27e834\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#structs: \u00a7\n\u27e835\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Days.html: struct avro_rs::Days - Days\n\u27e836\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Decimal.html: struct avro_rs::Decimal - Decimal\n\u27e837\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Duration.html: struct avro_rs::Duration - Duration\n\u27e838\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Millis.html: struct avro_rs::Millis - Millis\n\u27e839\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Months.html: struct avro_rs::Months - Months\n\u27e840\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Reader.html: struct avro_rs::Reader - Reader\n\u27e841\u27e9 https://docs.rs/avro-rs/latest/avro_rs/struct.Writer.html: struct avro_rs::Writer - Writer\n\u27e842\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Codec.html: enum avro_rs::Codec - Codec\n\u27e844\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.DeError.html: enum avro_rs::DeError - DeError\n\u27e845\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.Error.html: enum avro_rs::Error - Error\n\u27e846\u27e9 https://docs.rs/avro-rs/latest/avro_rs/enum.SerError.html: enum avro_rs::SerError - SerError\n\u27e847\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_avro_datum.html: fn avro_rs::from_avro_datum - from_avro_datum\n\u27e849\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.from_value.html: fn avro_rs::from_value - from_value\n\u27e850\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.max_allocation_bytes.html: fn avro_rs::max_allocation_bytes - max_allocation_bytes\n\u27e851\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_avro_datum.html: fn avro_rs::to_avro_datum - to_avro_datum\n\u27e852\u27e9 https://docs.rs/avro-rs/latest/avro_rs/fn.to_value.html: fn avro_rs::to_value - to_value\n\u27e853\u27e9 https://docs.rs/avro-rs/latest/avro_rs/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/avro-rs/latest/avro_rs/type.AvroResult.html: type avro_rs::AvroResult - AvroResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `avro-rs` crate provides tools for working with Apache Avro, a compact, fast, and schema-based data serialization system, in Rust. It supports defining schemas in JSON or programmatically, serializing and deserializing data using Avro-specific types or Serde-compatible Rust types, and compressing data with codecs like Snappy or Deflate. The library offers high-level interfaces for schema validation, data writing, and reading, along with low-level encoding options for advanced use cases.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Schema Handling  \n\u2705 Factual: The `avro-rs` crate allows users to define Avro schemas programmatically in Rust or parse them directly from JSON strings, ensuring compatibility with the Avro specification.  \n\u274c Counterfactual: The `avro-rs` crate only supports defining schemas programmatically in Rust and does not support parsing schemas from JSON strings.  \n\n---\n\n### Pair 2: Data Serialization  \n\u2705 Factual: The `avro-rs` crate provides a high-level `Writer` interface for serializing data into Avro format, which includes schema validation during the serialization process.  \n\u274c Counterfactual: The `avro-rs` crate does not validate data against the schema during serialization, leaving users responsible for ensuring schema compliance manually.  \n\n---\n\n### Pair 3: Codec Support  \n\u2705 Factual: The `avro-rs` crate supports optional compression using the Snappy codec, which can be enabled via Cargo features.  \n\u274c Counterfactual: The `avro-rs` crate supports compression using the Snappy codec by default, without requiring users to enable it as a feature in their Cargo.toml.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-84ae39b3-f4a15268-1751259430",
      "timestamp": "2025-06-30T04:57:10.083982+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]