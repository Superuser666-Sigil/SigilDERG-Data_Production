[
  {
    "execution_id": "exec-81db9b10-5190f954-1751264748",
    "timestamp": "2025-06-30T06:25:48.929072+00:00",
    "sacred_chain": {
      "input_data": "k256",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'k256' -> 'k256'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "k256",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/k256",
            "title": "k256 v0.13.4",
            "content": {
              "raw_markdown": "#  k256 v0.13.4\nsecp256k1 elliptic curve library written in pure Rust with support for ECDSA signing/verification/public-key recovery, Taproot Schnorr signatures (BIP340), Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary protocols \n  * [ #bitcoin ](https://crates.io/keywords/bitcoin)\n  * [ #crypto ](https://crates.io/keywords/crypto)\n  * [ #ecc ](https://crates.io/keywords/ecc)\n  * [ #ethereum ](https://crates.io/keywords/ethereum)\n  * [ #secp256k1 ](https://crates.io/keywords/secp256k1)\n\n\n  * [ Readme ](https://crates.io/crates/k256)\n  * [ 67 Versions ](https://crates.io/crates/k256/versions)\n  * [ Dependencies ](https://crates.io/crates/k256/dependencies)\n  * [ Dependents ](https://crates.io/crates/k256/reverse_dependencies)\n\n\n## Metadata\n9 months ago \nv1.65.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n91.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add k256\nOr add the following line to your Cargo.toml:\nk256 = \"0.13.4\"\n## Homepage\n[ github.com/RustCrypto/elliptic-curves/tree/master/k256 ](https://github.com/RustCrypto/elliptic-curves/tree/master/k256)\n## Documentation\n[ docs.rs/k256 ](https://docs.rs/k256)\n## Repository\n[ github.com/RustCrypto/elliptic-curves ](https://github.com/RustCrypto/elliptic-curves)\n## Owners\n## Categories\n  * [Cryptography](https://crates.io/categories/cryptography)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Cryptocurrencies](https://crates.io/categories/cryptography::cryptocurrencies)\n\n\n[ Report crate ](https://crates.io/support?crate=k256&inquire=crate-violation)\n### Stats Overview\n29,418,943 Downloads all time\n67 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  k256 v0.13.4\nsecp256k1 elliptic curve library written in pure Rust with support for ECDSA signing/verification/public-key recovery, Taproot Schnorr signatures (BIP340), Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary protocols \n  *  #bitcoin \u27e81\u27e9\n  *  #crypto \u27e82\u27e9\n  *  #ecc \u27e83\u27e9\n  *  #ethereum \u27e84\u27e9\n  *  #secp256k1 \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  67 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n9 months ago \nv1.65.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n91.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add k256\nOr add the following line to your Cargo.toml:\nk256 = \"0.13.4\"\n## Homepage\n github.com/RustCrypto/elliptic-curves/tree/master/k256 \u27e812\u27e9\n## Documentation\n docs.rs/k256 \u27e813\u27e9\n## Repository\n github.com/RustCrypto/elliptic-curves \u27e814\u27e9\n## Owners\n## Categories\n  * Cryptography\u27e815\u27e9\n  * No standard library\u27e816\u27e9\n  * Cryptocurrencies\u27e817\u27e9\n\n\n Report crate \u27e818\u27e9\n### Stats Overview\n29,418,943 Downloads all time\n67 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/bitcoin:  #bitcoin \n\u27e82\u27e9 https://crates.io/keywords/crypto:  #crypto \n\u27e83\u27e9 https://crates.io/keywords/ecc:  #ecc \n\u27e84\u27e9 https://crates.io/keywords/ethereum:  #ethereum \n\u27e85\u27e9 https://crates.io/keywords/secp256k1:  #secp256k1 \n\u27e86\u27e9 https://crates.io/crates/k256:  Readme \n\u27e87\u27e9 https://crates.io/crates/k256/versions:  67 Versions \n\u27e88\u27e9 https://crates.io/crates/k256/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/k256/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://github.com/RustCrypto/elliptic-curves/tree/master/k256:  github.com/RustCrypto/elliptic-curves/tree/master/k256 \n\u27e813\u27e9 https://docs.rs/k256:  docs.rs/k256 \n\u27e814\u27e9 https://github.com/RustCrypto/elliptic-curves:  github.com/RustCrypto/elliptic-curves \n\u27e815\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e816\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e817\u27e9 https://crates.io/categories/cryptography::cryptocurrencies: Cryptocurrencies\n\u27e818\u27e9 https://crates.io/support?crate=k256&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1914,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118538.4810405"
          },
          "docs_rs": {
            "url": "https://docs.rs/k256",
            "title": "Crate k256Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\n[Settings](https://docs.rs/k256/latest/settings.html)\n[Help](https://docs.rs/k256/latest/help.html)\nSummary[Source](https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159)\nExpand description\n## [\u00a7](https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve)[RustCrypto](https://github.com/RustCrypto/): secp256k1 (K-256) elliptic curve\n[![crate](https://buildstats.info/crate/k256)](https://crates.io/crates/k256) [![Docs](https://docs.rs/k256/badge.svg)](https://docs.rs/k256/) [![Build Status](https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) (a.k.a. K-256) elliptic curve library written in pure Rust with support for [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) signing/verification/public-key recovery, Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the [`elliptic-curve`](https://github.com/RustCrypto/traits/tree/master/elliptic-curve) crate.\nOptionally includes a secp256k1 [`arithmetic`](https://docs.rs/k256/latest/k256/arithmetic/index.html) feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the [`group`](https://github.com/zkcrypto/group) crate which can be used to generically construct group-based protocols.\n[Documentation](https://docs.rs/k256/)\n### [\u00a7](https://docs.rs/k256/latest/k256/#security-notes)Security Notes\nThis crate has been [audited by NCC Group](https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/), which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank [Entropy](https://entropy.xyz/) for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### [\u00a7](https://docs.rs/k256/latest/k256/#supported-algorithms)Supported Algorithms\n  * [Elliptic Curve Diffie-Hellman (ECDH)](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman): gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm): gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying [low-S normalization (BIP 0062)](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki) as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) (as defined in [BIP0340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#about-secp256k1-k-256)About secp256k1 (K-256)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm). Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### [\u00a7](https://docs.rs/k256/latest/k256/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/k256/latest/k256/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#license)License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/k256/latest/k256/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/k256/latest/k256/#serde-support)`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * [`AffinePoint`](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")\n  * [`Scalar`](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")\n  * [`ecdsa::VerifyingKey`](https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html \"type k256::ecdsa::VerifyingKey\")\n\n\nPlease see type-specific documentation for more information.\n## Re-exports[\u00a7](https://docs.rs/k256/latest/k256/#reexports)\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules[\u00a7](https://docs.rs/k256/latest/k256/#modules)\n\n[ecdh](https://docs.rs/k256/latest/k256/ecdh/index.html \"mod k256::ecdh\")`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\n[ecdsa](https://docs.rs/k256/latest/k256/ecdsa/index.html \"mod k256::ecdsa\")`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\n[schnorr](https://docs.rs/k256/latest/k256/schnorr/index.html \"mod k256::schnorr\")`schnorr`\n    Taproot Schnorr signatures as defined in [BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n## Structs[\u00a7](https://docs.rs/k256/latest/k256/#structs)\n\n[AffinePoint](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\n[ProjectivePoint](https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html \"struct k256::ProjectivePoint\")`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\n[Scalar](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\n[Secp256k1](https://docs.rs/k256/latest/k256/struct.Secp256k1.html \"struct k256::Secp256k1\")\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases[\u00a7](https://docs.rs/k256/latest/k256/#types)\n\n[CompressedPoint](https://docs.rs/k256/latest/k256/type.CompressedPoint.html \"type k256::CompressedPoint\")\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\n[EncodedPoint](https://docs.rs/k256/latest/k256/type.EncodedPoint.html \"type k256::EncodedPoint\")\n    SEC1-encoded secp256k1 (K-256) curve point.\n\n[FieldBytes](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\")\n    secp256k1 (K-256) field element serialized as bytes.\n\n[NonZeroScalar](https://docs.rs/k256/latest/k256/type.NonZeroScalar.html \"type k256::NonZeroScalar\")`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\n[PublicKey](https://docs.rs/k256/latest/k256/type.PublicKey.html \"type k256::PublicKey\")`arithmetic`\n    secp256k1 (K-256) public key.\n\n[SecretKey](https://docs.rs/k256/latest/k256/type.SecretKey.html \"type k256::SecretKey\")\n    secp256k1 (K-256) secret key.\n\n[U256](https://docs.rs/k256/latest/k256/type.U256.html \"type k256::U256\")\n    256-bit unsigned big integer.\n\n[WideBytes](https://docs.rs/k256/latest/k256/type.WideBytes.html \"type k256::WideBytes\")\n    Bytes used by a wide reduction: twice the width of [`FieldBytes`](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\").\n",
              "markdown_with_citations": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: secp256k1 (K-256) elliptic curve\n![crate\u27e86\u27e9](https://crates.io/crates/k256) ![Docs\u27e87\u27e9](https://docs.rs/k256/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed\u27e89\u27e9] ![Rust Version\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nsecp256k1\u27e812\u27e9 (a.k.a. K-256) elliptic curve library written in pure Rust with support for ECDSA\u27e813\u27e9 signing/verification/public-key recovery, Taproot Schnorr signatures\u27e814\u27e9 as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the `elliptic-curve`\u27e815\u27e9 crate.\nOptionally includes a secp256k1 `arithmetic`\u27e816\u27e9 feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the `group`\u27e817\u27e9 crate which can be used to generically construct group-based protocols.\nDocumentation\u27e818\u27e9\n### \u00a7\u27e819\u27e9Security Notes\nThis crate has been audited by NCC Group\u27e820\u27e9, which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank Entropy\u27e821\u27e9 for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### \u00a7\u27e822\u27e9Supported Algorithms\n  * Elliptic Curve Diffie-Hellman (ECDH)\u27e823\u27e9: gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9: gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying low-S normalization (BIP 0062)\u27e824\u27e9 as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot Schnorr signatures\u27e814\u27e9 (as defined in BIP0340\u27e825\u27e9): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### \u00a7\u27e826\u27e9About secp256k1 (K-256)\nsecp256k1\u27e812\u27e9 is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9. Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### \u00a7\u27e827\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e828\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e829\u27e9License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e830\u27e9\n  * MIT license\u27e831\u27e9\n\n\nat your option.\n#### \u00a7\u27e832\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e833\u27e9`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * `AffinePoint`\u27e834\u27e9\n  * `Scalar`\u27e835\u27e9\n  * `ecdsa::VerifyingKey`\u27e836\u27e9\n\n\nPlease see type-specific documentation for more information.\n## Re-exports\u00a7\u27e837\u27e9\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules\u00a7\u27e838\u27e9\n\necdh\u27e839\u27e9`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\necdsa\u27e840\u27e9`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\nschnorr\u27e841\u27e9`schnorr`\n    Taproot Schnorr signatures as defined in BIP340\u27e825\u27e9.\n## Structs\u00a7\u27e842\u27e9\n\nAffinePoint\u27e834\u27e9`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\nProjectivePoint\u27e843\u27e9`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\nScalar\u27e835\u27e9`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\nSecp256k1\u27e844\u27e9\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases\u00a7\u27e845\u27e9\n\nCompressedPoint\u27e846\u27e9\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\nEncodedPoint\u27e847\u27e9\n    SEC1-encoded secp256k1 (K-256) curve point.\n\nFieldBytes\u27e848\u27e9\n    secp256k1 (K-256) field element serialized as bytes.\n\nNonZeroScalar\u27e849\u27e9`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\nPublicKey\u27e850\u27e9`arithmetic`\n    secp256k1 (K-256) public key.\n\nSecretKey\u27e851\u27e9\n    secp256k1 (K-256) secret key.\n\nU256\u27e852\u27e9\n    256-bit unsigned big integer.\n\nWideBytes\u27e853\u27e9\n    Bytes used by a wide reduction: twice the width of `FieldBytes`\u27e848\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/k256/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/k256/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159: Source\n\u27e84\u27e9 https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve: \u00a7\n\u27e85\u27e9 https://github.com/RustCrypto/: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/k256: ![crate\n\u27e87\u27e9 https://docs.rs/k256/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://en.bitcoin.it/wiki/Secp256k1: secp256k1\n\u27e813\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: ECDSA\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Schnorr_signature: Schnorr signatures\n\u27e815\u27e9 https://github.com/RustCrypto/traits/tree/master/elliptic-curve: `elliptic-curve`\n\u27e816\u27e9 https://docs.rs/k256/latest/k256/arithmetic/index.html: `arithmetic`\n\u27e817\u27e9 https://github.com/zkcrypto/group: `group`\n\u27e818\u27e9 https://docs.rs/k256/: Documentation\n\u27e819\u27e9 https://docs.rs/k256/latest/k256/#security-notes: \u00a7\n\u27e820\u27e9 https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/: audited by NCC Group\n\u27e821\u27e9 https://entropy.xyz/: Entropy\n\u27e822\u27e9 https://docs.rs/k256/latest/k256/#supported-algorithms: \u00a7\n\u27e823\u27e9 https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman: Elliptic Curve Diffie-Hellman (ECDH)\n\u27e824\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki: low-S normalization (BIP 0062)\n\u27e825\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki: BIP0340\n\u27e826\u27e9 https://docs.rs/k256/latest/k256/#about-secp256k1-k-256: \u00a7\n\u27e827\u27e9 https://docs.rs/k256/latest/k256/#minimum-supported-rust-version: \u00a7\n\u27e828\u27e9 https://docs.rs/k256/latest/k256/#semver-policy: \u00a7\n\u27e829\u27e9 https://docs.rs/k256/latest/k256/#license: \u00a7\n\u27e830\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e831\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e832\u27e9 https://docs.rs/k256/latest/k256/#contribution: \u00a7\n\u27e833\u27e9 https://docs.rs/k256/latest/k256/#serde-support: \u00a7\n\u27e834\u27e9 https://docs.rs/k256/latest/k256/struct.AffinePoint.html: struct k256::AffinePoint - `AffinePoint`\n\u27e835\u27e9 https://docs.rs/k256/latest/k256/struct.Scalar.html: struct k256::Scalar - `Scalar`\n\u27e836\u27e9 https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html: type k256::ecdsa::VerifyingKey - `ecdsa::VerifyingKey`\n\u27e837\u27e9 https://docs.rs/k256/latest/k256/#reexports: \u00a7\n\u27e838\u27e9 https://docs.rs/k256/latest/k256/#modules: \u00a7\n\u27e839\u27e9 https://docs.rs/k256/latest/k256/ecdh/index.html: mod k256::ecdh - ecdh\n\u27e840\u27e9 https://docs.rs/k256/latest/k256/ecdsa/index.html: mod k256::ecdsa - ecdsa\n\u27e841\u27e9 https://docs.rs/k256/latest/k256/schnorr/index.html: mod k256::schnorr - schnorr\n\u27e842\u27e9 https://docs.rs/k256/latest/k256/#structs: \u00a7\n\u27e843\u27e9 https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html: struct k256::ProjectivePoint - ProjectivePoint\n\u27e844\u27e9 https://docs.rs/k256/latest/k256/struct.Secp256k1.html: struct k256::Secp256k1 - Secp256k1\n\u27e845\u27e9 https://docs.rs/k256/latest/k256/#types: \u00a7\n\u27e846\u27e9 https://docs.rs/k256/latest/k256/type.CompressedPoint.html: type k256::CompressedPoint - CompressedPoint\n\u27e847\u27e9 https://docs.rs/k256/latest/k256/type.EncodedPoint.html: type k256::EncodedPoint - EncodedPoint\n\u27e848\u27e9 https://docs.rs/k256/latest/k256/type.FieldBytes.html: type k256::FieldBytes - FieldBytes\n\u27e849\u27e9 https://docs.rs/k256/latest/k256/type.NonZeroScalar.html: type k256::NonZeroScalar - NonZeroScalar\n\u27e850\u27e9 https://docs.rs/k256/latest/k256/type.PublicKey.html: type k256::PublicKey - PublicKey\n\u27e851\u27e9 https://docs.rs/k256/latest/k256/type.SecretKey.html: type k256::SecretKey - SecretKey\n\u27e852\u27e9 https://docs.rs/k256/latest/k256/type.U256.html: type k256::U256 - U256\n\u27e853\u27e9 https://docs.rs/k256/latest/k256/type.WideBytes.html: type k256::WideBytes - WideBytes\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9483,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118539.4855873"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/k256",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [61 releases](https://lib.rs/crates/k256/versions)\nUses new Rust 2024\nnew 0.14.0-pre.8 |  Jun 21, 2025   \n---|---  \n0.14.0-pre.4 |  May 31, 2025   \n0.14.0-pre.2 |  Sep 22, 2024   \n0.14.0-pre.0 |  Jun 5, 2024   \n0.0.0 |  ~~Dec 5, 2019~~  \n#**1** in [#bitcoin](https://lib.rs/keywords/bitcoin)\nDownload history 338206/week @ 2025-03-07 350842/week @ 2025-03-14 328238/week @ 2025-03-21 338791/week @ 2025-03-28 366064/week @ 2025-04-04 345563/week @ 2025-04-11 344092/week @ 2025-04-18 350105/week @ 2025-04-25 334760/week @ 2025-05-02 358705/week @ 2025-05-09 401097/week @ 2025-05-16 314067/week @ 2025-05-23 311556/week @ 2025-05-30 350863/week @ 2025-06-06 381574/week @ 2025-06-13 411452/week @ 2025-06-20\n**1,509,054** downloads per month Used in [**3,354** crates (323 directly)](https://lib.rs/crates/k256/rev)\n**Apache-2.0 OR MIT**\n330KB  6.5K  SLoC\n# [RustCrypto](https://github.com/RustCrypto/): secp256k1 (K-256) elliptic curve\n[![crate](https://img.shields.io/crates/v/k256?logo=rust)](https://crates.io/crates/k256) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/k256/badge.svg)](https://docs.rs/k256/) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/elliptic-curves/actions/workflows/k256.yml/badge.svg)](https://github.com/RustCrypto/elliptic-curves/actions/workflows/k256.yml) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.85+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) (a.k.a. K-256) elliptic curve library written in pure Rust with support for [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) signing/verification/public-key recovery, Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the [``elliptic-curve``](https://github.com/RustCrypto/traits/tree/master/elliptic-curve) crate.\nOptionally includes a secp256k1 [``arithmetic``](https://docs.rs/k256/latest/k256/arithmetic/index.html) feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the [``group``](https://github.com/zkcrypto/group) crate which can be used to generically construct group-based protocols.\n[Documentation](https://docs.rs/k256/)\n## Security Notes\nThis crate has been [audited by NCC Group](https://www.nccgroup.com/us/research-blog/public-report-entropyrust-cryptography-review/), which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank [Entropy](https://entropy.xyz/) for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the ``subtle`` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n## Supported Algorithms\n  * [Elliptic Curve Diffie-Hellman (ECDH)](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman): gated under the ``ecdh`` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm): gated under the ``ecdsa`` feature. Support for ECDSA/secp256k1 signing and verification, applying [low-S normalization (BIP 0062)](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki) as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) (as defined in [BIP0340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n## About secp256k1 (K-256)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) is a Koblitz curve commonly used in cryptocurrency applications. The \"K-256\" name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as ``secp256k1`` by Certicom's SECG in \"SEC 2: Recommended Elliptic Curve Domain Parameters\":\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm). Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n## License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~2.6\u20134MB  ~82K SLoC\n  * [cfg-if](https://lib.rs/crates/cfg-if \"1.0\")\n  * [alloc](https://lib.rs/crates/k256/features#feature-alloc \"default feature\") [digest](https://lib.rs/crates/k256/features#feature-digest \"default feature\") [ecdsa](https://lib.rs/crates/k256/features#feature-ecdsa \"default feature\") [pem?](https://lib.rs/crates/k256/features#feature-pem \"optional feature\") [pkcs8](https://lib.rs/crates/k256/features#feature-pkcs8 \"default feature\") [serde?](https://lib.rs/crates/k256/features#feature-serde \"optional feature\") [std](https://lib.rs/crates/k256/features#feature-std \"default feature\") [ecdsa](https://lib.rs/crates/ecdsa \"renamed ecdsa-core, new\") 0.17.0-rc.3[+der](https://lib.rs/crates/ecdsa/features#feature-der)\n  * [serde?](https://lib.rs/crates/k256/features#feature-serde \"optional feature\") [serdect](https://lib.rs/crates/serdect \"new\") 0.3\n  * [critical-section?](https://lib.rs/crates/k256/features#feature-critical-section \"optional feature\") [std?](https://lib.rs/crates/k256/features#feature-std \"optional feature\") [once_cell](https://lib.rs/crates/once_cell \"1.21\")\n  * [elliptic-curve](https://lib.rs/crates/elliptic-curve \"new\") 0.14.0-rc.7[+sec1](https://lib.rs/crates/elliptic-curve/features#feature-sec1)\n  * [test-vectors?](https://lib.rs/crates/k256/features#feature-test-vectors \"optional feature\") [hex-literal](https://lib.rs/crates/hex-literal \"new\") 1.0\n  * [sha256](https://lib.rs/crates/k256/features#feature-sha256 \"default feature\") [sha2](https://lib.rs/crates/sha2 \"new\") 0.11.0-rc.0\n  * [schnorr](https://lib.rs/crates/k256/features#feature-schnorr \"default feature\") [signature](https://lib.rs/crates/signature \"new\") 3.0.0-rc.1\n\n\n  * dev  [blobby](https://lib.rs/crates/blobby \"0.3\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"new\") 0.6\n  * dev  [hex](https://lib.rs/crates/hex \"0.4.3\")\n  * dev  [num-bigint](https://lib.rs/crates/num-bigint \"0.4\")\n  * dev  [num-traits](https://lib.rs/crates/num-traits \"0.2\")\n  * dev  [proptest](https://lib.rs/crates/proptest \"1.7\")\n  * dev  [rand_core](https://lib.rs/crates/rand_core \"new\") 0.9[+os_rng](https://lib.rs/crates/rand_core/features#feature-os_rng)\n  * dev  [sha3](https://lib.rs/crates/sha3 \"new\") 0.11.0-rc.0\n\n\n#### [Other features](https://lib.rs/crates/k256/features)\n  * [arithmetic](https://lib.rs/crates/k256/features#feature-arithmetic)\n  * [bits](https://lib.rs/crates/k256/features#feature-bits)\n  * [ecdh](https://lib.rs/crates/k256/features#feature-ecdh)\n  * [expose-field](https://lib.rs/crates/k256/features#feature-expose-field)\n  * [hash2curve](https://lib.rs/crates/k256/features#feature-hash2curve)\n  * [jwk](https://lib.rs/crates/k256/features#feature-jwk)\n  * [precomputed-tables](https://lib.rs/crates/k256/features#feature-precomputed-tables)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  61 releases\u27e81\u27e9\nUses new Rust 2024\nnew 0.14.0-pre.8 |  Jun 21, 2025   \n---|---  \n0.14.0-pre.4 |  May 31, 2025   \n0.14.0-pre.2 |  Sep 22, 2024   \n0.14.0-pre.0 |  Jun 5, 2024   \n0.0.0 |  ~~Dec 5, 2019~~  \n#**1** in #bitcoin\u27e82\u27e9\nDownload history 338206/week @ 2025-03-07 350842/week @ 2025-03-14 328238/week @ 2025-03-21 338791/week @ 2025-03-28 366064/week @ 2025-04-04 345563/week @ 2025-04-11 344092/week @ 2025-04-18 350105/week @ 2025-04-25 334760/week @ 2025-05-02 358705/week @ 2025-05-09 401097/week @ 2025-05-16 314067/week @ 2025-05-23 311556/week @ 2025-05-30 350863/week @ 2025-06-06 381574/week @ 2025-06-13 411452/week @ 2025-06-20\n**1,509,054** downloads per month Used in **3,354** crates (323 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n330KB  6.5K  SLoC\n# RustCrypto\u27e84\u27e9: secp256k1 (K-256) elliptic curve\n![crate\u27e85\u27e9](https://crates.io/crates/k256) ![Docs\u27e86\u27e9](https://docs.rs/k256/) ![Build Status\u27e87\u27e9](https://github.com/RustCrypto/elliptic-curves/actions/workflows/k256.yml) ![Apache2/MIT licensed\u27e88\u27e9] ![Rust Version\u27e89\u27e9] ![Project Chat\u27e810\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nsecp256k1\u27e811\u27e9 (a.k.a. K-256) elliptic curve library written in pure Rust with support for ECDSA\u27e812\u27e9 signing/verification/public-key recovery, Taproot Schnorr signatures\u27e813\u27e9 as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the ``elliptic-curve``\u27e814\u27e9 crate.\nOptionally includes a secp256k1 ``arithmetic``\u27e815\u27e9 feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the ``group``\u27e816\u27e9 crate which can be used to generically construct group-based protocols.\nDocumentation\u27e817\u27e9\n## Security Notes\nThis crate has been audited by NCC Group\u27e818\u27e9, which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank Entropy\u27e819\u27e9 for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the ``subtle`` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n## Supported Algorithms\n  * Elliptic Curve Diffie-Hellman (ECDH)\u27e820\u27e9: gated under the ``ecdh`` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e812\u27e9: gated under the ``ecdsa`` feature. Support for ECDSA/secp256k1 signing and verification, applying low-S normalization (BIP 0062)\u27e821\u27e9 as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot Schnorr signatures\u27e813\u27e9 (as defined in BIP0340\u27e822\u27e9): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n## About secp256k1 (K-256)\nsecp256k1\u27e811\u27e9 is a Koblitz curve commonly used in cryptocurrency applications. The \"K-256\" name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as ``secp256k1`` by Certicom's SECG in \"SEC 2: Recommended Elliptic Curve Domain Parameters\":\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e812\u27e9. Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n## License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e823\u27e9\n  * MIT license\u27e824\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~2.6\u20134MB  ~82K SLoC\n  * cfg-if\u27e825\u27e9\n  * alloc\u27e826\u27e9 digest\u27e827\u27e9 ecdsa\u27e828\u27e9 pem?\u27e829\u27e9 pkcs8\u27e830\u27e9 serde?\u27e831\u27e9 std\u27e832\u27e9 ecdsa\u27e833\u27e9 0.17.0-rc.3+der\u27e834\u27e9\n  * serde?\u27e831\u27e9 serdect\u27e835\u27e9 0.3\n  * critical-section?\u27e836\u27e9 std?\u27e832\u27e9 once_cell\u27e837\u27e9\n  * elliptic-curve\u27e838\u27e9 0.14.0-rc.7+sec1\u27e839\u27e9\n  * test-vectors?\u27e840\u27e9 hex-literal\u27e841\u27e9 1.0\n  * sha256\u27e842\u27e9 sha2\u27e843\u27e9 0.11.0-rc.0\n  * schnorr\u27e844\u27e9 signature\u27e845\u27e9 3.0.0-rc.1\n\n\n  * dev  blobby\u27e846\u27e9\n  * dev  criterion\u27e847\u27e9 0.6\n  * dev  hex\u27e848\u27e9\n  * dev  num-bigint\u27e849\u27e9\n  * dev  num-traits\u27e850\u27e9\n  * dev  proptest\u27e851\u27e9\n  * dev  rand_core\u27e852\u27e9 0.9+os_rng\u27e853\u27e9\n  * dev  sha3\u27e854\u27e9 0.11.0-rc.0\n\n\n#### Other features\u27e855\u27e9\n  * arithmetic\u27e856\u27e9\n  * bits\u27e857\u27e9\n  * ecdh\u27e858\u27e9\n  * expose-field\u27e859\u27e9\n  * hash2curve\u27e860\u27e9\n  * jwk\u27e861\u27e9\n  * precomputed-tables\u27e862\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/k256/versions: 61 releases\n\u27e82\u27e9 https://lib.rs/keywords/bitcoin: #bitcoin\n\u27e83\u27e9 https://lib.rs/crates/k256/rev: **3,354** crates (323 directly)\n\u27e84\u27e9 https://github.com/RustCrypto/: RustCrypto\n\u27e85\u27e9 https://img.shields.io/crates/v/k256?logo=rust: ![crate\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/k256/badge.svg: ![Docs\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/elliptic-curves/actions/workflows/k256.yml/badge.svg: ![Build Status\n\u27e88\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.85+-blue.svg: Rust Version\n\u27e810\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e811\u27e9 https://en.bitcoin.it/wiki/Secp256k1: secp256k1\n\u27e812\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: ECDSA\n\u27e813\u27e9 https://en.wikipedia.org/wiki/Schnorr_signature: Schnorr signatures\n\u27e814\u27e9 https://github.com/RustCrypto/traits/tree/master/elliptic-curve: ``elliptic-curve``\n\u27e815\u27e9 https://docs.rs/k256/latest/k256/arithmetic/index.html: ``arithmetic``\n\u27e816\u27e9 https://github.com/zkcrypto/group: ``group``\n\u27e817\u27e9 https://docs.rs/k256/: Documentation\n\u27e818\u27e9 https://www.nccgroup.com/us/research-blog/public-report-entropyrust-cryptography-review/: audited by NCC Group\n\u27e819\u27e9 https://entropy.xyz/: Entropy\n\u27e820\u27e9 https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman: Elliptic Curve Diffie-Hellman (ECDH)\n\u27e821\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki: low-S normalization (BIP 0062)\n\u27e822\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki: BIP0340\n\u27e823\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e824\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e825\u27e9 https://lib.rs/crates/cfg-if: 1.0 - cfg-if\n\u27e826\u27e9 https://lib.rs/crates/k256/features#feature-alloc: default feature - alloc\n\u27e827\u27e9 https://lib.rs/crates/k256/features#feature-digest: default feature - digest\n\u27e828\u27e9 https://lib.rs/crates/k256/features#feature-ecdsa: default feature - ecdsa\n\u27e829\u27e9 https://lib.rs/crates/k256/features#feature-pem: optional feature - pem?\n\u27e830\u27e9 https://lib.rs/crates/k256/features#feature-pkcs8: default feature - pkcs8\n\u27e831\u27e9 https://lib.rs/crates/k256/features#feature-serde: optional feature - serde?\n\u27e832\u27e9 https://lib.rs/crates/k256/features#feature-std: default feature - std\n\u27e833\u27e9 https://lib.rs/crates/ecdsa: renamed ecdsa-core, new - ecdsa\n\u27e834\u27e9 https://lib.rs/crates/ecdsa/features#feature-der: +der\n\u27e835\u27e9 https://lib.rs/crates/serdect: new - serdect\n\u27e836\u27e9 https://lib.rs/crates/k256/features#feature-critical-section: optional feature - critical-section?\n\u27e837\u27e9 https://lib.rs/crates/once_cell: 1.21 - once_cell\n\u27e838\u27e9 https://lib.rs/crates/elliptic-curve: new - elliptic-curve\n\u27e839\u27e9 https://lib.rs/crates/elliptic-curve/features#feature-sec1: +sec1\n\u27e840\u27e9 https://lib.rs/crates/k256/features#feature-test-vectors: optional feature - test-vectors?\n\u27e841\u27e9 https://lib.rs/crates/hex-literal: new - hex-literal\n\u27e842\u27e9 https://lib.rs/crates/k256/features#feature-sha256: default feature - sha256\n\u27e843\u27e9 https://lib.rs/crates/sha2: new - sha2\n\u27e844\u27e9 https://lib.rs/crates/k256/features#feature-schnorr: default feature - schnorr\n\u27e845\u27e9 https://lib.rs/crates/signature: new - signature\n\u27e846\u27e9 https://lib.rs/crates/blobby: 0.3 - blobby\n\u27e847\u27e9 https://lib.rs/crates/criterion: new - criterion\n\u27e848\u27e9 https://lib.rs/crates/hex: 0.4.3 - hex\n\u27e849\u27e9 https://lib.rs/crates/num-bigint: 0.4 - num-bigint\n\u27e850\u27e9 https://lib.rs/crates/num-traits: 0.2 - num-traits\n\u27e851\u27e9 https://lib.rs/crates/proptest: 1.7 - proptest\n\u27e852\u27e9 https://lib.rs/crates/rand_core: new - rand_core\n\u27e853\u27e9 https://lib.rs/crates/rand_core/features#feature-os_rng: +os_rng\n\u27e854\u27e9 https://lib.rs/crates/sha3: new - sha3\n\u27e855\u27e9 https://lib.rs/crates/k256/features: Other features\n\u27e856\u27e9 https://lib.rs/crates/k256/features#feature-arithmetic: arithmetic\n\u27e857\u27e9 https://lib.rs/crates/k256/features#feature-bits: bits\n\u27e858\u27e9 https://lib.rs/crates/k256/features#feature-ecdh: ecdh\n\u27e859\u27e9 https://lib.rs/crates/k256/features#feature-expose-field: expose-field\n\u27e860\u27e9 https://lib.rs/crates/k256/features#feature-hash2curve: hash2curve\n\u27e861\u27e9 https://lib.rs/crates/k256/features#feature-jwk: jwk\n\u27e862\u27e9 https://lib.rs/crates/k256/features#feature-precomputed-tables: precomputed-tables\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8642,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118540.0482426"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base16ct@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base16ct",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libbase16ct-0e27bed9a89ffef9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libzeroize-aea455bb79dc51b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsubtle-1303fe025447f8db.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\librand_core-ae1e97f9d2d01190.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#const-oid@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "const_oid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.10.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libconst_oid-496858417a634679.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ff@0.14.0-pre.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.14.0-pre.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ff",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.14.0-pre.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libff-3e942434f6a8bdb1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#group@0.14.0-pre.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.14.0-pre.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "group",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.14.0-pre.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libgroup-f0884a6660ac238a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-0320d5188ea002e4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-0320d5188ea002e4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-3b2aaa0bf7fca97a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libnum_traits-7d1170ab924bf8ed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#der@0.8.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.8.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "der",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.8.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "oid",
                "std",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libder-e509d8d10eb071de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libhybrid_array-f51f1546e60c62f9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spki@0.8.0-rc.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spki-0.8.0-rc.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spki",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spki-0.8.0-rc.2\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libspki-88d73560b3cb77b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libblock_buffer-4ecbffe727717387.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkcs8@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkcs8-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkcs8",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkcs8-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libpkcs8-0a9006344ba8d6c7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sec1@0.8.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.8.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sec1",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.8.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "der",
                "point",
                "std",
                "subtle",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsec1-5a002bd3d81496f1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcrypto_common-b4bcbe7a3d06c09b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "const-oid",
                "default",
                "mac",
                "oid",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libdigest-53a0a7570231d870.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hmac@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hmac",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libhmac-d99533e8296fdfe9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#signature@3.0.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-3.0.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "signature",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-3.0.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsignature-347278aed876e36a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rfc6979@0.5.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.5.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rfc6979",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.5.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\librfc6979-997520f095d7c60d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sha2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sha2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsha2-d17d6dbf004720f6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-bigint@0.7.0-pre.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.7.0-pre.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.7.0-pre.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "hybrid-array",
                "rand_core",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcrypto_bigint-39468667a822a9fe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#elliptic-curve@0.14.0-rc.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.14.0-rc.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "elliptic_curve",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.14.0-rc.7\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "digest",
                "ff",
                "group",
                "pkcs8",
                "sec1",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libelliptic_curve-616fba5b9d1e0561.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ecdsa@0.17.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.17.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ecdsa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.17.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "der",
                "digest",
                "hazmat",
                "pkcs8",
                "rfc6979",
                "signing",
                "spki",
                "std",
                "verifying"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libecdsa-ea9e01534de98fe8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp7dyk1f42/k256-0.14.0-pre.8#k256@0.14.0-pre.8",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "k256",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "default",
                "digest",
                "ecdsa",
                "ecdsa-core",
                "pkcs8",
                "precomputed-tables",
                "schnorr",
                "sha2",
                "sha256",
                "signature",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libk256-dfd939c4277b1ebd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libzeroize-aea455bb79dc51b1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#const-oid@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "const_oid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\const-oid-0.10.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libconst_oid-496858417a634679.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsubtle-1303fe025447f8db.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\librand_core-ae1e97f9d2d01190.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base16ct@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base16ct",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base16ct-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libbase16ct-0e27bed9a89ffef9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-0320d5188ea002e4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-0320d5188ea002e4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#der@0.8.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.8.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "der",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\der-0.8.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "oid",
                "std",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libder-e509d8d10eb071de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ff@0.14.0-pre.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.14.0-pre.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ff",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ff-0.14.0-pre.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libff-3e942434f6a8bdb1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\build\\num-traits-3b2aaa0bf7fca97a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spki@0.8.0-rc.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spki-0.8.0-rc.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spki",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spki-0.8.0-rc.2\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libspki-88d73560b3cb77b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#group@0.14.0-pre.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.14.0-pre.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "group",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\group-0.14.0-pre.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libgroup-f0884a6660ac238a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libhybrid_array-f51f1546e60c62f9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libnum_traits-7d1170ab924bf8ed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkcs8@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkcs8-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkcs8",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkcs8-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libpkcs8-0a9006344ba8d6c7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libblock_buffer-4ecbffe727717387.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcrypto_common-b4bcbe7a3d06c09b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sec1@0.8.0-rc.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.8.0-rc.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sec1",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sec1-0.8.0-rc.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "der",
                "point",
                "std",
                "subtle",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsec1-5a002bd3d81496f1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-bigint@0.7.0-pre.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.7.0-pre.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-bigint-0.7.0-pre.5\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "hybrid-array",
                "rand_core",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libcrypto_bigint-39468667a822a9fe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "const-oid",
                "default",
                "mac",
                "oid",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libdigest-53a0a7570231d870.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hmac@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hmac",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libhmac-d99533e8296fdfe9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#signature@3.0.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-3.0.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "signature",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-3.0.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsignature-347278aed876e36a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#elliptic-curve@0.14.0-rc.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.14.0-rc.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "elliptic_curve",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\elliptic-curve-0.14.0-rc.7\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "digest",
                "ff",
                "group",
                "pkcs8",
                "sec1",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libelliptic_curve-616fba5b9d1e0561.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sha2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sha2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libsha2-d17d6dbf004720f6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rfc6979@0.5.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.5.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rfc6979",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rfc6979-0.5.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\librfc6979-997520f095d7c60d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ecdsa@0.17.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.17.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ecdsa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ecdsa-0.17.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "der",
                "digest",
                "hazmat",
                "pkcs8",
                "rfc6979",
                "signing",
                "spki",
                "std",
                "verifying"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libecdsa-ea9e01534de98fe8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp7dyk1f42/k256-0.14.0-pre.8#k256@0.14.0-pre.8",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "k256",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "arithmetic",
                "default",
                "digest",
                "ecdsa",
                "ecdsa-core",
                "pkcs8",
                "precomputed-tables",
                "schnorr",
                "sha2",
                "sha256",
                "signature",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp7dyk1f42\\k256-0.14.0-pre.8\\target\\debug\\deps\\libk256-37073db84702b6d0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 140
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "k256",
          "version": "0.14.0-pre.8",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\n[Settings](https://docs.rs/k256/latest/settings.html)\n[Help](https://docs.rs/k256/latest/help.html)\nSummary[Source](https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159)\nExpand description\n## [\u00a7](https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve)[RustCrypto](https://github.com/RustCrypto/): secp256k1 (K-256) elliptic curve\n[![crate](https://buildstats.info/crate/k256)](https://crates.io/crates/k256) [![Docs](https://docs.rs/k256/badge.svg)](https://docs.rs/k256/) [![Build Status](https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) (a.k.a. K-256) elliptic curve library written in pure Rust with support for [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) signing/verification/public-key recovery, Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the [`elliptic-curve`](https://github.com/RustCrypto/traits/tree/master/elliptic-curve) crate.\nOptionally includes a secp256k1 [`arithmetic`](https://docs.rs/k256/latest/k256/arithmetic/index.html) feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the [`group`](https://github.com/zkcrypto/group) crate which can be used to generically construct group-based protocols.\n[Documentation](https://docs.rs/k256/)\n### [\u00a7](https://docs.rs/k256/latest/k256/#security-notes)Security Notes\nThis crate has been [audited by NCC Group](https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/), which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank [Entropy](https://entropy.xyz/) for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### [\u00a7](https://docs.rs/k256/latest/k256/#supported-algorithms)Supported Algorithms\n  * [Elliptic Curve Diffie-Hellman (ECDH)](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman): gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm): gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying [low-S normalization (BIP 0062)](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki) as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) (as defined in [BIP0340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#about-secp256k1-k-256)About secp256k1 (K-256)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm). Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### [\u00a7](https://docs.rs/k256/latest/k256/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/k256/latest/k256/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#license)License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/k256/latest/k256/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/k256/latest/k256/#serde-support)`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * [`AffinePoint`](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")\n  * [`Scalar`](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")\n  * [`ecdsa::VerifyingKey`](https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html \"type k256::ecdsa::VerifyingKey\")\n\n\nPlease see type-specific documentation for more information.\n## Re-exports[\u00a7](https://docs.rs/k256/latest/k256/#reexports)\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules[\u00a7](https://docs.rs/k256/latest/k256/#modules)\n\n[ecdh](https://docs.rs/k256/latest/k256/ecdh/index.html \"mod k256::ecdh\")`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\n[ecdsa](https://docs.rs/k256/latest/k256/ecdsa/index.html \"mod k256::ecdsa\")`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\n[schnorr](https://docs.rs/k256/latest/k256/schnorr/index.html \"mod k256::schnorr\")`schnorr`\n    Taproot Schnorr signatures as defined in [BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n## Structs[\u00a7](https://docs.rs/k256/latest/k256/#structs)\n\n[AffinePoint](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\n[ProjectivePoint](https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html \"struct k256::ProjectivePoint\")`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\n[Scalar](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\n[Secp256k1](https://docs.rs/k256/latest/k256/struct.Secp256k1.html \"struct k256::Secp256k1\")\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases[\u00a7](https://docs.rs/k256/latest/k256/#types)\n\n[CompressedPoint](https://docs.rs/k256/latest/k256/type.CompressedPoint.html \"type k256::CompressedPoint\")\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\n[EncodedPoint](https://docs.rs/k256/latest/k256/type.EncodedPoint.html \"type k256::EncodedPoint\")\n    SEC1-encoded secp256k1 (K-256) curve point.\n\n[FieldBytes](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\")\n    secp256k1 (K-256) field element serialized as bytes.\n\n[NonZeroScalar](https://docs.rs/k256/latest/k256/type.NonZeroScalar.html \"type k256::NonZeroScalar\")`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\n[PublicKey](https://docs.rs/k256/latest/k256/type.PublicKey.html \"type k256::PublicKey\")`arithmetic`\n    secp256k1 (K-256) public key.\n\n[SecretKey](https://docs.rs/k256/latest/k256/type.SecretKey.html \"type k256::SecretKey\")\n    secp256k1 (K-256) secret key.\n\n[U256](https://docs.rs/k256/latest/k256/type.U256.html \"type k256::U256\")\n    256-bit unsigned big integer.\n\n[WideBytes](https://docs.rs/k256/latest/k256/type.WideBytes.html \"type k256::WideBytes\")\n    Bytes used by a wide reduction: twice the width of [`FieldBytes`](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\").\n",
            "markdown_with_citations": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: secp256k1 (K-256) elliptic curve\n![crate\u27e86\u27e9](https://crates.io/crates/k256) ![Docs\u27e87\u27e9](https://docs.rs/k256/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed\u27e89\u27e9] ![Rust Version\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nsecp256k1\u27e812\u27e9 (a.k.a. K-256) elliptic curve library written in pure Rust with support for ECDSA\u27e813\u27e9 signing/verification/public-key recovery, Taproot Schnorr signatures\u27e814\u27e9 as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the `elliptic-curve`\u27e815\u27e9 crate.\nOptionally includes a secp256k1 `arithmetic`\u27e816\u27e9 feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the `group`\u27e817\u27e9 crate which can be used to generically construct group-based protocols.\nDocumentation\u27e818\u27e9\n### \u00a7\u27e819\u27e9Security Notes\nThis crate has been audited by NCC Group\u27e820\u27e9, which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank Entropy\u27e821\u27e9 for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### \u00a7\u27e822\u27e9Supported Algorithms\n  * Elliptic Curve Diffie-Hellman (ECDH)\u27e823\u27e9: gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9: gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying low-S normalization (BIP 0062)\u27e824\u27e9 as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot Schnorr signatures\u27e814\u27e9 (as defined in BIP0340\u27e825\u27e9): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### \u00a7\u27e826\u27e9About secp256k1 (K-256)\nsecp256k1\u27e812\u27e9 is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9. Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### \u00a7\u27e827\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e828\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e829\u27e9License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e830\u27e9\n  * MIT license\u27e831\u27e9\n\n\nat your option.\n#### \u00a7\u27e832\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e833\u27e9`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * `AffinePoint`\u27e834\u27e9\n  * `Scalar`\u27e835\u27e9\n  * `ecdsa::VerifyingKey`\u27e836\u27e9\n\n\nPlease see type-specific documentation for more information.\n## Re-exports\u00a7\u27e837\u27e9\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules\u00a7\u27e838\u27e9\n\necdh\u27e839\u27e9`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\necdsa\u27e840\u27e9`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\nschnorr\u27e841\u27e9`schnorr`\n    Taproot Schnorr signatures as defined in BIP340\u27e825\u27e9.\n## Structs\u00a7\u27e842\u27e9\n\nAffinePoint\u27e834\u27e9`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\nProjectivePoint\u27e843\u27e9`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\nScalar\u27e835\u27e9`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\nSecp256k1\u27e844\u27e9\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases\u00a7\u27e845\u27e9\n\nCompressedPoint\u27e846\u27e9\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\nEncodedPoint\u27e847\u27e9\n    SEC1-encoded secp256k1 (K-256) curve point.\n\nFieldBytes\u27e848\u27e9\n    secp256k1 (K-256) field element serialized as bytes.\n\nNonZeroScalar\u27e849\u27e9`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\nPublicKey\u27e850\u27e9`arithmetic`\n    secp256k1 (K-256) public key.\n\nSecretKey\u27e851\u27e9\n    secp256k1 (K-256) secret key.\n\nU256\u27e852\u27e9\n    256-bit unsigned big integer.\n\nWideBytes\u27e853\u27e9\n    Bytes used by a wide reduction: twice the width of `FieldBytes`\u27e848\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/k256/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/k256/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159: Source\n\u27e84\u27e9 https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve: \u00a7\n\u27e85\u27e9 https://github.com/RustCrypto/: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/k256: ![crate\n\u27e87\u27e9 https://docs.rs/k256/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://en.bitcoin.it/wiki/Secp256k1: secp256k1\n\u27e813\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: ECDSA\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Schnorr_signature: Schnorr signatures\n\u27e815\u27e9 https://github.com/RustCrypto/traits/tree/master/elliptic-curve: `elliptic-curve`\n\u27e816\u27e9 https://docs.rs/k256/latest/k256/arithmetic/index.html: `arithmetic`\n\u27e817\u27e9 https://github.com/zkcrypto/group: `group`\n\u27e818\u27e9 https://docs.rs/k256/: Documentation\n\u27e819\u27e9 https://docs.rs/k256/latest/k256/#security-notes: \u00a7\n\u27e820\u27e9 https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/: audited by NCC Group\n\u27e821\u27e9 https://entropy.xyz/: Entropy\n\u27e822\u27e9 https://docs.rs/k256/latest/k256/#supported-algorithms: \u00a7\n\u27e823\u27e9 https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman: Elliptic Curve Diffie-Hellman (ECDH)\n\u27e824\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki: low-S normalization (BIP 0062)\n\u27e825\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki: BIP0340\n\u27e826\u27e9 https://docs.rs/k256/latest/k256/#about-secp256k1-k-256: \u00a7\n\u27e827\u27e9 https://docs.rs/k256/latest/k256/#minimum-supported-rust-version: \u00a7\n\u27e828\u27e9 https://docs.rs/k256/latest/k256/#semver-policy: \u00a7\n\u27e829\u27e9 https://docs.rs/k256/latest/k256/#license: \u00a7\n\u27e830\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e831\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e832\u27e9 https://docs.rs/k256/latest/k256/#contribution: \u00a7\n\u27e833\u27e9 https://docs.rs/k256/latest/k256/#serde-support: \u00a7\n\u27e834\u27e9 https://docs.rs/k256/latest/k256/struct.AffinePoint.html: struct k256::AffinePoint - `AffinePoint`\n\u27e835\u27e9 https://docs.rs/k256/latest/k256/struct.Scalar.html: struct k256::Scalar - `Scalar`\n\u27e836\u27e9 https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html: type k256::ecdsa::VerifyingKey - `ecdsa::VerifyingKey`\n\u27e837\u27e9 https://docs.rs/k256/latest/k256/#reexports: \u00a7\n\u27e838\u27e9 https://docs.rs/k256/latest/k256/#modules: \u00a7\n\u27e839\u27e9 https://docs.rs/k256/latest/k256/ecdh/index.html: mod k256::ecdh - ecdh\n\u27e840\u27e9 https://docs.rs/k256/latest/k256/ecdsa/index.html: mod k256::ecdsa - ecdsa\n\u27e841\u27e9 https://docs.rs/k256/latest/k256/schnorr/index.html: mod k256::schnorr - schnorr\n\u27e842\u27e9 https://docs.rs/k256/latest/k256/#structs: \u00a7\n\u27e843\u27e9 https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html: struct k256::ProjectivePoint - ProjectivePoint\n\u27e844\u27e9 https://docs.rs/k256/latest/k256/struct.Secp256k1.html: struct k256::Secp256k1 - Secp256k1\n\u27e845\u27e9 https://docs.rs/k256/latest/k256/#types: \u00a7\n\u27e846\u27e9 https://docs.rs/k256/latest/k256/type.CompressedPoint.html: type k256::CompressedPoint - CompressedPoint\n\u27e847\u27e9 https://docs.rs/k256/latest/k256/type.EncodedPoint.html: type k256::EncodedPoint - EncodedPoint\n\u27e848\u27e9 https://docs.rs/k256/latest/k256/type.FieldBytes.html: type k256::FieldBytes - FieldBytes\n\u27e849\u27e9 https://docs.rs/k256/latest/k256/type.NonZeroScalar.html: type k256::NonZeroScalar - NonZeroScalar\n\u27e850\u27e9 https://docs.rs/k256/latest/k256/type.PublicKey.html: type k256::PublicKey - PublicKey\n\u27e851\u27e9 https://docs.rs/k256/latest/k256/type.SecretKey.html: type k256::SecretKey - SecretKey\n\u27e852\u27e9 https://docs.rs/k256/latest/k256/type.U256.html: type k256::U256 - U256\n\u27e853\u27e9 https://docs.rs/k256/latest/k256/type.WideBytes.html: type k256::WideBytes - WideBytes\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "k256",
          "version": "0.14.0-pre.8",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\n[Settings](https://docs.rs/k256/latest/settings.html)\n[Help](https://docs.rs/k256/latest/help.html)\nSummary[Source](https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159)\nExpand description\n## [\u00a7](https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve)[RustCrypto](https://github.com/RustCrypto/): secp256k1 (K-256) elliptic curve\n[![crate](https://buildstats.info/crate/k256)](https://crates.io/crates/k256) [![Docs](https://docs.rs/k256/badge.svg)](https://docs.rs/k256/) [![Build Status](https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) (a.k.a. K-256) elliptic curve library written in pure Rust with support for [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) signing/verification/public-key recovery, Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the [`elliptic-curve`](https://github.com/RustCrypto/traits/tree/master/elliptic-curve) crate.\nOptionally includes a secp256k1 [`arithmetic`](https://docs.rs/k256/latest/k256/arithmetic/index.html) feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the [`group`](https://github.com/zkcrypto/group) crate which can be used to generically construct group-based protocols.\n[Documentation](https://docs.rs/k256/)\n### [\u00a7](https://docs.rs/k256/latest/k256/#security-notes)Security Notes\nThis crate has been [audited by NCC Group](https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/), which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank [Entropy](https://entropy.xyz/) for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### [\u00a7](https://docs.rs/k256/latest/k256/#supported-algorithms)Supported Algorithms\n  * [Elliptic Curve Diffie-Hellman (ECDH)](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman): gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm): gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying [low-S normalization (BIP 0062)](https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki) as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) (as defined in [BIP0340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#about-secp256k1-k-256)About secp256k1 (K-256)\n[secp256k1](https://en.bitcoin.it/wiki/Secp256k1) is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm). Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### [\u00a7](https://docs.rs/k256/latest/k256/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/k256/latest/k256/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/k256/latest/k256/#license)License\nAll crates licensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/k256/latest/k256/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/k256/latest/k256/#serde-support)`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * [`AffinePoint`](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")\n  * [`Scalar`](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")\n  * [`ecdsa::VerifyingKey`](https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html \"type k256::ecdsa::VerifyingKey\")\n\n\nPlease see type-specific documentation for more information.\n## Re-exports[\u00a7](https://docs.rs/k256/latest/k256/#reexports)\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules[\u00a7](https://docs.rs/k256/latest/k256/#modules)\n\n[ecdh](https://docs.rs/k256/latest/k256/ecdh/index.html \"mod k256::ecdh\")`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\n[ecdsa](https://docs.rs/k256/latest/k256/ecdsa/index.html \"mod k256::ecdsa\")`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\n[schnorr](https://docs.rs/k256/latest/k256/schnorr/index.html \"mod k256::schnorr\")`schnorr`\n    Taproot Schnorr signatures as defined in [BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n## Structs[\u00a7](https://docs.rs/k256/latest/k256/#structs)\n\n[AffinePoint](https://docs.rs/k256/latest/k256/struct.AffinePoint.html \"struct k256::AffinePoint\")`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\n[ProjectivePoint](https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html \"struct k256::ProjectivePoint\")`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\n[Scalar](https://docs.rs/k256/latest/k256/struct.Scalar.html \"struct k256::Scalar\")`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\n[Secp256k1](https://docs.rs/k256/latest/k256/struct.Secp256k1.html \"struct k256::Secp256k1\")\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases[\u00a7](https://docs.rs/k256/latest/k256/#types)\n\n[CompressedPoint](https://docs.rs/k256/latest/k256/type.CompressedPoint.html \"type k256::CompressedPoint\")\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\n[EncodedPoint](https://docs.rs/k256/latest/k256/type.EncodedPoint.html \"type k256::EncodedPoint\")\n    SEC1-encoded secp256k1 (K-256) curve point.\n\n[FieldBytes](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\")\n    secp256k1 (K-256) field element serialized as bytes.\n\n[NonZeroScalar](https://docs.rs/k256/latest/k256/type.NonZeroScalar.html \"type k256::NonZeroScalar\")`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\n[PublicKey](https://docs.rs/k256/latest/k256/type.PublicKey.html \"type k256::PublicKey\")`arithmetic`\n    secp256k1 (K-256) public key.\n\n[SecretKey](https://docs.rs/k256/latest/k256/type.SecretKey.html \"type k256::SecretKey\")\n    secp256k1 (K-256) secret key.\n\n[U256](https://docs.rs/k256/latest/k256/type.U256.html \"type k256::U256\")\n    256-bit unsigned big integer.\n\n[WideBytes](https://docs.rs/k256/latest/k256/type.WideBytes.html \"type k256::WideBytes\")\n    Bytes used by a wide reduction: twice the width of [`FieldBytes`](https://docs.rs/k256/latest/k256/type.FieldBytes.html \"type k256::FieldBytes\").\n",
            "markdown_with_citations": "[](https://docs.rs/k256/latest/k256/all.html \"show sidebar\")\n# Crate k256Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto\u27e85\u27e9: secp256k1 (K-256) elliptic curve\n![crate\u27e86\u27e9](https://crates.io/crates/k256) ![Docs\u27e87\u27e9](https://docs.rs/k256/) ![Build Status\u27e88\u27e9](https://github.com/RustCrypto/elliptic-curves/actions?query=workflow%3Ak256) ![Apache2/MIT licensed\u27e89\u27e9] ![Rust Version\u27e810\u27e9] ![Project Chat\u27e811\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260040-elliptic-curves)\nsecp256k1\u27e812\u27e9 (a.k.a. K-256) elliptic curve library written in pure Rust with support for ECDSA\u27e813\u27e9 signing/verification/public-key recovery, Taproot Schnorr signatures\u27e814\u27e9 as defined in BIP340, Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic curve group operations which can be used to implement arbitrary group-based protocols.\nUses traits and base types from the `elliptic-curve`\u27e815\u27e9 crate.\nOptionally includes a secp256k1 `arithmetic`\u27e816\u27e9 feature providing scalar and point types (projective/affine) with support for constant-time scalar multiplication. Additionally, implements traits from the `group`\u27e817\u27e9 crate which can be used to generically construct group-based protocols.\nDocumentation\u27e818\u27e9\n### \u00a7\u27e819\u27e9Security Notes\nThis crate has been audited by NCC Group\u27e820\u27e9, which found a high severity issue in the ECDSA/secp256k1 implementation and another high severity issue in the Schnorr/secp256k1 signature implementation, both of which have since been corrected. We would like to thank Entropy\u27e821\u27e9 for funding the audit.\nThis crate has been designed with the goal of ensuring that secret-dependent secp256k1 operations are performed in constant time (using the `subtle` crate and constant-time formulas). However, it is not suitable for use on processors with a variable-time multiplication operation (e.g. short circuit on multiply-by-zero / multiply-by-one, such as certain 32-bit PowerPC CPUs and some non-ARM microcontrollers).\nUSE AT YOUR OWN RISK!\n### \u00a7\u27e822\u27e9Supported Algorithms\n  * Elliptic Curve Diffie-Hellman (ECDH)\u27e823\u27e9: gated under the `ecdh` feature. Note that this is technically ephemeral secp256k1 Diffie-Hellman (a.k.a. ECDHE)\n  * Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9: gated under the `ecdsa` feature. Support for ECDSA/secp256k1 signing and verification, applying low-S normalization (BIP 0062)\u27e824\u27e9 as used in consensus-critical applications, and additionally supports secp256k1 public-key recovery from ECDSA signatures (as used by e.g. Ethereum)\n  * Taproot Schnorr signatures\u27e814\u27e9 (as defined in BIP0340\u27e825\u27e9): next-generation signature algorithm based on group operations enabling elegant higher-level constructions like multisignatures.\n\n\n### \u00a7\u27e826\u27e9About secp256k1 (K-256)\nsecp256k1\u27e812\u27e9 is a Koblitz curve commonly used in cryptocurrency applications. The \u201cK-256\u201d name follows NIST notation where P = prime fields, B = binary fields, and K = Koblitz curves.\nThe curve is specified as `secp256k1` by Certicom\u2019s SECG in \u201cSEC 2: Recommended Elliptic Curve Domain Parameters\u201d:\n<https://www.secg.org/sec2-v2.pdf>\nsecp256k1 is primarily notable for usage in Bitcoin and other cryptocurrencies, particularly in conjunction with the Elliptic Curve Digital Signature Algorithm (ECDSA)\u27e813\u27e9. Owing to its wide deployment in these applications, secp256k1 is one of the most popular and commonly used elliptic curves.\n### \u00a7\u27e827\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e828\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e829\u27e9License\nAll crates licensed under either of\n  * Apache License, Version 2.0\u27e830\u27e9\n  * MIT license\u27e831\u27e9\n\n\nat your option.\n#### \u00a7\u27e832\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e833\u27e9`serde` support\nWhen the `serde` feature of this crate is enabled, `Serialize` and `Deserialize` are impl\u2019d for the following types:\n  * `AffinePoint`\u27e834\u27e9\n  * `Scalar`\u27e835\u27e9\n  * `ecdsa::VerifyingKey`\u27e836\u27e9\n\n\nPlease see type-specific documentation for more information.\n## Re-exports\u00a7\u27e837\u27e9\n\n`pub use elliptic_curve[](https://docs.rs/elliptic-curve/0.13.8/x86_64-unknown-linux-gnu/elliptic_curve/index.html \"mod elliptic_curve\");`\n\n\n`pub use elliptic_curve::pkcs8[](https://docs.rs/pkcs8/0.10.2/x86_64-unknown-linux-gnu/pkcs8/index.html \"mod pkcs8\");``pkcs8`\n\n\n`pub use sha2[](https://docs.rs/sha2/0.10.9/x86_64-unknown-linux-gnu/sha2/index.html \"mod sha2\");``sha2`\n\n## Modules\u00a7\u27e838\u27e9\n\necdh\u27e839\u27e9`ecdh`\n    Elliptic Curve Diffie-Hellman (Ephemeral) Support.\n\necdsa\u27e840\u27e9`ecdsa-core`\n    Elliptic Curve Digital Signature Algorithm (ECDSA).\n\nschnorr\u27e841\u27e9`schnorr`\n    Taproot Schnorr signatures as defined in BIP340\u27e825\u27e9.\n## Structs\u00a7\u27e842\u27e9\n\nAffinePoint\u27e834\u27e9`arithmetic`\n    secp256k1 curve point expressed in affine coordinates.\n\nProjectivePoint\u27e843\u27e9`arithmetic`\n    A point on the secp256k1 curve in projective coordinates.\n\nScalar\u27e835\u27e9`arithmetic`\n    Scalars are elements in the finite field modulo n.\n\nSecp256k1\u27e844\u27e9\n    secp256k1 (K-256) elliptic curve.\n## Type Aliases\u00a7\u27e845\u27e9\n\nCompressedPoint\u27e846\u27e9\n    Compressed SEC1-encoded secp256k1 (K-256) curve point.\n\nEncodedPoint\u27e847\u27e9\n    SEC1-encoded secp256k1 (K-256) curve point.\n\nFieldBytes\u27e848\u27e9\n    secp256k1 (K-256) field element serialized as bytes.\n\nNonZeroScalar\u27e849\u27e9`arithmetic`\n    Non-zero secp256k1 (K-256) scalar field element.\n\nPublicKey\u27e850\u27e9`arithmetic`\n    secp256k1 (K-256) public key.\n\nSecretKey\u27e851\u27e9\n    secp256k1 (K-256) secret key.\n\nU256\u27e852\u27e9\n    256-bit unsigned big integer.\n\nWideBytes\u27e853\u27e9\n    Bytes used by a wide reduction: twice the width of `FieldBytes`\u27e848\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/k256/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/k256/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/k256/latest/src/k256/lib.rs.html#1-159: Source\n\u27e84\u27e9 https://docs.rs/k256/latest/k256/#rustcrypto-secp256k1-k-256-elliptic-curve: \u00a7\n\u27e85\u27e9 https://github.com/RustCrypto/: RustCrypto\n\u27e86\u27e9 https://buildstats.info/crate/k256: ![crate\n\u27e87\u27e9 https://docs.rs/k256/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/RustCrypto/elliptic-curves/workflows/k256/badge.svg?branch=master&event=push: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e810\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e811\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e812\u27e9 https://en.bitcoin.it/wiki/Secp256k1: secp256k1\n\u27e813\u27e9 https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm: ECDSA\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Schnorr_signature: Schnorr signatures\n\u27e815\u27e9 https://github.com/RustCrypto/traits/tree/master/elliptic-curve: `elliptic-curve`\n\u27e816\u27e9 https://docs.rs/k256/latest/k256/arithmetic/index.html: `arithmetic`\n\u27e817\u27e9 https://github.com/zkcrypto/group: `group`\n\u27e818\u27e9 https://docs.rs/k256/: Documentation\n\u27e819\u27e9 https://docs.rs/k256/latest/k256/#security-notes: \u00a7\n\u27e820\u27e9 https://research.nccgroup.com/2023/08/30/public-report-entropy-rust-cryptography-review/: audited by NCC Group\n\u27e821\u27e9 https://entropy.xyz/: Entropy\n\u27e822\u27e9 https://docs.rs/k256/latest/k256/#supported-algorithms: \u00a7\n\u27e823\u27e9 https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman: Elliptic Curve Diffie-Hellman (ECDH)\n\u27e824\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki: low-S normalization (BIP 0062)\n\u27e825\u27e9 https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki: BIP0340\n\u27e826\u27e9 https://docs.rs/k256/latest/k256/#about-secp256k1-k-256: \u00a7\n\u27e827\u27e9 https://docs.rs/k256/latest/k256/#minimum-supported-rust-version: \u00a7\n\u27e828\u27e9 https://docs.rs/k256/latest/k256/#semver-policy: \u00a7\n\u27e829\u27e9 https://docs.rs/k256/latest/k256/#license: \u00a7\n\u27e830\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e831\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e832\u27e9 https://docs.rs/k256/latest/k256/#contribution: \u00a7\n\u27e833\u27e9 https://docs.rs/k256/latest/k256/#serde-support: \u00a7\n\u27e834\u27e9 https://docs.rs/k256/latest/k256/struct.AffinePoint.html: struct k256::AffinePoint - `AffinePoint`\n\u27e835\u27e9 https://docs.rs/k256/latest/k256/struct.Scalar.html: struct k256::Scalar - `Scalar`\n\u27e836\u27e9 https://docs.rs/k256/latest/k256/ecdsa/type.VerifyingKey.html: type k256::ecdsa::VerifyingKey - `ecdsa::VerifyingKey`\n\u27e837\u27e9 https://docs.rs/k256/latest/k256/#reexports: \u00a7\n\u27e838\u27e9 https://docs.rs/k256/latest/k256/#modules: \u00a7\n\u27e839\u27e9 https://docs.rs/k256/latest/k256/ecdh/index.html: mod k256::ecdh - ecdh\n\u27e840\u27e9 https://docs.rs/k256/latest/k256/ecdsa/index.html: mod k256::ecdsa - ecdsa\n\u27e841\u27e9 https://docs.rs/k256/latest/k256/schnorr/index.html: mod k256::schnorr - schnorr\n\u27e842\u27e9 https://docs.rs/k256/latest/k256/#structs: \u00a7\n\u27e843\u27e9 https://docs.rs/k256/latest/k256/struct.ProjectivePoint.html: struct k256::ProjectivePoint - ProjectivePoint\n\u27e844\u27e9 https://docs.rs/k256/latest/k256/struct.Secp256k1.html: struct k256::Secp256k1 - Secp256k1\n\u27e845\u27e9 https://docs.rs/k256/latest/k256/#types: \u00a7\n\u27e846\u27e9 https://docs.rs/k256/latest/k256/type.CompressedPoint.html: type k256::CompressedPoint - CompressedPoint\n\u27e847\u27e9 https://docs.rs/k256/latest/k256/type.EncodedPoint.html: type k256::EncodedPoint - EncodedPoint\n\u27e848\u27e9 https://docs.rs/k256/latest/k256/type.FieldBytes.html: type k256::FieldBytes - FieldBytes\n\u27e849\u27e9 https://docs.rs/k256/latest/k256/type.NonZeroScalar.html: type k256::NonZeroScalar - NonZeroScalar\n\u27e850\u27e9 https://docs.rs/k256/latest/k256/type.PublicKey.html: type k256::PublicKey - PublicKey\n\u27e851\u27e9 https://docs.rs/k256/latest/k256/type.SecretKey.html: type k256::SecretKey - SecretKey\n\u27e852\u27e9 https://docs.rs/k256/latest/k256/type.U256.html: type k256::U256 - U256\n\u27e853\u27e9 https://docs.rs/k256/latest/k256/type.WideBytes.html: type k256::WideBytes - WideBytes\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `k256` crate is a pure Rust implementation of the secp256k1 elliptic curve, widely used in cryptocurrency applications like Bitcoin and Ethereum. It supports ECDSA signing/verification with public-key recovery, Taproot Schnorr signatures (BIP340), and Elliptic Curve Diffie-Hellman (ECDH), along with constant-time scalar multiplication for secure cryptographic operations. Additional features include optional `serde` support and compatibility with traits from the `elliptic-curve` and `group` crates for building group-based protocols.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Supported Algorithms  \n\u2705 **Factual**: The `k256` crate supports Elliptic Curve Digital Signature Algorithm (ECDSA) signing and verification, including public-key recovery from ECDSA signatures, as used in Ethereum.  \n\u274c **Counterfactual**: The `k256` crate supports ECDSA signing and verification but does not implement public-key recovery from ECDSA signatures.  \n\n---\n\n### Pair 2: Security Audits  \n\u2705 **Factual**: The `k256` crate was audited by NCC Group, which identified high-severity issues in the ECDSA and Schnorr signature implementations that were subsequently fixed.  \n\u274c **Counterfactual**: The `k256` crate has not undergone any formal security audits, and its cryptographic implementations remain unverified by external entities.  \n\n---\n\n### Pair 3: Minimum Supported Rust Version  \n\u2705 **Factual**: The `k256` crate requires Rust version 1.65 or higher as its Minimum Supported Rust Version (MSRV).  \n\u274c **Counterfactual**: The `k256` crate is compatible with Rust versions as low as 1.50, making it accessible to older Rust projects.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-81db9b10-5190f954-1751264748",
      "timestamp": "2025-06-30T06:25:48.929072+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]