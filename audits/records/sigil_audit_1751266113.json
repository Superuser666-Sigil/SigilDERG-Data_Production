[
  {
    "execution_id": "exec-9ecdf05c-5ac95ae2-1751266088",
    "timestamp": "2025-06-30T06:48:08.560714+00:00",
    "sacred_chain": {
      "input_data": "skulpin",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'skulpin' -> 'skulpin'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "skulpin",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/skulpin",
            "title": "skulpin v0.14.1",
            "content": {
              "raw_markdown": "#  skulpin v0.14.1\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining Vulkan and Skia. \n  * [ #ash ](https://crates.io/keywords/ash)\n  * [ #2d ](https://crates.io/keywords/2d)\n  * [ #vulkan ](https://crates.io/keywords/vulkan)\n  * [ #skia ](https://crates.io/keywords/skia)\n  * [ #graphics ](https://crates.io/keywords/graphics)\n\n\n  * [ Readme ](https://crates.io/crates/skulpin)\n  * [ 36 Versions ](https://crates.io/crates/skulpin/versions)\n  * [ Dependencies ](https://crates.io/crates/skulpin/dependencies)\n  * [ Dependents ](https://crates.io/crates/skulpin/reverse_dependencies)\n\n\n## Metadata\nover 3 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n35.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add skulpin\nOr add the following line to your Cargo.toml:\nskulpin = \"0.14.1\"\n## Repository\n[ github.com/aclysma/skulpin ](https://github.com/aclysma/skulpin)\n## Owners\n## Categories\n  * [Visualization](https://crates.io/categories/visualization)\n  * [Graphics](https://crates.io/categories/graphics)\n  * [GUI](https://crates.io/categories/gui)\n  * [Rendering](https://crates.io/categories/rendering)\n  * [Multimedia](https://crates.io/categories/multimedia)\n\n\n[ Report crate ](https://crates.io/support?crate=skulpin&inquire=crate-violation)\n### Stats Overview\n99,798 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  skulpin v0.14.1\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining Vulkan and Skia. \n  *  #ash \u27e81\u27e9\n  *  #2d \u27e82\u27e9\n  *  #vulkan \u27e83\u27e9\n  *  #skia \u27e84\u27e9\n  *  #graphics \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  36 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 3 years ago \n2018 edition \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n35.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add skulpin\nOr add the following line to your Cargo.toml:\nskulpin = \"0.14.1\"\n## Repository\n github.com/aclysma/skulpin \u27e812\u27e9\n## Owners\n## Categories\n  * Visualization\u27e813\u27e9\n  * Graphics\u27e814\u27e9\n  * GUI\u27e815\u27e9\n  * Rendering\u27e816\u27e9\n  * Multimedia\u27e817\u27e9\n\n\n Report crate \u27e818\u27e9\n### Stats Overview\n99,798 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/ash:  #ash \n\u27e82\u27e9 https://crates.io/keywords/2d:  #2d \n\u27e83\u27e9 https://crates.io/keywords/vulkan:  #vulkan \n\u27e84\u27e9 https://crates.io/keywords/skia:  #skia \n\u27e85\u27e9 https://crates.io/keywords/graphics:  #graphics \n\u27e86\u27e9 https://crates.io/crates/skulpin:  Readme \n\u27e87\u27e9 https://crates.io/crates/skulpin/versions:  36 Versions \n\u27e88\u27e9 https://crates.io/crates/skulpin/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/skulpin/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://github.com/aclysma/skulpin:  github.com/aclysma/skulpin \n\u27e813\u27e9 https://crates.io/categories/visualization: Visualization\n\u27e814\u27e9 https://crates.io/categories/graphics: Graphics\n\u27e815\u27e9 https://crates.io/categories/gui: GUI\n\u27e816\u27e9 https://crates.io/categories/rendering: Rendering\n\u27e817\u27e9 https://crates.io/categories/multimedia: Multimedia\n\u27e818\u27e9 https://crates.io/support?crate=skulpin&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1571,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119878.4423415"
          },
          "docs_rs": {
            "url": "https://docs.rs/skulpin",
            "title": "Untitled",
            "content": {
              "raw_markdown": "\n",
              "markdown_with_citations": "\n",
              "references_markdown": "\n\n## References\n\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 0.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119879.2746896"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/skulpin",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [36 releases](https://lib.rs/crates/skulpin/versions)\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in [GUI](https://lib.rs/gui \"Crates to help you create a graphical user interface.\")\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in [ **2** crates](https://lib.rs/crates/skulpin/rev)\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master)](https://travis-ci.org/aclysma/skulpin) ![Crates.io](https://img.shields.io/crates/v/skulpin)\n![Example Screenshot](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png)\nThis crate mainly depends on:\n  * [rafx](https://github.com/aclysma/rafx) - A rendering framework with easy access to the vulkan backend\n  * [skia-safe](https://github.com/rust-skia/rust-skia) - [Skia](https://skia.org) bindings for Rust\n\n\nNOTE: See [skia-bindings](https://lib.rs/crates/skia-bindings) for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with [raw-window-handle](https://lib.rs/crates/raw-window-handle), which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe [interactive](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs) example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe [physics](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs) demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n[![IMAGE ALT TEXT](https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg)](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by [neovide](https://github.com/Kethku/neovide).\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * [app](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs) - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * [renderer_only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs) - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See [sdl2 renderer only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs)\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the [skia-safe readme](https://lib.rs/crates/skia-safe)\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some [workarounds listed here](https://github.com/alexcrichton/curl-rust/issues/239). Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### MacOS\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Linux\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * [Feather](https://github.com/AT-UI/feather-font), MIT\n  * [Material Design Icons](https://materialdesignicons.com), SIL OFL 1.1\n  * [FontAwesome 4.7.0](https://fontawesome.com/v4.7.0/license/), available under SIL OFL 1.1\n  * [``mplus`-`1p`-`regular`.`ttf``](http://mplus-fonts.osdn.jp), available under its own license.\n\n\n[``sdl2`` uses the zlib license.](https://www.libsdl.org/license.php)\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee [LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) and [LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT).\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [winit-21?](https://lib.rs/crates/skulpin/features#feature-winit-21 \"optional feature\") [winit-22?](https://lib.rs/crates/skulpin/features#feature-winit-22 \"optional feature\") [winit-23?](https://lib.rs/crates/skulpin/features#feature-winit-23 \"optional feature\") [winit-24?](https://lib.rs/crates/skulpin/features#feature-winit-24 \"optional feature\") [winit-25?](https://lib.rs/crates/skulpin/features#feature-winit-25 \"optional feature\") [winit-latest?](https://lib.rs/crates/skulpin/features#feature-winit-latest \"optional feature\") [skulpin-app-winit](https://lib.rs/crates/skulpin-app-winit \"0.14.1\")\n  * [skulpin-renderer](https://lib.rs/crates/skulpin-renderer \"new\") 0.14.1\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.6\n  * dev  [rapier2d](https://lib.rs/crates/rapier2d \"obsolete\") 0.5\n  * dev  [sdl2](https://lib.rs/crates/sdl2 \"obsolete\") >=0.33,<0.34.3[+bundled](https://lib.rs/crates/sdl2/features#feature-bundled)[+static-link](https://lib.rs/crates/sdl2/features#feature-static-link)[+raw\u2026handle](https://lib.rs/crates/sdl2/features#feature-raw-window-handle)\n  * dev  [sdl2-sys](https://lib.rs/crates/sdl2-sys \"obsolete\") >=0.33, <=0.34.2\n\n\n#### [Other features](https://lib.rs/crates/skulpin/features)\n  * [skia-complete](https://lib.rs/crates/skulpin/features#feature-skia-complete)\n  * [skia-shaper](https://lib.rs/crates/skulpin/features#feature-skia-shaper)\n  * [skia-svg](https://lib.rs/crates/skulpin/features#feature-skia-svg)\n  * [skia-textlayout](https://lib.rs/crates/skulpin/features#feature-skia-textlayout)\n  * [winit-app](https://lib.rs/crates/skulpin/features#feature-winit-app)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  36 releases\u27e81\u27e9\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in GUI\u27e82\u27e9\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in  **2** crates\u27e83\u27e9\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n![Build Status\u27e84\u27e9](https://travis-ci.org/aclysma/skulpin) ![Crates.io\u27e85\u27e9]\n![Example Screenshot\u27e86\u27e9]\nThis crate mainly depends on:\n  * rafx\u27e87\u27e9 - A rendering framework with easy access to the vulkan backend\n  * skia-safe\u27e88\u27e9 - Skia\u27e89\u27e9 bindings for Rust\n\n\nNOTE: See skia-bindings\u27e810\u27e9 for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with raw-window-handle\u27e811\u27e9, which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe interactive\u27e812\u27e9 example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe physics\u27e813\u27e9 demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n![IMAGE ALT TEXT\u27e814\u27e9](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by neovide\u27e815\u27e9.\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * app\u27e816\u27e9 - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * renderer_only\u27e817\u27e9 - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See sdl2 renderer only\u27e818\u27e9\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the skia-safe readme\u27e819\u27e9\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some workarounds listed here\u27e820\u27e9. Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### MacOS\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Linux\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e823\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e824\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * Feather\u27e825\u27e9, MIT\n  * Material Design Icons\u27e826\u27e9, SIL OFL 1.1\n  * FontAwesome 4.7.0\u27e827\u27e9, available under SIL OFL 1.1\n  * ``mplus`-`1p`-`regular`.`ttf``\u27e828\u27e9, available under its own license.\n\n\n``sdl2`` uses the zlib license.\u27e829\u27e9\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee LICENSE-APACHE\u27e823\u27e9 and LICENSE-MIT\u27e824\u27e9.\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * log\u27e830\u27e9\n  * winit-21?\u27e831\u27e9 winit-22?\u27e832\u27e9 winit-23?\u27e833\u27e9 winit-24?\u27e834\u27e9 winit-25?\u27e835\u27e9 winit-latest?\u27e836\u27e9 skulpin-app-winit\u27e837\u27e9\n  * skulpin-renderer\u27e838\u27e9 0.14.1\n\n\n  * dev  env_logger\u27e839\u27e9 0.6\n  * dev  rapier2d\u27e840\u27e9 0.5\n  * dev  sdl2\u27e841\u27e9 >=0.33,<0.34.3+bundled\u27e842\u27e9+static-link\u27e843\u27e9+raw\u2026handle\u27e844\u27e9\n  * dev  sdl2-sys\u27e845\u27e9 >=0.33, <=0.34.2\n\n\n#### Other features\u27e846\u27e9\n  * skia-complete\u27e847\u27e9\n  * skia-shaper\u27e848\u27e9\n  * skia-svg\u27e849\u27e9\n  * skia-textlayout\u27e850\u27e9\n  * winit-app\u27e851\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/skulpin/versions: 36 releases\n\u27e82\u27e9 https://lib.rs/gui: Crates to help you create a graphical user interface. - GUI\n\u27e83\u27e9 https://lib.rs/crates/skulpin/rev:  **2** crates\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/skulpin: Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png: Example Screenshot\n\u27e87\u27e9 https://github.com/aclysma/rafx: rafx\n\u27e88\u27e9 https://github.com/rust-skia/rust-skia: skia-safe\n\u27e89\u27e9 https://skia.org: Skia\n\u27e810\u27e9 https://lib.rs/crates/skia-bindings: skia-bindings\n\u27e811\u27e9 https://lib.rs/crates/raw-window-handle: raw-window-handle\n\u27e812\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs: interactive\n\u27e813\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs: physics\n\u27e814\u27e9 https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg: ![IMAGE ALT TEXT\n\u27e815\u27e9 https://github.com/Kethku/neovide: neovide\n\u27e816\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs: app\n\u27e817\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs: renderer_only\n\u27e818\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs: sdl2 renderer only\n\u27e819\u27e9 https://lib.rs/crates/skia-safe: skia-safe readme\n\u27e820\u27e9 https://github.com/alexcrichton/curl-rust/issues/239: workarounds listed here\n\u27e821\u27e9 https://github.com/Rust-SDL2/rust-sdl2: requirements for the SDL2 bindings\n\u27e822\u27e9 https://lunarg.com/vulkan-sdk/: LunarG Vulkan SDK\n\u27e823\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE: LICENSE-APACHE\n\u27e824\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT: LICENSE-MIT\n\u27e825\u27e9 https://github.com/AT-UI/feather-font: Feather\n\u27e826\u27e9 https://materialdesignicons.com: Material Design Icons\n\u27e827\u27e9 https://fontawesome.com/v4.7.0/license/: FontAwesome 4.7.0\n\u27e828\u27e9 http://mplus-fonts.osdn.jp: ``mplus`-`1p`-`regular`.`ttf``\n\u27e829\u27e9 https://www.libsdl.org/license.php: ``sdl2`` uses the zlib license.\n\u27e830\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e831\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-21: optional feature - winit-21?\n\u27e832\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-22: optional feature - winit-22?\n\u27e833\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-23: optional feature - winit-23?\n\u27e834\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-24: optional feature - winit-24?\n\u27e835\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-25: optional feature - winit-25?\n\u27e836\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-latest: optional feature - winit-latest?\n\u27e837\u27e9 https://lib.rs/crates/skulpin-app-winit: 0.14.1 - skulpin-app-winit\n\u27e838\u27e9 https://lib.rs/crates/skulpin-renderer: new - skulpin-renderer\n\u27e839\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e840\u27e9 https://lib.rs/crates/rapier2d: obsolete - rapier2d\n\u27e841\u27e9 https://lib.rs/crates/sdl2: obsolete - sdl2\n\u27e842\u27e9 https://lib.rs/crates/sdl2/features#feature-bundled: +bundled\n\u27e843\u27e9 https://lib.rs/crates/sdl2/features#feature-static-link: +static-link\n\u27e844\u27e9 https://lib.rs/crates/sdl2/features#feature-raw-window-handle: +raw\u2026handle\n\u27e845\u27e9 https://lib.rs/crates/sdl2-sys: obsolete - sdl2-sys\n\u27e846\u27e9 https://lib.rs/crates/skulpin/features: Other features\n\u27e847\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-complete: skia-complete\n\u27e848\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-shaper: skia-shaper\n\u27e849\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-svg: skia-svg\n\u27e850\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-textlayout: skia-textlayout\n\u27e851\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-app: winit-app\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 16003,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119879.7182802"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:29:24\n   |\n29 |             Some(s) => write!(f, \"Once {{ data: \")\n   |                        ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 848,
                    "byte_start": 843,
                    "column_end": 29,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 24,
                        "text": "            Some(s) => write!(f, \"Once {{ data: \")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:31:20\n   |\n31 |                 .and_then(|()| write!(f, \"}}\")),\n   |                                ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 924,
                    "byte_start": 919,
                    "column_end": 25,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 20,
                        "text": "\t\t\t\t.and_then(|()| write!(f, \"}}\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:32:21\n   |\n32 |             None => write!(f, \"Once {{ <uninitialized> }}\")\n   |                     ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 962,
                    "byte_start": 957,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "            None => write!(f, \"Once {{ <uninitialized> }}\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:128:29\n    |\n128 |                 PANICKED => panic!(\"Once has panicked\"),\n    |                             ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 4073,
                    "byte_start": 4068,
                    "column_end": 34,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 128,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 29,
                        "text": "                PANICKED => panic!(\"Once has panicked\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:151:31\n    |\n151 |                 PANICKED   => panic!(\"Once has panicked\"),\n    |                               ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 4893,
                    "byte_start": 4888,
                    "column_end": 36,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 31,
                        "text": "                PANICKED   => panic!(\"Once has panicked\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:81:3\n   |\n81 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1859,
                    "byte_start": 1853,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:203:28\n    |\n203 |             Some(guard) => write!(f, \"Mutex {{ data: \")\n    |                            ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 5095,
                    "byte_start": 5090,
                    "column_end": 33,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 203,
                    "line_start": 203,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 28,
                        "text": "            Some(guard) => write!(f, \"Mutex {{ data: \")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:205:20\n    |\n205 |                 .and_then(|()| write!(f, \"}}\")),\n    |                                ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 5180,
                    "byte_start": 5175,
                    "column_end": 25,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 205,
                    "line_start": 205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 20,
                        "text": "\t\t\t\t.and_then(|()| write!(f, \"}}\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:206:21\n    |\n206 |             None => write!(f, \"Mutex {{ <locked> }}\"),\n    |                     ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 5218,
                    "byte_start": 5213,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "            None => write!(f, \"Mutex {{ <locked> }}\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:72:3\n   |\n72 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 2780,
                    "byte_start": 2774,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:81:3\n   |\n81 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 3021,
                    "byte_start": 3015,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:97:3\n   |\n97 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 3592,
                    "byte_start": 3586,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:223:9\n    |\n223 |         debug_assert!(self.lock.load(Ordering::Relaxed) & !WRITER > 0);\n    |         ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 7887,
                    "byte_start": 7875,
                    "column_end": 21,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 223,
                    "line_start": 223,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        debug_assert!(self.lock.load(Ordering::Relaxed) & !WRITER > 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:235:9\n    |\n235 |         debug_assert_eq!(self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED), 0);\n    |         ^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 8438,
                    "byte_start": 8423,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 235,
                    "line_start": 235,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED), 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:345:28\n    |\n345 |             Some(guard) => write!(f, \"RwLock {{ data: \")\n    |                            ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 12062,
                    "byte_start": 12057,
                    "column_end": 33,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 345,
                    "line_start": 345,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 28,
                        "text": "            Some(guard) => write!(f, \"RwLock {{ data: \")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:347:32\n    |\n347 |                 .and_then(|()| write!(f, \"}}\")),\n    |                                ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 12172,
                    "byte_start": 12167,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "                .and_then(|()| write!(f, \"}}\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:348:21\n    |\n348 |             None => write!(f, \"RwLock {{ <locked> }}\"),\n    |                     ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 12210,
                    "byte_start": 12205,
                    "column_end": 26,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 348,
                    "line_start": 348,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 21,
                        "text": "            None => write!(f, \"RwLock {{ <locked> }}\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:510:9\n    |\n510 |         debug_assert!(self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED) > 0);\n    |         ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 16747,
                    "byte_start": 16735,
                    "column_end": 21,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 510,
                    "line_start": 510,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        debug_assert!(self.lock.load(Ordering::Relaxed) & !(WRITER | UPGRADED) > 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:517:9\n    |\n517 |         debug_assert_eq!(\n    |         ^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 16996,
                    "byte_start": 16981,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 517,
                    "line_start": 517,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:527:9\n    |\n527 |         debug_assert_eq!(self.lock.load(Ordering::Relaxed) & WRITER, WRITER);\n    |         ^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 17279,
                    "byte_start": 17264,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 527,
                    "line_start": 527,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.lock.load(Ordering::Relaxed) & WRITER, WRITER);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:72:22\n   |\n72 | pub struct Mutex<T: ?Sized>\n   |                      ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1673,
                    "byte_start": 1668,
                    "column_end": 27,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 22,
                        "text": "pub struct Mutex<T: ?Sized>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:82:31\n   |\n82 | pub struct MutexGuard<'a, T: ?Sized + 'a>\n   |                               ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 1903,
                    "byte_start": 1898,
                    "column_end": 36,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 31,
                        "text": "pub struct MutexGuard<'a, T: ?Sized + 'a>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:89:17\n   |\n89 | unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n   |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 2026,
                    "byte_start": 2021,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:89:25\n   |\n89 | unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n   |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 2033,
                    "byte_start": 2029,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:90:31\n   |\n90 | unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}\n   |                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 2090,
                    "byte_start": 2086,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:90:17\n   |\n90 | unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}\n   |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 2077,
                    "byte_start": 2072,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:90:25\n   |\n90 | unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}\n   |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 2084,
                    "byte_start": 2080,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "unsafe impl<T: ?Sized + Send> Send for Mutex<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:127:10\n    |\n127 | impl<T: ?Sized> Mutex<T>\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 2968,
                    "byte_start": 2963,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized> Mutex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:197:10\n    |\n197 | impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T>\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 4919,
                    "byte_start": 4914,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 197,
                    "line_start": 197,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:211:10\n    |\n211 | impl<T: ?Sized + Default> Default for Mutex<T> {\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5281,
                    "byte_start": 5276,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 211,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized + Default> Default for Mutex<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:217:14\n    |\n217 | impl<'a, T: ?Sized> Deref for MutexGuard<'a, T>\n    |              ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5413,
                    "byte_start": 5408,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 217,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "impl<'a, T: ?Sized> Deref for MutexGuard<'a, T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:223:14\n    |\n223 | impl<'a, T: ?Sized> DerefMut for MutexGuard<'a, T>\n    |              ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5539,
                    "byte_start": 5534,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 223,
                    "line_start": 223,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "impl<'a, T: ?Sized> DerefMut for MutexGuard<'a, T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:228:14\n    |\n228 | impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>\n    |              ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 5663,
                    "byte_start": 5658,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 228,
                    "line_start": 228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "impl<'a, T: ?Sized> Drop for MutexGuard<'a, T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:59:23\n   |\n59 | pub struct RwLock<T: ?Sized> {\n   |                       ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 2463,
                    "byte_start": 2458,
                    "column_end": 28,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 23,
                        "text": "pub struct RwLock<T: ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:73:41\n   |\n73 | pub struct RwLockReadGuard<'a, T: 'a + ?Sized> {\n   |                                         ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 2834,
                    "byte_start": 2829,
                    "column_end": 46,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 41,
                        "text": "pub struct RwLockReadGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:82:42\n   |\n82 | pub struct RwLockWriteGuard<'a, T: 'a + ?Sized> {\n   |                                          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 3076,
                    "byte_start": 3071,
                    "column_end": 47,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 42,
                        "text": "pub struct RwLockWriteGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:98:48\n   |\n98 | pub struct RwLockUpgradeableGuard<'a, T: 'a + ?Sized> {\n   |                                                ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 3653,
                    "byte_start": 3648,
                    "column_end": 53,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 48,
                        "text": "pub struct RwLockUpgradeableGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:106:31\n    |\n106 | unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}\n    |                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 3846,
                    "byte_start": 3842,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:106:17\n    |\n106 | unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 3833,
                    "byte_start": 3828,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:106:25\n    |\n106 | unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 3840,
                    "byte_start": 3836,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:107:38\n    |\n107 | unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n    |                                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 3905,
                    "byte_start": 3901,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:107:17\n    |\n107 | unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 3885,
                    "byte_start": 3880,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:107:25\n    |\n107 | unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 3892,
                    "byte_start": 3888,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:107:32\n    |\n107 | unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n    |                                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 3899,
                    "byte_start": 3895,
                    "column_end": 36,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 32,
                        "text": "unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:143:10\n    |\n143 | impl<T: ?Sized> RwLock<T> {\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 4810,
                    "byte_start": 4805,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized> RwLock<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:169:17\n    |\n169 |                 Some(guard) => return guard,\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5811,
                    "byte_start": 5807,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 169,
                    "line_start": 169,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(guard) => return guard,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:198:31\n    |\n198 |     pub fn try_read(&self) -> Option<RwLockReadGuard<T>> {\n    |                               ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6850,
                    "byte_start": 6844,
                    "column_end": 37,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 198,
                    "line_start": 198,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 31,
                        "text": "    pub fn try_read(&self) -> Option<RwLockReadGuard<T>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:206:13\n    |\n206 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 7255,
                    "byte_start": 7251,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:240:51\n    |\n240 |     fn try_write_internal(&self, strong: bool) -> Option<RwLockWriteGuard<T>> {\n    |                                                   ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 8657,
                    "byte_start": 8651,
                    "column_end": 57,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 240,
                    "line_start": 240,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 51,
                        "text": "    fn try_write_internal(&self, strong: bool) -> Option<RwLockWriteGuard<T>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:257:13\n    |\n257 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 9121,
                    "byte_start": 9117,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 257,
                    "line_start": 257,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:283:17\n    |\n283 |                 Some(guard) => return guard,\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 9901,
                    "byte_start": 9897,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 283,
                    "line_start": 283,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(guard) => return guard,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:309:32\n    |\n309 |     pub fn try_write(&self) -> Option<RwLockWriteGuard<T>> {\n    |                                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 10693,
                    "byte_start": 10687,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 309,
                    "line_start": 309,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    pub fn try_write(&self) -> Option<RwLockWriteGuard<T>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:319:17\n    |\n319 |                 Some(guard) => return guard,\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 11133,
                    "byte_start": 11129,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 319,
                    "line_start": 319,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(guard) => return guard,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:327:43\n    |\n327 |     pub fn try_upgradeable_read(&self) -> Option<RwLockUpgradeableGuard<T>> {\n    |                                           ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 11339,
                    "byte_start": 11333,
                    "column_end": 49,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 327,
                    "line_start": 327,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 43,
                        "text": "    pub fn try_upgradeable_read(&self) -> Option<RwLockUpgradeableGuard<T>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:337:13\n    |\n337 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 11863,
                    "byte_start": 11859,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 337,
                    "line_start": 337,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:342:10\n    |\n342 | impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 11897,
                    "byte_start": 11892,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 342,
                    "line_start": 342,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:345:13\n    |\n345 |             Some(guard) => write!(f, \"RwLock {{ data: \")\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 12046,
                    "byte_start": 12042,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 345,
                    "line_start": 345,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(guard) => write!(f, \"RwLock {{ data: \")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:353:10\n    |\n353 | impl<T: ?Sized + Default> Default for RwLock<T> {\n    |          ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 12274,
                    "byte_start": 12269,
                    "column_end": 15,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 353,
                    "line_start": 353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 10,
                        "text": "impl<T: ?Sized + Default> Default for RwLock<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:359:19\n    |\n359 | impl<'rwlock, T: ?Sized> RwLockUpgradeableGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 12414,
                    "byte_start": 12409,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 359,
                    "line_start": 359,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> RwLockUpgradeableGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:361:52\n    |\n361 |     fn try_upgrade_internal(self, strong: bool) -> Result<RwLockWriteGuard<'rwlock, T>, Self> {\n    |                                                    ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12532,
                    "byte_start": 12526,
                    "column_end": 58,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 361,
                    "line_start": 361,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 52,
                        "text": "    fn try_upgrade_internal(self, strong: bool) -> Result<RwLockWriteGuard<'rwlock, T>, Self> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:400:17\n    |\n400 |                 Ok(guard) => return guard,\n    |                 ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 13613,
                    "byte_start": 13611,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 400,
                    "line_start": 400,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(guard) => return guard,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:401:17\n    |\n401 |                 Err(e) => e,\n    |                 ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 13657,
                    "byte_start": 13654,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 401,
                    "line_start": 401,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(e) => e,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:420:33\n    |\n420 |     pub fn try_upgrade(self) -> Result<RwLockWriteGuard<'rwlock, T>, Self> {\n    |                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 14223,
                    "byte_start": 14217,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 420,
                    "line_start": 420,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    pub fn try_upgrade(self) -> Result<RwLockWriteGuard<'rwlock, T>, Self> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:451:19\n    |\n451 | impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 15178,
                    "byte_start": 15173,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 451,
                    "line_start": 451,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:478:19\n    |\n478 | impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16011,
                    "byte_start": 16006,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 478,
                    "line_start": 478,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:486:19\n    |\n486 | impl<'rwlock, T: ?Sized> Deref for RwLockUpgradeableGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16173,
                    "byte_start": 16168,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 486,
                    "line_start": 486,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Deref for RwLockUpgradeableGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:494:19\n    |\n494 | impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16342,
                    "byte_start": 16337,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 494,
                    "line_start": 494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:502:19\n    |\n502 | impl<'rwlock, T: ?Sized> DerefMut for RwLockWriteGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16505,
                    "byte_start": 16500,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 502,
                    "line_start": 502,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> DerefMut for RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:508:26\n    |\n508 | impl<'rwlock, T: ?Sized> Drop for RwLockReadGuard<'rwlock, T> {\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 16667,
                    "byte_start": 16663,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 508,
                    "line_start": 508,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockReadGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:508:19\n    |\n508 | impl<'rwlock, T: ?Sized> Drop for RwLockReadGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16661,
                    "byte_start": 16656,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 508,
                    "line_start": 508,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockReadGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:515:26\n    |\n515 | impl<'rwlock, T: ?Sized> Drop for RwLockUpgradeableGuard<'rwlock, T> {\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 16906,
                    "byte_start": 16902,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 515,
                    "line_start": 515,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockUpgradeableGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:515:19\n    |\n515 | impl<'rwlock, T: ?Sized> Drop for RwLockUpgradeableGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 16900,
                    "byte_start": 16895,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 515,
                    "line_start": 515,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockUpgradeableGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:525:26\n    |\n525 | impl<'rwlock, T: ?Sized> Drop for RwLockWriteGuard<'rwlock, T> {\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 17195,
                    "byte_start": 17191,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 525,
                    "line_start": 525,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:525:19\n    |\n525 | impl<'rwlock, T: ?Sized> Drop for RwLockWriteGuard<'rwlock, T> {\n    |                   ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 17189,
                    "byte_start": 17184,
                    "column_end": 24,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 525,
                    "line_start": 525,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 19,
                        "text": "impl<'rwlock, T: ?Sized> Drop for RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:543:6\n    |\n543 | ) -> Result<usize, usize> {\n    |      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 17774,
                    "byte_start": 17768,
                    "column_end": 12,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 543,
                    "line_start": 543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 6,
                        "text": ") -> Result<usize, usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:23:22\n   |\n23 |     data: UnsafeCell<Option<T>>, // TODO remove option and use mem::uninitialized\n   |                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 631,
                    "byte_start": 625,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "    data: UnsafeCell<Option<T>>, // TODO remove option and use mem::uninitialized"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:29:13\n   |\n29 |             Some(s) => write!(f, \"Once {{ data: \")\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 836,
                    "byte_start": 832,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(s) => write!(f, \"Once {{ data: \")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:39:29\n   |\n39 | unsafe impl<T: Send + Sync> Sync for Once<T> {}\n   |                             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 1143,
                    "byte_start": 1139,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "unsafe impl<T: Send + Sync> Sync for Once<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:39:16\n   |\n39 | unsafe impl<T: Send + Sync> Sync for Once<T> {}\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1130,
                    "byte_start": 1126,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: Send + Sync> Sync for Once<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:39:23\n   |\n39 | unsafe impl<T: Send + Sync> Sync for Once<T> {}\n   |                       ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 1137,
                    "byte_start": 1133,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "unsafe impl<T: Send + Sync> Sync for Once<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:40:22\n   |\n40 | unsafe impl<T: Send> Send for Once<T> {}\n   |                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1184,
                    "byte_start": 1180,
                    "column_end": 26,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 22,
                        "text": "unsafe impl<T: Send> Send for Once<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:40:16\n   |\n40 | unsafe impl<T: Send> Send for Once<T> {}\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1178,
                    "byte_start": 1174,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: Send> Send for Once<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:55:31\n   |\n55 |         data: UnsafeCell::new(None),\n   |                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1651,
                    "byte_start": 1647,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "        data: UnsafeCell::new(None),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:66:13\n   |\n66 |             Some(p) => p,\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1921,
                    "byte_start": 1917,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(p) => p,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:99:18\n   |\n99 |         where F: FnOnce() -> T\n   |                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 2966,
                    "byte_start": 2960,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "        where F: FnOnce() -> T"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:136:33\n    |\n136 |     pub fn try<'a>(&'a self) -> Option<&'a T> {\n    |                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4334,
                    "byte_start": 4328,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    pub fn try<'a>(&'a self) -> Option<&'a T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:139:25\n    |\n139 |             _        => None,\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 4470,
                    "byte_start": 4466,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "            _        => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:145:34\n    |\n145 |     pub fn wait<'a>(&'a self) -> Option<&'a T> {\n    |                                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4621,
                    "byte_start": 4615,
                    "column_end": 40,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 34,
                        "text": "    pub fn wait<'a>(&'a self) -> Option<&'a T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:148:38\n    |\n148 |                 INCOMPLETE => return None,\n    |                                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 4741,
                    "byte_start": 4737,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "                INCOMPLETE => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:163:10\n    |\n163 | impl<'a> Drop for Finish<'a> {\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 5081,
                    "byte_start": 5077,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> Drop for Finish<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:72:21\n   |\n72 | pub struct Mutex<T: ?Sized>\n   |                     ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1673,
                    "byte_start": 1667,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "pub struct Mutex<T: ?Sized>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:82:30\n   |\n82 | pub struct MutexGuard<'a, T: ?Sized + 'a>\n   |                              ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 1903,
                    "byte_start": 1897,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "pub struct MutexGuard<'a, T: ?Sized + 'a>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs:127:9\n    |\n127 | impl<T: ?Sized> Mutex<T>\n    |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 2968,
                    "byte_start": 2962,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "impl<T: ?Sized> Mutex<T>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:59:22\n   |\n59 | pub struct RwLock<T: ?Sized> {\n   |                      ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 2463,
                    "byte_start": 2457,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "pub struct RwLock<T: ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:73:40\n   |\n73 | pub struct RwLockReadGuard<'a, T: 'a + ?Sized> {\n   |                                        ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 2834,
                    "byte_start": 2828,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "pub struct RwLockReadGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:82:41\n   |\n82 | pub struct RwLockWriteGuard<'a, T: 'a + ?Sized> {\n   |                                         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 3076,
                    "byte_start": 3070,
                    "column_end": 47,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 41,
                        "text": "pub struct RwLockWriteGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:98:47\n   |\n98 | pub struct RwLockUpgradeableGuard<'a, T: 'a + ?Sized> {\n   |                                               ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 3653,
                    "byte_start": 3647,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "pub struct RwLockUpgradeableGuard<'a, T: 'a + ?Sized> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:143:9\n    |\n143 | impl<T: ?Sized> RwLock<T> {\n    |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 4810,
                    "byte_start": 4804,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "impl<T: ?Sized> RwLock<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:359:18\n    |\n359 | impl<'rwlock, T: ?Sized> RwLockUpgradeableGuard<'rwlock, T> {\n    |                  ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 12414,
                    "byte_start": 12408,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 359,
                    "line_start": 359,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "impl<'rwlock, T: ?Sized> RwLockUpgradeableGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:451:18\n    |\n451 | impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n    |                  ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 15178,
                    "byte_start": 15172,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 451,
                    "line_start": 451,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:208:13\n    |\n208 |             Some(RwLockReadGuard {\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7289,
                    "byte_start": 7285,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 208,
                    "line_start": 208,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(RwLockReadGuard {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:251:13\n    |\n251 |             Some(RwLockWriteGuard {\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8904,
                    "byte_start": 8900,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 251,
                    "line_start": 251,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(RwLockWriteGuard {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:329:13\n    |\n329 |             Some(RwLockUpgradeableGuard {\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 11473,
                    "byte_start": 11469,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 329,
                    "line_start": 329,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(RwLockUpgradeableGuard {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:373:23\n    |\n373 |             let out = Ok(RwLockWriteGuard {\n    |                       ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12843,
                    "byte_start": 12841,
                    "column_end": 25,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 373,
                    "line_start": 373,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 23,
                        "text": "            let out = Ok(RwLockWriteGuard {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs:384:13\n    |\n384 |             Err(self)\n    |             ^^^------\n    |             |\n    |             help: try calling `Err` as a method: `self.Err()`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try calling `Err` as a method",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13140,
                        "byte_start": 13131,
                        "column_end": 22,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 384,
                        "line_start": 384,
                        "suggested_replacement": "self.Err()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 13,
                            "text": "            Err(self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 13134,
                    "byte_start": 13131,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\rw_lock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 384,
                    "line_start": 384,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:110:45\n    |\n110 |                 unsafe { *self.data.get() = Some(builder()) };\n    |                                             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3516,
                    "byte_start": 3512,
                    "column_end": 49,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 110,
                    "line_start": 110,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 45,
                        "text": "                unsafe { *self.data.get() = Some(builder()) };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:138:25\n    |\n138 |             COMPLETE => Some(self.force_get()),\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4422,
                    "byte_start": 4418,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "            COMPLETE => Some(self.force_get()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs:150:38\n    |\n150 |                 COMPLETE   => return Some(self.force_get()),\n    |                                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4838,
                    "byte_start": 4834,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\once.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 150,
                    "line_start": 150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "                COMPLETE   => return Some(self.force_get()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:145:9\n    |\n145 |         write!(f, \"{}-{:02}-{:02}\", y, m, d)\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 4246,
                    "byte_start": 4241,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}-{:02}-{:02}\", y, m, d)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:5:3\n  |\n5 | #[derive(Debug, PartialEq, Eq, Copy, Clone, PartialOrd, Ord)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 127,
                    "byte_start": 121,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq, Eq, Copy, Clone, PartialOrd, Ord)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:190:9\n    |\n190 |         write!(f, \"{}\", self.as_str())\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 5288,
                    "byte_start": 5283,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}\", self.as_str())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:8:3\n  |\n8 | #[derive(Debug)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 129,
                    "byte_start": 123,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:39:3\n   |\n39 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 888,
                    "byte_start": 882,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:12:3\n   |\n12 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 187,
                    "byte_start": 181,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq, Eq, Copy, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:3:3\n  |\n3 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 23,
                    "byte_start": 17,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 3,
                    "line_start": 3,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug, PartialEq, Eq, Copy, Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:8:3\n  |\n8 | #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 156,
                    "byte_start": 150,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:82:3\n   |\n82 | #[derive(Clone, Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 2489,
                    "byte_start": 2483,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:98:5\n   |\n98 |     println!(\"cargo:rustc-cfg={}\", cfg);\n   |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2887,
                    "byte_start": 2880,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-cfg={}\", cfg);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:201:9\n    |\n201 |         write!(f, \"Version({:?}, {:?})\", self.0, self.to_mmp())\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 6532,
                    "byte_start": 6527,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"Version({:?}, {:?})\", self.0, self.to_mmp())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:108:5\n    |\n108 |     println!(\"cargo:rerun-if-changed={}\", path);\n    |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3234,
                    "byte_start": 3227,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed={}\", path);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:119:5\n    |\n119 |     println!(\"cargo:rerun-if-env-changed={}\", var);\n    |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3620,
                    "byte_start": 3613,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-env-changed={}\", var);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:225:19\n    |\n225 |             emit(&format!(\"rustc_{}_{}\", major, minor));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 7622,
                    "byte_start": 7616,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 225,
                    "line_start": 225,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"rustc_{}_{}\", major, minor));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:194:9\n    |\n194 |         write!(f, \"{}.{}.{}\", major, minor, patch)\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 6310,
                    "byte_start": 6305,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 194,
                    "line_start": 194,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}.{}.{}\", major, minor, patch)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:237:18\n    |\n237 |             .arg(format!(\"probe{}\", id))\n    |                  ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 8002,
                    "byte_start": 7996,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 237,
                    "line_start": 237,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "            .arg(format!(\"probe{}\", id))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:4:3\n  |\n4 | #[derive(PartialEq, Eq, Copy, Clone, PartialOrd, Ord)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 90,
                    "byte_start": 84,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 4,
                    "line_start": 4,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(PartialEq, Eq, Copy, Clone, PartialOrd, Ord)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:273:20\n    |\n273 |         self.probe(format!(\"extern crate {} as probe;\", name)) // `as _` wasn't stabilized until Rust 1.33\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 9160,
                    "byte_start": 9154,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 273,
                    "line_start": 273,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"extern crate {} as probe;\", name)) // `as _` wasn't stabilized until Rust 1.33"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:280:19\n    |\n280 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 9478,
                    "byte_start": 9472,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 280,
                    "line_start": 280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:292:20\n    |\n292 |         self.probe(format!(\"pub use {};\", path)).unwrap_or(false)\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 9787,
                    "byte_start": 9781,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 292,
                    "line_start": 292,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub use {};\", path)).unwrap_or(false)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:301:19\n    |\n301 |             emit(&format!(\"has_{}\", mangle(path)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 10135,
                    "byte_start": 10129,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 301,
                    "line_start": 301,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(path)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:320:20\n    |\n320 |         self.probe(format!(\"pub trait Probe: {} + Sized {{}}\", name))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 10664,
                    "byte_start": 10658,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 320,
                    "line_start": 320,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub trait Probe: {} + Sized {{}}\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:330:19\n    |\n330 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 11056,
                    "byte_start": 11050,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:349:20\n    |\n349 |         self.probe(format!(\"pub type Probe = {};\", name))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 11575,
                    "byte_start": 11569,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 349,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub type Probe = {};\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:359:19\n    |\n359 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 11950,
                    "byte_start": 11944,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 359,
                    "line_start": 359,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:378:20\n    |\n378 |         self.probe(format!(\"pub fn probe() {{ let _ = {}; }}\", expr))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 12488,
                    "byte_start": 12482,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 378,
                    "line_start": 378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub fn probe() {{ let _ = {}; }}\", expr))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:397:20\n    |\n397 |         self.probe(format!(\"pub const PROBE: () = ((), {}).0;\", expr))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 13091,
                    "byte_start": 13085,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 397,
                    "line_start": 397,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub const PROBE: () = ((), {}).0;\", expr))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0786`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0786`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0786`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0786`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0408]: variable `None` is not bound in all patterns\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:67:17\n   |\n67 |                 (3, _) | (_, None) => return None,\n   |                 ^^^^^^       ---- variable not in all patterns\n   |                 |\n   |                 pattern doesn't bind `None`\n   |\nhelp: if you meant to match on a variant or a `const` item, consider making the path in the pattern qualified: `path::to::ModOrType::None`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:67:30\n   |\n67 |                 (3, _) | (_, None) => return None,\n   |                              ^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you meant to match on a variant or a `const` item, consider making the path in the pattern qualified: `path::to::ModOrType::None`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2242,
                        "byte_start": 2238,
                        "column_end": 34,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 67,
                        "line_start": 67,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 30,
                            "text": "                (3, _) | (_, None) => return None,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0408",
                  "explanation": "An \"or\" pattern was used where the variable bindings are not consistently bound\nacross patterns.\n\nErroneous code example:\n\n```compile_fail,E0408\nmatch x {\n    Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n                                      //        not bound in pattern #2\n    _ => ()\n}\n```\n\nHere, `y` is bound to the contents of the `Some` and can be used within the\nblock corresponding to the match arm. However, in case `x` is `None`, we have\nnot specified what `y` is, and the block will use a nonexistent variable.\n\nTo fix this error, either split into multiple match arms:\n\n```\nlet x = Some(1);\nmatch x {\n    Some(y) => { /* use y */ }\n    None => { /* ... */ }\n}\n```\n\nor, bind the variable to a field of the same type in all sub-patterns of the\nor pattern:\n\n```\nlet x = (0, 2);\nmatch x {\n    (0, y) | (y, 0) => { /* use y */}\n    _ => {}\n}\n```\n\nIn this example, if `x` matches the pattern `(0, _)`, the second field is set\nto `y`. If it matches `(_, 0)`, the first field is set to `y`; so in all\ncases `y` is set to some value.\n"
                },
                "level": "error",
                "message": "variable `None` is not bound in all patterns",
                "spans": [
                  {
                    "byte_end": 2231,
                    "byte_start": 2225,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": "pattern doesn't bind `None`",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "                (3, _) | (_, None) => return None,"
                      }
                    ]
                  },
                  {
                    "byte_end": 2242,
                    "byte_start": 2238,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": false,
                    "label": "variable not in all patterns",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "                (3, _) | (_, None) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:21:22\n   |\n21 |     pub fn read() -> Option<Version> {\n   |                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 612,
                    "byte_start": 606,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "    pub fn read() -> Option<Version> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:57:36\n   |\n57 |     pub fn parse(version: &str) -> Option<Version> {\n   |                                    ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1920,
                    "byte_start": 1914,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    pub fn parse(version: &str) -> Option<Version> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:68:21\n   |\n68 |                 (_, Some(v)) => v,\n   |                     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2284,
                    "byte_start": 2280,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "                (_, Some(v)) => v,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:29:22\n   |\n29 |     pub fn read() -> Option<Channel> {\n   |                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 720,
                    "byte_start": 714,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "    pub fn read() -> Option<Channel> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:56:36\n   |\n56 |     pub fn parse(version: &str) -> Option<Channel> {\n   |                                    ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1623,
                    "byte_start": 1617,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    pub fn parse(version: &str) -> Option<Channel> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:66:13\n   |\n66 |             None\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2000,
                    "byte_start": 1996,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:22:22\n   |\n22 |     pub fn read() -> Option<Date> {\n   |                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 663,
                    "byte_start": 657,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "    pub fn read() -> Option<Date> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:53:33\n   |\n53 |     pub fn parse(date: &str) -> Option<Date> {\n   |                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1608,
                    "byte_start": 1602,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "    pub fn parse(date: &str) -> Option<Date> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:54:18\n   |\n54 |         let ymd: Vec<u32> = date.split(\"-\")\n   |                  ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 1637,
                    "byte_start": 1634,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "        let ymd: Vec<u32> = date.split(\"-\")"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:59:20\n   |\n59 |             return None\n   |                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1788,
                    "byte_start": 1784,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:87:53\n   |\n87 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2862,
                    "byte_start": 2856,
                    "column_end": 59,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 53,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:87:60\n   |\n87 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                            ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n87 | fn version_and_date_from_rustc_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                       ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2842,
                        "byte_start": 2842,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2869,
                    "byte_start": 2863,
                    "column_end": 66,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 60,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:87:69\n   |\n87 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2878,
                    "byte_start": 2872,
                    "column_end": 75,
                    "column_start": 69,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 69,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:87:76\n   |\n87 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                            ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n87 | fn version_and_date_from_rustc_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                       ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2842,
                        "byte_start": 2842,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2885,
                    "byte_start": 2879,
                    "column_end": 82,
                    "column_start": 76,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 76,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:97:61\n   |\n97 | fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3397,
                    "byte_start": 3391,
                    "column_end": 67,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 61,
                        "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:97:68\n   |\n97 | fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                    ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n97 | fn version_and_date_from_rustc_verbose_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                               ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3377,
                        "byte_start": 3377,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 3404,
                    "byte_start": 3398,
                    "column_end": 74,
                    "column_start": 68,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 74,
                        "highlight_start": 68,
                        "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:97:77\n   |\n97 | fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3413,
                    "byte_start": 3407,
                    "column_end": 83,
                    "column_start": 77,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 77,
                        "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:97:84\n   |\n97 | fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                                    ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n97 | fn version_and_date_from_rustc_verbose_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                               ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3377,
                        "byte_start": 3377,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 3420,
                    "byte_start": 3414,
                    "column_end": 90,
                    "column_start": 84,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 84,
                        "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:98:36\n   |\n98 |     let (mut version, mut date) = (None, None);\n   |                                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3464,
                    "byte_start": 3460,
                    "column_end": 40,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 36,
                        "text": "    let (mut version, mut date) = (None, None);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:98:42\n   |\n98 |     let (mut version, mut date) = (None, None);\n   |                                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3470,
                    "byte_start": 3466,
                    "column_end": 46,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 42,
                        "text": "    let (mut version, mut date) = (None, None);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:102:13\n    |\n102 |             Some(\"rustc\") => {\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3648,
                    "byte_start": 3644,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(\"rustc\") => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:107:13\n    |\n107 |             Some(\"release:\") => version = split(line),\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3842,
                    "byte_start": 3838,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(\"release:\") => version = split(line),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:108:13\n    |\n108 |             Some(\"commit-date:\") if line.ends_with(\"unknown\") => date = None,\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3897,
                    "byte_start": 3893,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(\"commit-date:\") if line.ends_with(\"unknown\") => date = None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:108:73\n    |\n108 |             Some(\"commit-date:\") if line.ends_with(\"unknown\") => date = None,\n    |                                                                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3957,
                    "byte_start": 3953,
                    "column_end": 77,
                    "column_start": 73,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 73,
                        "text": "            Some(\"commit-date:\") if line.ends_with(\"unknown\") => date = None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:109:13\n    |\n109 |             Some(\"commit-date:\") => date = split(line),\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3975,
                    "byte_start": 3971,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 109,
                    "line_start": 109,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(\"commit-date:\") => date = split(line),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:30\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4181,
                    "byte_start": 4175,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:38\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4189,
                    "byte_start": 4183,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:45\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                                             ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n118 | fn get_version_and_date<String>() -> Option<(Option<String>, Option<String>)> {\n    |                        ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4169,
                        "byte_start": 4169,
                        "column_end": 24,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 118,
                        "line_start": 118,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 24,
                            "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 4196,
                    "byte_start": 4190,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:54\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                                                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4205,
                    "byte_start": 4199,
                    "column_end": 60,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 54,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:61\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                                                             ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n118 | fn get_version_and_date<String>() -> Option<(Option<String>, Option<String>)> {\n    |                        ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4169,
                        "byte_start": 4169,
                        "column_end": 24,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 118,
                        "line_start": 118,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 24,
                            "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 4212,
                    "byte_start": 4206,
                    "column_end": 67,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 61,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:133:20\n    |\n133 | pub fn triple() -> Option<(Version, Channel, Date)> {\n    |                    ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4858,
                    "byte_start": 4852,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "pub fn triple() -> Option<(Version, Channel, Date)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:135:9\n    |\n135 |         Some((Some(version), Some(date))) => (version, date),\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4964,
                    "byte_start": 4960,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Some(version), Some(date))) => (version, date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:135:15\n    |\n135 |         Some((Some(version), Some(date))) => (version, date),\n    |               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4970,
                    "byte_start": 4966,
                    "column_end": 19,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 15,
                        "text": "        Some((Some(version), Some(date))) => (version, date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:135:30\n    |\n135 |         Some((Some(version), Some(date))) => (version, date),\n    |                              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4985,
                    "byte_start": 4981,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "        Some((Some(version), Some(date))) => (version, date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:136:21\n    |\n136 |         _ => return None\n    |                     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5038,
                    "byte_start": 5034,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "        _ => return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:141:9\n    |\n141 |         Some(version) => match Channel::parse(&version_str) {\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5154,
                    "byte_start": 5150,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 141,
                    "line_start": 141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(version) => match Channel::parse(&version_str) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:142:13\n    |\n142 |             Some(channel) => match Date::parse(&date_str) {\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5220,
                    "byte_start": 5216,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(channel) => match Date::parse(&date_str) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:143:17\n    |\n143 |                 Some(date) => Some((version, channel, date)),\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5284,
                    "byte_start": 5280,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(date) => Some((version, channel, date)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:144:22\n    |\n144 |                 _ => None,\n    |                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5351,
                    "byte_start": 5347,
                    "column_end": 26,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 144,
                    "line_start": 144,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 22,
                        "text": "                _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:146:18\n    |\n146 |             _ => None,\n    |                  ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5389,
                    "byte_start": 5385,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 146,
                    "line_start": 146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "            _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:148:14\n    |\n148 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5419,
                    "byte_start": 5415,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:161:39\n    |\n161 | pub fn is_min_date(min_date: &str) -> Option<bool> {\n    |                                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 5888,
                    "byte_start": 5882,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 161,
                    "line_start": 161,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "pub fn is_min_date(min_date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:163:10\n    |\n163 |         (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5960,
                    "byte_start": 5956,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:163:28\n    |\n163 |         (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),\n    |                            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5978,
                    "byte_start": 5974,
                    "column_end": 32,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 28,
                        "text": "        (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:164:14\n    |\n164 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 6040,
                    "byte_start": 6036,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:177:39\n    |\n177 | pub fn is_max_date(max_date: &str) -> Option<bool> {\n    |                                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6511,
                    "byte_start": 6505,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "pub fn is_max_date(max_date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:179:10\n    |\n179 |         (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6583,
                    "byte_start": 6579,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:179:28\n    |\n179 |         (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),\n    |                            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6601,
                    "byte_start": 6597,
                    "column_end": 32,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 28,
                        "text": "        (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:180:14\n    |\n180 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 6663,
                    "byte_start": 6659,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 180,
                    "line_start": 180,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:193:37\n    |\n193 | pub fn is_exact_date(date: &str) -> Option<bool> {\n    |                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 7108,
                    "byte_start": 7102,
                    "column_end": 43,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 193,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 37,
                        "text": "pub fn is_exact_date(date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:195:10\n    |\n195 |         (Some(rustc_date), Some(date)) => Some(rustc_date == date),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7176,
                    "byte_start": 7172,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_date), Some(date)) => Some(rustc_date == date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:195:28\n    |\n195 |         (Some(rustc_date), Some(date)) => Some(rustc_date == date),\n    |                            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7194,
                    "byte_start": 7190,
                    "column_end": 32,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 28,
                        "text": "        (Some(rustc_date), Some(date)) => Some(rustc_date == date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:196:14\n    |\n196 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 7248,
                    "byte_start": 7244,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 196,
                    "line_start": 196,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:209:45\n    |\n209 | pub fn is_min_version(min_version: &str) -> Option<bool> {\n    |                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 7737,
                    "byte_start": 7731,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 209,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "pub fn is_min_version(min_version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:211:10\n    |\n211 |         (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7818,
                    "byte_start": 7814,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 211,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:211:27\n    |\n211 |         (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),\n    |                           ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7835,
                    "byte_start": 7831,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 211,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "        (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:212:14\n    |\n212 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 7894,
                    "byte_start": 7890,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 212,
                    "line_start": 212,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:225:45\n    |\n225 | pub fn is_max_version(max_version: &str) -> Option<bool> {\n    |                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 8381,
                    "byte_start": 8375,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 225,
                    "line_start": 225,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "pub fn is_max_version(max_version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:227:10\n    |\n227 |         (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8462,
                    "byte_start": 8458,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 227,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:227:27\n    |\n227 |         (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),\n    |                           ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8479,
                    "byte_start": 8475,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 227,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "        (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:228:14\n    |\n228 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 8538,
                    "byte_start": 8534,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 228,
                    "line_start": 228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:240:43\n    |\n240 | pub fn is_exact_version(version: &str) -> Option<bool> {\n    |                                           ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 8999,
                    "byte_start": 8993,
                    "column_end": 49,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 240,
                    "line_start": 240,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 43,
                        "text": "pub fn is_exact_version(version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:242:10\n    |\n242 |         (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 9076,
                    "byte_start": 9072,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 242,
                    "line_start": 242,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "        (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:242:27\n    |\n242 |         (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),\n    |                           ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 9093,
                    "byte_start": 9089,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 242,
                    "line_start": 242,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "        (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:243:14\n    |\n243 |         _ => None\n    |              ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 9152,
                    "byte_start": 9148,
                    "column_end": 18,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 243,
                    "line_start": 243,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 14,
                        "text": "        _ => None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:253:34\n    |\n253 | pub fn is_feature_flaggable() -> Option<bool> {\n    |                                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 9508,
                    "byte_start": 9502,
                    "column_end": 40,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 253,
                    "line_start": 253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 34,
                        "text": "pub fn is_feature_flaggable() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:87:52\n   |\n87 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2887,
                    "byte_start": 2855,
                    "column_end": 84,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 52,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:97:60\n   |\n97 | fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 3422,
                    "byte_start": 3390,
                    "column_end": 92,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 92,
                        "highlight_start": 60,
                        "text": "fn version_and_date_from_rustc_verbose_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:118:30\n    |\n118 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 4215,
                    "byte_start": 4175,
                    "column_end": 70,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 118,
                    "line_start": 118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 30,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:133:20\n    |\n133 | pub fn triple() -> Option<(Version, Channel, Date)> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 4884,
                    "byte_start": 4852,
                    "column_end": 52,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 20,
                        "text": "pub fn triple() -> Option<(Version, Channel, Date)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:161:39\n    |\n161 | pub fn is_min_date(min_date: &str) -> Option<bool> {\n    |                                       ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 5894,
                    "byte_start": 5882,
                    "column_end": 51,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 161,
                    "line_start": 161,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 39,
                        "text": "pub fn is_min_date(min_date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:177:39\n    |\n177 | pub fn is_max_date(max_date: &str) -> Option<bool> {\n    |                                       ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 6517,
                    "byte_start": 6505,
                    "column_end": 51,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 39,
                        "text": "pub fn is_max_date(max_date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:193:37\n    |\n193 | pub fn is_exact_date(date: &str) -> Option<bool> {\n    |                                     ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 7114,
                    "byte_start": 7102,
                    "column_end": 49,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 193,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 37,
                        "text": "pub fn is_exact_date(date: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:209:45\n    |\n209 | pub fn is_min_version(min_version: &str) -> Option<bool> {\n    |                                             ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 7743,
                    "byte_start": 7731,
                    "column_end": 57,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 209,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 45,
                        "text": "pub fn is_min_version(min_version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:225:45\n    |\n225 | pub fn is_max_version(max_version: &str) -> Option<bool> {\n    |                                             ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 8387,
                    "byte_start": 8375,
                    "column_end": 57,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 225,
                    "line_start": 225,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 45,
                        "text": "pub fn is_max_version(max_version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:240:43\n    |\n240 | pub fn is_exact_version(version: &str) -> Option<bool> {\n    |                                           ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 9005,
                    "byte_start": 8993,
                    "column_end": 55,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 240,
                    "line_start": 240,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 43,
                        "text": "pub fn is_exact_version(version: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:253:34\n    |\n253 | pub fn is_feature_flaggable() -> Option<bool> {\n    |                                  ^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 9514,
                    "byte_start": 9502,
                    "column_end": 46,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 253,
                    "line_start": 253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 34,
                        "text": "pub fn is_feature_flaggable() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `String`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:121:28\n    |\n121 |         .and_then(|output| String::from_utf8(output.stdout).ok())\n    |                            ^^^^^^ use of undeclared type `String`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `String`",
                "spans": [
                  {
                    "byte_end": 4398,
                    "byte_start": 4392,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `String`",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "        .and_then(|output| String::from_utf8(output.stdout).ok())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs:73:9\n   |\n73 |         Some(Version::from_mmp(maj, min, patch))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2391,
                    "byte_start": 2387,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(Version::from_mmp(maj, min, patch))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:58:13\n   |\n58 |             Some(Channel(Kind::Dev))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1689,
                    "byte_start": 1685,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(Channel(Kind::Dev))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:60:13\n   |\n60 |             Some(Channel(Kind::Nightly))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1775,
                    "byte_start": 1771,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(Channel(Kind::Nightly))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:62:13\n   |\n62 |             Some(Channel(Kind::Beta))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1862,
                    "byte_start": 1858,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(Channel(Kind::Beta))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs:64:13\n   |\n64 |             Some(Channel(Kind::Stable))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1943,
                    "byte_start": 1939,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\channel.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(Channel(Kind::Stable))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs:63:9\n   |\n63 |         Some(Date((y << 9) | ((m & 0xF) << 5) | (d & 0x1F)))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1862,
                    "byte_start": 1858,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\date.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(Date((y << 9) | ((m & 0xF) << 5) | (d & 0x1F)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:143:31\n    |\n143 |                 Some(date) => Some((version, channel, date)),\n    |                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5298,
                    "byte_start": 5294,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "                Some(date) => Some((version, channel, date)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:163:47\n    |\n163 |         (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),\n    |                                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5997,
                    "byte_start": 5993,
                    "column_end": 51,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 47,
                        "text": "        (Some(rustc_date), Some(min_date)) => Some(rustc_date >= min_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:179:47\n    |\n179 |         (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),\n    |                                               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6620,
                    "byte_start": 6616,
                    "column_end": 51,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 47,
                        "text": "        (Some(rustc_date), Some(max_date)) => Some(rustc_date <= max_date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:195:43\n    |\n195 |         (Some(rustc_date), Some(date)) => Some(rustc_date == date),\n    |                                           ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7209,
                    "byte_start": 7205,
                    "column_end": 47,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 43,
                        "text": "        (Some(rustc_date), Some(date)) => Some(rustc_date == date),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:211:45\n    |\n211 |         (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),\n    |                                             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7853,
                    "byte_start": 7849,
                    "column_end": 49,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 211,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 45,
                        "text": "        (Some(rustc_ver), Some(min_ver)) => Some(rustc_ver >= min_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:227:45\n    |\n227 |         (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),\n    |                                             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8497,
                    "byte_start": 8493,
                    "column_end": 49,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 227,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 45,
                        "text": "        (Some(rustc_ver), Some(max_ver)) => Some(rustc_ver <= max_ver),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs:242:45\n    |\n242 |         (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),\n    |                                             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 9111,
                    "byte_start": 9107,
                    "column_end": 49,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 242,
                    "line_start": 242,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 45,
                        "text": "        (Some(rustc_ver), Some(version)) => Some(rustc_ver == version),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0408, E0412, E0425, E0433, E0462, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0408, E0412, E0425, E0433, E0462, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0408`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0408`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:347:7\n    |\n347 |     #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n    |       ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 13407,
                    "byte_start": 13401,
                    "column_end": 13,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 7,
                        "text": "    #[derive(Clone, Copy, Debug, Eq, PartialEq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:340:3\n    |\n340 | #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 13229,
                    "byte_start": 13223,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 340,
                    "line_start": 340,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Copy, Debug, Eq, PartialEq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:215:3\n    |\n215 | #[derive(Debug)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 9215,
                    "byte_start": 9209,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 215,
                    "line_start": 215,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:108:3\n    |\n108 | #[derive(Clone, Copy, Debug, Eq)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 5463,
                    "byte_start": 5457,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Copy, Debug, Eq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:139:12\n    |\n139 |         F: FnOnce(&mut Reader<'a>) -> Result<R, E>,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::ops::FnOnce;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 6705,
                    "byte_start": 6699,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce(&mut Reader<'a>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:139:39\n    |\n139 |         F: FnOnce(&mut Reader<'a>) -> Result<R, E>,\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 6732,
                    "byte_start": 6726,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "        F: FnOnce(&mut Reader<'a>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:137:69\n    |\n137 |     pub fn read_all<F, R, E>(&self, incomplete_read: E, read: F) -> Result<R, E>\n    |                                                                     ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 6671,
                    "byte_start": 6665,
                    "column_end": 75,
                    "column_start": 69,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 137,
                    "line_start": 137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 69,
                        "text": "    pub fn read_all<F, R, E>(&self, incomplete_read: E, read: F) -> Result<R, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:144:13\n    |\n144 |             Ok(result)\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 6872,
                    "byte_start": 6870,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 144,
                    "line_start": 144,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(result)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:146:13\n    |\n146 |             Err(incomplete_read)\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Err;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 6913,
                    "byte_start": 6910,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 146,
                    "line_start": 146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(incomplete_read)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:156:10\n    |\n156 | impl<'a> From<&'a [u8]> for Input<'a> {\n    |          ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::convert::From;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::convert::From;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 7198,
                    "byte_start": 7194,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 156,
                    "line_start": 156,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> From<&'a [u8]> for Input<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:164:6\n    |\n164 | impl PartialEq<Input<'_>> for Input<'_> {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::cmp::PartialEq;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 7490,
                    "byte_start": 7481,
                    "column_end": 15,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 6,
                        "text": "impl PartialEq<Input<'_>> for Input<'_> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:171:6\n    |\n171 | impl PartialEq<[u8]> for Input<'_> {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::cmp::PartialEq;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 7661,
                    "byte_start": 7652,
                    "column_end": 15,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 171,
                    "line_start": 171,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 6,
                        "text": "impl PartialEq<[u8]> for Input<'_> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:176:6\n    |\n176 | impl PartialEq<Input<'_>> for [u8] {\n    |      ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::cmp::PartialEq;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 7793,
                    "byte_start": 7784,
                    "column_end": 15,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 6,
                        "text": "impl PartialEq<Input<'_>> for [u8] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:188:8\n    |\n188 |     F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,\n    |        ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::ops::FnOnce;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 8215,
                    "byte_start": 8209,
                    "column_end": 14,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 8,
                        "text": "    F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:188:15\n    |\n188 |     F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,\n    |               ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n105 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 8222,
                    "byte_start": 8216,
                    "column_end": 21,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 15,
                        "text": "    F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:188:43\n    |\n188 |     F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,\n    |                                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 8250,
                    "byte_start": 8244,
                    "column_end": 49,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 43,
                        "text": "    F: FnOnce(Option<&mut Reader<'a>>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:185:12\n    |\n185 |     input: Option<Input<'a>>, incomplete_read: E, read: F,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n105 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 8136,
                    "byte_start": 8130,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 185,
                    "line_start": 185,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "    input: Option<Input<'a>>, incomplete_read: E, read: F,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:186:6\n    |\n186 | ) -> Result<R, E>\n    |      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 8189,
                    "byte_start": 8183,
                    "column_end": 12,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 186,
                    "line_start": 186,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 6,
                        "text": ") -> Result<R, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:191:9\n    |\n191 |         Some(input) => {\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option::Some;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8290,
                    "byte_start": 8286,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 191,
                    "line_start": 191,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(input) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:193:31\n    |\n193 |             let result = read(Some(&mut input))?;\n    |                               ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option::Some;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8385,
                    "byte_start": 8381,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 193,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "            let result = read(Some(&mut input))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:195:17\n    |\n195 |                 Ok(result)\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 8451,
                    "byte_start": 8449,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(result)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:197:17\n    |\n197 |                 Err(incomplete_read)\n    |                 ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Err;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 8500,
                    "byte_start": 8497,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 197,
                    "line_start": 197,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(incomplete_read)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:247:10\n    |\n247 |     ) -> Result<Input<'a>, EndOfInput> {\n    |          ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10083,
                    "byte_start": 10077,
                    "column_end": 16,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 247,
                    "line_start": 247,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 10,
                        "text": "    ) -> Result<Input<'a>, EndOfInput> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:264:13\n    |\n264 |             Some(actual_b) => b == *actual_b,\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option::Some;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 10685,
                    "byte_start": 10681,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 264,
                    "line_start": 264,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(actual_b) => b == *actual_b,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:274:36\n    |\n274 |     pub fn read_byte(&mut self) -> Result<u8, EndOfInput> {\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10988,
                    "byte_start": 10982,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    pub fn read_byte(&mut self) -> Result<u8, EndOfInput> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:276:13\n    |\n276 |             Some(b) => {\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::option::Option::Some;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 11062,
                    "byte_start": 11058,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 276,
                    "line_start": 276,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(b) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:278:17\n    |\n278 |                 Ok(*b)\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11160,
                    "byte_start": 11158,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 278,
                    "line_start": 278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(*b)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:280:21\n    |\n280 |             None => Err(EndOfInput),\n    |                     ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Err;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11203,
                    "byte_start": 11200,
                    "column_end": 24,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 280,
                    "line_start": 280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 21,
                        "text": "            None => Err(EndOfInput),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:290:55\n    |\n290 |     pub fn read_bytes(&mut self, num_bytes: usize) -> Result<Input<'a>, EndOfInput> {\n    |                                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 11526,
                    "byte_start": 11520,
                    "column_end": 61,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 290,
                    "line_start": 290,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 55,
                        "text": "    pub fn read_bytes(&mut self, num_bytes: usize) -> Result<Input<'a>, EndOfInput> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:298:9\n    |\n298 |         Ok(ret)\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11823,
                    "byte_start": 11821,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(ret)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:314:12\n    |\n314 |         F: FnOnce(&mut Reader<'a>) -> Result<R, E>,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n105 + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::ops::FnOnce;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 12414,
                    "byte_start": 12408,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce(&mut Reader<'a>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:314:39\n    |\n314 |         F: FnOnce(&mut Reader<'a>) -> Result<R, E>,\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12441,
                    "byte_start": 12435,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "        F: FnOnce(&mut Reader<'a>) -> Result<R, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:312:57\n    |\n312 |     pub fn read_partial<F, R, E>(&mut self, read: F) -> Result<(Input<'a>, R), E>\n    |                                                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12367,
                    "byte_start": 12361,
                    "column_end": 63,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 312,
                    "line_start": 312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 57,
                        "text": "    pub fn read_partial<F, R, E>(&mut self, read: F) -> Result<(Input<'a>, R), E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:321:9\n    |\n321 |         Ok((bytes_read, r))\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n105 + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12629,
                    "byte_start": 12627,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 321,
                    "line_start": 321,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok((bytes_read, r))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:329:49\n    |\n329 |     pub fn skip(&mut self, num_bytes: usize) -> Result<(), EndOfInput> {\n    |                                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n105 + use core::fmt::Result;\n    |\n105 + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      },
                      {
                        "byte_end": 5337,
                        "byte_start": 5337,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 105,
                        "line_start": 105,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// A wrapper around `&'a [u8]` that helps in writing panic-free code."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12889,
                    "byte_start": 12883,
                    "column_end": 55,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 329,
                    "line_start": 329,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 49,
                        "text": "    pub fn skip(&mut self, num_bytes: usize) -> Result<(), EndOfInput> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:357:40\n    |\n357 |         pub fn get(&self, i: usize) -> Option<&u8> { self.bytes.get(i) }\n    |                                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these enums\n    |\n344 +     use crate::no_panic::core::option::Option;\n    |\n344 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these enums",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13309,
                        "byte_start": 13309,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "use crate::no_panic::core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core;"
                          }
                        ]
                      },
                      {
                        "byte_end": 13309,
                        "byte_start": 13309,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 13679,
                    "byte_start": 13673,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 357,
                    "line_start": 357,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "        pub fn get(&self, i: usize) -> Option<&u8> { self.bytes.get(i) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs:360:63\n    |\n360 |         pub fn subslice(&self, r: core::ops::Range<usize>) -> Option<Self> {\n    |                                                               ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these enums\n    |\n344 +     use crate::no_panic::core::option::Option;\n    |\n344 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these enums",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13309,
                        "byte_start": 13309,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "use crate::no_panic::core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core;"
                          }
                        ]
                      },
                      {
                        "byte_end": 13309,
                        "byte_start": 13309,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 13794,
                    "byte_start": 13788,
                    "column_end": 69,
                    "column_start": 63,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 360,
                    "line_start": 360,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 69,
                        "highlight_start": 63,
                        "text": "        pub fn subslice(&self, r: core::ops::Range<usize>) -> Option<Self> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:18:24\n   |\n18 |     fn cause(&self) -> Option<&error::Error> {\n   |                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 307,
                    "byte_start": 301,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 18,
                    "line_start": 18,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "    fn cause(&self) -> Option<&error::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:23:36\n   |\n23 |             ErrorKind::Other(_) => None,\n   |                                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 528,
                    "byte_start": 524,
                    "column_end": 40,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 36,
                        "text": "            ErrorKind::Other(_) => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:29:46\n   |\n29 |     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n   |                                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 630,
                    "byte_start": 624,
                    "column_end": 52,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 46,
                        "text": "    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:25:40\n   |\n25 |     pub fn from_rustc(rustc: &Path) -> Result<Self, Error> {\n   |                                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 603,
                    "byte_start": 597,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "    pub fn from_rustc(rustc: &Path) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |               Ok(value) => value,\n   |               ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |               Err(error) => return Err(error),\n   |               ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:38:13\n   |\n38 |             Some(line) => &line[\"release: \".len()..],\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1182,
                    "byte_start": 1178,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(line) => &line[\"release: \".len()..],"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:44:13\n   |\n44 |             Some(i) => &release[..i],\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1449,
                    "byte_start": 1445,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(i) => &release[..i],"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n   |\n56 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n   |\n57 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:87:13\n   |\n87 |     target: Option<OsString>,\n   |             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2614,
                    "byte_start": 2608,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "    target: Option<OsString>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:89:16\n   |\n89 |     rustflags: Option<Vec<String>>,\n   |                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2665,
                    "byte_start": 2659,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:89:23\n   |\n89 |     rustflags: Option<Vec<String>>,\n   |                       ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 2669,
                    "byte_start": 2666,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:89:27\n   |\n89 |     rustflags: Option<Vec<String>>,\n   |                           ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n83 | pub struct AutoCfg<String> {\n   |                   ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2523,
                        "byte_start": 2523,
                        "column_end": 19,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 19,
                            "text": "pub struct AutoCfg {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2676,
                    "byte_start": 2670,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:140:21\n    |\n140 |     pub fn new() -> Result<Self, Error> {\n    |                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4168,
                    "byte_start": 4162,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 140,
                    "line_start": 140,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "    pub fn new() -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:142:13\n    |\n142 |             Some(d) => Self::with_dir(d),\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4239,
                    "byte_start": 4235,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(d) => Self::with_dir(d),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Into` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:155:24\n    |\n155 |     pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Into` in this scope",
                "spans": [
                  {
                    "byte_end": 4673,
                    "byte_start": 4669,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 155,
                    "line_start": 155,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:155:50\n    |\n155 |     pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {\n    |                                                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4701,
                    "byte_start": 4695,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 155,
                    "line_start": 155,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "    pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n158 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4897,
                        "byte_start": 4864,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 158,
                        "line_start": 158,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n158 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4897,
                        "byte_start": 4864,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 158,
                        "line_start": 158,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n164 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5087,
                        "byte_start": 5039,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n164 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5087,
                        "byte_start": 5039,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:187:32\n    |\n187 |                     .collect::<Vec<String>>()\n    |                                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 6354,
                    "byte_start": 6351,
                    "column_end": 35,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 32,
                        "text": "                    .collect::<Vec<String>>()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:187:36\n    |\n187 |                     .collect::<Vec<String>>()\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n131 | impl<String> AutoCfg {\n    |     ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3832,
                        "byte_start": 3832,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "impl AutoCfg {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 6361,
                    "byte_start": 6355,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "                    .collect::<Vec<String>>()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:190:13\n    |\n190 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 6414,
                    "byte_start": 6410,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `AsRef` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:229:17\n    |\n229 |     fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `AsRef` in this scope",
                "spans": [
                  {
                    "byte_end": 7693,
                    "byte_start": 7688,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 229,
                    "line_start": 229,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "    fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:229:49\n    |\n229 |     fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {\n    |                                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 7726,
                    "byte_start": 7720,
                    "column_end": 55,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 229,
                    "line_start": 229,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 49,
                        "text": "    fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:243:17\n    |\n243 |         if let &Some(ref rustflags) = &self.rustflags {\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8176,
                    "byte_start": 8172,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 243,
                    "line_start": 243,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        if let &Some(ref rustflags) = &self.rustflags {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:247:16\n    |\n247 |         if let Some(target) = self.target.as_ref() {\n    |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 8279,
                    "byte_start": 8275,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 247,
                    "line_start": 247,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(target) = self.target.as_ref() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n252 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8490,
                        "byte_start": 8445,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 252,
                        "line_start": 252,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n252 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8490,
                        "byte_start": 8445,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 252,
                        "line_start": 252,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n256 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8658,
                        "byte_start": 8596,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 256,
                        "line_start": 256,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n256 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8658,
                        "byte_start": 8596,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 256,
                        "line_start": 256,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n258 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8738,
                        "byte_start": 8678,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 258,
                        "line_start": 258,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n258 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8738,
                        "byte_start": 8678,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 258,
                        "line_start": 258,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:56:13\n    |\n56  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n261 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1976,
                    "byte_start": 1974,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8825,
                        "byte_start": 8783,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 261,
                        "line_start": 261,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:13\n    |\n57  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n261 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2009,
                    "byte_start": 2006,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8825,
                        "byte_start": 8783,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 261,
                        "line_start": 261,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:409:23\n    |\n409 | fn mangle(s: &str) -> String {\n    |                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 13414,
                    "byte_start": 13408,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 409,
                    "line_start": 409,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "fn mangle(s: &str) -> String {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:419:14\n    |\n419 |     target: &Option<OsString>,\n    |              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 13608,
                    "byte_start": 13602,
                    "column_end": 20,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 419,
                    "line_start": 419,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 14,
                        "text": "    target: &Option<OsString>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:421:23\n    |\n421 |     cargo_target_dir: Option<OsString>,\n    |                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 13667,
                    "byte_start": 13661,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 421,
                    "line_start": 421,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "    cargo_target_dir: Option<OsString>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:20:37\n   |\n20 |             ErrorKind::Io(ref e) => Some(e),\n   |                                     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 391,
                    "byte_start": 387,
                    "column_end": 41,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 37,
                        "text": "            ErrorKind::Io(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:21:38\n   |\n21 |             ErrorKind::Num(ref e) => Some(e),\n   |                                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 437,
                    "byte_start": 433,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "            ErrorKind::Num(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs:22:39\n   |\n22 |             ErrorKind::Utf8(ref e) => Some(e),\n   |                                       ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 484,
                    "byte_start": 480,
                    "column_end": 43,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 39,
                        "text": "            ErrorKind::Utf8(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |               Err(error) => return Err(error),\n   |                                    ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:32:20\n   |\n32 |             return Err(error::from_str(\"could not execute rustc\"));\n   |                    ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 872,
                    "byte_start": 869,
                    "column_end": 23,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 20,
                        "text": "            return Err(error::from_str(\"could not execute rustc\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:39:28\n   |\n39 |             None => return Err(error::from_str(\"could not find rustc release\")),\n   |                            ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1250,
                    "byte_start": 1247,
                    "column_end": 31,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 28,
                        "text": "            None => return Err(error::from_str(\"could not find rustc release\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:54:9\n   |\n54 |         Ok(Version::new(\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1884,
                    "byte_start": 1882,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(Version::new("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n   |\n57 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:143:21\n    |\n143 |             None => Err(error::from_str(\"no OUT_DIR specified!\")),\n    |                     ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 4288,
                    "byte_start": 4285,
                    "column_end": 24,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 21,
                        "text": "            None => Err(error::from_str(\"no OUT_DIR specified!\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n158 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4897,
                        "byte_start": 4864,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 158,
                        "line_start": 158,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n164 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 5087,
                        "byte_start": 5039,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:166:20\n    |\n166 |             return Err(error::from_str(\"output path is not a writable directory\"));\n    |                    ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 5172,
                    "byte_start": 5169,
                    "column_end": 23,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 166,
                    "line_start": 166,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 20,
                        "text": "            return Err(error::from_str(\"output path is not a writable directory\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:212:9\n    |\n212 |         Ok(ac)\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7077,
                    "byte_start": 7075,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 212,
                    "line_start": 212,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(ac)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n252 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8490,
                        "byte_start": 8445,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 252,
                        "line_start": 252,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n256 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8658,
                        "byte_start": 8596,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 256,
                        "line_start": 256,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n258 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8738,
                        "byte_start": 8678,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 258,
                        "line_start": 258,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function `drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:259:9\n    |\n259 |         drop(stdin);\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 8752,
                    "byte_start": 8748,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 259,
                    "line_start": 259,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        drop(stdin);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:57:34\n    |\n57  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n261 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2030,
                    "byte_start": 2027,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1911,
                        "byte_start": 1895,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8825,
                        "byte_start": 8783,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 261,
                        "line_start": 261,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs:262:9\n    |\n262 |         Ok(status.success())\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 8837,
                    "byte_start": 8835,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 262,
                    "line_start": 262,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(status.success())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:100:9\n    |\n100 |         println!(\"cargo:rustc-cfg=radium_atomic_ptr\");\n    |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3593,
                    "byte_start": 3586,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=radium_atomic_ptr\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:97:9\n   |\n97 |         println!(\"cargo:rustc-cfg=radium_atomic_64\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3508,
                    "byte_start": 3501,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=radium_atomic_64\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:94:9\n   |\n94 |         println!(\"cargo:rustc-cfg=radium_atomic_32\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3424,
                    "byte_start": 3417,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=radium_atomic_32\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:91:9\n   |\n91 |         println!(\"cargo:rustc-cfg=radium_atomic_16\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3340,
                    "byte_start": 3333,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=radium_atomic_16\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:88:9\n   |\n88 |         println!(\"cargo:rustc-cfg=radium_atomic_8\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3257,
                    "byte_start": 3250,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=radium_atomic_8\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:30:3\n   |\n30 | #[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1433,
                    "byte_start": 1427,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.130",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.130\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.130\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde_derive-883c650744dfbccf\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde_derive-883c650744dfbccf\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:61:33\n   |\n61 | fn main() -> Result<(), Box<dyn std::error::Error>> {\n   |                                 ^^^ can't find crate\n   |\n   = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 2161,
                    "byte_start": 2158,
                    "column_end": 36,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 33,
                        "text": "fn main() -> Result<(), Box<dyn std::error::Error>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:64:18\n   |\n64 |     let target = std::env::var(\"TARGET\")?;\n   |                  ^^^ can't find crate\n   |\n   = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 2237,
                    "byte_start": 2234,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "    let target = std::env::var(\"TARGET\")?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:61:14\n   |\n61 | fn main() -> Result<(), Box<dyn std::error::Error>> {\n   |              ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n28 + use core::fmt::Result;\n   |\n28 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1307,
                        "byte_start": 1307,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "use core::fmt::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// Collection of flags indicating whether the target processor supports atomic"
                          }
                        ]
                      },
                      {
                        "byte_end": 1307,
                        "byte_start": 1307,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "use core::result::Result;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// Collection of flags indicating whether the target processor supports atomic"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2145,
                    "byte_start": 2139,
                    "column_end": 20,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 14,
                        "text": "fn main() -> Result<(), Box<dyn std::error::Error>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Box` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:61:25\n   |\n61 | fn main() -> Result<(), Box<dyn std::error::Error>> {\n   |                         ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Box` in this scope",
                "spans": [
                  {
                    "byte_end": 2153,
                    "byte_start": 2150,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "fn main() -> Result<(), Box<dyn std::error::Error>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs:103:5\n    |\n103 |     Ok(())\n    |     ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n28  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1307,
                        "byte_start": 1307,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "use core::result::Result::Ok;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// Collection of flags indicating whether the target processor supports atomic"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 3646,
                    "byte_start": 3644,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "    Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0412, E0425, E0463, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0412, E0425, E0463, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0412`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0412`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.81\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\syn-dcda3df90b52d121\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\syn-dcda3df90b52d121\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.0.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.71\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.71\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcc-ba6dec25593f2c3c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcc-ba6dec25593f2c3c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.130",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.130\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.130\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde-fe96856477e09246\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde-fe96856477e09246\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.105",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\libc-13bdf9390c1ba298\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\libc-13bdf9390c1ba298\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\proc-macro2-e76b6ce0d7b5a20c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\proc-macro2-e76b6ce0d7b5a20c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std",
                "use_std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\memchr-bf87eb89219cc15d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\memchr-bf87eb89219cc15d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\proc-macro2-e76b6ce0d7b5a20c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\proc-macro2-e76b6ce0d7b5a20c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.81\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\syn-dcda3df90b52d121\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\syn-dcda3df90b52d121\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.0.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.71\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.71\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcc-ba6dec25593f2c3c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcc-ba6dec25593f2c3c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std",
                "use_std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\memchr-bf87eb89219cc15d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\memchr-bf87eb89219cc15d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.105",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\libc-13bdf9390c1ba298\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\libc-13bdf9390c1ba298\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.130",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.130\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.130\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde_derive-883c650744dfbccf\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde_derive-883c650744dfbccf\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.130",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.130\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.130\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde-fe96856477e09246\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde-fe96856477e09246\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.32",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "lexerror_display",
                "hygiene",
                "literal_from_str",
                "is_available",
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\proc-macro2-ae37a2d5283649af\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.81",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\syn-8cbcad2b69bfcc4c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin-0.5.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libspin-59ca346c75dfc34c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libspin-59ca346c75dfc34c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.130",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "underscore_consts",
                "ptr_addr_of"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde_derive-b28deaa8dfb061e1\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "atomic_cas",
                "has_atomics"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\log-0c76d85a10bb1a3f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.7.1\\src\\untrusted.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libuntrusted-da2c17b7c7b787c6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libuntrusted-da2c17b7c7b787c6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.130",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "ops_bound",
                "core_reverse",
                "de_boxed_c_str",
                "de_boxed_path",
                "de_rc_dst",
                "core_duration",
                "integer128",
                "range_inclusive",
                "iterator_try_fold",
                "num_nonzero",
                "serde_derive",
                "core_try_from",
                "num_nonzero_signed",
                "systemtime_checked_add",
                "std_atomic64",
                "std_atomic"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\serde-04e679245cfbcf67\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libversion_check-fd79c52de2f25ab0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libversion_check-fd79c52de2f25ab0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.105",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_priv_mod_use",
                "libc_union",
                "libc_const_size_of",
                "libc_align",
                "libc_core_cvoid",
                "libc_packedN",
                "libc_cfg_target_vendor"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\libc-2fca2ebbd796021f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "memchr_runtime_simd",
                "memchr_runtime_sse2",
                "memchr_runtime_sse42",
                "memchr_runtime_avx"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\memchr-2fec3ab98df676ff\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\radium-14a71f62f1a42028\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\radium-14a71f62f1a42028\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtinyvec_macros-96f2f8682cdea7f2.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtinyvec_macros-96f2f8682cdea7f2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "radium_atomic_8",
                "radium_atomic_16",
                "radium_atomic_32",
                "radium_atomic_64",
                "radium_atomic_ptr"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\radium-125333bc733267ea\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.105",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblibc-49204c8a9b9995e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblibc-49204c8a9b9995e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tap@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtap-6213a6c64d788a52.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtap-6213a6c64d788a52.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.4.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.4.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.4.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: linking with `link.exe` failed: exit code: 1171\n  |\n  = note: \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcX7Rnv8\\\\symbols.o\" \"<2 object files omitted>\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp46eisu6a\\\\skulpin-0.14.1\\\\target\\\\debug\\\\deps/{libautocfg-8a80f11453d57fa4.rlib}.rlib\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp46eisu6a\\\\skulpin-0.14.1\\\\target\\\\debug\\\\build\\\\miniz_oxide-691f383c622833f9\\\\build_script_build-691f383c622833f9.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"\n  = note: some arguments are omitted. use `--verbose` to show all linker arguments\n  = note: \u240d\n            Version 14.44.35209.0\u240d\n          \u240d\n            ExceptionCode            = C06D007E\u240d\n            ExceptionFlags           = 00000080\u240d\n            ExceptionAddress         = 00007FFD4E4D7F9A (00007FFD4E410000) \"C:\\WINDOWS\\System32\\KERNELBASE.dll\"\u240d\n            NumberParameters         = 00000001\u240d\n            ExceptionInformation[ 0] = 58CC7FB3E0\u240d\n          \u240d\n          CONTEXT:\u240d\n            Rax    = 0  R8     = 0\u240d\n            Rbx    = 58CC7FB460  R9     = 0\u240d\n            Rcx    = 0  R10    = 0\u240d\n            Rdx    = 0  R11    = 0\u240d\n            Rsp    = 58CC7FB2B0  R12    = 4\u240d\n            Rbp    = 1  E13    = 7FF6080E0000\u240d\n            Rsi    = 0  R14    = 7FF6083C69B0\u240d\n            Rdi    = C06D007E  R15    = 7FF6083C6218\u240d\n            Rip    = 7FFD4E4D7F9A  EFlags = 202\u240d\n            SegCs  = 33  SegDs  = 2B\u240d\n            SegSs  = 2B  SegEs  = 2B\u240d\n            SegFs  = 53  SegGs  = 2B\u240d\n            Dr0    = 0  Dr3    = 0\u240d\n            Dr1    = 0  Dr6    = 0\u240d\n            Dr2    = 0  Dr7    = 0\u240d\n          LINK : fatal error LNK1171: unable to load ole32.dll (error code: 0)\u240d\n          \n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\VC\\\\Tools\\\\MSVC\\\\14.44.35207\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\rustcX7Rnv8\\\\symbols.o\" \"<2 object files omitted>\" \"C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp46eisu6a\\\\skulpin-0.14.1\\\\target\\\\debug\\\\deps/{libautocfg-8a80f11453d57fa4.rlib}.rlib\" \"<sysroot>\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib\" \"kernel32.lib\" \"kernel32.lib\" \"ntdll.lib\" \"userenv.lib\" \"ws2_32.lib\" \"dbghelp.lib\" \"/defaultlib:msvcrt\" \"/NXCOMPAT\" \"/OUT:C:\\\\Users\\\\davet\\\\AppData\\\\Local\\\\Temp\\\\tmp46eisu6a\\\\skulpin-0.14.1\\\\target\\\\debug\\\\build\\\\miniz_oxide-691f383c622833f9\\\\build_script_build-691f383c622833f9.exe\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/PDBALTPATH:%_PDB%\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/NATVIS:<sysroot>\\\\lib\\\\rustlib\\\\etc\\\\libstd.natvis\"",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "some arguments are omitted. use `--verbose` to show all linker arguments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "\r\n  Version 14.44.35209.0\r\n\r\n  ExceptionCode            = C06D007E\r\n  ExceptionFlags           = 00000080\r\n  ExceptionAddress         = 00007FFD4E4D7F9A (00007FFD4E410000) \"C:\\WINDOWS\\System32\\KERNELBASE.dll\"\r\n  NumberParameters         = 00000001\r\n  ExceptionInformation[ 0] = 58CC7FB3E0\r\n\r\nCONTEXT:\r\n  Rax    = 0  R8     = 0\r\n  Rbx    = 58CC7FB460  R9     = 0\r\n  Rcx    = 0  R10    = 0\r\n  Rdx    = 0  R11    = 0\r\n  Rsp    = 58CC7FB2B0  R12    = 4\r\n  Rbp    = 1  E13    = 7FF6080E0000\r\n  Rsi    = 0  R14    = 7FF6083C69B0\r\n  Rdi    = C06D007E  R15    = 7FF6083C6218\r\n  Rip    = 7FFD4E4D7F9A  EFlags = 202\r\n  SegCs  = 33  SegDs  = 2B\r\n  SegSs  = 2B  SegEs  = 2B\r\n  SegFs  = 53  SegGs  = 2B\r\n  Dr0    = 0  Dr3    = 0\r\n  Dr1    = 0  Dr6    = 0\r\n  Dr2    = 0  Dr7    = 0\r\nLINK : fatal error LNK1171: unable to load ole32.dll (error code: 0)\r\n",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "linking with `link.exe` failed: exit code: 1171",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matches@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matches",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.9\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libmatches-7d0eb9dfa0f90b34.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libmatches-7d0eb9dfa0f90b34.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "libloaderapi",
                "minwinbase",
                "minwindef",
                "ntsecapi",
                "ntstatus",
                "processenv",
                "std",
                "winbase",
                "wincon",
                "winerror",
                "winnt",
                "wtypesbase"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\winapi-fd3088e43fc1bc32\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\winapi-fd3088e43fc1bc32\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#wyz@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wyz",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libwyz-e1a6aec0ecdbde72.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libwyz-e1a6aec0ecdbde72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblog-939070656d51d835.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblog-939070656d51d835.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#funty@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "funty",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libfunty-c96fc86f64bc7073.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libfunty-c96fc86f64bc7073.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#instant@0.1.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\instant-0.1.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "instant",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\instant-0.1.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "js-sys",
                "now",
                "wasm-bindgen",
                "wasm-bindgen_rs",
                "web-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libinstant-c7f344f8ba32b411.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.105",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.105\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\liblibc-dce9251161b813c8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#nom@6.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nom-6.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nom-6.1.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "bitvec",
                "funty",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\nom-8afdea03701b6b20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\nom-8afdea03701b6b20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "radium",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.5.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libradium-2ec7810eded09550.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libradium-2ec7810eded09550.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "lazy_static",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\crossbeam-utils-4d56b2a0da4fbcd5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\crossbeam-utils-4d56b2a0da4fbcd5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.1.0\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libpercent_encoding-964a20c6282b7e05.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libpercent_encoding-964a20c6282b7e05.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.16.20\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ring-0.16.20\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "dev_urandom_fallback",
                "once_cell"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\ring-a08cac993423cc0c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\build\\ring-a08cac993423cc0c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#glob@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glob-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "glob",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\glob-0.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libglob-60333de9371d956c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libglob-60333de9371d956c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libproc_macro2-b9d02ec4b911570a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libproc_macro2-b9d02ec4b911570a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std",
                "use_std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libmemchr-c012a45fae7e8233.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libmemchr-c012a45fae7e8233.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.5.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtinyvec-2b77b5e46e1f8bd6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp46eisu6a\\skulpin-0.14.1\\target\\debug\\deps\\libtinyvec-2b77b5e46e1f8bd6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 302
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 10,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.2.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8",
                    "dependencies": [
                      {
                        "name": "matches",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0019",
                    "package": "mio",
                    "title": "Tokens for named pipes may be delivered after deregistration",
                    "description": "## Impact\n\nWhen using named pipes on Windows, mio will under some circumstances return invalid tokens that correspond to named pipes that have already been deregistered from the mio registry. The impact of this vulnerability depends on how mio is used. For some applications, invalid tokens may be ignored or cause a warning or a crash. On the other hand, for applications that store pointers in the tokens, this vulnerability may result in a use-after-free.\n\nFor users of Tokio, this vulnerability is serious and can result in a use-after-free in Tokio.\n\nThe vulnerability is Windows-specific, and can only happen if you are using named pipes. Other IO resources are not affected.\n\n## Affected versions\n\nThis vulnerability has been fixed in mio v0.8.11.\n\nAll versions of mio between v0.7.2 and v0.8.10 are vulnerable.\n\nTokio is vulnerable when you are using a vulnerable version of mio AND you are using at least Tokio v1.30.0. Versions of Tokio prior to v1.30.0 will ignore invalid tokens, so they are not vulnerable.\n\n## Workarounds\n\nVulnerable libraries that use mio can work around this issue by detecting and ignoring invalid tokens.\n\n## Technical details\n\nWhen an IO resource registered with mio has a readiness event, mio delivers that readiness event to the user using a user-specified token. Mio guarantees that when an IO resource is [deregistered](https://docs.rs/mio/latest/mio/struct.Registry.html#method.deregister), then it will never return the token for that IO resource again. However, for named pipes on windows, mio may sometimes deliver the token for a named pipe even though the named pipe has been previously deregistered.\n\nThis vulnerability was originally reported in the Tokio issue tracker: [tokio-rs/tokio#6369](https://github.com/tokio-rs/tokio/issues/6369)  \nThis vulnerability was fixed in: [tokio-rs/mio#1760](https://github.com/tokio-rs/mio/pull/1760)\n\nThank you to [@rofoun](https://github.com/rofoun) and [@radekvit](https://github.com/radekvit) for discovering and reporting this issue.",
                    "date": "2024-03-04",
                    "aliases": [
                      "CVE-2024-27308",
                      "GHSA-r8w9-5wcg-vfj7"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/mio/security/advisories/GHSA-r8w9-5wcg-vfj7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.11"
                    ],
                    "unaffected": [
                      "<0.7.2"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {
                      "mio::windows::NamedPipe::new": [
                        ">=0.7.2, <=0.8.10"
                      ]
                    }
                  },
                  "package": {
                    "name": "mio",
                    "version": "0.7.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8067b404fe97c70829f082dec8bcf4f71225d7eaea1d8645349cb76fa06205cc",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.4.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "miow",
                        "version": "0.3.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ntapi",
                        "version": "0.3.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0070",
                    "package": "nalgebra",
                    "title": "VecStorage Deserialize Allows Violation of Length Invariant",
                    "description": "The `Deserialize` implementation for `VecStorage` did not maintain the invariant that the number of elements must equal `nrows * ncols`. Deserialization of specially crafted inputs could allow memory access beyond allocation of the vector.\n\nThis flaw was introduced in v0.11.0 ([`086e6e`](https://github.com/dimforge/nalgebra/commit/086e6e719f53fecba6dadad2e953a487976387f5)) due to the addition of an automatically derived implementation of `Deserialize` for `MatrixVec`. `MatrixVec` was later renamed to `VecStorage` in v0.16.13 ([`0f66403`](https://github.com/dimforge/nalgebra/commit/0f66403cbbe9eeac15cedd8a906c0d6a3d8841f2)) and continued to use the automatically derived implementation of `Deserialize`.\n\nThis flaw was corrected in commit [`5bff536`](https://github.com/dimforge/nalgebra/commit/5bff5368bf38ddfa31416e4ae9897b163031a513) by returning an error during deserialization if the number of elements does not exactly match the expected size.",
                    "date": "2021-06-06",
                    "aliases": [
                      "CVE-2021-38190",
                      "GHSA-3w8g-xr3f-2mp8"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "memory-exposure"
                    ],
                    "keywords": [
                      "memory-safety"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dimforge/nalgebra/issues/883",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.27.1"
                    ],
                    "unaffected": [
                      "<0.11.0"
                    ]
                  },
                  "affected": null,
                  "package": {
                    "name": "nalgebra",
                    "version": "0.24.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1a9002895a0de45e3cde58b36d0cf2f83249e7dba4a43ee64dafbf01bfd464ff",
                    "dependencies": [
                      {
                        "name": "approx",
                        "version": "0.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "generic-array",
                        "version": "0.14.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "matrixmultiply",
                        "version": "0.2.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-complex",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-rational",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-traits",
                        "version": "0.2.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rand",
                        "version": "0.7.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rand_distr",
                        "version": "0.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "simba",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typenum",
                        "version": "1.14.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0119",
                    "package": "nix",
                    "title": "Out-of-bounds write in nix::unistd::getgrouplist",
                    "description": "On certain platforms, if a user has more than 16 groups, the\n`nix::unistd::getgrouplist` function will call the libc `getgrouplist`\nfunction with a length parameter greater than the size of the buffer it\nprovides, resulting in an out-of-bounds write and memory corruption.\n\nThe libc `getgrouplist` function takes an in/out parameter `ngroups`\nspecifying the size of the group buffer. When the buffer is too small to\nhold all of the requested user's group memberships, some libc\nimplementations, including glibc and Solaris libc, will modify `ngroups`\nto indicate the actual number of groups for the user, in addition to\nreturning an error. The version of `nix::unistd::getgrouplist` in nix\n0.16.0 and up will resize the buffer to twice its size, but will not\nread or modify the `ngroups` variable. Thus, if the user has more than\ntwice as many groups as the initial buffer size of 8, the next call to\n`getgrouplist` will then write past the end of the buffer.\n\nThe issue would require editing /etc/groups to exploit, which is usually\nonly editable by the root user.",
                    "date": "2021-09-27",
                    "aliases": [
                      "CVE-2021-45707",
                      "GHSA-76w9-p8mg-j927",
                      "GHSA-wgrg-5h56-jg27"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "nss"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/nix-rust/nix/issues/1541",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      "^0.20.2",
                      "^0.21.2",
                      "^0.22.2",
                      ">=0.23.0"
                    ],
                    "unaffected": [
                      "<0.16.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "linux",
                      "freebsd",
                      "android",
                      "netbsd",
                      "dragonfly",
                      "openbsd",
                      "fuchsia"
                    ],
                    "functions": {
                      "nix::unistd::getgrouplist": [
                        ">=0.16.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "nix",
                    "version": "0.18.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "83450fe6a6142ddd95fb064b746083fc4ef1705fe81f64a64e1d4b39f54a1055",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cc",
                        "version": "1.0.71",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0119",
                    "package": "nix",
                    "title": "Out-of-bounds write in nix::unistd::getgrouplist",
                    "description": "On certain platforms, if a user has more than 16 groups, the\n`nix::unistd::getgrouplist` function will call the libc `getgrouplist`\nfunction with a length parameter greater than the size of the buffer it\nprovides, resulting in an out-of-bounds write and memory corruption.\n\nThe libc `getgrouplist` function takes an in/out parameter `ngroups`\nspecifying the size of the group buffer. When the buffer is too small to\nhold all of the requested user's group memberships, some libc\nimplementations, including glibc and Solaris libc, will modify `ngroups`\nto indicate the actual number of groups for the user, in addition to\nreturning an error. The version of `nix::unistd::getgrouplist` in nix\n0.16.0 and up will resize the buffer to twice its size, but will not\nread or modify the `ngroups` variable. Thus, if the user has more than\ntwice as many groups as the initial buffer size of 8, the next call to\n`getgrouplist` will then write past the end of the buffer.\n\nThe issue would require editing /etc/groups to exploit, which is usually\nonly editable by the root user.",
                    "date": "2021-09-27",
                    "aliases": [
                      "CVE-2021-45707",
                      "GHSA-76w9-p8mg-j927",
                      "GHSA-wgrg-5h56-jg27"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "nss"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/nix-rust/nix/issues/1541",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      "^0.20.2",
                      "^0.21.2",
                      "^0.22.2",
                      ">=0.23.0"
                    ],
                    "unaffected": [
                      "<0.16.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "linux",
                      "freebsd",
                      "android",
                      "netbsd",
                      "dragonfly",
                      "openbsd",
                      "fuchsia"
                    ],
                    "functions": {
                      "nix::unistd::getgrouplist": [
                        ">=0.16.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "nix",
                    "version": "0.20.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "fa9b4819da1bc61c0ea48b63b7bc8604064dd43013e7cc325df098d49cd7c18a",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cc",
                        "version": "1.0.71",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0013",
                    "package": "regex",
                    "title": "Regexes with large repetitions on empty sub-expressions take a very long time to parse",
                    "description": "The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                    "date": "2022-03-08",
                    "aliases": [
                      "CVE-2022-24713",
                      "GHSA-m5pq-gvj9-9vr8"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.5.5"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "regex",
                    "version": "1.5.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461",
                    "dependencies": [
                      {
                        "name": "aho-corasick",
                        "version": "0.7.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.4.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "regex-syntax",
                        "version": "0.6.25",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0009",
                    "package": "ring",
                    "title": "Some AES functions may panic when overflow checking is enabled.",
                    "description": "`ring::aead::quic::HeaderProtectionKey::new_mask()` may panic when overflow\nchecking is enabled. In the QUIC protocol, an attacker can induce this panic by\nsending a specially-crafted packet. Even unintentionally it is likely to occur\nin 1 out of every 2**32 packets sent and/or received.\n\nOn 64-bit targets operations using `ring::aead::{AES_128_GCM, AES_256_GCM}` may\npanic when overflow checking is enabled, when encrypting/decrypting approximately\n68,719,476,700 bytes (about 64 gigabytes) of data in a single chunk. Protocols\nlike TLS and SSH are not affected by this because those protocols break large\namounts of data into small chunks. Similarly, most applications will not\nattempt to encrypt/decrypt 64GB of data in one chunk.\n\nOverflow checking is not enabled in release mode by default, but\n`RUSTFLAGS=\"-C overflow-checks\"` or `overflow-checks = true` in the Cargo.toml\nprofile can override this. Overflow checking is usually enabled by default in\ndebug mode.",
                    "date": "2025-03-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.17.12"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "ring",
                    "version": "0.16.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.0.71",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.8.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.5.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0336",
                    "package": "rustls",
                    "title": "`rustls::ConnectionCommon::complete_io` could fall into an infinite loop based on network input",
                    "description": "If a `close_notify` alert is received during a handshake, `complete_io`\ndoes not terminate.\n\nCallers which do not call `complete_io` are not affected.\n\n`rustls-tokio` and `rustls-ffi` do not call `complete_io`\nand are not affected.\n\n`rustls::Stream` and `rustls::StreamOwned` types use\n`complete_io` and are affected.",
                    "date": "2024-04-19",
                    "aliases": [
                      "CVE-2024-32650",
                      "GHSA-6g7w-8wpp-frhj"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.23.5",
                      ">=0.22.4, <0.23.0",
                      ">=0.21.11, <0.22.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "rustls::ConnectionCommon::complete_io": [
                        "<=0.23.4",
                        "<=0.22.3",
                        "<=0.21.10",
                        "^0.20"
                      ]
                    }
                  },
                  "package": {
                    "name": "rustls",
                    "version": "0.20.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "9b5ac6078ca424dc1d3ae2328526a76787fecc7f8011f520e3276730e711fc95",
                    "dependencies": [
                      {
                        "name": "log",
                        "version": "0.4.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ring",
                        "version": "0.16.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "sct",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "webpki",
                        "version": "0.22.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0006",
                    "package": "shlex",
                    "title": "Multiple issues involving quote API",
                    "description": "## Issue 1: Failure to quote characters\n\nAffected versions of this crate allowed the bytes `{` and `\\xa0` to appear\nunquoted and unescaped in command arguments.\n\nIf the output of `quote` or `join` is passed to a shell, then what should be a\nsingle command argument could be interpreted as multiple arguments.\n\nThis does not *directly* allow arbitrary command execution (you can't inject a\ncommand substitution or similar).  But depending on the command you're running,\nbeing able to inject multiple arguments where only one is expected could lead\nto undesired consequences, potentially including arbitrary command execution.\n\nThe flaw was corrected in version 1.2.1 by escaping additional characters.\nUpdating to 1.3.0 is recommended, but 1.2.1 offers a more minimal fix if\ndesired.\n\nWorkaround: Check for the bytes `{` and `\\xa0` in `quote`/`join` input or\noutput.\n\n(Note: `{` is problematic because it is used for glob expansion.  `\\xa0` is\nproblematic because it's treated as a word separator in [specific\nenvironments][solved-xa0].)\n\n## Issue 2: Dangerous API w.r.t. nul bytes\n\nVersion 1.3.0 deprecates the `quote` and `join` APIs in favor of `try_quote`\nand `try_join`, which behave the same except that they have `Result` return\ntype, returning `Err` if the input contains nul bytes.\n\nStrings containing nul bytes generally cannot be used in Unix command arguments\nor environment variables, and most shells cannot handle nul bytes even\ninternally.  If you try to pass one anyway, then the results might be\nsecurity-sensitive in uncommon scenarios.  [More details here.][nul-bytes]\n\nDue to the low severity, the behavior of the original `quote` and `join` APIs\nhas not changed; they continue to allow nuls.\n\nWorkaround: Manually check for nul bytes in `quote`/`join` input or output.\n\n## Issue 3: Lack of documentation for interactive shell risks\n\nThe `quote` family of functions does not and cannot escape control characters.\nWith non-interactive shells this is perfectly safe, as control characters have\nno special effect.  But if you writing directly to the standard input of an\ninteractive shell (or through a pty), then control characters [can cause\nmisbehavior including arbitrary command injection.][control-characters]\n\nThis is essentially unfixable, and has not been patched.  But as of version\n1.3.0, documentation has been added.\n\nFuture versions of `shlex` may add API variants that avoid the issue at the\ncost of reduced portability.\n\n[solved-xa0]: https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#solved-xa0\n[nul-bytes]: https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#nul-bytes\n[control-characters]: https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#control-characters-interactive-contexts-only",
                    "date": "2024-01-21",
                    "aliases": [
                      "GHSA-r7qv-8r2h-pg27"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "code-execution",
                      "file-disclosure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.3.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "shlex::bytes::join": [
                        "<1.2.1"
                      ],
                      "shlex::bytes::quote": [
                        "<1.2.1"
                      ],
                      "shlex::join": [
                        "<1.2.1"
                      ],
                      "shlex::quote": [
                        "<1.2.1"
                      ]
                    }
                  },
                  "package": {
                    "name": "shlex",
                    "version": "1.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3",
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0052",
                    "package": "webpki",
                    "title": "webpki: CPU denial of service in certificate path building",
                    "description": "When this crate is given a pathological certificate chain to validate, it will\nspend CPU time exponential with the number of candidate certificates at each\nstep of path building.\n\nBoth TLS clients and TLS servers that accept client certificate are affected.\n\nThis was previously reported in\n<https://github.com/briansmith/webpki/issues/69> and re-reported recently\nby Luke Malinowski.\n\nwebpki 0.22.1 included a partial fix and webpki 0.22.2 added further fixes.",
                    "date": "2023-08-22",
                    "aliases": [
                      "GHSA-8qv2-5vq6-g2g7"
                    ],
                    "related": [
                      "CVE-2018-16875"
                    ],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [
                      "certificate",
                      "path building",
                      "x509"
                    ],
                    "cvss": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.22.2"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "webpki",
                    "version": "0.22.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "f095d78192e208183081cc07bc5515ef55216397af48b873e5edcd72637fa1bd",
                    "dependencies": [
                      {
                        "name": "ring",
                        "version": "0.16.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.11.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "derivative",
                    "version": "2.2.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b",
                    "dependencies": [
                      {
                        "name": "proc-macro2",
                        "version": "1.0.32",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "quote",
                        "version": "1.0.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "syn",
                        "version": "1.0.81",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0388",
                    "package": "derivative",
                    "title": "`derivative` is unmaintained; consider using an alternative",
                    "description": "The [`derivative`](https://crates.io/crates/derivative) crate is no longer maintained.\nConsider using any alternative, for instance:\n- [derive_more](https://crates.io/crates/derive_more)\n- [derive-where](https://crates.io/crates/derive-where)\n- [educe](https://crates.io/crates/educe)",
                    "date": "2024-06-26",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/mcarton/rust-derivative/issues/117",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "generational-arena",
                    "version": "0.2.8",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8e1d3b771574f62d0548cee0ad9057857e9fc25d7a3335f140c84f6acd0bf601",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0014",
                    "package": "generational-arena",
                    "title": "`generational-arena` is unmaintained",
                    "description": "The `generational-arena` crate's repository has been archived and is no longer maintained.\n\n## Alternatives\n - [slotmap](https://crates.io/crates/slotmap)",
                    "date": "2024-02-11",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/fitzgen/generational-arena/issues/55",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "js-sys",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasm-bindgen",
                        "version": "0.2.78",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "memmap",
                    "version": "0.7.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0077",
                    "package": "memmap",
                    "title": "memmap is unmaintained",
                    "description": "The author of the `memmap` crate is unresponsive.\n\nMaintained alternatives:\n\n- [`memmap2`](https://github.com/RazrFalcon/memmap2-rs)",
                    "date": "2020-12-02",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/danburkert/memmap-rs/issues/90",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">0.7.0"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "net2",
                    "version": "0.2.37",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "391630d12b68002ae1e25e8f974306474966550ad82dac6886fb8910c19568ae",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0016",
                    "package": "net2",
                    "title": "`net2` crate has been deprecated; use `socket2` instead",
                    "description": "The [`net2`](https://crates.io/crates/net2) crate has been deprecated\nand users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.",
                    "date": "2020-05-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "paste",
                    "version": "1.0.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "acbf547ad0c65e31259204bd90935776d1c693cec2f4ff7abb7a1bbbd40dfe58",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0436",
                    "package": "paste",
                    "title": "paste - no longer maintained",
                    "description": "The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository",
                    "date": "2024-10-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dtolnay/paste",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ring",
                    "version": "0.16.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.0.71",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.8.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.5.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0010",
                    "package": "ring",
                    "title": "Versions of *ring* prior to 0.17 are unmaintained.",
                    "description": "*ring* 0.16.20 was released over 4 years ago and isn't maintained, tested, etc.\n\nAdditionally, the project's general policy is to only patch the latest release,\nwhich is 0.17.12 now. It will be difficult for anybody to backport future fixes\nto versions earlier than 0.17.10 due to license changes.",
                    "date": "2025-03-05",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/discussions/2450",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">=0.17"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "rusttype",
                    "version": "0.7.9",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "310942406a39981bed7e12b09182a221a29e0990f3e7e0c971f131922ed135d5",
                    "dependencies": [
                      {
                        "name": "rusttype",
                        "version": "0.8.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0140",
                    "package": "rusttype",
                    "title": "rusttype is Unmaintained",
                    "description": "The maintainer has advised this crate is deprecated and will not\nreceive any maintenance.\n\nThe maintainer has further advised to migrate over to `ab_glyph`.\n\nLast release seems to have been over two years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ab_glyph](https://crates.io/crates/ab_glyph)",
                    "date": "2021-04-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.redox-os.org/redox-os/rusttype/-/issues/148",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "rusttype",
                    "version": "0.8.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "9f61411055101f7b60ecf1041d87fb74205fb20b0c7a723f07ef39174cf6b4c0",
                    "dependencies": [
                      {
                        "name": "approx",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ordered-float",
                        "version": "1.1.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stb_truetype",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0140",
                    "package": "rusttype",
                    "title": "rusttype is Unmaintained",
                    "description": "The maintainer has advised this crate is deprecated and will not\nreceive any maintenance.\n\nThe maintainer has further advised to migrate over to `ab_glyph`.\n\nLast release seems to have been over two years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ab_glyph](https://crates.io/crates/ab_glyph)",
                    "date": "2021-04-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.redox-os.org/redox-os/rusttype/-/issues/148",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "rusttype",
                    "version": "0.9.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "dc7c727aded0be18c5b80c1640eae0ac8e396abf6fa8477d96cb37d18ee5ec59",
                    "dependencies": [
                      {
                        "name": "ab_glyph_rasterizer",
                        "version": "0.1.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "owned_ttf_parser",
                        "version": "0.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0140",
                    "package": "rusttype",
                    "title": "rusttype is Unmaintained",
                    "description": "The maintainer has advised this crate is deprecated and will not\nreceive any maintenance.\n\nThe maintainer has further advised to migrate over to `ab_glyph`.\n\nLast release seems to have been over two years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ab_glyph](https://crates.io/crates/ab_glyph)",
                    "date": "2021-04-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.redox-os.org/redox-os/rusttype/-/issues/148",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "stb_truetype",
                    "version": "0.3.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "f77b6b07e862c66a9f3e62a07588fee67cd90a9135a2b942409f195507b4fb51",
                    "dependencies": [
                      {
                        "name": "byteorder",
                        "version": "1.4.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0020",
                    "package": "stb_truetype",
                    "title": "`stb_truetype` crate has been deprecated; use `ttf-parser` instead",
                    "description": "This crate was maintained for use in rusttype which has switched to use [ttf-parser](https://crates.io/crates/ttf-parser)",
                    "date": "2020-04-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.redox-os.org/redox-os/stb_truetype-rs/-/commit/f1f5be4794e87bfc80a4255bc3f23ed75dd77645",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "ash",
                    "version": "0.32.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "06063a002a77d2734631db74e8f4ce7148b77fe522e6bca46f2ae7774fd48112",
                    "dependencies": [
                      {
                        "name": "libloading",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0090",
                    "package": "ash",
                    "title": "Reading on uninitialized memory may cause UB ( `util::read_spv()` )",
                    "description": "Affected versions of this crate passes an uninitialized buffer to a user-provided `Read` implementation.\n\nArbitrary `Read` implementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer.\nReading from uninitialized memory produces undefined values that can quickly invoke undefined behavior.",
                    "date": "2021-01-07",
                    "aliases": [
                      "CVE-2021-45688",
                      "GHSA-64wv-8vwp-xgw2",
                      "GHSA-qj69-c89v-jwq2"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/MaikKlein/ash/issues/354",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.33.1"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.105",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "bumpalo",
                    "version": "3.8.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8f1e260c3a9040a7c19a12468758f4c16f31a81a1fe087482be9570ec864bb6c",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0078",
                    "package": "bumpalo",
                    "title": "Use-after-free due to a lifetime error in `Vec::into_iter()`",
                    "description": "In affected versions of this crate, the lifetime of the iterator produced by\n`Vec::into_iter()` is not constrained to the lifetime of the `Bump` that\nallocated the vector's memory. Using the iterator after the `Bump` is dropped\ncauses use-after-free accesses.\n\nThe following example demonstrates memory corruption arising from a misuse of\nthis unsoundness.\n\n```rust\nuse bumpalo::{collections::Vec, Bump};\n\nfn main() {\n    let bump = Bump::new();\n    let mut vec = Vec::new_in(&bump);\n    vec.extend([0x01u8; 32]);\n    let into_iter = vec.into_iter();\n    drop(bump);\n\n    for _ in 0..100 {\n        let reuse_bump = Bump::new();\n        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);\n    }\n\n    for x in into_iter {\n        print!(\"0x{:02x} \", x);\n    }\n    println!();\n}\n```\n\nThe issue was corrected in version 3.11.1 by adding a lifetime to the `IntoIter`\ntype, and updating the signature of `Vec::into_iter()` to constrain this\nlifetime.",
                    "date": "2022-01-14",
                    "aliases": [
                      "GHSA-f85w-wvc7-crwc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "memory-exposure"
                    ],
                    "keywords": [
                      "use-after-free"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "bumpalo::collections::vec::Vec::into_iter": [
                        "<3.11.1"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=3.11.1"
                    ],
                    "unaffected": [
                      "<1.1.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "lock_api",
                    "version": "0.3.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75",
                    "dependencies": [
                      {
                        "name": "scopeguard",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0070",
                    "package": "lock_api",
                    "title": "Some lock_api lock guard objects can cause data races",
                    "description": "Affected versions of lock_api had unsound implementations of the `Send` or\n`Sync` traits for some guard objects, namely:\n\n* MappedMutexGuard\n* MappedRwLockReadGuard\n* MappedRwLockWriteGuard\n* RwLockReadGuard\n* RwLockWriteGuard\n\nThese guards could allow data races through types that are not safe to `Send`\nacross thread boundaries in safe Rust code.\n\nThis issue was fixed by changing the trait bounds on the `Mapped` guard types\nand removing the `Sync` trait for the `RwLock` guards.",
                    "date": "2020-11-08",
                    "aliases": [
                      "CVE-2020-35910",
                      "CVE-2020-35911",
                      "CVE-2020-35912",
                      "CVE-2020-35913",
                      "CVE-2020-35914",
                      "GHSA-5wg8-7c9q-794v",
                      "GHSA-gmv4-vmx3-x9f3",
                      "GHSA-hj9h-wrgg-hgmx",
                      "GHSA-ppj3-7jw3-8vc4",
                      "GHSA-vh4p-6j7g-f4j9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "concurrency"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/parking_lot/pull/262",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "lock_api::MappedMutexGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockWriteGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockWriteGuard": [
                        ">=0.1.0"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-channel",
                    "version": "0.5.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "06ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "skulpin",
          "version": "0.14.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "###  [36 releases](https://lib.rs/crates/skulpin/versions)\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in [GUI](https://lib.rs/gui \"Crates to help you create a graphical user interface.\")\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in [ **2** crates](https://lib.rs/crates/skulpin/rev)\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master)](https://travis-ci.org/aclysma/skulpin) ![Crates.io](https://img.shields.io/crates/v/skulpin)\n![Example Screenshot](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png)\nThis crate mainly depends on:\n  * [rafx](https://github.com/aclysma/rafx) - A rendering framework with easy access to the vulkan backend\n  * [skia-safe](https://github.com/rust-skia/rust-skia) - [Skia](https://skia.org) bindings for Rust\n\n\nNOTE: See [skia-bindings](https://lib.rs/crates/skia-bindings) for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with [raw-window-handle](https://lib.rs/crates/raw-window-handle), which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe [interactive](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs) example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe [physics](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs) demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n[![IMAGE ALT TEXT](https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg)](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by [neovide](https://github.com/Kethku/neovide).\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * [app](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs) - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * [renderer_only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs) - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See [sdl2 renderer only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs)\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the [skia-safe readme](https://lib.rs/crates/skia-safe)\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some [workarounds listed here](https://github.com/alexcrichton/curl-rust/issues/239). Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### MacOS\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Linux\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * [Feather](https://github.com/AT-UI/feather-font), MIT\n  * [Material Design Icons](https://materialdesignicons.com), SIL OFL 1.1\n  * [FontAwesome 4.7.0](https://fontawesome.com/v4.7.0/license/), available under SIL OFL 1.1\n  * [``mplus`-`1p`-`regular`.`ttf``](http://mplus-fonts.osdn.jp), available under its own license.\n\n\n[``sdl2`` uses the zlib license.](https://www.libsdl.org/license.php)\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee [LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) and [LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT).\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [winit-21?](https://lib.rs/crates/skulpin/features#feature-winit-21 \"optional feature\") [winit-22?](https://lib.rs/crates/skulpin/features#feature-winit-22 \"optional feature\") [winit-23?](https://lib.rs/crates/skulpin/features#feature-winit-23 \"optional feature\") [winit-24?](https://lib.rs/crates/skulpin/features#feature-winit-24 \"optional feature\") [winit-25?](https://lib.rs/crates/skulpin/features#feature-winit-25 \"optional feature\") [winit-latest?](https://lib.rs/crates/skulpin/features#feature-winit-latest \"optional feature\") [skulpin-app-winit](https://lib.rs/crates/skulpin-app-winit \"0.14.1\")\n  * [skulpin-renderer](https://lib.rs/crates/skulpin-renderer \"new\") 0.14.1\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.6\n  * dev  [rapier2d](https://lib.rs/crates/rapier2d \"obsolete\") 0.5\n  * dev  [sdl2](https://lib.rs/crates/sdl2 \"obsolete\") >=0.33,<0.34.3[+bundled](https://lib.rs/crates/sdl2/features#feature-bundled)[+static-link](https://lib.rs/crates/sdl2/features#feature-static-link)[+raw\u2026handle](https://lib.rs/crates/sdl2/features#feature-raw-window-handle)\n  * dev  [sdl2-sys](https://lib.rs/crates/sdl2-sys \"obsolete\") >=0.33, <=0.34.2\n\n\n#### [Other features](https://lib.rs/crates/skulpin/features)\n  * [skia-complete](https://lib.rs/crates/skulpin/features#feature-skia-complete)\n  * [skia-shaper](https://lib.rs/crates/skulpin/features#feature-skia-shaper)\n  * [skia-svg](https://lib.rs/crates/skulpin/features#feature-skia-svg)\n  * [skia-textlayout](https://lib.rs/crates/skulpin/features#feature-skia-textlayout)\n  * [winit-app](https://lib.rs/crates/skulpin/features#feature-winit-app)\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "markdown_with_citations": "###  36 releases\u27e81\u27e9\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in GUI\u27e82\u27e9\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in  **2** crates\u27e83\u27e9\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n![Build Status\u27e84\u27e9](https://travis-ci.org/aclysma/skulpin) ![Crates.io\u27e85\u27e9]\n![Example Screenshot\u27e86\u27e9]\nThis crate mainly depends on:\n  * rafx\u27e87\u27e9 - A rendering framework with easy access to the vulkan backend\n  * skia-safe\u27e88\u27e9 - Skia\u27e89\u27e9 bindings for Rust\n\n\nNOTE: See skia-bindings\u27e810\u27e9 for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with raw-window-handle\u27e811\u27e9, which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe interactive\u27e812\u27e9 example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe physics\u27e813\u27e9 demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n![IMAGE ALT TEXT\u27e814\u27e9](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by neovide\u27e815\u27e9.\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * app\u27e816\u27e9 - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * renderer_only\u27e817\u27e9 - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See sdl2 renderer only\u27e818\u27e9\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the skia-safe readme\u27e819\u27e9\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some workarounds listed here\u27e820\u27e9. Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### MacOS\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Linux\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e823\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e824\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * Feather\u27e825\u27e9, MIT\n  * Material Design Icons\u27e826\u27e9, SIL OFL 1.1\n  * FontAwesome 4.7.0\u27e827\u27e9, available under SIL OFL 1.1\n  * ``mplus`-`1p`-`regular`.`ttf``\u27e828\u27e9, available under its own license.\n\n\n``sdl2`` uses the zlib license.\u27e829\u27e9\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee LICENSE-APACHE\u27e823\u27e9 and LICENSE-MIT\u27e824\u27e9.\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * log\u27e830\u27e9\n  * winit-21?\u27e831\u27e9 winit-22?\u27e832\u27e9 winit-23?\u27e833\u27e9 winit-24?\u27e834\u27e9 winit-25?\u27e835\u27e9 winit-latest?\u27e836\u27e9 skulpin-app-winit\u27e837\u27e9\n  * skulpin-renderer\u27e838\u27e9 0.14.1\n\n\n  * dev  env_logger\u27e839\u27e9 0.6\n  * dev  rapier2d\u27e840\u27e9 0.5\n  * dev  sdl2\u27e841\u27e9 >=0.33,<0.34.3+bundled\u27e842\u27e9+static-link\u27e843\u27e9+raw\u2026handle\u27e844\u27e9\n  * dev  sdl2-sys\u27e845\u27e9 >=0.33, <=0.34.2\n\n\n#### Other features\u27e846\u27e9\n  * skia-complete\u27e847\u27e9\n  * skia-shaper\u27e848\u27e9\n  * skia-svg\u27e849\u27e9\n  * skia-textlayout\u27e850\u27e9\n  * winit-app\u27e851\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/skulpin/versions: 36 releases\n\u27e82\u27e9 https://lib.rs/gui: Crates to help you create a graphical user interface. - GUI\n\u27e83\u27e9 https://lib.rs/crates/skulpin/rev:  **2** crates\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/skulpin: Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png: Example Screenshot\n\u27e87\u27e9 https://github.com/aclysma/rafx: rafx\n\u27e88\u27e9 https://github.com/rust-skia/rust-skia: skia-safe\n\u27e89\u27e9 https://skia.org: Skia\n\u27e810\u27e9 https://lib.rs/crates/skia-bindings: skia-bindings\n\u27e811\u27e9 https://lib.rs/crates/raw-window-handle: raw-window-handle\n\u27e812\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs: interactive\n\u27e813\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs: physics\n\u27e814\u27e9 https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg: ![IMAGE ALT TEXT\n\u27e815\u27e9 https://github.com/Kethku/neovide: neovide\n\u27e816\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs: app\n\u27e817\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs: renderer_only\n\u27e818\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs: sdl2 renderer only\n\u27e819\u27e9 https://lib.rs/crates/skia-safe: skia-safe readme\n\u27e820\u27e9 https://github.com/alexcrichton/curl-rust/issues/239: workarounds listed here\n\u27e821\u27e9 https://github.com/Rust-SDL2/rust-sdl2: requirements for the SDL2 bindings\n\u27e822\u27e9 https://lunarg.com/vulkan-sdk/: LunarG Vulkan SDK\n\u27e823\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE: LICENSE-APACHE\n\u27e824\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT: LICENSE-MIT\n\u27e825\u27e9 https://github.com/AT-UI/feather-font: Feather\n\u27e826\u27e9 https://materialdesignicons.com: Material Design Icons\n\u27e827\u27e9 https://fontawesome.com/v4.7.0/license/: FontAwesome 4.7.0\n\u27e828\u27e9 http://mplus-fonts.osdn.jp: ``mplus`-`1p`-`regular`.`ttf``\n\u27e829\u27e9 https://www.libsdl.org/license.php: ``sdl2`` uses the zlib license.\n\u27e830\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e831\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-21: optional feature - winit-21?\n\u27e832\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-22: optional feature - winit-22?\n\u27e833\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-23: optional feature - winit-23?\n\u27e834\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-24: optional feature - winit-24?\n\u27e835\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-25: optional feature - winit-25?\n\u27e836\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-latest: optional feature - winit-latest?\n\u27e837\u27e9 https://lib.rs/crates/skulpin-app-winit: 0.14.1 - skulpin-app-winit\n\u27e838\u27e9 https://lib.rs/crates/skulpin-renderer: new - skulpin-renderer\n\u27e839\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e840\u27e9 https://lib.rs/crates/rapier2d: obsolete - rapier2d\n\u27e841\u27e9 https://lib.rs/crates/sdl2: obsolete - sdl2\n\u27e842\u27e9 https://lib.rs/crates/sdl2/features#feature-bundled: +bundled\n\u27e843\u27e9 https://lib.rs/crates/sdl2/features#feature-static-link: +static-link\n\u27e844\u27e9 https://lib.rs/crates/sdl2/features#feature-raw-window-handle: +raw\u2026handle\n\u27e845\u27e9 https://lib.rs/crates/sdl2-sys: obsolete - sdl2-sys\n\u27e846\u27e9 https://lib.rs/crates/skulpin/features: Other features\n\u27e847\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-complete: skia-complete\n\u27e848\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-shaper: skia-shaper\n\u27e849\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-svg: skia-svg\n\u27e850\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-textlayout: skia-textlayout\n\u27e851\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-app: winit-app\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "skulpin",
          "version": "0.14.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "###  [36 releases](https://lib.rs/crates/skulpin/versions)\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in [GUI](https://lib.rs/gui \"Crates to help you create a graphical user interface.\")\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in [ **2** crates](https://lib.rs/crates/skulpin/rev)\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master)](https://travis-ci.org/aclysma/skulpin) ![Crates.io](https://img.shields.io/crates/v/skulpin)\n![Example Screenshot](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png)\nThis crate mainly depends on:\n  * [rafx](https://github.com/aclysma/rafx) - A rendering framework with easy access to the vulkan backend\n  * [skia-safe](https://github.com/rust-skia/rust-skia) - [Skia](https://skia.org) bindings for Rust\n\n\nNOTE: See [skia-bindings](https://lib.rs/crates/skia-bindings) for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with [raw-window-handle](https://lib.rs/crates/raw-window-handle), which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe [interactive](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs) example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe [physics](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs) demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n[![IMAGE ALT TEXT](https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg)](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by [neovide](https://github.com/Kethku/neovide).\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * [app](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs) - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * [renderer_only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs) - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See [sdl2 renderer only](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs)\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the [skia-safe readme](https://lib.rs/crates/skia-safe)\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some [workarounds listed here](https://github.com/alexcrichton/curl-rust/issues/239). Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### MacOS\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Linux\n  * If you're using SDL2, see the [requirements for the SDL2 bindings](https://github.com/Rust-SDL2/rust-sdl2). The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the [LunarG Vulkan SDK](https://lunarg.com/vulkan-sdk/)\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * [Feather](https://github.com/AT-UI/feather-font), MIT\n  * [Material Design Icons](https://materialdesignicons.com), SIL OFL 1.1\n  * [FontAwesome 4.7.0](https://fontawesome.com/v4.7.0/license/), available under SIL OFL 1.1\n  * [``mplus`-`1p`-`regular`.`ttf``](http://mplus-fonts.osdn.jp), available under its own license.\n\n\n[``sdl2`` uses the zlib license.](https://www.libsdl.org/license.php)\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee [LICENSE-APACHE](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE) and [LICENSE-MIT](https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT).\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [winit-21?](https://lib.rs/crates/skulpin/features#feature-winit-21 \"optional feature\") [winit-22?](https://lib.rs/crates/skulpin/features#feature-winit-22 \"optional feature\") [winit-23?](https://lib.rs/crates/skulpin/features#feature-winit-23 \"optional feature\") [winit-24?](https://lib.rs/crates/skulpin/features#feature-winit-24 \"optional feature\") [winit-25?](https://lib.rs/crates/skulpin/features#feature-winit-25 \"optional feature\") [winit-latest?](https://lib.rs/crates/skulpin/features#feature-winit-latest \"optional feature\") [skulpin-app-winit](https://lib.rs/crates/skulpin-app-winit \"0.14.1\")\n  * [skulpin-renderer](https://lib.rs/crates/skulpin-renderer \"new\") 0.14.1\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.6\n  * dev  [rapier2d](https://lib.rs/crates/rapier2d \"obsolete\") 0.5\n  * dev  [sdl2](https://lib.rs/crates/sdl2 \"obsolete\") >=0.33,<0.34.3[+bundled](https://lib.rs/crates/sdl2/features#feature-bundled)[+static-link](https://lib.rs/crates/sdl2/features#feature-static-link)[+raw\u2026handle](https://lib.rs/crates/sdl2/features#feature-raw-window-handle)\n  * dev  [sdl2-sys](https://lib.rs/crates/sdl2-sys \"obsolete\") >=0.33, <=0.34.2\n\n\n#### [Other features](https://lib.rs/crates/skulpin/features)\n  * [skia-complete](https://lib.rs/crates/skulpin/features#feature-skia-complete)\n  * [skia-shaper](https://lib.rs/crates/skulpin/features#feature-skia-shaper)\n  * [skia-svg](https://lib.rs/crates/skulpin/features#feature-skia-svg)\n  * [skia-textlayout](https://lib.rs/crates/skulpin/features#feature-skia-textlayout)\n  * [winit-app](https://lib.rs/crates/skulpin/features#feature-winit-app)\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "markdown_with_citations": "###  36 releases\u27e81\u27e9\n0.14.1 |  Oct 31, 2021   \n---|---  \n0.14.0 |  May 27, 2021   \n0.13.1 |  Apr 3, 2021   \n0.13.0 |  Mar 14, 2021   \n0.2.2 |  Nov 24, 2019   \n#**355** in GUI\u27e82\u27e9\nDownload history 24/week @ 2025-01-15 10/week @ 2025-01-22 9/week @ 2025-01-29 124/week @ 2025-02-05 83/week @ 2025-02-12 16/week @ 2025-02-19 44/week @ 2025-02-26 8/week @ 2025-03-05 26/week @ 2025-03-12 10/week @ 2025-03-19 16/week @ 2025-03-26 16/week @ 2025-04-09 8/week @ 2025-04-16 24/week @ 2025-04-23 15/week @ 2025-04-30\n**63** downloads per month Used in  **2** crates\u27e83\u27e9\n**MIT/Apache**\n87KB  1K  SLoC\n# skulpin\nSkia + Vulkan = Skulpin\nThis crate provides an easy option for drawing hardware-accelerated 2D by combining vulkan and skia.\n![Build Status\u27e84\u27e9](https://travis-ci.org/aclysma/skulpin) ![Crates.io\u27e85\u27e9]\n![Example Screenshot\u27e86\u27e9]\nThis crate mainly depends on:\n  * rafx\u27e87\u27e9 - A rendering framework with easy access to the vulkan backend\n  * skia-safe\u27e88\u27e9 - Skia\u27e89\u27e9 bindings for Rust\n\n\nNOTE: See skia-bindings\u27e810\u27e9 for more info on how a skia binary acquired. In many cases, this crate will download a binary created by their project's CI.\nThis crate integrates with raw-window-handle\u27e811\u27e9, which allows it to be used with sdl2, winit, and any other windowing framework that supports raw-window-handle.\n## Running the Examples\nFirst, ensure that the below requirements are met depending on OS. Afterwards, the examples can be run normally.\nThe interactive\u27e812\u27e9 example is good to look at for an easy way to get keyboard/mouse input.\n```\n``#` winit `0.``24`\ncargo run `-``-`example interactive_winit_app `-``-`features winit`-`app`,`winit`-``25`\n`#` sdl2\ncargo run `-``-`example interactive_sdl2\n`\n```\n\nThe physics\u27e813\u27e9 demo is fun too.\n```\n```cargo``` run`` --`example` physics`` --`features` winit-app,winit-25`\n`\n```\n\nHere's a video of the physics and interactive examples.\n![IMAGE ALT TEXT\u27e814\u27e9](https://www.youtube.com/watch?v=El99FgGSzfg \"Video of Skulpin\")\n## Status\nThis crate is in \"maintenance\" mode - I'm not adding features or planning any API reworks, but I do plan to make fixes as necessary to address issues that might come up and maintain compatibility with the broader rust ecosystem.\nOriginally this was just a proof-of-concept, but it is now being used by neovide\u27e815\u27e9.\nFlutter, Google's new UI framework, uses a Skia + Vulkan stack to achieve 60+ FPS on mobile devices. Because Google is deeply invested in this stack, I anticipate relatively long term support of this type of usage in Skia.\n## Usage\nCurrently there are two ways to use this library with ``winit``.\n  * app\u27e816\u27e9 - Implement the AppHandler trait and launch the app. It's simple but not as flexible. This is currently only supported when using winit.\n  * renderer_only\u27e817\u27e9 - You manage the window and event loop yourself. Then add the renderer to draw to it. The window should be wrapped in an implementation of ```skulpin`::``Window``. Implementations for ``sdl2`` and ``winit`` are provided.\n\n\nIf you prefer ``sdl2`` you'll need to use the renderer directly. See sdl2 renderer only\u27e818\u27e9\nDon't forget to install the prerequisites below appropriate to your platform! (See \"Requirements\")\n## Feature Flags\n### Skia-related features:\n  * ``skia-complete`` - Includes all the below skia features. ** This is on by default **\n  * ``skia-shaper`` - Enables text shaping with Harfbuzz and ICU\n  * ``skia-svg`` - This feature enables the SVG rendering backend\n  * ``skia-textlayout`` - Makes the Skia module skparagraph available, which contains types that are used to lay out paragraphs\n  * More information on these flags is available in the skia-safe readme\u27e819\u27e9\n\n\nThe ``skia-bindings`` prebuilt binaries are only available for certain combinations of features. As of this writing, it is available for none, each feature individually, or all features enabled. The ``vulkan`` feature is required and implicitly used, so enabling any features individually will substantially increase build times. It's recommended to use all features (default behavior), or disable all features. (use ``default`-`features `=` `false```)\n### Skulpin features:\n  * ``winit-app`` - Include the winit app wrapper. It's less flexbile than using the renderer directly but is easy to use.\n\n\nIf using winit-app, you MUST specify a winit version feature flag (see below)\n### Winit version feature flags:\n  * ``winit-21``\n  * ``winit-22``\n  * ``winit-23``\n  * ``winit-24``\n  * ``winit-25``\n  * ``winit-latest``\n\n\n(These feature names match the imgui-rs crate.)\n### Examples of Feature Flag Usage\n```\n``#` Pull `in` all skia features and support `for` all backends `(`sdl2 and winit`)`\nskulpin `=` ``\"`0`\"``\n`#` Pull `in` all skia features but not the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```]` ```}``\n`#` Pull `in` all skia features and include the winit app wrapper\nskulpin `=` ``{` version `=` ``\"`0`\"```,` default`-`features `=` `false``,` features `=` `[```\"`skia-complete`\"```,` ``\"`winit-app`\"```]` ```}``\n`\n```\n\n### Upstream Versioning of skia-safe\nSkulpin can be built and used with many versions of skia-safe. In order to be accomodating to users of the library, the required version has been left open-ended. This allows new projects to use more recent versions of these libraries while not forcing old projects to update.\nYou can force a particular version of skia safe by using ````cargo``` update```\n```\n```cargo``` update`` -`p` skia-safe`` --`precise` 0.32`\n`\n```\n\n## Documentation\nDocumentation fails to build on docs.rs because the skia_safe crate requires an internet connection to build. (It will either grab skia source code, or grab a prebuilt binary.) So the best way to view docs is to build them yourself:\n````cargo``` doc`` -`p` skulpin`` --`open````\n## Requirements\nMinimum required rust version: **1.43.0**\n### Windows\n  * If you're using the GNU toolchain (MSVC is the default) you might run into an issue building curl. (Curl is a dependency of skia-safe bindings, which is used to download prebuilt skia binaries.) There are some workarounds listed here\u27e820\u27e9. Again, this should only affect you if you are running the non-default GNU toolchain.\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### MacOS\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Linux\n  * If you're using SDL2, see the requirements for the SDL2 bindings\u27e821\u27e9. The easiest method is to use the \"bundled\" and \"static\" features. To do this, add ``sdl2 `=` ``{` version `=` ``\"`>=0.33`\"```,` features `=` `[```\"`bundled`\"```,` ``\"`static-link`\"```]` ```}```` to you Cargo.toml. These are enabled by default for the examples.\n  * On linux you'll also need to link against bz2, GL, fontconfig, and freetype. \n    * On ubuntu, you could use ``libbz2-dev``, ``libfreetype6-dev``, ``libfontconfig1-dev``, and ``libgl-dev``. (And ``libvulkan-dev`` to pick up the Vulkan SDK)\n  * Enabling vulkan validation requires the LunarG Validation layers and a Vulkan library that is visible in your ``PATH``. An easy way to get started is to use the LunarG Vulkan SDK\u27e822\u27e9\n\n\n### Other Platforms\nIt may be possible to build this for mobile platforms, but I've not investigated this yet.\n## A note on High-DPI Display Support\nFor the common case, you can draw to the skia canvas using \"logical\" coordinates and not worry about dpi/scaling issues.\nInternally, the skia surface will match the swapchain size, but this size is not necessarily LogicalSize or PhysicalSize of the window. In order to produce consistently-sized results, the renderer will apply a scaling factor to the skia canvas before handing it off to your draw implementation.\n## Important configuration choices\nThere are a few primary choices you should consider when configuring how your app runs\n  * Coordinate System - This library can be configured to use a few different coordinate systems. \n    * ``Logical`` - Use logical coordinates, which are pixels with a factor applied to count for high resolution displays\n    * ``Physical`` - Use raw pixels for coordinates\n    * ``VisibleRange`` - Try to fit the given range to the window\n    * ``FixedWidth`` - Use the given X extents and aspect ratio to calculate Y extents\n    * ```None``` - Do not modify the canvas matrix\n  * Presentation Mode - You'll likely either want Fifo (default) or Mailbox \n    * ``Fifo`` (``VK_PRESENT_MODE_FIFO_KHR``) is the default behavior and is always present on devices that fully comply to spec. This will be VSync,shouldn't ever screen tear, and will generally run at display refresh rate.\n    * ``Mailbox`` (``VK_PRESENT_MODE_MAILBOX_KHR``) will render as quickly as possible. The frames are queued and the latest complete frame will be drawn. Other frames will be dropped. This rendering method will produce the lowest latency, but is not always available, and could be an unnecessary drain on battery life for laptops and mobile devices.\n    * See ``prefer_fifo_present_mode``/``prefer_mailbox_present_mode`` for a simple way to choose between the two recommended options or ``present_mode_priority`` for full control.\n    * For full details see documentation for ``PresentMode`` and the Vulkan spec.\n  * Device Type - The most common device types will be Dedicated or Integrated. By default, a Dedicated device is chosen when available. \n    * ``Discrete`` (``VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU``) - When available, this is likely to be the device with best performance\n    * ``Integrated`` (``VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU``) - This will generally be more power efficient that a Discrete GPU.\n    * I suspect the most likely case of having both would be a laptop with a discrete GPU. I would expect that favoring the integrated GPU would be better for battery life, at the cost of some performance. However I don't have a suitable device to test this.\n    * See ``prefer_integrated_gpu``/``prefer_discrete_gpu`` for a simple way to choose between the two recommended options or ``physical_device_type_priority`` for full control\n    * For full details see documentation for ``PhysicalDeviceType`` and the Vulkan spec.\n  * Vulkan Debug Layer - Debug logging is not enabled by default \n    * ``use_vulkan_debug_layer`` turns all logging on/off\n    * ``validation_layer_debug_report_flags`` allows choosing specific log levels\n    * If the Vulkan SDK is not installed, the app will fail to start if any vulkan debugging is enabled\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e823\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e824\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\nThe fonts directory contains several fonts under their own licenses:\n  * Feather\u27e825\u27e9, MIT\n  * Material Design Icons\u27e826\u27e9, SIL OFL 1.1\n  * FontAwesome 4.7.0\u27e827\u27e9, available under SIL OFL 1.1\n  * ``mplus`-`1p`-`regular`.`ttf``\u27e828\u27e9, available under its own license.\n\n\n``sdl2`` uses the zlib license.\u27e829\u27e9\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nSee LICENSE-APACHE\u27e823\u27e9 and LICENSE-MIT\u27e824\u27e9.\n#### Dependencies\n~19\u201339MB  ~761K SLoC\n  * log\u27e830\u27e9\n  * winit-21?\u27e831\u27e9 winit-22?\u27e832\u27e9 winit-23?\u27e833\u27e9 winit-24?\u27e834\u27e9 winit-25?\u27e835\u27e9 winit-latest?\u27e836\u27e9 skulpin-app-winit\u27e837\u27e9\n  * skulpin-renderer\u27e838\u27e9 0.14.1\n\n\n  * dev  env_logger\u27e839\u27e9 0.6\n  * dev  rapier2d\u27e840\u27e9 0.5\n  * dev  sdl2\u27e841\u27e9 >=0.33,<0.34.3+bundled\u27e842\u27e9+static-link\u27e843\u27e9+raw\u2026handle\u27e844\u27e9\n  * dev  sdl2-sys\u27e845\u27e9 >=0.33, <=0.34.2\n\n\n#### Other features\u27e846\u27e9\n  * skia-complete\u27e847\u27e9\n  * skia-shaper\u27e848\u27e9\n  * skia-svg\u27e849\u27e9\n  * skia-textlayout\u27e850\u27e9\n  * winit-app\u27e851\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/skulpin/versions: 36 releases\n\u27e82\u27e9 https://lib.rs/gui: Crates to help you create a graphical user interface. - GUI\n\u27e83\u27e9 https://lib.rs/crates/skulpin/rev:  **2** crates\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/aclysma/skulpin.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/skulpin: Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/aclysma/skulpin/8db0559d020473faed498bcaf9de2eb859280235/screenshot.png: Example Screenshot\n\u27e87\u27e9 https://github.com/aclysma/rafx: rafx\n\u27e88\u27e9 https://github.com/rust-skia/rust-skia: skia-safe\n\u27e89\u27e9 https://skia.org: Skia\n\u27e810\u27e9 https://lib.rs/crates/skia-bindings: skia-bindings\n\u27e811\u27e9 https://lib.rs/crates/raw-window-handle: raw-window-handle\n\u27e812\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/interactive_winit_app.rs: interactive\n\u27e813\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/physics.rs: physics\n\u27e814\u27e9 https://img.gs/czjpqfbdkz/full/http://img.youtube.com/vi/El99FgGSzfg/0.jpg: ![IMAGE ALT TEXT\n\u27e815\u27e9 https://github.com/Kethku/neovide: neovide\n\u27e816\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit_app.rs: app\n\u27e817\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_winit.rs: renderer_only\n\u27e818\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/examples/hello_skulpin_sdl2.rs: sdl2 renderer only\n\u27e819\u27e9 https://lib.rs/crates/skia-safe: skia-safe readme\n\u27e820\u27e9 https://github.com/alexcrichton/curl-rust/issues/239: workarounds listed here\n\u27e821\u27e9 https://github.com/Rust-SDL2/rust-sdl2: requirements for the SDL2 bindings\n\u27e822\u27e9 https://lunarg.com/vulkan-sdk/: LunarG Vulkan SDK\n\u27e823\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-APACHE: LICENSE-APACHE\n\u27e824\u27e9 https://github.com/aclysma/skulpin/blob/8db0559d020473faed498bcaf9de2eb859280235/LICENSE-MIT: LICENSE-MIT\n\u27e825\u27e9 https://github.com/AT-UI/feather-font: Feather\n\u27e826\u27e9 https://materialdesignicons.com: Material Design Icons\n\u27e827\u27e9 https://fontawesome.com/v4.7.0/license/: FontAwesome 4.7.0\n\u27e828\u27e9 http://mplus-fonts.osdn.jp: ``mplus`-`1p`-`regular`.`ttf``\n\u27e829\u27e9 https://www.libsdl.org/license.php: ``sdl2`` uses the zlib license.\n\u27e830\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e831\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-21: optional feature - winit-21?\n\u27e832\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-22: optional feature - winit-22?\n\u27e833\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-23: optional feature - winit-23?\n\u27e834\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-24: optional feature - winit-24?\n\u27e835\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-25: optional feature - winit-25?\n\u27e836\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-latest: optional feature - winit-latest?\n\u27e837\u27e9 https://lib.rs/crates/skulpin-app-winit: 0.14.1 - skulpin-app-winit\n\u27e838\u27e9 https://lib.rs/crates/skulpin-renderer: new - skulpin-renderer\n\u27e839\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e840\u27e9 https://lib.rs/crates/rapier2d: obsolete - rapier2d\n\u27e841\u27e9 https://lib.rs/crates/sdl2: obsolete - sdl2\n\u27e842\u27e9 https://lib.rs/crates/sdl2/features#feature-bundled: +bundled\n\u27e843\u27e9 https://lib.rs/crates/sdl2/features#feature-static-link: +static-link\n\u27e844\u27e9 https://lib.rs/crates/sdl2/features#feature-raw-window-handle: +raw\u2026handle\n\u27e845\u27e9 https://lib.rs/crates/sdl2-sys: obsolete - sdl2-sys\n\u27e846\u27e9 https://lib.rs/crates/skulpin/features: Other features\n\u27e847\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-complete: skia-complete\n\u27e848\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-shaper: skia-shaper\n\u27e849\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-svg: skia-svg\n\u27e850\u27e9 https://lib.rs/crates/skulpin/features#feature-skia-textlayout: skia-textlayout\n\u27e851\u27e9 https://lib.rs/crates/skulpin/features#feature-winit-app: winit-app\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `skulpin` crate combines Skia and Vulkan to provide hardware-accelerated 2D rendering for Rust applications, supporting windowing frameworks like `winit` and `sdl2` via `raw-window-handle`. It offers two usage modes: a simple `AppHandler` wrapper for `winit` or direct renderer integration for greater flexibility. Key features include Skia-related capabilities like text shaping, SVG rendering, and paragraph layout, along with customizable feature flags for compatibility and performance optimization.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Integration with Windowing Frameworks  \n\u2705 Factual: The `skulpin` crate integrates with `raw-window-handle`, allowing it to be used with `sdl2`, `winit`, and other windowing frameworks that support `raw-window-handle`.  \n\u274c Counterfactual: The `skulpin` crate requires a custom windowing framework and cannot integrate with `sdl2` or `winit`.  \n\n---\n\n### Pair 2: Feature Flags for Skia  \n\u2705 Factual: The `skulpin` crate includes a `skia-complete` feature flag that enables all Skia-related features, such as text shaping (`skia-shaper`), SVG rendering (`skia-svg`), and paragraph layout (`skia-textlayout`).  \n\u274c Counterfactual: The `skulpin` crate does not support feature flags for Skia-related capabilities and requires manual configuration for each feature.  \n\n---\n\n### Pair 3: Rendering Backend  \n\u2705 Factual: The `skulpin` crate uses Vulkan as its rendering backend and integrates with the `rafx` rendering framework to provide hardware-accelerated 2D drawing.  \n\u274c Counterfactual: The `skulpin` crate uses OpenGL as its rendering backend and does not support Vulkan integration.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9ecdf05c-5ac95ae2-1751266088",
      "timestamp": "2025-06-30T06:48:08.560714+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]