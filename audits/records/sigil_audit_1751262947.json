[
  {
    "execution_id": "exec-2f917d40-aefdbc76-1751262938",
    "timestamp": "2025-06-30T05:55:38.006108+00:00",
    "sacred_chain": {
      "input_data": "crossbeam-deque",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'crossbeam-deque' -> 'crossbeam-deque'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "crossbeam-deque",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/crossbeam-deque",
            "title": "crossbeam-deque v0.8.6",
            "content": {
              "raw_markdown": "#  crossbeam-deque v0.8.6\nConcurrent work-stealing deque \n  * [ #chase-lev ](https://crates.io/keywords/chase-lev)\n  * [ #lock-free ](https://crates.io/keywords/lock-free)\n  * [ #scheduler ](https://crates.io/keywords/scheduler)\n  * [ #scheduling ](https://crates.io/keywords/scheduling)\n\n\n  * [ Readme ](https://crates.io/crates/crossbeam-deque)\n  * [ 26 Versions ](https://crates.io/crates/crossbeam-deque/versions)\n  * [ Dependencies ](https://crates.io/crates/crossbeam-deque/dependencies)\n  * [ Dependents ](https://crates.io/crates/crossbeam-deque/reverse_dependencies)\n\n\n## Metadata\n7 months ago \nv1.61.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n21.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add crossbeam-deque\nOr add the following line to your Cargo.toml:\ncrossbeam-deque = \"0.8.6\"\n## Homepage\n[ github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque ](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque)\n## Repository\n[ github.com/crossbeam-rs/crossbeam ](https://github.com/crossbeam-rs/crossbeam)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n  * [Concurrency](https://crates.io/categories/concurrency)\n  * [Data structures](https://crates.io/categories/data-structures)\n\n\n[ Report crate ](https://crates.io/support?crate=crossbeam-deque&inquire=crate-violation)\n### Stats Overview\n251,113,732 Downloads all time\n26 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  crossbeam-deque v0.8.6\nConcurrent work-stealing deque \n  *  #chase-lev \u27e81\u27e9\n  *  #lock-free \u27e82\u27e9\n  *  #scheduler \u27e83\u27e9\n  *  #scheduling \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  26 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\n7 months ago \nv1.61.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n21.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add crossbeam-deque\nOr add the following line to your Cargo.toml:\ncrossbeam-deque = \"0.8.6\"\n## Homepage\n github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque \u27e811\u27e9\n## Repository\n github.com/crossbeam-rs/crossbeam \u27e812\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e813\u27e9\n  * Concurrency\u27e814\u27e9\n  * Data structures\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n251,113,732 Downloads all time\n26 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/chase-lev:  #chase-lev \n\u27e82\u27e9 https://crates.io/keywords/lock-free:  #lock-free \n\u27e83\u27e9 https://crates.io/keywords/scheduler:  #scheduler \n\u27e84\u27e9 https://crates.io/keywords/scheduling:  #scheduling \n\u27e85\u27e9 https://crates.io/crates/crossbeam-deque:  Readme \n\u27e86\u27e9 https://crates.io/crates/crossbeam-deque/versions:  26 Versions \n\u27e87\u27e9 https://crates.io/crates/crossbeam-deque/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/crossbeam-deque/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque:  github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque \n\u27e812\u27e9 https://github.com/crossbeam-rs/crossbeam:  github.com/crossbeam-rs/crossbeam \n\u27e813\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e814\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e815\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e816\u27e9 https://crates.io/support?crate=crossbeam-deque&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1621,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116727.8904031"
          },
          "docs_rs": {
            "url": "https://docs.rs/crossbeam-deque",
            "title": "Crate crossbeam_dequeCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\n[Settings](https://docs.rs/crossbeam-deque/latest/settings.html)\n[Help](https://docs.rs/crossbeam-deque/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106)\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues)Queues\n[`Injector`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\") is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n[`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") has two constructors:\n  * [`new_fifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo \"associated function crossbeam_deque::Worker::new_fifo\") - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * [`new_lifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo \"associated function crossbeam_deque::Worker::new_lifo\") - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") is owned by a single thread and supports only push and pop operations.\nMethod [`stealer()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer \"method crossbeam_deque::Worker::stealer\") creates a [`Stealer`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\") that may be shared among threads and can only steal tasks from its [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\"). Tasks are stolen from the end opposite to where they get pushed.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing)Stealing\nSteal operations come in three flavors:\n  1. [`steal()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal \"method crossbeam_deque::Stealer::steal\") - Steals one task.\n  2. [`steal_batch()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch \"method crossbeam_deque::Stealer::steal_batch\") - Steals a batch of tasks and moves them into another worker.\n  3. [`steal_batch_and_pop()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop \"method crossbeam_deque::Stealer::steal_batch_and_pop\") - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with [`Steal::Retry`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry \"variant crossbeam_deque::Steal::Retry\"), in which case the steal operation needs to be retried.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples)Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs)\n\n[Injector](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\")\n    An injector queue.\n\n[Stealer](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\")\n    A stealer handle of a worker queue.\n\n[Worker](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\")\n    A worker queue.\n## Enums[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums)\n\n[Steal](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html \"enum crossbeam_deque::Steal\")\n    Possible outcomes of a steal operation.\n",
              "markdown_with_citations": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## \u00a7\u27e84\u27e9Queues\n`Injector`\u27e85\u27e9 is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n`Worker`\u27e86\u27e9 has two constructors:\n  * `new_fifo()`\u27e87\u27e9 - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * `new_lifo()`\u27e88\u27e9 - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach `Worker`\u27e86\u27e9 is owned by a single thread and supports only push and pop operations.\nMethod `stealer()`\u27e89\u27e9 creates a `Stealer`\u27e810\u27e9 that may be shared among threads and can only steal tasks from its `Worker`\u27e86\u27e9. Tasks are stolen from the end opposite to where they get pushed.\n## \u00a7\u27e811\u27e9Stealing\nSteal operations come in three flavors:\n  1. `steal()`\u27e812\u27e9 - Steals one task.\n  2. `steal_batch()`\u27e813\u27e9 - Steals a batch of tasks and moves them into another worker.\n  3. `steal_batch_and_pop()`\u27e814\u27e9 - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with `Steal::Retry`\u27e815\u27e9, in which case the steal operation needs to be retried.\n## \u00a7\u27e816\u27e9Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs\u00a7\u27e817\u27e9\n\nInjector\u27e85\u27e9\n    An injector queue.\n\nStealer\u27e810\u27e9\n    A stealer handle of a worker queue.\n\nWorker\u27e86\u27e9\n    A worker queue.\n## Enums\u00a7\u27e818\u27e9\n\nSteal\u27e819\u27e9\n    Possible outcomes of a steal operation.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-deque/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-deque/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html: struct crossbeam_deque::Injector - `Injector`\n\u27e86\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html: struct crossbeam_deque::Worker - `Worker`\n\u27e87\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo: associated function crossbeam_deque::Worker::new_fifo - `new_fifo()`\n\u27e88\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo: associated function crossbeam_deque::Worker::new_lifo - `new_lifo()`\n\u27e89\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer: method crossbeam_deque::Worker::stealer - `stealer()`\n\u27e810\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html: struct crossbeam_deque::Stealer - `Stealer`\n\u27e811\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal: method crossbeam_deque::Stealer::steal - `steal()`\n\u27e813\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch: method crossbeam_deque::Stealer::steal_batch - `steal_batch()`\n\u27e814\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop: method crossbeam_deque::Stealer::steal_batch_and_pop - `steal_batch_and_pop()`\n\u27e815\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry: variant crossbeam_deque::Steal::Retry - `Steal::Retry`\n\u27e816\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples: \u00a7\n\u27e817\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html: enum crossbeam_deque::Steal - Steal\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5767,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116728.7149089"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/crossbeam-deque",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [21 releases](https://lib.rs/crates/crossbeam-deque/versions)\n0.8.6 |  Dec 15, 2024   \n---|---  \n0.8.5 |  Jan 8, 2024   \n0.8.4 |  Dec 13, 2023   \n0.8.3 |  Feb 28, 2023   \n0.1.1 |  Nov 29, 2017   \n#**491** in [Concurrency](https://lib.rs/concurrency \"Crates for implementing concurrent and parallel computation.\")\nDownload history 2889503/week @ 2025-03-09 3050266/week @ 2025-03-16 3170651/week @ 2025-03-23 2729402/week @ 2025-03-30 2953528/week @ 2025-04-06 2772637/week @ 2025-04-13 2645456/week @ 2025-04-20 2639192/week @ 2025-04-27 2599437/week @ 2025-05-04 2753991/week @ 2025-05-11 2862208/week @ 2025-05-18 2266799/week @ 2025-05-25 2375925/week @ 2025-06-01 2607300/week @ 2025-06-08 2914499/week @ 2025-06-15 2711794/week @ 2025-06-22\n**10,768,263** downloads per month Used in [**21,660** crates (59 directly)](https://lib.rs/crates/crossbeam-deque/rev)\n**MIT/Apache**\n335KB  4.5K  SLoC\n# Crossbeam Deque\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/crossbeam-rs/crossbeam/workflows/CI/badge.svg)](https://github.com/crossbeam-rs/crossbeam/actions) [![License](https://img.shields.io/badge/license-MIT_OR_Apache--2.0-blue.svg)](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque#license) [![Cargo](https://img.shields.io/crates/v/crossbeam-deque.svg)](https://crates.io/crates/crossbeam-deque) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/crossbeam-deque/badge.svg)](https://docs.rs/crossbeam-deque) [![Rust 1.61+](https://img.shields.io/badge/rust-1.61+-lightgray.svg)](https://www.rust-lang.org) [![chat](https://img.shields.io/discord/569610676205781012.svg?logo=discord)](https://discord.com/invite/JXYwgWZ)\nThis crate provides work-stealing deques, which are primarily intended for building task schedulers.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`crossbeam-deque ``=` ``\"`0.8`\"``\n``\n```\n\n## Compatibility\nCrossbeam Deque supports stable Rust releases going back at least six months, and every time the minimum supported Rust version is increased, a new minor version is released. Currently, the minimum supported Rust version is 1.61.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/crossbeam-rs/crossbeam/blob/ccd83ac4108a2a1b41e9c6e79c87267167d18dfa/crossbeam-deque/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/crossbeam-rs/crossbeam/blob/ccd83ac4108a2a1b41e9c6e79c87267167d18dfa/crossbeam-deque/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * [crossbeam-epoch](https://lib.rs/crates/crossbeam-epoch \"0.9.17\")\n  * [crossbeam-utils](https://lib.rs/crates/crossbeam-utils \"0.8.18\")\n\n\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n\n\n#### [Other feature](https://lib.rs/crates/crossbeam-deque/features)\n  * [std](https://lib.rs/crates/crossbeam-deque/features#feature-std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  21 releases\u27e81\u27e9\n0.8.6 |  Dec 15, 2024   \n---|---  \n0.8.5 |  Jan 8, 2024   \n0.8.4 |  Dec 13, 2023   \n0.8.3 |  Feb 28, 2023   \n0.1.1 |  Nov 29, 2017   \n#**491** in Concurrency\u27e82\u27e9\nDownload history 2889503/week @ 2025-03-09 3050266/week @ 2025-03-16 3170651/week @ 2025-03-23 2729402/week @ 2025-03-30 2953528/week @ 2025-04-06 2772637/week @ 2025-04-13 2645456/week @ 2025-04-20 2639192/week @ 2025-04-27 2599437/week @ 2025-05-04 2753991/week @ 2025-05-11 2862208/week @ 2025-05-18 2266799/week @ 2025-05-25 2375925/week @ 2025-06-01 2607300/week @ 2025-06-08 2914499/week @ 2025-06-15 2711794/week @ 2025-06-22\n**10,768,263** downloads per month Used in **21,660** crates (59 directly)\u27e83\u27e9\n**MIT/Apache**\n335KB  4.5K  SLoC\n# Crossbeam Deque\n![Build Status\u27e84\u27e9](https://github.com/crossbeam-rs/crossbeam/actions) ![License\u27e85\u27e9](https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque#license) ![Cargo\u27e86\u27e9](https://crates.io/crates/crossbeam-deque) ![Documentation\u27e87\u27e9](https://docs.rs/crossbeam-deque) ![Rust 1.61+\u27e88\u27e9](https://www.rust-lang.org) ![chat\u27e89\u27e9](https://discord.com/invite/JXYwgWZ)\nThis crate provides work-stealing deques, which are primarily intended for building task schedulers.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`crossbeam-deque ``=` ``\"`0.8`\"``\n``\n```\n\n## Compatibility\nCrossbeam Deque supports stable Rust releases going back at least six months, and every time the minimum supported Rust version is increased, a new minor version is released. Currently, the minimum supported Rust version is 1.61.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e810\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e811\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * crossbeam-epoch\u27e812\u27e9\n  * crossbeam-utils\u27e813\u27e9\n\n\n  * dev  rand\u27e814\u27e9 0.8\n\n\n#### Other feature\u27e815\u27e9\n  * std\u27e816\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/crossbeam-deque/versions: 21 releases\n\u27e82\u27e9 https://lib.rs/concurrency: Crates for implementing concurrent and parallel computation. - Concurrency\n\u27e83\u27e9 https://lib.rs/crates/crossbeam-deque/rev: **21,660** crates (59 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/crossbeam-rs/crossbeam/workflows/CI/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT_OR_Apache--2.0-blue.svg: ![License\n\u27e86\u27e9 https://img.shields.io/crates/v/crossbeam-deque.svg: ![Cargo\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/crossbeam-deque/badge.svg: ![Documentation\n\u27e88\u27e9 https://img.shields.io/badge/rust-1.61+-lightgray.svg: ![Rust 1.61+\n\u27e89\u27e9 https://img.shields.io/discord/569610676205781012.svg?logo=discord: ![chat\n\u27e810\u27e9 https://github.com/crossbeam-rs/crossbeam/blob/ccd83ac4108a2a1b41e9c6e79c87267167d18dfa/crossbeam-deque/LICENSE-APACHE: LICENSE-APACHE\n\u27e811\u27e9 https://github.com/crossbeam-rs/crossbeam/blob/ccd83ac4108a2a1b41e9c6e79c87267167d18dfa/crossbeam-deque/LICENSE-MIT: LICENSE-MIT\n\u27e812\u27e9 https://lib.rs/crates/crossbeam-epoch: 0.9.17 - crossbeam-epoch\n\u27e813\u27e9 https://lib.rs/crates/crossbeam-utils: 0.8.18 - crossbeam-utils\n\u27e814\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e815\u27e9 https://lib.rs/crates/crossbeam-deque/features: Other feature\n\u27e816\u27e9 https://lib.rs/crates/crossbeam-deque/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3265,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116729.1060515"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-fa9754cdc3e3a37a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-fa9754cdc3e3a37a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-c09e493f89b8d7f2\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_utils-e068025586ae0021.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_epoch-d3f7c19ac1b6eb03.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1sv1m84x/crossbeam-deque-0.8.6#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_deque-d06d23e327df699f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-fa9754cdc3e3a37a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-fa9754cdc3e3a37a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\build\\crossbeam-utils-c09e493f89b8d7f2\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_utils-e068025586ae0021.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_epoch-d3f7c19ac1b6eb03.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1sv1m84x/crossbeam-deque-0.8.6#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n    --> src\\deque.rs:2080:9\n     |\n2080 | /         match self {\n2081 | |             Steal::Empty => true,\n2082 | |             _ => false,\n2083 | |         }\n     | |_________^ help: try: `matches!(self, Steal::Empty)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n     = note: `#[warn(clippy::match_like_matches_macro)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::match_like_matches_macro)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 70053,
                        "byte_start": 69973,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\deque.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2083,
                        "line_start": 2080,
                        "suggested_replacement": "matches!(self, Steal::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            Steal::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 70053,
                    "byte_start": 69973,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\deque.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2083,
                    "line_start": 2080,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "            Steal::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1sv1m84x/crossbeam-deque-0.8.6#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n    --> src\\deque.rs:2099:9\n     |\n2099 | /         match self {\n2100 | |             Steal::Success(_) => true,\n2101 | |             _ => false,\n2102 | |         }\n     | |_________^ help: try: `matches!(self, Steal::Success(_))`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 70517,
                        "byte_start": 70432,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\deque.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2102,
                        "line_start": 2099,
                        "suggested_replacement": "matches!(self, Steal::Success(_))",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 39,
                            "highlight_start": 1,
                            "text": "            Steal::Success(_) => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 70517,
                    "byte_start": 70432,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\deque.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2102,
                    "line_start": 2099,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 39,
                        "highlight_start": 1,
                        "text": "            Steal::Success(_) => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1sv1m84x/crossbeam-deque-0.8.6#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n    --> src\\deque.rs:2118:9\n     |\n2118 | /         match self {\n2119 | |             Steal::Retry => true,\n2120 | |             _ => false,\n2121 | |         }\n     | |_________^ help: try: `matches!(self, Steal::Retry)`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 70979,
                        "byte_start": 70899,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\deque.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2121,
                        "line_start": 2118,
                        "suggested_replacement": "matches!(self, Steal::Retry)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            Steal::Retry => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 70979,
                    "byte_start": 70899,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\deque.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2121,
                    "line_start": 2118,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "            Steal::Retry => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1sv1m84x/crossbeam-deque-0.8.6#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1sv1m84x\\crossbeam-deque-0.8.6\\target\\debug\\deps\\libcrossbeam_deque-5e5215bbbf999c50.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 17
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "crossbeam-deque",
          "version": "0.8.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\n[Settings](https://docs.rs/crossbeam-deque/latest/settings.html)\n[Help](https://docs.rs/crossbeam-deque/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106)\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues)Queues\n[`Injector`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\") is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n[`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") has two constructors:\n  * [`new_fifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo \"associated function crossbeam_deque::Worker::new_fifo\") - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * [`new_lifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo \"associated function crossbeam_deque::Worker::new_lifo\") - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") is owned by a single thread and supports only push and pop operations.\nMethod [`stealer()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer \"method crossbeam_deque::Worker::stealer\") creates a [`Stealer`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\") that may be shared among threads and can only steal tasks from its [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\"). Tasks are stolen from the end opposite to where they get pushed.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing)Stealing\nSteal operations come in three flavors:\n  1. [`steal()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal \"method crossbeam_deque::Stealer::steal\") - Steals one task.\n  2. [`steal_batch()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch \"method crossbeam_deque::Stealer::steal_batch\") - Steals a batch of tasks and moves them into another worker.\n  3. [`steal_batch_and_pop()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop \"method crossbeam_deque::Stealer::steal_batch_and_pop\") - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with [`Steal::Retry`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry \"variant crossbeam_deque::Steal::Retry\"), in which case the steal operation needs to be retried.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples)Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs)\n\n[Injector](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\")\n    An injector queue.\n\n[Stealer](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\")\n    A stealer handle of a worker queue.\n\n[Worker](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\")\n    A worker queue.\n## Enums[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums)\n\n[Steal](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html \"enum crossbeam_deque::Steal\")\n    Possible outcomes of a steal operation.\n",
            "markdown_with_citations": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## \u00a7\u27e84\u27e9Queues\n`Injector`\u27e85\u27e9 is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n`Worker`\u27e86\u27e9 has two constructors:\n  * `new_fifo()`\u27e87\u27e9 - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * `new_lifo()`\u27e88\u27e9 - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach `Worker`\u27e86\u27e9 is owned by a single thread and supports only push and pop operations.\nMethod `stealer()`\u27e89\u27e9 creates a `Stealer`\u27e810\u27e9 that may be shared among threads and can only steal tasks from its `Worker`\u27e86\u27e9. Tasks are stolen from the end opposite to where they get pushed.\n## \u00a7\u27e811\u27e9Stealing\nSteal operations come in three flavors:\n  1. `steal()`\u27e812\u27e9 - Steals one task.\n  2. `steal_batch()`\u27e813\u27e9 - Steals a batch of tasks and moves them into another worker.\n  3. `steal_batch_and_pop()`\u27e814\u27e9 - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with `Steal::Retry`\u27e815\u27e9, in which case the steal operation needs to be retried.\n## \u00a7\u27e816\u27e9Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs\u00a7\u27e817\u27e9\n\nInjector\u27e85\u27e9\n    An injector queue.\n\nStealer\u27e810\u27e9\n    A stealer handle of a worker queue.\n\nWorker\u27e86\u27e9\n    A worker queue.\n## Enums\u00a7\u27e818\u27e9\n\nSteal\u27e819\u27e9\n    Possible outcomes of a steal operation.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-deque/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-deque/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html: struct crossbeam_deque::Injector - `Injector`\n\u27e86\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html: struct crossbeam_deque::Worker - `Worker`\n\u27e87\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo: associated function crossbeam_deque::Worker::new_fifo - `new_fifo()`\n\u27e88\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo: associated function crossbeam_deque::Worker::new_lifo - `new_lifo()`\n\u27e89\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer: method crossbeam_deque::Worker::stealer - `stealer()`\n\u27e810\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html: struct crossbeam_deque::Stealer - `Stealer`\n\u27e811\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal: method crossbeam_deque::Stealer::steal - `steal()`\n\u27e813\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch: method crossbeam_deque::Stealer::steal_batch - `steal_batch()`\n\u27e814\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop: method crossbeam_deque::Stealer::steal_batch_and_pop - `steal_batch_and_pop()`\n\u27e815\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry: variant crossbeam_deque::Steal::Retry - `Steal::Retry`\n\u27e816\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples: \u00a7\n\u27e817\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html: enum crossbeam_deque::Steal - Steal\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "crossbeam-deque",
          "version": "0.8.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\n[Settings](https://docs.rs/crossbeam-deque/latest/settings.html)\n[Help](https://docs.rs/crossbeam-deque/latest/help.html)\nSummary[Source](https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106)\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues)Queues\n[`Injector`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\") is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n[`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") has two constructors:\n  * [`new_fifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo \"associated function crossbeam_deque::Worker::new_fifo\") - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * [`new_lifo()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo \"associated function crossbeam_deque::Worker::new_lifo\") - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\") is owned by a single thread and supports only push and pop operations.\nMethod [`stealer()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer \"method crossbeam_deque::Worker::stealer\") creates a [`Stealer`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\") that may be shared among threads and can only steal tasks from its [`Worker`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\"). Tasks are stolen from the end opposite to where they get pushed.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing)Stealing\nSteal operations come in three flavors:\n  1. [`steal()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal \"method crossbeam_deque::Stealer::steal\") - Steals one task.\n  2. [`steal_batch()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch \"method crossbeam_deque::Stealer::steal_batch\") - Steals a batch of tasks and moves them into another worker.\n  3. [`steal_batch_and_pop()`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop \"method crossbeam_deque::Stealer::steal_batch_and_pop\") - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with [`Steal::Retry`](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry \"variant crossbeam_deque::Steal::Retry\"), in which case the steal operation needs to be retried.\n## [\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples)Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs)\n\n[Injector](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html \"struct crossbeam_deque::Injector\")\n    An injector queue.\n\n[Stealer](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html \"struct crossbeam_deque::Stealer\")\n    A stealer handle of a worker queue.\n\n[Worker](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html \"struct crossbeam_deque::Worker\")\n    A worker queue.\n## Enums[\u00a7](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums)\n\n[Steal](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html \"enum crossbeam_deque::Steal\")\n    Possible outcomes of a steal operation.\n",
            "markdown_with_citations": "[](https://docs.rs/crossbeam-deque/latest/crossbeam_deque/all.html \"show sidebar\")\n# Crate crossbeam_dequeCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nConcurrent work-stealing deques.\nThese data structures are most commonly used in work-stealing schedulers. The typical setup involves a number of threads, each having its own FIFO or LIFO queue (_worker_). There is also one global FIFO queue (_injector_) and a list of references to _worker_ queues that are able to steal tasks (_stealers_).\nWe spawn a new task onto the scheduler by pushing it into the _injector_ queue. Each worker thread waits in a loop until it finds the next task to run and then runs it. To find a task, it first looks into its local _worker_ queue, and then into the _injector_ and _stealers_.\n## \u00a7\u27e84\u27e9Queues\n`Injector`\u27e85\u27e9 is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is shared among threads and is usually the entry point for new tasks.\n`Worker`\u27e86\u27e9 has two constructors:\n  * `new_fifo()`\u27e87\u27e9 - Creates a FIFO queue, in which tasks are pushed and popped from opposite ends.\n  * `new_lifo()`\u27e88\u27e9 - Creates a LIFO queue, in which tasks are pushed and popped from the same end.\n\n\nEach `Worker`\u27e86\u27e9 is owned by a single thread and supports only push and pop operations.\nMethod `stealer()`\u27e89\u27e9 creates a `Stealer`\u27e810\u27e9 that may be shared among threads and can only steal tasks from its `Worker`\u27e86\u27e9. Tasks are stolen from the end opposite to where they get pushed.\n## \u00a7\u27e811\u27e9Stealing\nSteal operations come in three flavors:\n  1. `steal()`\u27e812\u27e9 - Steals one task.\n  2. `steal_batch()`\u27e813\u27e9 - Steals a batch of tasks and moves them into another worker.\n  3. `steal_batch_and_pop()`\u27e814\u27e9 - Steals a batch of tasks, moves them into another queue, and pops one task from that worker.\n\n\nIn contrast to push and pop operations, stealing can spuriously fail with `Steal::Retry`\u27e815\u27e9, in which case the steal operation needs to be retried.\n## \u00a7\u27e816\u27e9Examples\nSuppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To find an available task, it might do the following:\n  1. Try popping one task from the local worker queue.\n  2. Try stealing a batch of tasks from the global injector queue.\n  3. Try stealing one task from another thread using the stealer list.\n\n\nAn implementation of this work-stealing strategy:\n```\nuse crossbeam_deque::{Injector, Stealer, Worker};\nuse std::iter;\nfn find_task<T>(\n  local: &Worker<T>,\n  global: &Injector<T>,\n  stealers: &[Stealer<T>],\n) -> Option<T> {\n  // Pop a task from the local queue, if not empty.\n  local.pop().or_else(|| {\n    // Otherwise, we need to look for a task elsewhere.\n    iter::repeat_with(|| {\n      // Try stealing a batch of tasks from the global queue.\n      global.steal_batch_and_pop(local)\n        // Or try stealing a task from one of the other threads.\n        .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n    })\n    // Loop while no task was stolen and any steal operation needs to be retried.\n    .find(|s| !s.is_retry())\n    // Extract the stolen task, if there is one.\n    .and_then(|s| s.success())\n  })\n}\n```\n\n## Structs\u00a7\u27e817\u27e9\n\nInjector\u27e85\u27e9\n    An injector queue.\n\nStealer\u27e810\u27e9\n    A stealer handle of a worker queue.\n\nWorker\u27e86\u27e9\n    A worker queue.\n## Enums\u00a7\u27e818\u27e9\n\nSteal\u27e819\u27e9\n    Possible outcomes of a steal operation.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/crossbeam-deque/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/crossbeam-deque/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/crossbeam-deque/latest/src/crossbeam_deque/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#queues: \u00a7\n\u27e85\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Injector.html: struct crossbeam_deque::Injector - `Injector`\n\u27e86\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html: struct crossbeam_deque::Worker - `Worker`\n\u27e87\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_fifo: associated function crossbeam_deque::Worker::new_fifo - `new_fifo()`\n\u27e88\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.new_lifo: associated function crossbeam_deque::Worker::new_lifo - `new_lifo()`\n\u27e89\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Worker.html#method.stealer: method crossbeam_deque::Worker::stealer - `stealer()`\n\u27e810\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html: struct crossbeam_deque::Stealer - `Stealer`\n\u27e811\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#stealing: \u00a7\n\u27e812\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal: method crossbeam_deque::Stealer::steal - `steal()`\n\u27e813\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch: method crossbeam_deque::Stealer::steal_batch - `steal_batch()`\n\u27e814\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/struct.Stealer.html#method.steal_batch_and_pop: method crossbeam_deque::Stealer::steal_batch_and_pop - `steal_batch_and_pop()`\n\u27e815\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html#variant.Retry: variant crossbeam_deque::Steal::Retry - `Steal::Retry`\n\u27e816\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#examples: \u00a7\n\u27e817\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/#enums: \u00a7\n\u27e819\u27e9 https://docs.rs/crossbeam-deque/latest/crossbeam_deque/enum.Steal.html: enum crossbeam_deque::Steal - Steal\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `crossbeam-deque` crate provides efficient concurrent work-stealing deques, commonly used in task schedulers. It features three main queue types: `Injector` (global FIFO queue), `Worker` (thread-local FIFO or LIFO queues), and `Stealer` (handles for stealing tasks). The crate supports flexible task management with operations like pushing, popping, and stealing tasks (individually or in batches), enabling robust multi-threaded scheduling.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Queue Types  \n\u2705 Factual: The `crossbeam-deque` crate provides both FIFO and LIFO queues through the `Worker` struct, allowing developers to choose the queue type that best suits their task scheduling needs.  \n\u274c Counterfactual: The `crossbeam-deque` crate only supports FIFO queues and does not provide an option for LIFO queue creation.  \n\n---\n\n### Pair 2: Stealing Mechanism  \n\u2705 Factual: The `Stealer` struct in `crossbeam-deque` allows tasks to be stolen from a `Worker` queue, and steal operations can fail spuriously with the `Steal::Retry` variant, requiring retries.  \n\u274c Counterfactual: The `Stealer` struct can steal tasks from both the `Worker` queue and the `Injector` queue directly, without any restrictions or need for retries.  \n\n---\n\n### Pair 3: Task Distribution  \n\u2705 Factual: The `Injector` queue in `crossbeam-deque` is a global FIFO queue designed to distribute tasks among worker threads, serving as the entry point for new tasks.  \n\u274c Counterfactual: The `Injector` queue in `crossbeam-deque` operates as a LIFO queue and is designed for exclusive use by a single thread rather than being shared globally.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-2f917d40-aefdbc76-1751262938",
      "timestamp": "2025-06-30T05:55:38.006108+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]