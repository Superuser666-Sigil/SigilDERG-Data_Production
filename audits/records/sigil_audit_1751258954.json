[
  {
    "execution_id": "exec-8e737683-05a6d4b7-1751258944",
    "timestamp": "2025-06-30T04:49:04.878639+00:00",
    "sacred_chain": {
      "input_data": "serde_yaml",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'serde_yaml' -> 'serde_yaml'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "serde_yaml",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/serde_yaml",
            "title": "serde_yaml v0.9.34+deprecated",
            "content": {
              "raw_markdown": "#  serde_yaml v0.9.34+deprecated\nYAML data format for Serde \n  * [ #yaml ](https://crates.io/keywords/yaml)\n  * [ #serde ](https://crates.io/keywords/serde)\n  * [ #serialization ](https://crates.io/keywords/serialization)\n\n\n  * [ Readme ](https://crates.io/crates/serde_yaml)\n  * [ 86 Versions ](https://crates.io/crates/serde_yaml/versions)\n  * [ Dependencies ](https://crates.io/crates/serde_yaml/dependencies)\n  * [ Dependents ](https://crates.io/crates/serde_yaml/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.64.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n63.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_yaml\nOr add the following line to your Cargo.toml:\nserde_yaml = \"0.9.34\"\n## Documentation\n[ docs.rs/serde_yaml ](https://docs.rs/serde_yaml/)\n## Repository\n[ github.com/dtolnay/serde-yaml ](https://github.com/dtolnay/serde-yaml)\n## Owners\n## Categories\n  * [Encoding](https://crates.io/categories/encoding)\n  * [Parser implementations](https://crates.io/categories/parser-implementations)\n\n\n[ Report crate ](https://crates.io/support?crate=serde_yaml&inquire=crate-violation)\n### Stats Overview\n133,494,881 Downloads all time\n86 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  serde_yaml v0.9.34+deprecated\nYAML data format for Serde \n  *  #yaml \u27e81\u27e9\n  *  #serde \u27e82\u27e9\n  *  #serialization \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  86 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.64.0 \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n63.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_yaml\nOr add the following line to your Cargo.toml:\nserde_yaml = \"0.9.34\"\n## Documentation\n docs.rs/serde_yaml \u27e810\u27e9\n## Repository\n github.com/dtolnay/serde-yaml \u27e811\u27e9\n## Owners\n## Categories\n  * Encoding\u27e812\u27e9\n  * Parser implementations\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n133,494,881 Downloads all time\n86 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/yaml:  #yaml \n\u27e82\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e83\u27e9 https://crates.io/keywords/serialization:  #serialization \n\u27e84\u27e9 https://crates.io/crates/serde_yaml:  Readme \n\u27e85\u27e9 https://crates.io/crates/serde_yaml/versions:  86 Versions \n\u27e86\u27e9 https://crates.io/crates/serde_yaml/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/serde_yaml/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://docs.rs/serde_yaml/:  docs.rs/serde_yaml \n\u27e811\u27e9 https://github.com/dtolnay/serde-yaml:  github.com/dtolnay/serde-yaml \n\u27e812\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e813\u27e9 https://crates.io/categories/parser-implementations: Parser implementations\n\u27e814\u27e9 https://crates.io/support?crate=serde_yaml&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1386,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112734.8424331"
          },
          "docs_rs": {
            "url": "https://docs.rs/serde_yaml",
            "title": "Crate serde_yamlCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\n[Settings](https://docs.rs/serde_yaml/latest/settings.html)\n[Help](https://docs.rs/serde_yaml/latest/help.html)\nSummary[Source](https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-yaml) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/serde-yaml) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde-yaml)\nRust library for using the [Serde](https://github.com/serde-rs/serde) serialization framework with data in [YAML](https://yaml.org/) file format. _(This project is no longer maintained.)_\n## [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#examples)Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive)Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#modules)\n\n[mapping](https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html \"mod serde_yaml::mapping\")\n    A YAML mapping and its iterator types.\n\n[value](https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html \"mod serde_yaml::value\")\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\n[with](https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html \"mod serde_yaml::with\")\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#structs)\n\n[Deserializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html \"struct serde_yaml::Deserializer\")\n    A structure that deserializes YAML into Rust values.\n\n[Error](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html \"struct serde_yaml::Error\")\n    An error that happened serializing or deserializing YAML data.\n\n[Location](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html \"struct serde_yaml::Location\")\n    The input location that an error occured.\n\n[Mapping](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html \"struct serde_yaml::Mapping\")\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\n[Number](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html \"struct serde_yaml::Number\")\n    Represents a YAML number, whether integer or floating point.\n\n[Serializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html \"struct serde_yaml::Serializer\")\n    A structure for serializing Rust values into YAML.\n## Enums[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#enums)\n\n[Value](https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html \"enum serde_yaml::Value\")\n    Represents any valid YAML value.\n## Traits[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#traits)\n\n[Index](https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html \"trait serde_yaml::Index\")\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#functions)\n\n[from_reader](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html \"fn serde_yaml::from_reader\")\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\n[from_slice](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html \"fn serde_yaml::from_slice\")\n    Deserialize an instance of type `T` from bytes of YAML text.\n\n[from_str](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html \"fn serde_yaml::from_str\")\n    Deserialize an instance of type `T` from a string of YAML text.\n\n[from_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html \"fn serde_yaml::from_value\")\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\n[to_string](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html \"fn serde_yaml::to_string\")\n    Serialize the given data structure as a String of YAML.\n\n[to_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html \"fn serde_yaml::to_value\")\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\n[to_writer](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html \"fn serde_yaml::to_writer\")\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#types)\n\n[Result](https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html \"type serde_yaml::Result\")\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\n[Sequence](https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html \"type serde_yaml::Sequence\")\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
              "markdown_with_citations": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-yaml) ![crates-io\u27e85\u27e9](https://crates.io/crates/serde-yaml) ![docs-rs\u27e86\u27e9](https://docs.rs/serde-yaml)\nRust library for using the Serde\u27e87\u27e9 serialization framework with data in YAML\u27e88\u27e9 file format. _(This project is no longer maintained.)_\n## \u00a7\u27e89\u27e9Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### \u00a7\u27e810\u27e9Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nmapping\u27e812\u27e9\n    A YAML mapping and its iterator types.\n\nvalue\u27e813\u27e9\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\nwith\u27e814\u27e9\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs\u00a7\u27e815\u27e9\n\nDeserializer\u27e816\u27e9\n    A structure that deserializes YAML into Rust values.\n\nError\u27e817\u27e9\n    An error that happened serializing or deserializing YAML data.\n\nLocation\u27e818\u27e9\n    The input location that an error occured.\n\nMapping\u27e819\u27e9\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\nNumber\u27e820\u27e9\n    Represents a YAML number, whether integer or floating point.\n\nSerializer\u27e821\u27e9\n    A structure for serializing Rust values into YAML.\n## Enums\u00a7\u27e822\u27e9\n\nValue\u27e823\u27e9\n    Represents any valid YAML value.\n## Traits\u00a7\u27e824\u27e9\n\nIndex\u27e825\u27e9\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions\u00a7\u27e826\u27e9\n\nfrom_reader\u27e827\u27e9\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\nfrom_slice\u27e828\u27e9\n    Deserialize an instance of type `T` from bytes of YAML text.\n\nfrom_str\u27e829\u27e9\n    Deserialize an instance of type `T` from a string of YAML text.\n\nfrom_value\u27e830\u27e9\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\nto_string\u27e831\u27e9\n    Serialize the given data structure as a String of YAML.\n\nto_value\u27e832\u27e9\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\nto_writer\u27e833\u27e9\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases\u00a7\u27e834\u27e9\n\nResult\u27e835\u27e9\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\nSequence\u27e836\u27e9\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_yaml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_yaml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e88\u27e9 https://yaml.org/: YAML\n\u27e89\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html: mod serde_yaml::mapping - mapping\n\u27e813\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html: mod serde_yaml::value - value\n\u27e814\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html: mod serde_yaml::with - with\n\u27e815\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html: struct serde_yaml::Deserializer - Deserializer\n\u27e817\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html: struct serde_yaml::Error - Error\n\u27e818\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html: struct serde_yaml::Location - Location\n\u27e819\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html: struct serde_yaml::Mapping - Mapping\n\u27e820\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html: struct serde_yaml::Number - Number\n\u27e821\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html: struct serde_yaml::Serializer - Serializer\n\u27e822\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#enums: \u00a7\n\u27e823\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html: enum serde_yaml::Value - Value\n\u27e824\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#traits: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html: trait serde_yaml::Index - Index\n\u27e826\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#functions: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html: fn serde_yaml::from_reader - from_reader\n\u27e828\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html: fn serde_yaml::from_slice - from_slice\n\u27e829\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html: fn serde_yaml::from_str - from_str\n\u27e830\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html: fn serde_yaml::from_value - from_value\n\u27e831\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html: fn serde_yaml::to_string - to_string\n\u27e832\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html: fn serde_yaml::to_value - to_value\n\u27e833\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html: fn serde_yaml::to_writer - to_writer\n\u27e834\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#types: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html: type serde_yaml::Result - Result\n\u27e836\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html: type serde_yaml::Sequence - Sequence\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7223,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112735.484067"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/serde_yaml",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [86 releases](https://lib.rs/crates/serde_yaml/versions)\n0.9.34+deprecated |  Mar 25, 2024   \n---|---  \n0.9.32 |  Feb 19, 2024   \n0.9.29 |  Dec 21, 2023   \n0.9.27 |  Oct 26, 2023   \n0.2.3 |  Mar 10, 2016   \n#**2740** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 2008992/week @ 2025-03-08 2149154/week @ 2025-03-15 2431842/week @ 2025-03-22 1875462/week @ 2025-03-29 1956960/week @ 2025-04-05 1686616/week @ 2025-04-12 1650508/week @ 2025-04-19 1568659/week @ 2025-04-26 1655677/week @ 2025-05-03 1684727/week @ 2025-05-10 1687409/week @ 2025-05-17 1501635/week @ 2025-05-24 1751627/week @ 2025-05-31 1796486/week @ 2025-06-07 1805676/week @ 2025-06-14 1670794/week @ 2025-06-21\n**7,314,676** downloads per month Used in [**5,718** crates (3,402 directly)](https://lib.rs/crates/serde_yaml/rev)\n**MIT/Apache**\n345KB  9K  SLoC\n# Serde YAML\n[![github](https://img.shields.io/badge/github-dtolnay/serde--yaml-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-yaml) [![crates.io](https://img.shields.io/crates/v/serde_yaml.svg?style=for-the-badge&color=fc8d62&logo=rust)](https://crates.io/crates/serde_yaml) [![docs.rs](https://img.shields.io/badge/docs.rs-serde__yaml-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde_yaml) [![build status](https://img.shields.io/github/actions/workflow/status/dtolnay/serde-yaml/ci.yml?branch=master&style=for-the-badge)](https://github.com/dtolnay/serde-yaml/actions?query=branch%3Amaster)\nRust library for using the [Serde](https://github.com/serde-rs/serde) serialization framework with data in [YAML](https://yaml.org/) file format. _(This project is no longer maintained.)_\n## Dependency\n```\n```[``dependencies``]`\n`serde ``=` ``\"`1.0`\"``\n`serde_yaml ``=` ``\"`0.9`\"``\n``\n```\n\nRelease notes are available under [GitHub releases](https://github.com/dtolnay/serde-yaml/releases).\n## Using Serde YAML\n[API documentation is available in rustdoc form](https://docs.rs/serde_yaml) but the general idea is:\n```\n``use` `std`::```collections`::``BTreeMap`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  ``//` You have some type.`\n  `let` `mut` map `=` `BTreeMap`::``new`(``)``;`\n  map`.``insert``(```\"`x`\"```.``to_string``(``)``,` `1.``0``)``;`\n  map`.``insert``(```\"`y`\"```.``to_string``(``)``,` `2.``0``)``;`\n  ``//` Serialize it to a YAML string.`\n  `let` yaml `=` `serde_yaml`::``to_string`(``&`map`)``?``;`\n  `assert_eq!``(`yaml`,` ``\"`x: 1.0`\\n`y: 2.0`\\n``\"```)``;`\n  ``//` Deserialize it back to a Rust type.`\n  `let` deserialized_map`:` `BTreeMap`<``String`, `f64``>`` `=` `serde_yaml`::``from_str`(``&`yaml`)``?``;`\n  `assert_eq!``(`map`,` deserialized_map`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nIt can also be used with Serde's derive macros to handle structs and enums defined in your program.\n```\n```[``dependencies``]`\n`serde = { version = \"1.0\", features ``=` ``[```\"`derive`\"```]`` }\n`serde_yaml ``=` ``\"`0.9`\"``\n``\n```\n\nStructs serialize in the obvious way:\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Serialize`,` Deserialize```)```]``\n``struct` ```Point` ````{`\n  `x``:` `f64`,\n  `y``:` `f64`,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  `let` point `=` Point `{` x`:` `1.``0``,` y`:` `2.``0` `}``;`\n  `let` yaml `=` `serde_yaml`::``to_string`(``&`point`)``?``;`\n  `assert_eq!``(`yaml`,` ``\"`x: 1.0`\\n`y: 2.0`\\n``\"```)``;`\n  `let` deserialized_point`:` Point `=` `serde_yaml`::``from_str`(``&`yaml`)``?``;`\n  `assert_eq!``(`point`,` deserialized_point`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nEnums serialize using YAML's ```!`tag`` syntax to identify the variant name.\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize`,` Deserialize`,` PartialEq`,` Debug```)```]``\n``enum` `Enum` ``{`\n  Unit`,`\n  Newtype`(``usize``)``,`\n  Tuple`(``usize``,` `usize``,` `usize``)``,`\n  Struct `{` x`:` `f64``,` y`:` `f64` `}``,`\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  `let` yaml `=` ``\"`\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Newtype`(``1``)``)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Tuple`(``0``,` `0``,` `0``)``)``;`\n  `assert_eq!``(`values`[``2``]``,` `Enum`::``Struct `{` x`:` `1.``0``,` y`:` `2.``0` `}``)``;`\n  ``//` The last two in YAML's block style instead:`\n  `let` yaml `=` ``\"`\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Tuple`(``0``,` `0``,` `0``)``)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Struct `{` x`:` `1.``0``,` y`:` `2.``0` `}``)``;`\n  ``//` Variants with no data can be written using !Tag or just the string name.`\n  `let` yaml `=` ``\"`\n    - Unit # serialization produces this one\n    - !Unit\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Unit`)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Unit`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/dtolnay/serde-yaml/blob/2009506d33767dfc88e979d6bc0d53d09f941c94/LICENSE-APACHE) or [MIT license](https://github.com/dtolnay/serde-yaml/blob/2009506d33767dfc88e979d6bc0d53d09f941c94/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~1.3\u20131.7MB  ~34K SLoC\n  * [indexmap](https://lib.rs/crates/indexmap \"new\") 2.2\n  * [itoa](https://lib.rs/crates/itoa \"1.0\")\n  * [ryu](https://lib.rs/crates/ryu \"1.0\")\n  * [serde](https://lib.rs/crates/serde \"1.0.195\")\n  * [unsafe-libyaml](https://lib.rs/crates/unsafe-libyaml \"0.2.11\")\n\n\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0.79\")\n  * dev  [indoc](https://lib.rs/crates/indoc \"2.0\")\n  * dev  [serde_derive](https://lib.rs/crates/serde_derive \"1.0.195\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  86 releases\u27e81\u27e9\n0.9.34+deprecated |  Mar 25, 2024   \n---|---  \n0.9.32 |  Feb 19, 2024   \n0.9.29 |  Dec 21, 2023   \n0.9.27 |  Oct 26, 2023   \n0.2.3 |  Mar 10, 2016   \n#**2740** in Encoding\u27e82\u27e9\nDownload history 2008992/week @ 2025-03-08 2149154/week @ 2025-03-15 2431842/week @ 2025-03-22 1875462/week @ 2025-03-29 1956960/week @ 2025-04-05 1686616/week @ 2025-04-12 1650508/week @ 2025-04-19 1568659/week @ 2025-04-26 1655677/week @ 2025-05-03 1684727/week @ 2025-05-10 1687409/week @ 2025-05-17 1501635/week @ 2025-05-24 1751627/week @ 2025-05-31 1796486/week @ 2025-06-07 1805676/week @ 2025-06-14 1670794/week @ 2025-06-21\n**7,314,676** downloads per month Used in **5,718** crates (3,402 directly)\u27e83\u27e9\n**MIT/Apache**\n345KB  9K  SLoC\n# Serde YAML\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-yaml) ![crates.io\u27e85\u27e9](https://crates.io/crates/serde_yaml) ![docs.rs\u27e86\u27e9](https://docs.rs/serde_yaml) ![build status\u27e87\u27e9](https://github.com/dtolnay/serde-yaml/actions?query=branch%3Amaster)\nRust library for using the Serde\u27e88\u27e9 serialization framework with data in YAML\u27e89\u27e9 file format. _(This project is no longer maintained.)_\n## Dependency\n```\n```[``dependencies``]`\n`serde ``=` ``\"`1.0`\"``\n`serde_yaml ``=` ``\"`0.9`\"``\n``\n```\n\nRelease notes are available under GitHub releases\u27e810\u27e9.\n## Using Serde YAML\nAPI documentation is available in rustdoc form\u27e811\u27e9 but the general idea is:\n```\n``use` `std`::```collections`::``BTreeMap`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  ``//` You have some type.`\n  `let` `mut` map `=` `BTreeMap`::``new`(``)``;`\n  map`.``insert``(```\"`x`\"```.``to_string``(``)``,` `1.``0``)``;`\n  map`.``insert``(```\"`y`\"```.``to_string``(``)``,` `2.``0``)``;`\n  ``//` Serialize it to a YAML string.`\n  `let` yaml `=` `serde_yaml`::``to_string`(``&`map`)``?``;`\n  `assert_eq!``(`yaml`,` ``\"`x: 1.0`\\n`y: 2.0`\\n``\"```)``;`\n  ``//` Deserialize it back to a Rust type.`\n  `let` deserialized_map`:` `BTreeMap`<``String`, `f64``>`` `=` `serde_yaml`::``from_str`(``&`yaml`)``?``;`\n  `assert_eq!``(`map`,` deserialized_map`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nIt can also be used with Serde's derive macros to handle structs and enums defined in your program.\n```\n```[``dependencies``]`\n`serde = { version = \"1.0\", features ``=` ``[```\"`derive`\"```]`` }\n`serde_yaml ``=` ``\"`0.9`\"``\n``\n```\n\nStructs serialize in the obvious way:\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Serialize`,` Deserialize```)```]``\n``struct` ```Point` ````{`\n  `x``:` `f64`,\n  `y``:` `f64`,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  `let` point `=` Point `{` x`:` `1.``0``,` y`:` `2.``0` `}``;`\n  `let` yaml `=` `serde_yaml`::``to_string`(``&`point`)``?``;`\n  `assert_eq!``(`yaml`,` ``\"`x: 1.0`\\n`y: 2.0`\\n``\"```)``;`\n  `let` deserialized_point`:` Point `=` `serde_yaml`::``from_str`(``&`yaml`)``?``;`\n  `assert_eq!``(`point`,` deserialized_point`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nEnums serialize using YAML's ```!`tag`` syntax to identify the variant name.\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize`,` Deserialize`,` PartialEq`,` Debug```)```]``\n``enum` `Enum` ``{`\n  Unit`,`\n  Newtype`(``usize``)``,`\n  Tuple`(``usize``,` `usize``,` `usize``)``,`\n  Struct `{` x`:` `f64``,` y`:` `f64` `}``,`\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `serde_yaml`::``Error`>``` ````{`\n  `let` yaml `=` ``\"`\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Newtype`(``1``)``)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Tuple`(``0``,` `0``,` `0``)``)``;`\n  `assert_eq!``(`values`[``2``]``,` `Enum`::``Struct `{` x`:` `1.``0``,` y`:` `2.``0` `}``)``;`\n  ``//` The last two in YAML's block style instead:`\n  `let` yaml `=` ``\"`\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Tuple`(``0``,` `0``,` `0``)``)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Struct `{` x`:` `1.``0``,` y`:` `2.``0` `}``)``;`\n  ``//` Variants with no data can be written using !Tag or just the string name.`\n  `let` yaml `=` ``\"`\n    - Unit # serialization produces this one\n    - !Unit\n  `\"```;`\n  `let` values`:` ``Vec``<`Enum`>`` `=` `serde_yaml`::``from_str`(`yaml`)``.``unwrap``(``)``;`\n  `assert_eq!``(`values`[``0``]``,` `Enum`::``Unit`)``;`\n  `assert_eq!``(`values`[``1``]``,` `Enum`::``Unit`)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n#### License\nLicensed under either of Apache License, Version 2.0\u27e812\u27e9 or MIT license\u27e813\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~1.3\u20131.7MB  ~34K SLoC\n  * indexmap\u27e814\u27e9 2.2\n  * itoa\u27e815\u27e9\n  * ryu\u27e816\u27e9\n  * serde\u27e817\u27e9\n  * unsafe-libyaml\u27e818\u27e9\n\n\n  * dev  anyhow\u27e819\u27e9\n  * dev  indoc\u27e820\u27e9\n  * dev  serde_derive\u27e821\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/serde_yaml/versions: 86 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/serde_yaml/rev: **5,718** crates (3,402 directly)\n\u27e84\u27e9 https://img.shields.io/badge/github-dtolnay/serde--yaml-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/crates/v/serde_yaml.svg?style=for-the-badge&color=fc8d62&logo=rust: ![crates.io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-serde__yaml-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dtolnay/serde-yaml/ci.yml?branch=master&style=for-the-badge: ![build status\n\u27e88\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e89\u27e9 https://yaml.org/: YAML\n\u27e810\u27e9 https://github.com/dtolnay/serde-yaml/releases: GitHub releases\n\u27e811\u27e9 https://docs.rs/serde_yaml: API documentation is available in rustdoc form\n\u27e812\u27e9 https://github.com/dtolnay/serde-yaml/blob/2009506d33767dfc88e979d6bc0d53d09f941c94/LICENSE-APACHE: Apache License, Version 2.0\n\u27e813\u27e9 https://github.com/dtolnay/serde-yaml/blob/2009506d33767dfc88e979d6bc0d53d09f941c94/LICENSE-MIT: MIT license\n\u27e814\u27e9 https://lib.rs/crates/indexmap: new - indexmap\n\u27e815\u27e9 https://lib.rs/crates/itoa: 1.0 - itoa\n\u27e816\u27e9 https://lib.rs/crates/ryu: 1.0 - ryu\n\u27e817\u27e9 https://lib.rs/crates/serde: 1.0.195 - serde\n\u27e818\u27e9 https://lib.rs/crates/unsafe-libyaml: 0.2.11 - unsafe-libyaml\n\u27e819\u27e9 https://lib.rs/crates/anyhow: 1.0.79 - anyhow\n\u27e820\u27e9 https://lib.rs/crates/indoc: 2.0 - indoc\n\u27e821\u27e9 https://lib.rs/crates/serde_derive: 1.0.195 - serde_derive\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6561,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112735.935414"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libryu-b5eb7f50b0721bb1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libhashbrown-a043e0c8c3e2aece.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unsafe-libyaml@0.2.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unsafe-libyaml-0.2.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unsafe_libyaml",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unsafe-libyaml-0.2.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libunsafe_libyaml-1a9112bd7ec50efe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libindexmap-453723c3d291c1d1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:21:28\n   |\n21 |             kind: unsafe { (*parser).error },\n   |                            ^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\n   = note: `#[warn(dangerous_implicit_autorefs)]` on by default\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n21 |             kind: unsafe { (&(*parser)).error },\n   |                            ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dangerous_implicit_autorefs)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 539,
                        "byte_start": 539,
                        "column_end": 28,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "            kind: unsafe { (*parser).error },"
                          }
                        ]
                      },
                      {
                        "byte_end": 548,
                        "byte_start": 548,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "            kind: unsafe { (*parser).error },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 554,
                    "byte_start": 539,
                    "column_end": 43,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 28,
                        "text": "            kind: unsafe { (*parser).error },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:22:50\n   |\n22 |             problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n22 |             problem: match NonNull::new(unsafe { (&(*parser)).problem as *mut _ }) {\n   |                                                  ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 607,
                        "byte_start": 607,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 22,
                        "line_start": 22,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 616,
                        "byte_start": 616,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 22,
                        "line_start": 22,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 624,
                    "byte_start": 607,
                    "column_end": 67,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 50,
                        "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:26:38\n   |\n26 |             problem_offset: unsafe { (*parser).problem_offset },\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n26 |             problem_offset: unsafe { (&(*parser)).problem_offset },\n   |                                      ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 862,
                        "byte_start": 862,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                          }
                        ]
                      },
                      {
                        "byte_end": 871,
                        "byte_start": 871,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 886,
                    "byte_start": 862,
                    "column_end": 62,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 26,
                    "line_start": 26,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 38,
                        "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:28:31\n   |\n28 |                 sys: unsafe { (*parser).problem_mark },\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n28 |                 sys: unsafe { (&(*parser)).problem_mark },\n   |                               ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 953,
                        "byte_start": 953,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                sys: unsafe { (*parser).problem_mark },"
                          }
                        ]
                      },
                      {
                        "byte_end": 962,
                        "byte_start": 962,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                sys: unsafe { (*parser).problem_mark },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 975,
                    "byte_start": 953,
                    "column_end": 53,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 31,
                        "text": "                sys: unsafe { (*parser).problem_mark },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:30:50\n   |\n30 |             context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n30 |             context: match NonNull::new(unsafe { (&(*parser)).context as *mut _ }) {\n   |                                                  ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1043,
                        "byte_start": 1043,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1052,
                        "byte_start": 1052,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1060,
                    "byte_start": 1043,
                    "column_end": 67,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 50,
                        "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:35:31\n   |\n35 |                 sys: unsafe { (*parser).context_mark },\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n35 |                 sys: unsafe { (&(*parser)).context_mark },\n   |                               ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1259,
                        "byte_start": 1259,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 35,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                sys: unsafe { (*parser).context_mark },"
                          }
                        ]
                      },
                      {
                        "byte_end": 1268,
                        "byte_start": 1268,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 35,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                sys: unsafe { (*parser).context_mark },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1281,
                    "byte_start": 1259,
                    "column_end": 53,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 31,
                        "text": "                sys: unsafe { (*parser).context_mark },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:42:28\n   |\n42 |             kind: unsafe { (*emitter).error },\n   |                            ^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n42 |             kind: unsafe { (&(*emitter)).error },\n   |                            ++          +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1436,
                        "byte_start": 1436,
                        "column_end": 28,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "            kind: unsafe { (*emitter).error },"
                          }
                        ]
                      },
                      {
                        "byte_end": 1446,
                        "byte_start": 1446,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "            kind: unsafe { (*emitter).error },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1452,
                    "byte_start": 1436,
                    "column_end": 44,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 28,
                        "text": "            kind: unsafe { (*emitter).error },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:43:50\n   |\n43 |             problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n43 |             problem: match NonNull::new(unsafe { (&(*emitter)).problem as *mut _ }) {\n   |                                                  ++          +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1505,
                        "byte_start": 1505,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1515,
                        "byte_start": 1515,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1523,
                    "byte_start": 1505,
                    "column_end": 68,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 50,
                        "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\parser.rs:87:16\n   |\n87 |             if (*parser).error != sys::YAML_NO_ERROR {\n   |                ^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n87 |             if (&(*parser)).error != sys::YAML_NO_ERROR {\n   |                ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2289,
                        "byte_start": 2289,
                        "column_end": 16,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\libyaml\\parser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 16,
                            "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                          }
                        ]
                      },
                      {
                        "byte_end": 2298,
                        "byte_start": 2298,
                        "column_end": 25,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\libyaml\\parser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 25,
                            "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 2304,
                    "byte_start": 2289,
                    "column_end": 31,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\libyaml\\parser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 16,
                        "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libserde_yaml-a7d3a9fe446d3412.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libhashbrown-a043e0c8c3e2aece.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unsafe-libyaml@0.2.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unsafe-libyaml-0.2.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unsafe_libyaml",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unsafe-libyaml-0.2.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libunsafe_libyaml-1a9112bd7ec50efe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libryu-b5eb7f50b0721bb1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libindexmap-453723c3d291c1d1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n  --> src\\number.rs:58:39\n   |\n58 |             N::PosInt(v) => v <= i64::max_value() as u64,\n   |                                       ^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n   |\n58 -             N::PosInt(v) => v <= i64::max_value() as u64,\n58 +             N::PosInt(v) => v <= i64::MAX as u64,\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1644,
                        "byte_start": 1633,
                        "column_end": 50,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\number.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 39,
                            "text": "            N::PosInt(v) => v <= i64::max_value() as u64,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 1644,
                    "byte_start": 1633,
                    "column_end": 50,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\number.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 39,
                        "text": "            N::PosInt(v) => v <= i64::max_value() as u64,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\number.rs:149:30\n    |\n149 |                 if n <= i64::max_value() as u64 {\n    |                              ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n149 -                 if n <= i64::max_value() as u64 {\n149 +                 if n <= i64::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4142,
                        "byte_start": 4131,
                        "column_end": 41,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\number.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 30,
                            "text": "                if n <= i64::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 4142,
                    "byte_start": 4131,
                    "column_end": 41,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\number.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 30,
                        "text": "                if n <= i64::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\number.rs:467:11\n    |\n467 | impl<'de, 'a> Deserializer<'de> for &'a Number {\n    |           ^^                         ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n467 - impl<'de, 'a> Deserializer<'de> for &'a Number {\n467 + impl<'de> Deserializer<'de> for &Number {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13087,
                        "byte_start": 13083,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\number.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 467,
                        "line_start": 467,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> Deserializer<'de> for &'a Number {"
                          }
                        ]
                      },
                      {
                        "byte_end": 13115,
                        "byte_start": 13112,
                        "column_end": 41,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\number.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 467,
                        "line_start": 467,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 38,
                            "text": "impl<'de, 'a> Deserializer<'de> for &'a Number {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 13087,
                    "byte_start": 13085,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\number.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 467,
                    "line_start": 467,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> Deserializer<'de> for &'a Number {"
                      }
                    ]
                  },
                  {
                    "byte_end": 13114,
                    "byte_start": 13112,
                    "column_end": 40,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\number.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 467,
                    "line_start": 467,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 38,
                        "text": "impl<'de, 'a> Deserializer<'de> for &'a Number {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:169:6\n    |\n169 | impl<'a, W> ser::Serializer for &'a mut Serializer<W>\n    |      ^^                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n169 - impl<'a, W> ser::Serializer for &'a mut Serializer<W>\n169 + impl<W> ser::Serializer for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4553,
                        "byte_start": 4549,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::Serializer for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 4580,
                        "byte_start": 4577,
                        "column_end": 37,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 34,
                            "text": "impl<'a, W> ser::Serializer for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 4551,
                    "byte_start": 4549,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 169,
                    "line_start": 169,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::Serializer for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 4579,
                    "byte_start": 4577,
                    "column_end": 36,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 169,
                    "line_start": 169,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 34,
                        "text": "impl<'a, W> ser::Serializer for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:526:6\n    |\n526 | impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>\n    |      ^^                            ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n526 - impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>\n526 + impl<W> ser::SerializeSeq for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14689,
                        "byte_start": 14685,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 526,
                        "line_start": 526,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 14718,
                        "byte_start": 14715,
                        "column_end": 39,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 526,
                        "line_start": 526,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 36,
                            "text": "impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 14687,
                    "byte_start": 14685,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 526,
                    "line_start": 526,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 14717,
                    "byte_start": 14715,
                    "column_end": 38,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 526,
                    "line_start": 526,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 36,
                        "text": "impl<'a, W> ser::SerializeSeq for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:545:6\n    |\n545 | impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>\n    |      ^^                              ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n545 - impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>\n545 + impl<W> ser::SerializeTuple for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15047,
                        "byte_start": 15043,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 545,
                        "line_start": 545,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 15078,
                        "byte_start": 15075,
                        "column_end": 41,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 545,
                        "line_start": 545,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 38,
                            "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15045,
                    "byte_start": 15043,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 545,
                    "line_start": 545,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 15077,
                    "byte_start": 15075,
                    "column_end": 40,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 545,
                    "line_start": 545,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 38,
                        "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:564:6\n    |\n564 | impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>\n    |      ^^                                    ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n564 - impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>\n564 + impl<W> ser::SerializeTupleStruct for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15407,
                        "byte_start": 15403,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 564,
                        "line_start": 564,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 15444,
                        "byte_start": 15441,
                        "column_end": 47,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 564,
                        "line_start": 564,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 44,
                            "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15405,
                    "byte_start": 15403,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 564,
                    "line_start": 564,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 15443,
                    "byte_start": 15441,
                    "column_end": 46,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 564,
                    "line_start": 564,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 44,
                        "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:583:6\n    |\n583 | impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>\n    |      ^^                                     ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n583 - impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>\n583 + impl<W> ser::SerializeTupleVariant for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15773,
                        "byte_start": 15769,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 583,
                        "line_start": 583,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 15811,
                        "byte_start": 15808,
                        "column_end": 48,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 583,
                        "line_start": 583,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 45,
                            "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15771,
                    "byte_start": 15769,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 583,
                    "line_start": 583,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 15810,
                    "byte_start": 15808,
                    "column_end": 47,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 583,
                    "line_start": 583,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 45,
                        "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:602:6\n    |\n602 | impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>\n    |      ^^                            ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n602 - impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>\n602 + impl<W> ser::SerializeMap for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16132,
                        "byte_start": 16128,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 602,
                        "line_start": 602,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 16161,
                        "byte_start": 16158,
                        "column_end": 39,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 602,
                        "line_start": 602,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 36,
                            "text": "impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 16130,
                    "byte_start": 16128,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 602,
                    "line_start": 602,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 16160,
                    "byte_start": 16158,
                    "column_end": 38,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 602,
                    "line_start": 602,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 36,
                        "text": "impl<'a, W> ser::SerializeMap for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:650:6\n    |\n650 | impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>\n    |      ^^                               ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n650 - impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>\n650 + impl<W> ser::SerializeStruct for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17327,
                        "byte_start": 17323,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 650,
                        "line_start": 650,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 17359,
                        "byte_start": 17356,
                        "column_end": 42,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 650,
                        "line_start": 650,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 39,
                            "text": "impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 17325,
                    "byte_start": 17323,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 650,
                    "line_start": 650,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 17358,
                    "byte_start": 17356,
                    "column_end": 41,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 650,
                    "line_start": 650,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 39,
                        "text": "impl<'a, W> ser::SerializeStruct for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:670:6\n    |\n670 | impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>\n    |      ^^                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n670 - impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>\n670 + impl<W> ser::SerializeStructVariant for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17740,
                        "byte_start": 17736,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 670,
                        "line_start": 670,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 17779,
                        "byte_start": 17776,
                        "column_end": 49,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 670,
                        "line_start": 670,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 46,
                            "text": "impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 17738,
                    "byte_start": 17736,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 670,
                    "line_start": 670,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 17778,
                    "byte_start": 17776,
                    "column_end": 48,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 670,
                    "line_start": 670,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 46,
                        "text": "impl<'a, W> ser::SerializeStructVariant for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\value\\from.rs:56:6\n   |\n56 | impl<'a> From<&'a str> for Value {\n   |      ^^        ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n56 - impl<'a> From<&'a str> for Value {\n56 + impl From<&str> for Value {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1039,
                        "byte_start": 1035,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\value\\from.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "impl<'a> From<&'a str> for Value {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1049,
                        "byte_start": 1046,
                        "column_end": 19,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\value\\from.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 16,
                            "text": "impl<'a> From<&'a str> for Value {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1038,
                    "byte_start": 1036,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\from.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> From<&'a str> for Value {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1048,
                    "byte_start": 1046,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\value\\from.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "impl<'a> From<&'a str> for Value {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n  --> src\\value\\index.rs:32:44\n   |\n32 |             Value::Mapping(vec) => vec.get(&Value::Number((*self).into())),\n   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `Value::Number((*self).into())`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n   = note: `#[warn(clippy::needless_borrows_for_generic_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrows_for_generic_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1289,
                        "byte_start": 1259,
                        "column_end": 74,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\value\\index.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "Value::Number((*self).into())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 44,
                            "text": "            Value::Mapping(vec) => vec.get(&Value::Number((*self).into())),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 1289,
                    "byte_start": 1259,
                    "column_end": 74,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\value\\index.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 74,
                        "highlight_start": 44,
                        "text": "            Value::Mapping(vec) => vec.get(&Value::Number((*self).into())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n  --> src\\value\\index.rs:39:48\n   |\n39 |             Value::Mapping(vec) => vec.get_mut(&Value::Number((*self).into())),\n   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `Value::Number((*self).into())`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1572,
                        "byte_start": 1542,
                        "column_end": 78,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\value\\index.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "Value::Number((*self).into())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 48,
                            "text": "            Value::Mapping(vec) => vec.get_mut(&Value::Number((*self).into())),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 1572,
                    "byte_start": 1542,
                    "column_end": 78,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\value\\index.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 48,
                        "text": "            Value::Mapping(vec) => vec.get_mut(&Value::Number((*self).into())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\index.rs:148:6\n    |\n148 | impl<'a, T> Index for &'a T\n    |      ^^                ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n148 - impl<'a, T> Index for &'a T\n148 + impl<T> Index for &T\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4893,
                        "byte_start": 4889,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\value\\index.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T> Index for &'a T"
                          }
                        ]
                      },
                      {
                        "byte_end": 4910,
                        "byte_start": 4907,
                        "column_end": 27,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\value\\index.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 148,
                        "line_start": 148,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 24,
                            "text": "impl<'a, T> Index for &'a T"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 4891,
                    "byte_start": 4889,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\index.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T> Index for &'a T"
                      }
                    ]
                  },
                  {
                    "byte_end": 4909,
                    "byte_start": 4907,
                    "column_end": 26,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\index.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 24,
                        "text": "impl<'a, T> Index for &'a T"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `map_or` can be simplified\n  --> src\\value\\partial_eq.rs:13:9\n   |\n13 |         self.as_str().map_or(false, |s| s == other)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\n   = note: `#[warn(clippy::unnecessary_map_or)]` on by default\nhelp: use a standard comparison instead\n   |\n13 -         self.as_str().map_or(false, |s| s == other)\n13 +         self.as_str() == Some(other)\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_map_or)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use a standard comparison instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 332,
                        "byte_start": 289,
                        "column_end": 52,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\value\\partial_eq.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 13,
                        "line_start": 13,
                        "suggested_replacement": "self.as_str() == Some(other)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 9,
                            "text": "        self.as_str().map_or(false, |s| s == other)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_map_or",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `map_or` can be simplified",
                "spans": [
                  {
                    "byte_end": 332,
                    "byte_start": 289,
                    "column_end": 52,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\partial_eq.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 9,
                        "text": "        self.as_str().map_or(false, |s| s == other)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\value\\partial_eq.rs:17:6\n   |\n17 | impl<'a> PartialEq<&'a str> for Value {\n   |      ^^             ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n17 - impl<'a> PartialEq<&'a str> for Value {\n17 + impl PartialEq<&str> for Value {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 350,
                        "byte_start": 346,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\value\\partial_eq.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "impl<'a> PartialEq<&'a str> for Value {"
                          }
                        ]
                      },
                      {
                        "byte_end": 365,
                        "byte_start": 362,
                        "column_end": 24,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\value\\partial_eq.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 21,
                            "text": "impl<'a> PartialEq<&'a str> for Value {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 349,
                    "byte_start": 347,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\partial_eq.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> PartialEq<&'a str> for Value {"
                      }
                    ]
                  },
                  {
                    "byte_end": 364,
                    "byte_start": 362,
                    "column_end": 23,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\value\\partial_eq.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 21,
                        "text": "impl<'a> PartialEq<&'a str> for Value {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `map_or` can be simplified\n  --> src\\value\\partial_eq.rs:27:9\n   |\n27 |         self.as_str().map_or(false, |s| s == *other)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\nhelp: use a standard comparison instead\n   |\n27 -         self.as_str().map_or(false, |s| s == *other)\n27 +         self.as_str() == Some(*other)\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use a standard comparison instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 665,
                        "byte_start": 621,
                        "column_end": 53,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\value\\partial_eq.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "self.as_str() == Some(*other)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 9,
                            "text": "        self.as_str().map_or(false, |s| s == *other)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_map_or",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `map_or` can be simplified",
                "spans": [
                  {
                    "byte_end": 665,
                    "byte_start": 621,
                    "column_end": 53,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\partial_eq.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 9,
                        "text": "        self.as_str().map_or(false, |s| s == *other)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `map_or` can be simplified\n  --> src\\value\\partial_eq.rs:55:9\n   |\n55 |         self.as_bool().map_or(false, |b| b == *other)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\nhelp: use a standard comparison instead\n   |\n55 -         self.as_bool().map_or(false, |b| b == *other)\n55 +         self.as_bool() == Some(*other)\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use a standard comparison instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1316,
                        "byte_start": 1271,
                        "column_end": 54,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\value\\partial_eq.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "self.as_bool() == Some(*other)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 9,
                            "text": "        self.as_bool().map_or(false, |b| b == *other)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_map_or",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `map_or` can be simplified",
                "spans": [
                  {
                    "byte_end": 1316,
                    "byte_start": 1271,
                    "column_end": 54,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\partial_eq.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 9,
                        "text": "        self.as_bool().map_or(false, |b| b == *other)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\lib.rs:190:10\n    |\n190 |     impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}\n    |          ^^                 ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n190 -     impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}\n190 +     impl<T> Sealed for &T where T: ?Sized + Sealed {}\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5946,
                        "byte_start": 5942,
                        "column_end": 14,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 10,
                            "text": "    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}"
                          }
                        ]
                      },
                      {
                        "byte_end": 5964,
                        "byte_start": 5961,
                        "column_end": 32,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 29,
                            "text": "    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 5944,
                    "byte_start": 5942,
                    "column_end": 12,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 10,
                        "text": "    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}"
                      }
                    ]
                  },
                  {
                    "byte_end": 5963,
                    "byte_start": 5961,
                    "column_end": 31,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 29,
                        "text": "    impl<'a, T> Sealed for &'a T where T: ?Sized + Sealed {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:21:28\n   |\n21 |             kind: unsafe { (*parser).error },\n   |                            ^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\n   = note: `#[warn(dangerous_implicit_autorefs)]` on by default\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n21 |             kind: unsafe { (&(*parser)).error },\n   |                            ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dangerous_implicit_autorefs)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 539,
                        "byte_start": 539,
                        "column_end": 28,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "            kind: unsafe { (*parser).error },"
                          }
                        ]
                      },
                      {
                        "byte_end": 548,
                        "byte_start": 548,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "            kind: unsafe { (*parser).error },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 554,
                    "byte_start": 539,
                    "column_end": 43,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 28,
                        "text": "            kind: unsafe { (*parser).error },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:22:50\n   |\n22 |             problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n22 |             problem: match NonNull::new(unsafe { (&(*parser)).problem as *mut _ }) {\n   |                                                  ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 607,
                        "byte_start": 607,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 22,
                        "line_start": 22,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 616,
                        "byte_start": 616,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 22,
                        "line_start": 22,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 624,
                    "byte_start": 607,
                    "column_end": 67,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 50,
                        "text": "            problem: match NonNull::new(unsafe { (*parser).problem as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:26:38\n   |\n26 |             problem_offset: unsafe { (*parser).problem_offset },\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n26 |             problem_offset: unsafe { (&(*parser)).problem_offset },\n   |                                      ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 862,
                        "byte_start": 862,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                          }
                        ]
                      },
                      {
                        "byte_end": 871,
                        "byte_start": 871,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 886,
                    "byte_start": 862,
                    "column_end": 62,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 26,
                    "line_start": 26,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 38,
                        "text": "            problem_offset: unsafe { (*parser).problem_offset },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:28:31\n   |\n28 |                 sys: unsafe { (*parser).problem_mark },\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n28 |                 sys: unsafe { (&(*parser)).problem_mark },\n   |                               ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 953,
                        "byte_start": 953,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                sys: unsafe { (*parser).problem_mark },"
                          }
                        ]
                      },
                      {
                        "byte_end": 962,
                        "byte_start": 962,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                sys: unsafe { (*parser).problem_mark },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 975,
                    "byte_start": 953,
                    "column_end": 53,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 31,
                        "text": "                sys: unsafe { (*parser).problem_mark },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:30:50\n   |\n30 |             context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n30 |             context: match NonNull::new(unsafe { (&(*parser)).context as *mut _ }) {\n   |                                                  ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1043,
                        "byte_start": 1043,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1052,
                        "byte_start": 1052,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1060,
                    "byte_start": 1043,
                    "column_end": 67,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 50,
                        "text": "            context: match NonNull::new(unsafe { (*parser).context as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:35:31\n   |\n35 |                 sys: unsafe { (*parser).context_mark },\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n35 |                 sys: unsafe { (&(*parser)).context_mark },\n   |                               ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1259,
                        "byte_start": 1259,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 35,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                sys: unsafe { (*parser).context_mark },"
                          }
                        ]
                      },
                      {
                        "byte_end": 1268,
                        "byte_start": 1268,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 35,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                sys: unsafe { (*parser).context_mark },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1281,
                    "byte_start": 1259,
                    "column_end": 53,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 31,
                        "text": "                sys: unsafe { (*parser).context_mark },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:42:28\n   |\n42 |             kind: unsafe { (*emitter).error },\n   |                            ^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n42 |             kind: unsafe { (&(*emitter)).error },\n   |                            ++          +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1436,
                        "byte_start": 1436,
                        "column_end": 28,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "            kind: unsafe { (*emitter).error },"
                          }
                        ]
                      },
                      {
                        "byte_end": 1446,
                        "byte_start": 1446,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 42,
                        "line_start": 42,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "            kind: unsafe { (*emitter).error },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1452,
                    "byte_start": 1436,
                    "column_end": 44,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 28,
                        "text": "            kind: unsafe { (*emitter).error },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\error.rs:43:50\n   |\n43 |             problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {\n   |                                                  ^^^^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n43 |             problem: match NonNull::new(unsafe { (&(*emitter)).problem as *mut _ }) {\n   |                                                  ++          +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1505,
                        "byte_start": 1505,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1515,
                        "byte_start": 1515,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\libyaml\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 43,
                        "line_start": 43,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 1523,
                    "byte_start": 1505,
                    "column_end": 68,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\libyaml\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 50,
                        "text": "            problem: match NonNull::new(unsafe { (*emitter).problem as *mut _ }) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implicit autoref creates a reference to the dereference of a raw pointer\n  --> src\\libyaml\\parser.rs:87:16\n   |\n87 |             if (*parser).error != sys::YAML_NO_ERROR {\n   |                ^^^^^^^^^^^^^^^\n   |\n   = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements\nhelp: try using a raw pointer method instead; or if this reference is intentional, make it explicit\n   |\n87 |             if (&(*parser)).error != sys::YAML_NO_ERROR {\n   |                ++         +\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "creating a reference requires the pointer target to be valid and imposes aliasing requirements",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using a raw pointer method instead; or if this reference is intentional, make it explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2289,
                        "byte_start": 2289,
                        "column_end": 16,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\libyaml\\parser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": "(&",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 16,
                            "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                          }
                        ]
                      },
                      {
                        "byte_end": 2298,
                        "byte_start": 2298,
                        "column_end": 25,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\libyaml\\parser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": ")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 25,
                            "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "dangerous_implicit_autorefs",
                  "explanation": null
                },
                "level": "warning",
                "message": "implicit autoref creates a reference to the dereference of a raw pointer",
                "spans": [
                  {
                    "byte_end": 2304,
                    "byte_start": 2289,
                    "column_end": 31,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\libyaml\\parser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 16,
                        "text": "            if (*parser).error != sys::YAML_NO_ERROR {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppm36wycm/serde_yaml-0.9.34+deprecated#serde_yaml@0.9.34+deprecated",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_yaml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppm36wycm\\serde_yaml-0.9.34+deprecated\\target\\debug\\deps\\libserde_yaml-db5718fea09ba7dc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 15
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "serde_yaml",
          "version": "0.9.34+deprecated",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\n[Settings](https://docs.rs/serde_yaml/latest/settings.html)\n[Help](https://docs.rs/serde_yaml/latest/help.html)\nSummary[Source](https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-yaml) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/serde-yaml) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde-yaml)\nRust library for using the [Serde](https://github.com/serde-rs/serde) serialization framework with data in [YAML](https://yaml.org/) file format. _(This project is no longer maintained.)_\n## [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#examples)Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive)Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#modules)\n\n[mapping](https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html \"mod serde_yaml::mapping\")\n    A YAML mapping and its iterator types.\n\n[value](https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html \"mod serde_yaml::value\")\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\n[with](https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html \"mod serde_yaml::with\")\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#structs)\n\n[Deserializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html \"struct serde_yaml::Deserializer\")\n    A structure that deserializes YAML into Rust values.\n\n[Error](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html \"struct serde_yaml::Error\")\n    An error that happened serializing or deserializing YAML data.\n\n[Location](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html \"struct serde_yaml::Location\")\n    The input location that an error occured.\n\n[Mapping](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html \"struct serde_yaml::Mapping\")\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\n[Number](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html \"struct serde_yaml::Number\")\n    Represents a YAML number, whether integer or floating point.\n\n[Serializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html \"struct serde_yaml::Serializer\")\n    A structure for serializing Rust values into YAML.\n## Enums[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#enums)\n\n[Value](https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html \"enum serde_yaml::Value\")\n    Represents any valid YAML value.\n## Traits[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#traits)\n\n[Index](https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html \"trait serde_yaml::Index\")\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#functions)\n\n[from_reader](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html \"fn serde_yaml::from_reader\")\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\n[from_slice](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html \"fn serde_yaml::from_slice\")\n    Deserialize an instance of type `T` from bytes of YAML text.\n\n[from_str](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html \"fn serde_yaml::from_str\")\n    Deserialize an instance of type `T` from a string of YAML text.\n\n[from_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html \"fn serde_yaml::from_value\")\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\n[to_string](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html \"fn serde_yaml::to_string\")\n    Serialize the given data structure as a String of YAML.\n\n[to_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html \"fn serde_yaml::to_value\")\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\n[to_writer](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html \"fn serde_yaml::to_writer\")\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#types)\n\n[Result](https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html \"type serde_yaml::Result\")\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\n[Sequence](https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html \"type serde_yaml::Sequence\")\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
            "markdown_with_citations": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-yaml) ![crates-io\u27e85\u27e9](https://crates.io/crates/serde-yaml) ![docs-rs\u27e86\u27e9](https://docs.rs/serde-yaml)\nRust library for using the Serde\u27e87\u27e9 serialization framework with data in YAML\u27e88\u27e9 file format. _(This project is no longer maintained.)_\n## \u00a7\u27e89\u27e9Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### \u00a7\u27e810\u27e9Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nmapping\u27e812\u27e9\n    A YAML mapping and its iterator types.\n\nvalue\u27e813\u27e9\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\nwith\u27e814\u27e9\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs\u00a7\u27e815\u27e9\n\nDeserializer\u27e816\u27e9\n    A structure that deserializes YAML into Rust values.\n\nError\u27e817\u27e9\n    An error that happened serializing or deserializing YAML data.\n\nLocation\u27e818\u27e9\n    The input location that an error occured.\n\nMapping\u27e819\u27e9\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\nNumber\u27e820\u27e9\n    Represents a YAML number, whether integer or floating point.\n\nSerializer\u27e821\u27e9\n    A structure for serializing Rust values into YAML.\n## Enums\u00a7\u27e822\u27e9\n\nValue\u27e823\u27e9\n    Represents any valid YAML value.\n## Traits\u00a7\u27e824\u27e9\n\nIndex\u27e825\u27e9\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions\u00a7\u27e826\u27e9\n\nfrom_reader\u27e827\u27e9\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\nfrom_slice\u27e828\u27e9\n    Deserialize an instance of type `T` from bytes of YAML text.\n\nfrom_str\u27e829\u27e9\n    Deserialize an instance of type `T` from a string of YAML text.\n\nfrom_value\u27e830\u27e9\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\nto_string\u27e831\u27e9\n    Serialize the given data structure as a String of YAML.\n\nto_value\u27e832\u27e9\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\nto_writer\u27e833\u27e9\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases\u00a7\u27e834\u27e9\n\nResult\u27e835\u27e9\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\nSequence\u27e836\u27e9\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_yaml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_yaml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e88\u27e9 https://yaml.org/: YAML\n\u27e89\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html: mod serde_yaml::mapping - mapping\n\u27e813\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html: mod serde_yaml::value - value\n\u27e814\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html: mod serde_yaml::with - with\n\u27e815\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html: struct serde_yaml::Deserializer - Deserializer\n\u27e817\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html: struct serde_yaml::Error - Error\n\u27e818\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html: struct serde_yaml::Location - Location\n\u27e819\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html: struct serde_yaml::Mapping - Mapping\n\u27e820\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html: struct serde_yaml::Number - Number\n\u27e821\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html: struct serde_yaml::Serializer - Serializer\n\u27e822\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#enums: \u00a7\n\u27e823\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html: enum serde_yaml::Value - Value\n\u27e824\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#traits: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html: trait serde_yaml::Index - Index\n\u27e826\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#functions: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html: fn serde_yaml::from_reader - from_reader\n\u27e828\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html: fn serde_yaml::from_slice - from_slice\n\u27e829\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html: fn serde_yaml::from_str - from_str\n\u27e830\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html: fn serde_yaml::from_value - from_value\n\u27e831\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html: fn serde_yaml::to_string - to_string\n\u27e832\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html: fn serde_yaml::to_value - to_value\n\u27e833\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html: fn serde_yaml::to_writer - to_writer\n\u27e834\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#types: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html: type serde_yaml::Result - Result\n\u27e836\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html: type serde_yaml::Sequence - Sequence\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "serde_yaml",
          "version": "0.9.34+deprecated",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\n[Settings](https://docs.rs/serde_yaml/latest/settings.html)\n[Help](https://docs.rs/serde_yaml/latest/help.html)\nSummary[Source](https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/serde-yaml) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/serde-yaml) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/serde-yaml)\nRust library for using the [Serde](https://github.com/serde-rs/serde) serialization framework with data in [YAML](https://yaml.org/) file format. _(This project is no longer maintained.)_\n## [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#examples)Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive)Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#modules)\n\n[mapping](https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html \"mod serde_yaml::mapping\")\n    A YAML mapping and its iterator types.\n\n[value](https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html \"mod serde_yaml::value\")\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\n[with](https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html \"mod serde_yaml::with\")\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#structs)\n\n[Deserializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html \"struct serde_yaml::Deserializer\")\n    A structure that deserializes YAML into Rust values.\n\n[Error](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html \"struct serde_yaml::Error\")\n    An error that happened serializing or deserializing YAML data.\n\n[Location](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html \"struct serde_yaml::Location\")\n    The input location that an error occured.\n\n[Mapping](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html \"struct serde_yaml::Mapping\")\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\n[Number](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html \"struct serde_yaml::Number\")\n    Represents a YAML number, whether integer or floating point.\n\n[Serializer](https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html \"struct serde_yaml::Serializer\")\n    A structure for serializing Rust values into YAML.\n## Enums[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#enums)\n\n[Value](https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html \"enum serde_yaml::Value\")\n    Represents any valid YAML value.\n## Traits[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#traits)\n\n[Index](https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html \"trait serde_yaml::Index\")\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#functions)\n\n[from_reader](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html \"fn serde_yaml::from_reader\")\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\n[from_slice](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html \"fn serde_yaml::from_slice\")\n    Deserialize an instance of type `T` from bytes of YAML text.\n\n[from_str](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html \"fn serde_yaml::from_str\")\n    Deserialize an instance of type `T` from a string of YAML text.\n\n[from_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html \"fn serde_yaml::from_value\")\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\n[to_string](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html \"fn serde_yaml::to_string\")\n    Serialize the given data structure as a String of YAML.\n\n[to_value](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html \"fn serde_yaml::to_value\")\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\n[to_writer](https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html \"fn serde_yaml::to_writer\")\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases[\u00a7](https://docs.rs/serde_yaml/latest/serde_yaml/#types)\n\n[Result](https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html \"type serde_yaml::Result\")\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\n[Sequence](https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html \"type serde_yaml::Sequence\")\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
            "markdown_with_citations": "[](https://docs.rs/serde_yaml/latest/serde_yaml/all.html \"show sidebar\")\n# Crate serde_yamlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/serde-yaml) ![crates-io\u27e85\u27e9](https://crates.io/crates/serde-yaml) ![docs-rs\u27e86\u27e9](https://docs.rs/serde-yaml)\nRust library for using the Serde\u27e87\u27e9 serialization framework with data in YAML\u27e88\u27e9 file format. _(This project is no longer maintained.)_\n## \u00a7\u27e89\u27e9Examples\n```\nuse std::collections::BTreeMap;\nfn main() -> Result<(), serde_yaml::Error> {\n  // You have some type.\n  let mut map = BTreeMap::new();\n  map.insert(\"x\".to_string(), 1.0);\n  map.insert(\"y\".to_string(), 2.0);\n  // Serialize it to a YAML string.\n  let yaml = serde_yaml::to_string(&map)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  // Deserialize it back to a Rust type.\n  let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&yaml)?;\n  assert_eq!(map, deserialized_map);\n  Ok(())\n}\n```\n\n### \u00a7\u27e810\u27e9Using Serde derive\nIt can also be used with Serde\u2019s derive macros to handle structs and enums defined in your program.\nStructs serialize in the obvious way:\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nstruct Point {\n  x: f64,\n  y: f64,\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let point = Point { x: 1.0, y: 2.0 };\n  let yaml = serde_yaml::to_string(&point)?;\n  assert_eq!(yaml, \"x: 1.0\\ny: 2.0\\n\");\n  let deserialized_point: Point = serde_yaml::from_str(&yaml)?;\n  assert_eq!(point, deserialized_point);\n  Ok(())\n}\n```\n\nEnums serialize using YAML\u2019s `!tag` syntax to identify the variant name.\n```\nuse serde::{Serialize, Deserialize};\n#[derive(Serialize, Deserialize, PartialEq, Debug)]\nenum Enum {\n  Unit,\n  Newtype(usize),\n  Tuple(usize, usize, usize),\n  Struct { x: f64, y: f64 },\n}\nfn main() -> Result<(), serde_yaml::Error> {\n  let yaml = \"\n    - !Newtype 1\n    - !Tuple [0, 0, 0]\n    - !Struct {x: 1.0, y: 2.0}\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Newtype(1));\n  assert_eq!(values[1], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[2], Enum::Struct { x: 1.0, y: 2.0 });\n  // The last two in YAML's block style instead:\n  let yaml = \"\n    - !Tuple\n     - 0\n     - 0\n     - 0\n    - !Struct\n     x: 1.0\n     y: 2.0\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Tuple(0, 0, 0));\n  assert_eq!(values[1], Enum::Struct { x: 1.0, y: 2.0 });\n  // Variants with no data can be written using !Tag or just the string name.\n  let yaml = \"\n    - Unit # serialization produces this one\n    - !Unit\n  \";\n  let values: Vec<Enum> = serde_yaml::from_str(yaml).unwrap();\n  assert_eq!(values[0], Enum::Unit);\n  assert_eq!(values[1], Enum::Unit);\n  Ok(())\n}\n```\n\n## Modules\u00a7\u27e811\u27e9\n\nmapping\u27e812\u27e9\n    A YAML mapping and its iterator types.\n\nvalue\u27e813\u27e9\n    The Value enum, a loosely typed way of representing any valid YAML value.\n\nwith\u27e814\u27e9\n    Customizations to use with Serde\u2019s `#[serde(with = \u2026)]` attribute.\n## Structs\u00a7\u27e815\u27e9\n\nDeserializer\u27e816\u27e9\n    A structure that deserializes YAML into Rust values.\n\nError\u27e817\u27e9\n    An error that happened serializing or deserializing YAML data.\n\nLocation\u27e818\u27e9\n    The input location that an error occured.\n\nMapping\u27e819\u27e9\n    A YAML mapping in which the keys and values are both `serde_yaml::Value`.\n\nNumber\u27e820\u27e9\n    Represents a YAML number, whether integer or floating point.\n\nSerializer\u27e821\u27e9\n    A structure for serializing Rust values into YAML.\n## Enums\u00a7\u27e822\u27e9\n\nValue\u27e823\u27e9\n    Represents any valid YAML value.\n## Traits\u00a7\u27e824\u27e9\n\nIndex\u27e825\u27e9\n    A type that can be used to index into a `serde_yaml::Value`. See the `get` and `get_mut` methods of `Value`.\n## Functions\u00a7\u27e826\u27e9\n\nfrom_reader\u27e827\u27e9\n    Deserialize an instance of type `T` from an IO stream of YAML.\n\nfrom_slice\u27e828\u27e9\n    Deserialize an instance of type `T` from bytes of YAML text.\n\nfrom_str\u27e829\u27e9\n    Deserialize an instance of type `T` from a string of YAML text.\n\nfrom_value\u27e830\u27e9\n    Interpret a `serde_yaml::Value` as an instance of type `T`.\n\nto_string\u27e831\u27e9\n    Serialize the given data structure as a String of YAML.\n\nto_value\u27e832\u27e9\n    Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.\n\nto_writer\u27e833\u27e9\n    Serialize the given data structure as YAML into the IO stream.\n## Type Aliases\u00a7\u27e834\u27e9\n\nResult\u27e835\u27e9\n    Alias for a `Result` with the error type `serde_yaml::Error`.\n\nSequence\u27e836\u27e9\n    A YAML sequence in which the elements are `serde_yaml::Value`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_yaml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_yaml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_yaml/latest/src/serde_yaml/lib.rs.html#1-191: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e88\u27e9 https://yaml.org/: YAML\n\u27e89\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#using-serde-derive: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/mapping/index.html: mod serde_yaml::mapping - mapping\n\u27e813\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/value/index.html: mod serde_yaml::value - value\n\u27e814\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/with/index.html: mod serde_yaml::with - with\n\u27e815\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#structs: \u00a7\n\u27e816\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Deserializer.html: struct serde_yaml::Deserializer - Deserializer\n\u27e817\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Error.html: struct serde_yaml::Error - Error\n\u27e818\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Location.html: struct serde_yaml::Location - Location\n\u27e819\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Mapping.html: struct serde_yaml::Mapping - Mapping\n\u27e820\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Number.html: struct serde_yaml::Number - Number\n\u27e821\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/struct.Serializer.html: struct serde_yaml::Serializer - Serializer\n\u27e822\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#enums: \u00a7\n\u27e823\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/enum.Value.html: enum serde_yaml::Value - Value\n\u27e824\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#traits: \u00a7\n\u27e825\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/trait.Index.html: trait serde_yaml::Index - Index\n\u27e826\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#functions: \u00a7\n\u27e827\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_reader.html: fn serde_yaml::from_reader - from_reader\n\u27e828\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_slice.html: fn serde_yaml::from_slice - from_slice\n\u27e829\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_str.html: fn serde_yaml::from_str - from_str\n\u27e830\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.from_value.html: fn serde_yaml::from_value - from_value\n\u27e831\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_string.html: fn serde_yaml::to_string - to_string\n\u27e832\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_value.html: fn serde_yaml::to_value - to_value\n\u27e833\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/fn.to_writer.html: fn serde_yaml::to_writer - to_writer\n\u27e834\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/#types: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Result.html: type serde_yaml::Result - Result\n\u27e836\u27e9 https://docs.rs/serde_yaml/latest/serde_yaml/type.Sequence.html: type serde_yaml::Sequence - Sequence\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `serde_yaml` crate integrates the Serde serialization framework with YAML, enabling seamless serialization and deserialization of Rust data structures to and from YAML format. It supports custom mappings, enums with YAML `!tag` syntax, and loosely typed representations via the `Value` enum. While offering utilities like `to_string`, `from_str`, and `to_writer`, the crate is deprecated and no longer maintained.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 Factual: `serde_yaml` provides seamless serialization and deserialization of Rust types, including complex structures like enums and maps, using YAML syntax.  \n\u274c Counterfactual: `serde_yaml` only supports serialization of primitive types and does not handle complex structures like enums or maps.  \n\n---\n\n### Pair 2: Error Handling\n\u2705 Factual: `serde_yaml` includes an `Error` struct that provides detailed information about serialization and deserialization issues, including input location via the `Location` struct.  \n\u274c Counterfactual: `serde_yaml` does not provide detailed error handling and fails silently when encountering serialization or deserialization issues.  \n\n---\n\n### Pair 3: Maintenance Status\n\u2705 Factual: The `serde_yaml` crate is deprecated and no longer actively maintained, as stated in its documentation.  \n\u274c Counterfactual: The `serde_yaml` crate is actively maintained and frequently updated with new features.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-8e737683-05a6d4b7-1751258944",
      "timestamp": "2025-06-30T04:49:04.878639+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]