[
  {
    "execution_id": "exec-2cac9007-2cc59a4c-1751261007",
    "timestamp": "2025-06-30T05:23:27.744977+00:00",
    "sacred_chain": {
      "input_data": "wyhash",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'wyhash' -> 'wyhash'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "wyhash",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/wyhash",
            "title": "wyhash v0.6.0",
            "content": {
              "raw_markdown": "#  wyhash v0.6.0\nRust implementation of the WyHash fast portable non-cryptographic hashing algorithm and random number generator. \n  * [ #hash ](https://crates.io/keywords/hash)\n  * [ #hasher ](https://crates.io/keywords/hasher)\n  * [ #random ](https://crates.io/keywords/random)\n  * [ #rng ](https://crates.io/keywords/rng)\n  * [ #wyhash ](https://crates.io/keywords/wyhash)\n\n\n  * [ Readme ](https://crates.io/crates/wyhash)\n  * [ 9 Versions ](https://crates.io/crates/wyhash/versions)\n  * [ Dependencies ](https://crates.io/crates/wyhash/dependencies)\n  * [ Dependents ](https://crates.io/crates/wyhash/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n14 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add wyhash\nOr add the following line to your Cargo.toml:\nwyhash = \"0.6.0\"\n## Documentation\n[ docs.rs/wyhash ](https://docs.rs/wyhash)\n## Repository\n[ github.com/eldruin/wyhash-rs ](https://github.com/eldruin/wyhash-rs)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Algorithms](https://crates.io/categories/algorithms)\n\n\n[ Report crate ](https://crates.io/support?crate=wyhash&inquire=crate-violation)\n### Stats Overview\n2,127,942 Downloads all time\n9 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  wyhash v0.6.0\nRust implementation of the WyHash fast portable non-cryptographic hashing algorithm and random number generator. \n  *  #hash \u27e81\u27e9\n  *  #hasher \u27e82\u27e9\n  *  #random \u27e83\u27e9\n  *  #rng \u27e84\u27e9\n  *  #wyhash \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  9 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 month ago \n2018 edition \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n14 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add wyhash\nOr add the following line to your Cargo.toml:\nwyhash = \"0.6.0\"\n## Documentation\n docs.rs/wyhash \u27e812\u27e9\n## Repository\n github.com/eldruin/wyhash-rs \u27e813\u27e9\n## Owners\n## Categories\n  * No standard library\u27e814\u27e9\n  * Algorithms\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n2,127,942 Downloads all time\n9 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e82\u27e9 https://crates.io/keywords/hasher:  #hasher \n\u27e83\u27e9 https://crates.io/keywords/random:  #random \n\u27e84\u27e9 https://crates.io/keywords/rng:  #rng \n\u27e85\u27e9 https://crates.io/keywords/wyhash:  #wyhash \n\u27e86\u27e9 https://crates.io/crates/wyhash:  Readme \n\u27e87\u27e9 https://crates.io/crates/wyhash/versions:  9 Versions \n\u27e88\u27e9 https://crates.io/crates/wyhash/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/wyhash/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/wyhash:  docs.rs/wyhash \n\u27e813\u27e9 https://github.com/eldruin/wyhash-rs:  github.com/eldruin/wyhash-rs \n\u27e814\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e815\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e816\u27e9 https://crates.io/support?crate=wyhash&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1486,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114797.2280347"
          },
          "docs_rs": {
            "url": "https://docs.rs/wyhash",
            "title": "Crate wyhashCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\n[Settings](https://docs.rs/wyhash/latest/settings.html)\n[Help](https://docs.rs/wyhash/latest/help.html)\nSummary[Source](https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114)\nExpand description\nRust implementation of the [wyhash algorithm by Wang Yi](https://github.com/wangyi-fudan/wyhash).\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See [here](https://github.com/wangyi-fudan/wyhash).\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated [here](https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt) although the speed varies ([PRs are welcome](https://github.com/eldruin/wyhash-rs/issues)).\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#crate-features)Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder)Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage)`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage)`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage)`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage)`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage)`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports[\u00a7](https://docs.rs/wyhash/latest/wyhash/#reexports)\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules[\u00a7](https://docs.rs/wyhash/latest/wyhash/#modules)\n\n[final3](https://docs.rs/wyhash/latest/wyhash/final3/index.html \"mod wyhash::final3\")\n    WyHash version final 3\n\n[v1](https://docs.rs/wyhash/latest/wyhash/v1/index.html \"mod wyhash::v1\")\n    WyHash version 1\n",
              "markdown_with_citations": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust implementation of the wyhash algorithm by Wang Yi\u27e84\u27e9.\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See here\u27e84\u27e9.\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated here\u27e85\u27e9 although the speed varies (PRs are welcome\u27e86\u27e9).\n### \u00a7\u27e87\u27e9Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### \u00a7\u27e88\u27e9Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### \u00a7\u27e89\u27e9`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e810\u27e9`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e811\u27e9`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### \u00a7\u27e812\u27e9`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### \u00a7\u27e813\u27e9`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports\u00a7\u27e814\u27e9\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules\u00a7\u27e815\u27e9\n\nfinal3\u27e816\u27e9\n    WyHash version final 3\n\nv1\u27e817\u27e9\n    WyHash version 1\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/wyhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/wyhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: wyhash algorithm by Wang Yi\n\u27e85\u27e9 https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt: here\n\u27e86\u27e9 https://github.com/eldruin/wyhash-rs/issues: PRs are welcome\n\u27e87\u27e9 https://docs.rs/wyhash/latest/wyhash/#crate-features: \u00a7\n\u27e88\u27e9 https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder: \u00a7\n\u27e89\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage: \u00a7\n\u27e810\u27e9 https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage: \u00a7\n\u27e811\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage: \u00a7\n\u27e812\u27e9 https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage: \u00a7\n\u27e813\u27e9 https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage: \u00a7\n\u27e814\u27e9 https://docs.rs/wyhash/latest/wyhash/#reexports: \u00a7\n\u27e815\u27e9 https://docs.rs/wyhash/latest/wyhash/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/wyhash/latest/wyhash/final3/index.html: mod wyhash::final3 - final3\n\u27e817\u27e9 https://docs.rs/wyhash/latest/wyhash/v1/index.html: mod wyhash::v1 - v1\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4271,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114798.2758549"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/wyhash",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [9 releases](https://lib.rs/crates/wyhash/versions) (5 breaking)\n0.6.0 |  May 23, 2025   \n---|---  \n0.5.0 |  Dec 17, 2020   \n0.4.2 |  Nov 7, 2020   \n0.4.1 |  Jun 28, 2020   \n0.1.0 |  Mar 12, 2019   \n#**82** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 33559/week @ 2025-03-05 32727/week @ 2025-03-12 33687/week @ 2025-03-19 40978/week @ 2025-03-26 40355/week @ 2025-04-02 45263/week @ 2025-04-09 43329/week @ 2025-04-16 44223/week @ 2025-04-23 43305/week @ 2025-04-30 47016/week @ 2025-05-07 43596/week @ 2025-05-14 42823/week @ 2025-05-21 53939/week @ 2025-05-28 51455/week @ 2025-06-04 46003/week @ 2025-06-11 57288/week @ 2025-06-18\n**216,492** downloads per month Used in [**55** crates (31 directly)](https://lib.rs/crates/wyhash/rev)\n**MIT/Apache**\n24KB  437 lines\n# wyhash fast portable non-cryptographic hashing algorithm\n[![crates.io](https://img.shields.io/crates/v/wyhash.svg)](https://crates.io/crates/wyhash) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/wyhash/badge.svg)](https://docs.rs/wyhash) ![MSRV](https://img.shields.io/badge/rustc-1.63+-blue.svg) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/eldruin/wyhash-rs/workflows/Build/badge.svg)](https://github.com/eldruin/wyhash-rs/actions?query=workflow%3ABuild) [![Coverage Status](https://img.gs/czjpqfbdkz/full/https://coveralls.io/repos/github/eldruin/wyhash-rs/badge.svg?branch=master)](https://coveralls.io/github/eldruin/wyhash-rs?branch=master)\nRust implementation of the [wyhash algorithm by Wang Yi](https://github.com/wangyi-fudan/wyhash).\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See [here](https://github.com/wangyi-fudan/wyhash).\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in ``no_std`` environments) and has no dependencies (except the traits from ``rand_core``).\nThe generated hashes are equal (see tests) as of the version stated [here](https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt) although the speed varies ([PRs are welcome](https://github.com/eldruin/wyhash-rs/issues)).\n## Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature ``mum32bit``. This offers better performance on 32-bit architectures. Beware that this feature produces different results.\n## Usage\nThis crate provides free functions as well as implementations of the ``Hasher``, ``BuildHasher``, ``Rng`` and ``SeedableRng`` traits.\n```\n``use` `core`::```hash`::``Hasher`;`\n`use` `wyhash`::``WyHash`;`\n``fn` `main`````(````)``````{`\n `let` `mut` hasher `=` `WyHash`::``with_seed`(``3``)``;`\n hasher`.``write``(``&``[``0``,` `1``,` `2``]``)``;`\n `assert_eq!``(``0xcc24_2106_e707_6a48``,` hasher`.``finish``(``)``)``;`\n```}```\n`\n```\n\nSee further examples of the hasher and RNG in the documentation.\n## Performance comparison\nA basic performance comparison benchmark against [``fnv``](https://lib.rs/crates/fnv), [``twox-hash``](https://lib.rs/crates/twox-hash), [``metrohash``](https://lib.rs/crates/metrohash) and the standard hash_map hash [```collections`::```hash_map`::``DefaultHasher``](https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html) is included in the sources and you can run it with nightly Rust:\n```\n```cargo``` +nightly bench`\n`\n```\n\n## Support\nFor questions, issues, feature requests, and other changes, please file an [issue in the github project](https://github.com/eldruin/wyhash-rs/issues).\n## Minimum Supported Rust Version (MSRV)\nThis crate is guaranteed to compile on stable Rust 1.63.0 and up. It _might_ compile with older versions but that may change in any new patch release.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/eldruin/wyhash-rs/blob/acb4e4f5bbd2ba2216ac8ca1a6309513d251db5f/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/eldruin/wyhash-rs/blob/acb4e4f5bbd2ba2216ac8ca1a6309513d251db5f/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contributing\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~61KB \n  * [rand_core](https://lib.rs/crates/rand_core \"new\") 0.9\n\n\n  * dev  [fnv](https://lib.rs/crates/fnv \"1\")\n  * dev  [metrohash](https://lib.rs/crates/metrohash \"1\")\n  * dev  [twox-hash](https://lib.rs/crates/twox-hash \"new\") 2.1\n\n\n#### [Other feature](https://lib.rs/crates/wyhash/features)\n  * [mum32bit](https://lib.rs/crates/wyhash/features#feature-mum32bit)\n\n\n",
              "markdown_with_citations": "###  9 releases\u27e81\u27e9 (5 breaking)\n0.6.0 |  May 23, 2025   \n---|---  \n0.5.0 |  Dec 17, 2020   \n0.4.2 |  Nov 7, 2020   \n0.4.1 |  Jun 28, 2020   \n0.1.0 |  Mar 12, 2019   \n#**82** in Algorithms\u27e82\u27e9\nDownload history 33559/week @ 2025-03-05 32727/week @ 2025-03-12 33687/week @ 2025-03-19 40978/week @ 2025-03-26 40355/week @ 2025-04-02 45263/week @ 2025-04-09 43329/week @ 2025-04-16 44223/week @ 2025-04-23 43305/week @ 2025-04-30 47016/week @ 2025-05-07 43596/week @ 2025-05-14 42823/week @ 2025-05-21 53939/week @ 2025-05-28 51455/week @ 2025-06-04 46003/week @ 2025-06-11 57288/week @ 2025-06-18\n**216,492** downloads per month Used in **55** crates (31 directly)\u27e83\u27e9\n**MIT/Apache**\n24KB  437 lines\n# wyhash fast portable non-cryptographic hashing algorithm\n![crates.io\u27e84\u27e9](https://crates.io/crates/wyhash) ![Docs\u27e85\u27e9](https://docs.rs/wyhash) ![MSRV\u27e86\u27e9] ![Build Status\u27e87\u27e9](https://github.com/eldruin/wyhash-rs/actions?query=workflow%3ABuild) ![Coverage Status\u27e88\u27e9](https://coveralls.io/github/eldruin/wyhash-rs?branch=master)\nRust implementation of the wyhash algorithm by Wang Yi\u27e89\u27e9.\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See here\u27e89\u27e9.\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in ``no_std`` environments) and has no dependencies (except the traits from ``rand_core``).\nThe generated hashes are equal (see tests) as of the version stated here\u27e810\u27e9 although the speed varies (PRs are welcome\u27e811\u27e9).\n## Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature ``mum32bit``. This offers better performance on 32-bit architectures. Beware that this feature produces different results.\n## Usage\nThis crate provides free functions as well as implementations of the ``Hasher``, ``BuildHasher``, ``Rng`` and ``SeedableRng`` traits.\n```\n``use` `core`::```hash`::``Hasher`;`\n`use` `wyhash`::``WyHash`;`\n``fn` `main`````(````)``````{`\n `let` `mut` hasher `=` `WyHash`::``with_seed`(``3``)``;`\n hasher`.``write``(``&``[``0``,` `1``,` `2``]``)``;`\n `assert_eq!``(``0xcc24_2106_e707_6a48``,` hasher`.``finish``(``)``)``;`\n```}```\n`\n```\n\nSee further examples of the hasher and RNG in the documentation.\n## Performance comparison\nA basic performance comparison benchmark against ``fnv``\u27e812\u27e9, ``twox-hash``\u27e813\u27e9, ``metrohash``\u27e814\u27e9 and the standard hash_map hash ```collections`::```hash_map`::``DefaultHasher``\u27e815\u27e9 is included in the sources and you can run it with nightly Rust:\n```\n```cargo``` +nightly bench`\n`\n```\n\n## Support\nFor questions, issues, feature requests, and other changes, please file an issue in the github project\u27e811\u27e9.\n## Minimum Supported Rust Version (MSRV)\nThis crate is guaranteed to compile on stable Rust 1.63.0 and up. It _might_ compile with older versions but that may change in any new patch release.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e816\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e817\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contributing\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~61KB \n  * rand_core\u27e818\u27e9 0.9\n\n\n  * dev  fnv\u27e812\u27e9\n  * dev  metrohash\u27e814\u27e9\n  * dev  twox-hash\u27e813\u27e9 2.1\n\n\n#### Other feature\u27e819\u27e9\n  * mum32bit\u27e820\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/wyhash/versions: 9 releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/wyhash/rev: **55** crates (31 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/wyhash.svg: ![crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/wyhash/badge.svg: ![Docs\n\u27e86\u27e9 https://img.shields.io/badge/rustc-1.63+-blue.svg: MSRV\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/eldruin/wyhash-rs/workflows/Build/badge.svg: ![Build Status\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://coveralls.io/repos/github/eldruin/wyhash-rs/badge.svg?branch=master: ![Coverage Status\n\u27e89\u27e9 https://github.com/wangyi-fudan/wyhash: wyhash algorithm by Wang Yi\n\u27e810\u27e9 https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt: here\n\u27e811\u27e9 https://github.com/eldruin/wyhash-rs/issues: PRs are welcome\n\u27e812\u27e9 https://lib.rs/crates/fnv: ``fnv``\n\u27e813\u27e9 https://lib.rs/crates/twox-hash: ``twox-hash``\n\u27e814\u27e9 https://lib.rs/crates/metrohash: ``metrohash``\n\u27e815\u27e9 https://doc.rust-lang.org/std/collections/hash_map/struct.DefaultHasher.html: ```collections`::```hash_map`::``DefaultHasher``\n\u27e816\u27e9 https://github.com/eldruin/wyhash-rs/blob/acb4e4f5bbd2ba2216ac8ca1a6309513d251db5f/LICENSE-APACHE: LICENSE-APACHE\n\u27e817\u27e9 https://github.com/eldruin/wyhash-rs/blob/acb4e4f5bbd2ba2216ac8ca1a6309513d251db5f/LICENSE-MIT: LICENSE-MIT\n\u27e818\u27e9 https://lib.rs/crates/rand_core: new - rand_core\n\u27e819\u27e9 https://lib.rs/crates/wyhash/features: Other feature\n\u27e820\u27e9 https://lib.rs/crates/wyhash/features#feature-mum32bit: mum32bit\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4997,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114798.8242743"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\target\\debug\\deps\\librand_core-5a4f3dd9dec8705a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprlkdrigw/wyhash-0.6.0#wyhash@0.6.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wyhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\target\\debug\\deps\\libwyhash-839dc21ff6662586.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\target\\debug\\deps\\librand_core-5a4f3dd9dec8705a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprlkdrigw/wyhash-0.6.0#wyhash@0.6.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wyhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprlkdrigw\\wyhash-0.6.0\\target\\debug\\deps\\libwyhash-e5b7ce5acf49dab3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 19
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "wyhash",
          "version": "0.6.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\n[Settings](https://docs.rs/wyhash/latest/settings.html)\n[Help](https://docs.rs/wyhash/latest/help.html)\nSummary[Source](https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114)\nExpand description\nRust implementation of the [wyhash algorithm by Wang Yi](https://github.com/wangyi-fudan/wyhash).\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See [here](https://github.com/wangyi-fudan/wyhash).\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated [here](https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt) although the speed varies ([PRs are welcome](https://github.com/eldruin/wyhash-rs/issues)).\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#crate-features)Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder)Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage)`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage)`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage)`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage)`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage)`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports[\u00a7](https://docs.rs/wyhash/latest/wyhash/#reexports)\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules[\u00a7](https://docs.rs/wyhash/latest/wyhash/#modules)\n\n[final3](https://docs.rs/wyhash/latest/wyhash/final3/index.html \"mod wyhash::final3\")\n    WyHash version final 3\n\n[v1](https://docs.rs/wyhash/latest/wyhash/v1/index.html \"mod wyhash::v1\")\n    WyHash version 1\n",
            "markdown_with_citations": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust implementation of the wyhash algorithm by Wang Yi\u27e84\u27e9.\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See here\u27e84\u27e9.\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated here\u27e85\u27e9 although the speed varies (PRs are welcome\u27e86\u27e9).\n### \u00a7\u27e87\u27e9Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### \u00a7\u27e88\u27e9Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### \u00a7\u27e89\u27e9`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e810\u27e9`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e811\u27e9`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### \u00a7\u27e812\u27e9`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### \u00a7\u27e813\u27e9`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports\u00a7\u27e814\u27e9\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules\u00a7\u27e815\u27e9\n\nfinal3\u27e816\u27e9\n    WyHash version final 3\n\nv1\u27e817\u27e9\n    WyHash version 1\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/wyhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/wyhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: wyhash algorithm by Wang Yi\n\u27e85\u27e9 https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt: here\n\u27e86\u27e9 https://github.com/eldruin/wyhash-rs/issues: PRs are welcome\n\u27e87\u27e9 https://docs.rs/wyhash/latest/wyhash/#crate-features: \u00a7\n\u27e88\u27e9 https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder: \u00a7\n\u27e89\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage: \u00a7\n\u27e810\u27e9 https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage: \u00a7\n\u27e811\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage: \u00a7\n\u27e812\u27e9 https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage: \u00a7\n\u27e813\u27e9 https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage: \u00a7\n\u27e814\u27e9 https://docs.rs/wyhash/latest/wyhash/#reexports: \u00a7\n\u27e815\u27e9 https://docs.rs/wyhash/latest/wyhash/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/wyhash/latest/wyhash/final3/index.html: mod wyhash::final3 - final3\n\u27e817\u27e9 https://docs.rs/wyhash/latest/wyhash/v1/index.html: mod wyhash::v1 - v1\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "wyhash",
          "version": "0.6.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\n[Settings](https://docs.rs/wyhash/latest/settings.html)\n[Help](https://docs.rs/wyhash/latest/help.html)\nSummary[Source](https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114)\nExpand description\nRust implementation of the [wyhash algorithm by Wang Yi](https://github.com/wangyi-fudan/wyhash).\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See [here](https://github.com/wangyi-fudan/wyhash).\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated [here](https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt) although the speed varies ([PRs are welcome](https://github.com/eldruin/wyhash-rs/issues)).\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#crate-features)Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder)Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage)`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage)`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage)`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage)`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### [\u00a7](https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage)`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports[\u00a7](https://docs.rs/wyhash/latest/wyhash/#reexports)\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules[\u00a7](https://docs.rs/wyhash/latest/wyhash/#modules)\n\n[final3](https://docs.rs/wyhash/latest/wyhash/final3/index.html \"mod wyhash::final3\")\n    WyHash version final 3\n\n[v1](https://docs.rs/wyhash/latest/wyhash/v1/index.html \"mod wyhash::v1\")\n    WyHash version 1\n",
            "markdown_with_citations": "[](https://docs.rs/wyhash/latest/wyhash/all.html \"show sidebar\")\n# Crate wyhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust implementation of the wyhash algorithm by Wang Yi\u27e84\u27e9.\nThe hashing algorithm passes SMHasher and the random number generator passes BigCrush and practrand. As of now it is the fastest algorithm in the SMHasher benchmark (faster than t1ha and XXH3). See here\u27e84\u27e9.\nFurthermore, this algorithm is solid, simple, portable (does not need hardware support, can be used in `no_std` environments) and has no dependencies.\nThe generated hashes are equal (see tests) as of the version stated here\u27e85\u27e9 although the speed varies (PRs are welcome\u27e86\u27e9).\n### \u00a7\u27e87\u27e9Crate features\nBy default this crate uses 128-bit integer multiplications. To restrict that to 64 bits you can enable the feature `mum32bit`. This offers better performance on 32-bit architectures. Beware that this feature produces different the results.\n### \u00a7\u27e88\u27e9Usage (see also examples folder)\nFor the hashing function you can use either the free function or the `Hasher` trait.\n#### \u00a7\u27e89\u27e9`wyhash` function usage\n```\nuse wyhash::wyhash;\nlet data = [0, 1, 2];\nlet seed = 3;\nlet hash = wyhash(&data, seed);\nprintln!(\"{:x}\", hash); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e810\u27e9`Hasher` trait usage\nYou can also use `std::hash::Hasher`, it is the same.\n```\nuse core::hash::Hasher;\nuse wyhash::WyHash;\nlet mut hasher = WyHash::with_seed(3);\nhasher.write(&[0, 1, 2]);\nprintln!(\"{:x}\", hasher.finish()); // prints b0f941520b1ad95d\n```\n\n#### \u00a7\u27e811\u27e9`wyrng` function usage\nNote that the seed parameter is updated so that it is possible to generate a sequence of random numbers.\n```\nuse wyhash::wyrng;\nlet mut seed = 3;\nlet random_number = wyrng(&mut seed);\nprintln!(\"{:x}\", random_number); // prints 3e99a772750dcbe\nprintln!(\"{:x}\", seed); //prints a0761d6478bd6432\n```\n\n#### \u00a7\u27e812\u27e9`RngCore` trait usage\nYou can also use `rand::Rng`, it is the same.\n```\nuse rand_core::RngCore;\nuse wyhash::WyRng;\nlet mut rng = WyRng::default();\nprintln!(\"{:x}\", rng.next_u64()); // prints 111cb3a78f59a58e\n```\n\n#### \u00a7\u27e813\u27e9`SeedableRng` trait usage\nYou can also use `rand::SeedableRng`, it is the same.\n```\nuse rand_core::{RngCore, SeedableRng};\nuse wyhash::WyRng;\n// Seeds are 8-byte long.\nlet seed = [0, 1, 2, 3, 4, 5, 6, 7];\nlet mut rng1 = WyRng::from_seed(seed);\nprintln!(\"{:x}\", rng1.next_u64()); // prints d730135774c6ae31\n// Alternatively you can also use this convenience method:\nlet mut rng2 = WyRng::seed_from_u64(3);\nprintln!(\"{:x}\", rng2.next_u64()); // prints 3e99a772750dcbe\n```\n\n## Re-exports\u00a7\u27e814\u27e9\n\n`pub use crate::v1::wyhash[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyhash.html \"fn wyhash::v1::wyhash\");`\n\n\n`pub use crate::v1::wyrng[](https://docs.rs/wyhash/latest/wyhash/v1/fn.wyrng.html \"fn wyhash::v1::wyrng\");`\n\n\n`pub use crate::v1::WyHash[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHash.html \"struct wyhash::v1::WyHash\");`\n\n\n`pub use crate::v1::WyHasherBuilder[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyHasherBuilder.html \"struct wyhash::v1::WyHasherBuilder\");`\n\n\n`pub use crate::v1::WyRng[](https://docs.rs/wyhash/latest/wyhash/v1/struct.WyRng.html \"struct wyhash::v1::WyRng\");`\n\n## Modules\u00a7\u27e815\u27e9\n\nfinal3\u27e816\u27e9\n    WyHash version final 3\n\nv1\u27e817\u27e9\n    WyHash version 1\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/wyhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/wyhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/wyhash/latest/src/wyhash/lib.rs.html#1-114: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: wyhash algorithm by Wang Yi\n\u27e85\u27e9 https://github.com/eldruin/wyhash-rs/blob/master/comparison/original/CMakeLists.txt: here\n\u27e86\u27e9 https://github.com/eldruin/wyhash-rs/issues: PRs are welcome\n\u27e87\u27e9 https://docs.rs/wyhash/latest/wyhash/#crate-features: \u00a7\n\u27e88\u27e9 https://docs.rs/wyhash/latest/wyhash/#usage-see-also-examples-folder: \u00a7\n\u27e89\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyhash-function-usage: \u00a7\n\u27e810\u27e9 https://docs.rs/wyhash/latest/wyhash/#hasher-trait-usage: \u00a7\n\u27e811\u27e9 https://docs.rs/wyhash/latest/wyhash/#wyrng-function-usage: \u00a7\n\u27e812\u27e9 https://docs.rs/wyhash/latest/wyhash/#rngcore-trait-usage: \u00a7\n\u27e813\u27e9 https://docs.rs/wyhash/latest/wyhash/#seedablerng-trait-usage: \u00a7\n\u27e814\u27e9 https://docs.rs/wyhash/latest/wyhash/#reexports: \u00a7\n\u27e815\u27e9 https://docs.rs/wyhash/latest/wyhash/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/wyhash/latest/wyhash/final3/index.html: mod wyhash::final3 - final3\n\u27e817\u27e9 https://docs.rs/wyhash/latest/wyhash/v1/index.html: mod wyhash::v1 - v1\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `wyhash` crate provides a fast, portable, and dependency-free Rust implementation of the Wyhash hashing algorithm and its associated random number generator (WyRng). It supports both 128-bit and 64-bit integer multiplications (via the `mum32bit` feature for better performance on 32-bit architectures) and can be used in `no_std` environments. The crate integrates seamlessly with Rust's `Hasher`, `RngCore`, and `SeedableRng` traits, offering flexible usage for hashing and random number generation.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.5,
          "factual_counterfactual": "### Pair 1: Hashing Algorithm Performance\n\u2705 Factual: The `wyhash` crate implements the Wyhash algorithm, which is the fastest hashing algorithm in the SMHasher benchmark, outperforming alternatives like `t1ha` and `XXH3`.  \n\u274c Counterfactual: The `wyhash` crate is slower than `t1ha` and `XXH3` in the SMHasher benchmark due to its reliance on complex hardware-specific optimizations.  \n\n---\n\n### Pair 2: Portability and `no_std` Support  \n\u2705 Factual: The `wyhash` crate is portable and can be used in `no_std` environments, making it suitable for embedded systems without requiring hardware-specific support.  \n\u274c Counterfactual: The `wyhash` crate requires hardware-specific support and cannot be used in `no_std` environments, limiting its portability.  \n\n---\n\n### Pair 3: Random Number Generation  \n\u2705 Factual: The `wyrng` function in the `wyhash` crate generates random numbers and updates the seed parameter, enabling the generation of sequences of random numbers.  \n\u274c Counterfactual: The `wyrng` function in the `wyhash` crate generates random numbers without altering the seed parameter, preventing the generation of sequential random numbers.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-2cac9007-2cc59a4c-1751261007",
      "timestamp": "2025-06-30T05:23:27.744977+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]