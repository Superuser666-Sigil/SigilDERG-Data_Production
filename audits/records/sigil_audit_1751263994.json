[
  {
    "execution_id": "exec-2466624a-97d17ba2-1751263983",
    "timestamp": "2025-06-30T06:13:03.998890+00:00",
    "sacred_chain": {
      "input_data": "strum",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'strum' -> 'strum'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "strum",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/strum",
            "title": "strum v0.27.1",
            "content": {
              "raw_markdown": "#  strum v0.27.1\nHelpful macros for working with enums and strings \n  * [ #enum ](https://crates.io/keywords/enum)\n  * [ #macros ](https://crates.io/keywords/macros)\n  * [ #proc-macros ](https://crates.io/keywords/proc-macros)\n  * [ #string ](https://crates.io/keywords/string)\n\n\n  * [ Readme ](https://crates.io/crates/strum)\n  * [ 38 Versions ](https://crates.io/crates/strum/versions)\n  * [ Dependencies ](https://crates.io/crates/strum/dependencies)\n  * [ Dependents ](https://crates.io/crates/strum/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.66.1 \n[ MIT ](https://choosealicense.com/licenses/mit)\n7.29 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add strum\nOr add the following line to your Cargo.toml:\nstrum = \"0.27.1\"\n## Documentation\n[ docs.rs/strum ](https://docs.rs/strum)\n## Repository\n[ github.com/Peternator7/strum ](https://github.com/Peternator7/strum)\n## Owners\n## Categories\n  * [Procedural macro helpers](https://crates.io/categories/development-tools::procedural-macro-helpers)\n  * [Parsing tools](https://crates.io/categories/parsing)\n\n\n[ Report crate ](https://crates.io/support?crate=strum&inquire=crate-violation)\n### Stats Overview\n210,436,926 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  strum v0.27.1\nHelpful macros for working with enums and strings \n  *  #enum \u27e81\u27e9\n  *  #macros \u27e82\u27e9\n  *  #proc-macros \u27e83\u27e9\n  *  #string \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  38 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\n4 months ago \nv1.66.1 \n MIT \u27e89\u27e9\n7.29 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add strum\nOr add the following line to your Cargo.toml:\nstrum = \"0.27.1\"\n## Documentation\n docs.rs/strum \u27e810\u27e9\n## Repository\n github.com/Peternator7/strum \u27e811\u27e9\n## Owners\n## Categories\n  * Procedural macro helpers\u27e812\u27e9\n  * Parsing tools\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n210,436,926 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/enum:  #enum \n\u27e82\u27e9 https://crates.io/keywords/macros:  #macros \n\u27e83\u27e9 https://crates.io/keywords/proc-macros:  #proc-macros \n\u27e84\u27e9 https://crates.io/keywords/string:  #string \n\u27e85\u27e9 https://crates.io/crates/strum:  Readme \n\u27e86\u27e9 https://crates.io/crates/strum/versions:  38 Versions \n\u27e87\u27e9 https://crates.io/crates/strum/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/strum/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://docs.rs/strum:  docs.rs/strum \n\u27e811\u27e9 https://github.com/Peternator7/strum:  github.com/Peternator7/strum \n\u27e812\u27e9 https://crates.io/categories/development-tools::procedural-macro-helpers: Procedural macro helpers\n\u27e813\u27e9 https://crates.io/categories/parsing: Parsing tools\n\u27e814\u27e9 https://crates.io/support?crate=strum&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1352,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117774.1883471"
          },
          "docs_rs": {
            "url": "https://docs.rs/strum",
            "title": "Crate strumCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\n[Settings](https://docs.rs/strum/latest/settings.html)\n[Help](https://docs.rs/strum/latest/help.html)\nSummary[Source](https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265)\nExpand description\n## [\u00a7](https://docs.rs/strum/latest/strum/#strum)Strum\n[![Build Status](https://travis-ci.org/Peternator7/strum.svg?branch=master)](https://travis-ci.org/Peternator7/strum) [![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum) [![Rust Documentation](https://docs.rs/strum/badge.svg)](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on [GitHub](https://github.com/Peternator7/strum).\n## [\u00a7](https://docs.rs/strum/latest/strum/#including-strum-in-your-project)Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules[\u00a7](https://docs.rs/strum/latest/strum/#modules)\n\n[additional_attributes](https://docs.rs/strum/latest/strum/additional_attributes/index.html \"mod strum::additional_attributes\")\n    Documentation for Additional Attributes\n## Enums[\u00a7](https://docs.rs/strum/latest/strum/#enums)\n\n[ParseError](https://docs.rs/strum/latest/strum/enum.ParseError.html \"enum strum::ParseError\")\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits[\u00a7](https://docs.rs/strum/latest/strum/#traits)\n\n[AsStaticRef](https://docs.rs/strum/latest/strum/trait.AsStaticRef.html \"trait strum::AsStaticRef\")Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\n[EnumCount](https://docs.rs/strum/latest/strum/trait.EnumCount.html \"trait strum::EnumCount\")\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/trait.EnumMessage.html \"trait strum::EnumMessage\")\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/trait.EnumProperty.html \"trait strum::EnumProperty\")\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\n[IntoDiscriminant](https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html \"trait strum::IntoDiscriminant\")\n    A trait for retrieving the enum generated by [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\n[IntoEnumIterator](https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html \"trait strum::IntoEnumIterator\")\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the [`EnumIter`](https://docs.rs/strum/latest/strum/derive.EnumIter.html) derive macro.\n\n[VariantArray](https://docs.rs/strum/latest/strum/trait.VariantArray.html \"trait strum::VariantArray\")\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") if you require inner data but still want to have an static array of variants.\n\n[VariantIterator](https://docs.rs/strum/latest/strum/trait.VariantIterator.html \"trait strum::VariantIterator\")\n\n\n[VariantMetadata](https://docs.rs/strum/latest/strum/trait.VariantMetadata.html \"trait strum::VariantMetadata\")\n\n\n[VariantNames](https://docs.rs/strum/latest/strum/trait.VariantNames.html \"trait strum::VariantNames\")\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros[\u00a7](https://docs.rs/strum/latest/strum/#derives)\n\n[AsRefStr](https://docs.rs/strum/latest/strum/derive.AsRefStr.html \"derive strum::AsRefStr\")`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\n[Display](https://docs.rs/strum/latest/strum/derive.Display.html \"derive strum::Display\")`derive`\n    Converts enum variants to strings.\n\n[EnumCount](https://docs.rs/strum/latest/strum/derive.EnumCount.html \"derive strum::EnumCount\")`derive`\n    Add a constant `usize` equal to the number of variants.\n\n[EnumDiscriminants](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\")`derive`\n    Generate a new type with only the discriminant names.\n\n[EnumIs](https://docs.rs/strum/latest/strum/derive.EnumIs.html \"derive strum::EnumIs\")\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\n[EnumIter](https://docs.rs/strum/latest/strum/derive.EnumIter.html \"derive strum::EnumIter\")`derive`\n    Creates a new type that iterates over the variants of an enum.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/derive.EnumMessage.html \"derive strum::EnumMessage\")`derive`\n    Add a verbose message to an enum variant.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/derive.EnumProperty.html \"derive strum::EnumProperty\")`derive`\n    Add custom properties to enum variants.\n\n[EnumString](https://docs.rs/strum/latest/strum/derive.EnumString.html \"derive strum::EnumString\")`derive`\n    Converts strings to enum variants based on their name.\n\n[EnumTryAs](https://docs.rs/strum/latest/strum/derive.EnumTryAs.html \"derive strum::EnumTryAs\")\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\n[FromRepr](https://docs.rs/strum/latest/strum/derive.FromRepr.html \"derive strum::FromRepr\")`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\n[IntoStaticStr](https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html \"derive strum::IntoStaticStr\")`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\n[VariantArray](https://docs.rs/strum/latest/strum/derive.VariantArray.html \"derive strum::VariantArray\")`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\n[VariantNames](https://docs.rs/strum/latest/strum/derive.VariantNames.html \"derive strum::VariantNames\")`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
              "markdown_with_citations": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Strum\n![Build Status\u27e85\u27e9](https://travis-ci.org/Peternator7/strum) ![Latest Version\u27e86\u27e9](https://crates.io/crates/strum) ![Rust Documentation\u27e87\u27e9](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on GitHub\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules\u00a7\u27e810\u27e9\n\nadditional_attributes\u27e811\u27e9\n    Documentation for Additional Attributes\n## Enums\u00a7\u27e812\u27e9\n\nParseError\u27e813\u27e9\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits\u00a7\u27e814\u27e9\n\nAsStaticRef\u27e815\u27e9Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\nEnumCount\u27e816\u27e9\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\nEnumMessage\u27e817\u27e9\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\nEnumProperty\u27e818\u27e9\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\nIntoDiscriminant\u27e819\u27e9\n    A trait for retrieving the enum generated by `EnumDiscriminants`\u27e820\u27e9 from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\nIntoEnumIterator\u27e821\u27e9\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the `EnumIter`\u27e822\u27e9 derive macro.\n\nVariantArray\u27e823\u27e9\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside `EnumDiscriminants`\u27e820\u27e9 if you require inner data but still want to have an static array of variants.\n\nVariantIterator\u27e824\u27e9\n\n\nVariantMetadata\u27e825\u27e9\n\n\nVariantNames\u27e826\u27e9\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros\u00a7\u27e827\u27e9\n\nAsRefStr\u27e828\u27e9`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\nDisplay\u27e829\u27e9`derive`\n    Converts enum variants to strings.\n\nEnumCount\u27e830\u27e9`derive`\n    Add a constant `usize` equal to the number of variants.\n\nEnumDiscriminants\u27e820\u27e9`derive`\n    Generate a new type with only the discriminant names.\n\nEnumIs\u27e831\u27e9\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\nEnumIter\u27e822\u27e9`derive`\n    Creates a new type that iterates over the variants of an enum.\n\nEnumMessage\u27e832\u27e9`derive`\n    Add a verbose message to an enum variant.\n\nEnumProperty\u27e833\u27e9`derive`\n    Add custom properties to enum variants.\n\nEnumString\u27e834\u27e9`derive`\n    Converts strings to enum variants based on their name.\n\nEnumTryAs\u27e835\u27e9\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\nFromRepr\u27e836\u27e9`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\nIntoStaticStr\u27e837\u27e9`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\nVariantArray\u27e838\u27e9`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\nVariantNames\u27e839\u27e9`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/strum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/strum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265: Source\n\u27e84\u27e9 https://docs.rs/strum/latest/strum/#strum: \u00a7\n\u27e85\u27e9 https://travis-ci.org/Peternator7/strum.svg?branch=master: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/strum.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/strum/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://github.com/Peternator7/strum: GitHub\n\u27e89\u27e9 https://docs.rs/strum/latest/strum/#including-strum-in-your-project: \u00a7\n\u27e810\u27e9 https://docs.rs/strum/latest/strum/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/strum/latest/strum/additional_attributes/index.html: mod strum::additional_attributes - additional_attributes\n\u27e812\u27e9 https://docs.rs/strum/latest/strum/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/strum/latest/strum/enum.ParseError.html: enum strum::ParseError - ParseError\n\u27e814\u27e9 https://docs.rs/strum/latest/strum/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/strum/latest/strum/trait.AsStaticRef.html: trait strum::AsStaticRef - AsStaticRef\n\u27e816\u27e9 https://docs.rs/strum/latest/strum/trait.EnumCount.html: trait strum::EnumCount - EnumCount\n\u27e817\u27e9 https://docs.rs/strum/latest/strum/trait.EnumMessage.html: trait strum::EnumMessage - EnumMessage\n\u27e818\u27e9 https://docs.rs/strum/latest/strum/trait.EnumProperty.html: trait strum::EnumProperty - EnumProperty\n\u27e819\u27e9 https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html: trait strum::IntoDiscriminant - IntoDiscriminant\n\u27e820\u27e9 https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html: derive strum::EnumDiscriminants - `EnumDiscriminants`\n\u27e821\u27e9 https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html: trait strum::IntoEnumIterator - IntoEnumIterator\n\u27e822\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIter.html: `EnumIter`\n\u27e823\u27e9 https://docs.rs/strum/latest/strum/trait.VariantArray.html: trait strum::VariantArray - VariantArray\n\u27e824\u27e9 https://docs.rs/strum/latest/strum/trait.VariantIterator.html: trait strum::VariantIterator - VariantIterator\n\u27e825\u27e9 https://docs.rs/strum/latest/strum/trait.VariantMetadata.html: trait strum::VariantMetadata - VariantMetadata\n\u27e826\u27e9 https://docs.rs/strum/latest/strum/trait.VariantNames.html: trait strum::VariantNames - VariantNames\n\u27e827\u27e9 https://docs.rs/strum/latest/strum/#derives: \u00a7\n\u27e828\u27e9 https://docs.rs/strum/latest/strum/derive.AsRefStr.html: derive strum::AsRefStr - AsRefStr\n\u27e829\u27e9 https://docs.rs/strum/latest/strum/derive.Display.html: derive strum::Display - Display\n\u27e830\u27e9 https://docs.rs/strum/latest/strum/derive.EnumCount.html: derive strum::EnumCount - EnumCount\n\u27e831\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIs.html: derive strum::EnumIs - EnumIs\n\u27e832\u27e9 https://docs.rs/strum/latest/strum/derive.EnumMessage.html: derive strum::EnumMessage - EnumMessage\n\u27e833\u27e9 https://docs.rs/strum/latest/strum/derive.EnumProperty.html: derive strum::EnumProperty - EnumProperty\n\u27e834\u27e9 https://docs.rs/strum/latest/strum/derive.EnumString.html: derive strum::EnumString - EnumString\n\u27e835\u27e9 https://docs.rs/strum/latest/strum/derive.EnumTryAs.html: derive strum::EnumTryAs - EnumTryAs\n\u27e836\u27e9 https://docs.rs/strum/latest/strum/derive.FromRepr.html: derive strum::FromRepr - FromRepr\n\u27e837\u27e9 https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html: derive strum::IntoStaticStr - IntoStaticStr\n\u27e838\u27e9 https://docs.rs/strum/latest/strum/derive.VariantArray.html: derive strum::VariantArray - VariantArray\n\u27e839\u27e9 https://docs.rs/strum/latest/strum/derive.VariantNames.html: derive strum::VariantNames - VariantNames\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7251,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117774.7175769"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/strum",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [37 releases](https://lib.rs/crates/strum/versions) (23 breaking)\n0.27.1 |  Feb 17, 2025   \n---|---  \n0.26.3 |  Jun 23, 2024   \n0.26.2 |  Mar 10, 2024   \n0.25.0 |  Jun 18, 2023   \n0.5.1 |  Feb 25, 2017   \n#**4** in [Procedural macros](https://lib.rs/development-tools/procedural-macro-helpers \"Crates to help you write procedural macros in Rust.\n\")\nDownload history 3336998/week @ 2025-03-06 3232213/week @ 2025-03-13 3897275/week @ 2025-03-20 3027346/week @ 2025-03-27 3139205/week @ 2025-04-03 3004932/week @ 2025-04-10 2708118/week @ 2025-04-17 2781955/week @ 2025-04-24 2641322/week @ 2025-05-01 2866302/week @ 2025-05-08 2907626/week @ 2025-05-15 2671986/week @ 2025-05-22 2747239/week @ 2025-05-29 2750662/week @ 2025-06-05 3242775/week @ 2025-06-12 2953513/week @ 2025-06-19\n**12,245,472** downloads per month Used in [**10,318** crates (3,079 directly)](https://lib.rs/crates/strum/rev)\n**MIT** license \n24KB  171 lines\n# Strum\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.com/Peternator7/strum.svg?branch=master)](https://travis-ci.com/Peternator7/strum) [![Build status](https://img.gs/czjpqfbdkz/full/https://ci.appveyor.com/api/projects/status/ji4f6n2m5lvu11xt?svg=true)](https://ci.appveyor.com/project/Peternator7/strum) [![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum) [![Rust Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/strum/badge.svg)](https://docs.rs/strum) ![Crates.io](https://img.shields.io/crates/l/strum) ![Crates.io](https://img.shields.io/crates/d/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\n# Compatibility\nStrum is currently compatible with versions of rustc >= 1.66.1. Pull Requests that improve compatibility with older versions are welcome. The project goal is to support a rust version for at least 2 years after release and even longer is preferred since this project changes slowly.\n# Including Strum in Your Project\nImport strum and strum_macros into your project by adding the following lines to your Cargo.toml. Strum_macros contains the macros needed to derive all the traits in Strum.\n```\n```[``dependencies``]`\n`strum ``=` ``\"`0.27`\"``\n`strum_macros ``=` ``\"`0.27`\"``\n``# You can also use the \"derive\" feature, and import the macros directly from \"strum\"``\n``# strum = { version = \"0.27\", features = [\"derive\"] }``\n``\n```\n\n# Strum Macros\nStrum has implemented the following macros:\nMacro | Description  \n---|---  \n[EnumString](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumString.html) | Converts strings to enum variants based on their name.  \n[Display](https://docs.rs/strum_macros/latest/strum_macros/derive.Display.html) | Converts enum variants to strings  \n[FromRepr](https://docs.rs/strum_macros/latest/strum_macros/derive.FromRepr.html) | Convert from an integer to an enum.  \n[AsRefStr](https://docs.rs/strum_macros/latest/strum_macros/derive.AsRefStr.html) | Implement ````AsRef``<``str``>```` for ``MyEnum``  \n[IntoStaticStr](https://docs.rs/strum_macros/latest/strum_macros/derive.IntoStaticStr.html) | Implements ````From``<`MyEnum`>`` `for` `&``'static` `str``` on an enum  \n[EnumIter](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIter.html) | Creates a new type that iterates of the variants of an enum.  \n[EnumProperty](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumProperty.html) | Add custom properties to enum variants.  \n[EnumMessage](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumMessage.html) | Add a verbose message to an enum variant.  \n[EnumDiscriminants](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumDiscriminants.html) | Generate a new type with only the discriminant names.  \n[EnumCount](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumCount.html) | Add a constant ```usize``` equal to the number of variants.  \n[VariantArray](https://docs.rs/strum_macros/latest/strum_macros/derive.VariantArray.html) | Adds an associated ``VARIANTS`` constant which is an array of all enum discriminants  \n[VariantNames](https://docs.rs/strum_macros/latest/strum_macros/derive.VariantNames.html) | Adds an associated ``VARIANTS`` constant which is an array of discriminant names  \n[EnumTable](https://docs.rs/strum_macros/latest/strum_macros/derive.EnumTable.html) | _Experimental_ , creates a new type that stores an item of a specified type for each variant of the enum.  \n# Contributing\nThanks for your interest in contributing. Bug fixes are always welcome. If you are interested in implementing or adding a macro, please open an issue first to discuss the feature. I have limited bandwidth to review new features.\nThe project is divided into 3 parts, the traits are in the ``/strum`` folder. The procedural macros are in the ``/strum_macros`` folder, and the integration tests are in ``/strum_tests``. If you are adding additional features to ``strum`` or ``strum_macros``, you should make sure to run the tests and add new integration tests to make sure the features work as expected.\n# Debugging\nTo see the generated code, set the STRUM_DEBUG environment variable before compiling your code. ```STRUM_DEBUG``=``1``` will dump all of the generated code for every type. ```STRUM_DEBUG``=`YourType`` will only dump the code generated on a type named ``YourType``.\n# Name\nStrum is short for STRing enUM because it's a library for augmenting enums with additional information through strings.\nStrumming is also a very whimsical motion, much like writing Rust code.\n#### Dependencies\n~170KB \n  * [ optional ](https://lib.rs/crates/strum/features#feature-phf \"phf is optional feature\") [phf](https://lib.rs/crates/phf \"0.11\")[+macros](https://lib.rs/crates/phf/features#feature-macros)\n  * [derive?](https://lib.rs/crates/strum/features#feature-derive \"optional feature\") [strum_macros](https://lib.rs/crates/strum_macros \"new\") 0.27.1\n\n\n#### [Other feature](https://lib.rs/crates/strum/features)\n  * [std](https://lib.rs/crates/strum/features#feature-std)\n\n\n",
              "markdown_with_citations": "###  37 releases\u27e81\u27e9 (23 breaking)\n0.27.1 |  Feb 17, 2025   \n---|---  \n0.26.3 |  Jun 23, 2024   \n0.26.2 |  Mar 10, 2024   \n0.25.0 |  Jun 18, 2023   \n0.5.1 |  Feb 25, 2017   \n#**4** in Procedural macros\u27e82\u27e9\nDownload history 3336998/week @ 2025-03-06 3232213/week @ 2025-03-13 3897275/week @ 2025-03-20 3027346/week @ 2025-03-27 3139205/week @ 2025-04-03 3004932/week @ 2025-04-10 2708118/week @ 2025-04-17 2781955/week @ 2025-04-24 2641322/week @ 2025-05-01 2866302/week @ 2025-05-08 2907626/week @ 2025-05-15 2671986/week @ 2025-05-22 2747239/week @ 2025-05-29 2750662/week @ 2025-06-05 3242775/week @ 2025-06-12 2953513/week @ 2025-06-19\n**12,245,472** downloads per month Used in **10,318** crates (3,079 directly)\u27e83\u27e9\n**MIT** license \n24KB  171 lines\n# Strum\n![Build Status\u27e84\u27e9](https://travis-ci.com/Peternator7/strum) ![Build status\u27e85\u27e9](https://ci.appveyor.com/project/Peternator7/strum) ![Latest Version\u27e86\u27e9](https://crates.io/crates/strum) ![Rust Documentation\u27e87\u27e9](https://docs.rs/strum) ![Crates.io\u27e88\u27e9] ![Crates.io\u27e89\u27e9]\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\n# Compatibility\nStrum is currently compatible with versions of rustc >= 1.66.1. Pull Requests that improve compatibility with older versions are welcome. The project goal is to support a rust version for at least 2 years after release and even longer is preferred since this project changes slowly.\n# Including Strum in Your Project\nImport strum and strum_macros into your project by adding the following lines to your Cargo.toml. Strum_macros contains the macros needed to derive all the traits in Strum.\n```\n```[``dependencies``]`\n`strum ``=` ``\"`0.27`\"``\n`strum_macros ``=` ``\"`0.27`\"``\n``# You can also use the \"derive\" feature, and import the macros directly from \"strum\"``\n``# strum = { version = \"0.27\", features = [\"derive\"] }``\n``\n```\n\n# Strum Macros\nStrum has implemented the following macros:\nMacro | Description  \n---|---  \nEnumString\u27e810\u27e9 | Converts strings to enum variants based on their name.  \nDisplay\u27e811\u27e9 | Converts enum variants to strings  \nFromRepr\u27e812\u27e9 | Convert from an integer to an enum.  \nAsRefStr\u27e813\u27e9 | Implement ````AsRef``<``str``>```` for ``MyEnum``  \nIntoStaticStr\u27e814\u27e9 | Implements ````From``<`MyEnum`>`` `for` `&``'static` `str``` on an enum  \nEnumIter\u27e815\u27e9 | Creates a new type that iterates of the variants of an enum.  \nEnumProperty\u27e816\u27e9 | Add custom properties to enum variants.  \nEnumMessage\u27e817\u27e9 | Add a verbose message to an enum variant.  \nEnumDiscriminants\u27e818\u27e9 | Generate a new type with only the discriminant names.  \nEnumCount\u27e819\u27e9 | Add a constant ```usize``` equal to the number of variants.  \nVariantArray\u27e820\u27e9 | Adds an associated ``VARIANTS`` constant which is an array of all enum discriminants  \nVariantNames\u27e821\u27e9 | Adds an associated ``VARIANTS`` constant which is an array of discriminant names  \nEnumTable\u27e822\u27e9 | _Experimental_ , creates a new type that stores an item of a specified type for each variant of the enum.  \n# Contributing\nThanks for your interest in contributing. Bug fixes are always welcome. If you are interested in implementing or adding a macro, please open an issue first to discuss the feature. I have limited bandwidth to review new features.\nThe project is divided into 3 parts, the traits are in the ``/strum`` folder. The procedural macros are in the ``/strum_macros`` folder, and the integration tests are in ``/strum_tests``. If you are adding additional features to ``strum`` or ``strum_macros``, you should make sure to run the tests and add new integration tests to make sure the features work as expected.\n# Debugging\nTo see the generated code, set the STRUM_DEBUG environment variable before compiling your code. ```STRUM_DEBUG``=``1``` will dump all of the generated code for every type. ```STRUM_DEBUG``=`YourType`` will only dump the code generated on a type named ``YourType``.\n# Name\nStrum is short for STRing enUM because it's a library for augmenting enums with additional information through strings.\nStrumming is also a very whimsical motion, much like writing Rust code.\n#### Dependencies\n~170KB \n  *  optional \u27e823\u27e9 phf\u27e824\u27e9+macros\u27e825\u27e9\n  * derive?\u27e826\u27e9 strum_macros\u27e827\u27e9 0.27.1\n\n\n#### Other feature\u27e828\u27e9\n  * std\u27e829\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/strum/versions: 37 releases\n\u27e82\u27e9 https://lib.rs/development-tools/procedural-macro-helpers: Crates to help you write procedural macros in Rust.\n - Procedural macros\n\u27e83\u27e9 https://lib.rs/crates/strum/rev: **10,318** crates (3,079 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.com/Peternator7/strum.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://ci.appveyor.com/api/projects/status/ji4f6n2m5lvu11xt?svg=true: ![Build status\n\u27e86\u27e9 https://img.shields.io/crates/v/strum.svg: ![Latest Version\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/strum/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://img.shields.io/crates/l/strum: Crates.io\n\u27e89\u27e9 https://img.shields.io/crates/d/strum: Crates.io\n\u27e810\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumString.html: EnumString\n\u27e811\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.Display.html: Display\n\u27e812\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.FromRepr.html: FromRepr\n\u27e813\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.AsRefStr.html: AsRefStr\n\u27e814\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.IntoStaticStr.html: IntoStaticStr\n\u27e815\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumIter.html: EnumIter\n\u27e816\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumProperty.html: EnumProperty\n\u27e817\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumMessage.html: EnumMessage\n\u27e818\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumDiscriminants.html: EnumDiscriminants\n\u27e819\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumCount.html: EnumCount\n\u27e820\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.VariantArray.html: VariantArray\n\u27e821\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.VariantNames.html: VariantNames\n\u27e822\u27e9 https://docs.rs/strum_macros/latest/strum_macros/derive.EnumTable.html: EnumTable\n\u27e823\u27e9 https://lib.rs/crates/strum/features#feature-phf: phf is optional feature -  optional \n\u27e824\u27e9 https://lib.rs/crates/phf: 0.11 - phf\n\u27e825\u27e9 https://lib.rs/crates/phf/features#feature-macros: +macros\n\u27e826\u27e9 https://lib.rs/crates/strum/features#feature-derive: optional feature - derive?\n\u27e827\u27e9 https://lib.rs/crates/strum_macros: new - strum_macros\n\u27e828\u27e9 https://lib.rs/crates/strum/features: Other feature\n\u27e829\u27e9 https://lib.rs/crates/strum/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6036,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117775.1100125"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\target\\debug\\deps\\libstrum-e3cf5e3bdc6dc115.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:58:5\n   |\n58 | //!    be applied multiple times to an element and the enum variant will be parsed if any of them match.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n   = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1856,
                        "byte_start": 1853,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    be applied multiple times to an element and the enum variant will be parsed if any of them match."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 1856,
                    "byte_start": 1853,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    be applied multiple times to an element and the enum variant will be parsed if any of them match."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:61:5\n   |\n61 | //!    this specifies what text to use when calling `variant.to_string()` with the `Display` derivation, or when calling `variant.as_ref(...\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2084,
                        "byte_start": 2081,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 61,
                        "line_start": 61,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    this specifies what text to use when calling `variant.to_string()` with the `Display` derivation, or when calling `variant.as_ref()` with `AsRefStr`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2084,
                    "byte_start": 2081,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    this specifies what text to use when calling `variant.to_string()` with the `Display` derivation, or when calling `variant.as_ref()` with `AsRefStr`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:64:5\n   |\n64 | //!    variant with a single piece of data that can be create from a `&str` i.e. `T: From<&str>`.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2335,
                        "byte_start": 2332,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 64,
                        "line_start": 64,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    variant with a single piece of data that can be create from a `&str` i.e. `T: From<&str>`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2335,
                    "byte_start": 2332,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    variant with a single piece of data that can be create from a `&str` i.e. `T: From<&str>`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:65:5\n   |\n65 | //!    The generated code will now return the variant with the input string captured as shown below\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2433,
                        "byte_start": 2430,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    The generated code will now return the variant with the input string captured as shown below"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2433,
                    "byte_start": 2430,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    The generated code will now return the variant with the input string captured as shown below"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:66:5\n   |\n66 | //!    instead of failing.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2533,
                        "byte_start": 2530,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 66,
                        "line_start": 66,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    instead of failing."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2533,
                    "byte_start": 2530,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    instead of failing."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:75:5\n   |\n75 | //!     on your enum.\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2862,
                        "byte_start": 2858,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 75,
                        "line_start": 75,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     on your enum."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2862,
                    "byte_start": 2858,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     on your enum."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:78:5\n   |\n78 | //!    one for this variant. Only applicable to enum variants with a single field. Compatible with the\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2992,
                        "byte_start": 2989,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    one for this variant. Only applicable to enum variants with a single field. Compatible with the"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2992,
                    "byte_start": 2989,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    one for this variant. Only applicable to enum variants with a single field. Compatible with the"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:79:5\n   |\n79 | //!    `AsRefStr`, `Display` and `IntoStaticStr` derive macros. Note that `IntoStaticStr` has a few restrictions,\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3095,
                        "byte_start": 3092,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 79,
                        "line_start": 79,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    `AsRefStr`, `Display` and `IntoStaticStr` derive macros. Note that `IntoStaticStr` has a few restrictions,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3095,
                    "byte_start": 3092,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    `AsRefStr`, `Display` and `IntoStaticStr` derive macros. Note that `IntoStaticStr` has a few restrictions,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:80:5\n   |\n80 | //!    the value must be `'static` and `const_into_str` is not supported in combination with `transparent` b/c\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3209,
                        "byte_start": 3206,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 80,
                        "line_start": 80,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    the value must be `'static` and `const_into_str` is not supported in combination with `transparent` b/c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3209,
                    "byte_start": 3206,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 80,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    the value must be `'static` and `const_into_str` is not supported in combination with `transparent` b/c"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:81:5\n   |\n81 | //!    transparent relies on a call on `From::from(variant)`.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3320,
                        "byte_start": 3317,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 81,
                        "line_start": 81,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    transparent relies on a call on `From::from(variant)`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3320,
                    "byte_start": 3317,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    transparent relies on a call on `From::from(variant)`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:90:5\n   |\n90 | //!    trait to associate a message with a variant. If `detailed_message` is not provided,\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3816,
                        "byte_start": 3813,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 90,
                        "line_start": 90,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    trait to associate a message with a variant. If `detailed_message` is not provided,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3816,
                    "byte_start": 3813,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    trait to associate a message with a variant. If `detailed_message` is not provided,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:91:5\n   |\n91 | //!    then `message` will also be returned when `get_detailed_message` is called.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3907,
                        "byte_start": 3904,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 91,
                        "line_start": 91,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    then `message` will also be returned when `get_detailed_message` is called."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3907,
                    "byte_start": 3904,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    then `message` will also be returned when `get_detailed_message` is called."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\additional_attributes.rs:94:5\n   |\n94 | //!    `message` will be used in it's place.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4099,
                        "byte_start": 4096,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\additional_attributes.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 94,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    `message` will be used in it's place."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4099,
                    "byte_start": 4096,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\additional_attributes.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    `message` will be used in it's place."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpad9dry4m/strum-0.27.1#strum@0.27.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpad9dry4m\\strum-0.27.1\\target\\debug\\deps\\libstrum-24f628b5895bb2cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 15
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "strum",
          "version": "0.27.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\n[Settings](https://docs.rs/strum/latest/settings.html)\n[Help](https://docs.rs/strum/latest/help.html)\nSummary[Source](https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265)\nExpand description\n## [\u00a7](https://docs.rs/strum/latest/strum/#strum)Strum\n[![Build Status](https://travis-ci.org/Peternator7/strum.svg?branch=master)](https://travis-ci.org/Peternator7/strum) [![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum) [![Rust Documentation](https://docs.rs/strum/badge.svg)](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on [GitHub](https://github.com/Peternator7/strum).\n## [\u00a7](https://docs.rs/strum/latest/strum/#including-strum-in-your-project)Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules[\u00a7](https://docs.rs/strum/latest/strum/#modules)\n\n[additional_attributes](https://docs.rs/strum/latest/strum/additional_attributes/index.html \"mod strum::additional_attributes\")\n    Documentation for Additional Attributes\n## Enums[\u00a7](https://docs.rs/strum/latest/strum/#enums)\n\n[ParseError](https://docs.rs/strum/latest/strum/enum.ParseError.html \"enum strum::ParseError\")\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits[\u00a7](https://docs.rs/strum/latest/strum/#traits)\n\n[AsStaticRef](https://docs.rs/strum/latest/strum/trait.AsStaticRef.html \"trait strum::AsStaticRef\")Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\n[EnumCount](https://docs.rs/strum/latest/strum/trait.EnumCount.html \"trait strum::EnumCount\")\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/trait.EnumMessage.html \"trait strum::EnumMessage\")\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/trait.EnumProperty.html \"trait strum::EnumProperty\")\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\n[IntoDiscriminant](https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html \"trait strum::IntoDiscriminant\")\n    A trait for retrieving the enum generated by [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\n[IntoEnumIterator](https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html \"trait strum::IntoEnumIterator\")\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the [`EnumIter`](https://docs.rs/strum/latest/strum/derive.EnumIter.html) derive macro.\n\n[VariantArray](https://docs.rs/strum/latest/strum/trait.VariantArray.html \"trait strum::VariantArray\")\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") if you require inner data but still want to have an static array of variants.\n\n[VariantIterator](https://docs.rs/strum/latest/strum/trait.VariantIterator.html \"trait strum::VariantIterator\")\n\n\n[VariantMetadata](https://docs.rs/strum/latest/strum/trait.VariantMetadata.html \"trait strum::VariantMetadata\")\n\n\n[VariantNames](https://docs.rs/strum/latest/strum/trait.VariantNames.html \"trait strum::VariantNames\")\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros[\u00a7](https://docs.rs/strum/latest/strum/#derives)\n\n[AsRefStr](https://docs.rs/strum/latest/strum/derive.AsRefStr.html \"derive strum::AsRefStr\")`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\n[Display](https://docs.rs/strum/latest/strum/derive.Display.html \"derive strum::Display\")`derive`\n    Converts enum variants to strings.\n\n[EnumCount](https://docs.rs/strum/latest/strum/derive.EnumCount.html \"derive strum::EnumCount\")`derive`\n    Add a constant `usize` equal to the number of variants.\n\n[EnumDiscriminants](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\")`derive`\n    Generate a new type with only the discriminant names.\n\n[EnumIs](https://docs.rs/strum/latest/strum/derive.EnumIs.html \"derive strum::EnumIs\")\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\n[EnumIter](https://docs.rs/strum/latest/strum/derive.EnumIter.html \"derive strum::EnumIter\")`derive`\n    Creates a new type that iterates over the variants of an enum.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/derive.EnumMessage.html \"derive strum::EnumMessage\")`derive`\n    Add a verbose message to an enum variant.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/derive.EnumProperty.html \"derive strum::EnumProperty\")`derive`\n    Add custom properties to enum variants.\n\n[EnumString](https://docs.rs/strum/latest/strum/derive.EnumString.html \"derive strum::EnumString\")`derive`\n    Converts strings to enum variants based on their name.\n\n[EnumTryAs](https://docs.rs/strum/latest/strum/derive.EnumTryAs.html \"derive strum::EnumTryAs\")\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\n[FromRepr](https://docs.rs/strum/latest/strum/derive.FromRepr.html \"derive strum::FromRepr\")`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\n[IntoStaticStr](https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html \"derive strum::IntoStaticStr\")`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\n[VariantArray](https://docs.rs/strum/latest/strum/derive.VariantArray.html \"derive strum::VariantArray\")`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\n[VariantNames](https://docs.rs/strum/latest/strum/derive.VariantNames.html \"derive strum::VariantNames\")`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
            "markdown_with_citations": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Strum\n![Build Status\u27e85\u27e9](https://travis-ci.org/Peternator7/strum) ![Latest Version\u27e86\u27e9](https://crates.io/crates/strum) ![Rust Documentation\u27e87\u27e9](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on GitHub\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules\u00a7\u27e810\u27e9\n\nadditional_attributes\u27e811\u27e9\n    Documentation for Additional Attributes\n## Enums\u00a7\u27e812\u27e9\n\nParseError\u27e813\u27e9\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits\u00a7\u27e814\u27e9\n\nAsStaticRef\u27e815\u27e9Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\nEnumCount\u27e816\u27e9\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\nEnumMessage\u27e817\u27e9\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\nEnumProperty\u27e818\u27e9\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\nIntoDiscriminant\u27e819\u27e9\n    A trait for retrieving the enum generated by `EnumDiscriminants`\u27e820\u27e9 from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\nIntoEnumIterator\u27e821\u27e9\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the `EnumIter`\u27e822\u27e9 derive macro.\n\nVariantArray\u27e823\u27e9\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside `EnumDiscriminants`\u27e820\u27e9 if you require inner data but still want to have an static array of variants.\n\nVariantIterator\u27e824\u27e9\n\n\nVariantMetadata\u27e825\u27e9\n\n\nVariantNames\u27e826\u27e9\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros\u00a7\u27e827\u27e9\n\nAsRefStr\u27e828\u27e9`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\nDisplay\u27e829\u27e9`derive`\n    Converts enum variants to strings.\n\nEnumCount\u27e830\u27e9`derive`\n    Add a constant `usize` equal to the number of variants.\n\nEnumDiscriminants\u27e820\u27e9`derive`\n    Generate a new type with only the discriminant names.\n\nEnumIs\u27e831\u27e9\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\nEnumIter\u27e822\u27e9`derive`\n    Creates a new type that iterates over the variants of an enum.\n\nEnumMessage\u27e832\u27e9`derive`\n    Add a verbose message to an enum variant.\n\nEnumProperty\u27e833\u27e9`derive`\n    Add custom properties to enum variants.\n\nEnumString\u27e834\u27e9`derive`\n    Converts strings to enum variants based on their name.\n\nEnumTryAs\u27e835\u27e9\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\nFromRepr\u27e836\u27e9`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\nIntoStaticStr\u27e837\u27e9`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\nVariantArray\u27e838\u27e9`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\nVariantNames\u27e839\u27e9`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/strum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/strum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265: Source\n\u27e84\u27e9 https://docs.rs/strum/latest/strum/#strum: \u00a7\n\u27e85\u27e9 https://travis-ci.org/Peternator7/strum.svg?branch=master: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/strum.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/strum/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://github.com/Peternator7/strum: GitHub\n\u27e89\u27e9 https://docs.rs/strum/latest/strum/#including-strum-in-your-project: \u00a7\n\u27e810\u27e9 https://docs.rs/strum/latest/strum/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/strum/latest/strum/additional_attributes/index.html: mod strum::additional_attributes - additional_attributes\n\u27e812\u27e9 https://docs.rs/strum/latest/strum/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/strum/latest/strum/enum.ParseError.html: enum strum::ParseError - ParseError\n\u27e814\u27e9 https://docs.rs/strum/latest/strum/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/strum/latest/strum/trait.AsStaticRef.html: trait strum::AsStaticRef - AsStaticRef\n\u27e816\u27e9 https://docs.rs/strum/latest/strum/trait.EnumCount.html: trait strum::EnumCount - EnumCount\n\u27e817\u27e9 https://docs.rs/strum/latest/strum/trait.EnumMessage.html: trait strum::EnumMessage - EnumMessage\n\u27e818\u27e9 https://docs.rs/strum/latest/strum/trait.EnumProperty.html: trait strum::EnumProperty - EnumProperty\n\u27e819\u27e9 https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html: trait strum::IntoDiscriminant - IntoDiscriminant\n\u27e820\u27e9 https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html: derive strum::EnumDiscriminants - `EnumDiscriminants`\n\u27e821\u27e9 https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html: trait strum::IntoEnumIterator - IntoEnumIterator\n\u27e822\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIter.html: `EnumIter`\n\u27e823\u27e9 https://docs.rs/strum/latest/strum/trait.VariantArray.html: trait strum::VariantArray - VariantArray\n\u27e824\u27e9 https://docs.rs/strum/latest/strum/trait.VariantIterator.html: trait strum::VariantIterator - VariantIterator\n\u27e825\u27e9 https://docs.rs/strum/latest/strum/trait.VariantMetadata.html: trait strum::VariantMetadata - VariantMetadata\n\u27e826\u27e9 https://docs.rs/strum/latest/strum/trait.VariantNames.html: trait strum::VariantNames - VariantNames\n\u27e827\u27e9 https://docs.rs/strum/latest/strum/#derives: \u00a7\n\u27e828\u27e9 https://docs.rs/strum/latest/strum/derive.AsRefStr.html: derive strum::AsRefStr - AsRefStr\n\u27e829\u27e9 https://docs.rs/strum/latest/strum/derive.Display.html: derive strum::Display - Display\n\u27e830\u27e9 https://docs.rs/strum/latest/strum/derive.EnumCount.html: derive strum::EnumCount - EnumCount\n\u27e831\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIs.html: derive strum::EnumIs - EnumIs\n\u27e832\u27e9 https://docs.rs/strum/latest/strum/derive.EnumMessage.html: derive strum::EnumMessage - EnumMessage\n\u27e833\u27e9 https://docs.rs/strum/latest/strum/derive.EnumProperty.html: derive strum::EnumProperty - EnumProperty\n\u27e834\u27e9 https://docs.rs/strum/latest/strum/derive.EnumString.html: derive strum::EnumString - EnumString\n\u27e835\u27e9 https://docs.rs/strum/latest/strum/derive.EnumTryAs.html: derive strum::EnumTryAs - EnumTryAs\n\u27e836\u27e9 https://docs.rs/strum/latest/strum/derive.FromRepr.html: derive strum::FromRepr - FromRepr\n\u27e837\u27e9 https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html: derive strum::IntoStaticStr - IntoStaticStr\n\u27e838\u27e9 https://docs.rs/strum/latest/strum/derive.VariantArray.html: derive strum::VariantArray - VariantArray\n\u27e839\u27e9 https://docs.rs/strum/latest/strum/derive.VariantNames.html: derive strum::VariantNames - VariantNames\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "strum",
          "version": "0.27.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\n[Settings](https://docs.rs/strum/latest/settings.html)\n[Help](https://docs.rs/strum/latest/help.html)\nSummary[Source](https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265)\nExpand description\n## [\u00a7](https://docs.rs/strum/latest/strum/#strum)Strum\n[![Build Status](https://travis-ci.org/Peternator7/strum.svg?branch=master)](https://travis-ci.org/Peternator7/strum) [![Latest Version](https://img.shields.io/crates/v/strum.svg)](https://crates.io/crates/strum) [![Rust Documentation](https://docs.rs/strum/badge.svg)](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on [GitHub](https://github.com/Peternator7/strum).\n## [\u00a7](https://docs.rs/strum/latest/strum/#including-strum-in-your-project)Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules[\u00a7](https://docs.rs/strum/latest/strum/#modules)\n\n[additional_attributes](https://docs.rs/strum/latest/strum/additional_attributes/index.html \"mod strum::additional_attributes\")\n    Documentation for Additional Attributes\n## Enums[\u00a7](https://docs.rs/strum/latest/strum/#enums)\n\n[ParseError](https://docs.rs/strum/latest/strum/enum.ParseError.html \"enum strum::ParseError\")\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits[\u00a7](https://docs.rs/strum/latest/strum/#traits)\n\n[AsStaticRef](https://docs.rs/strum/latest/strum/trait.AsStaticRef.html \"trait strum::AsStaticRef\")Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\n[EnumCount](https://docs.rs/strum/latest/strum/trait.EnumCount.html \"trait strum::EnumCount\")\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/trait.EnumMessage.html \"trait strum::EnumMessage\")\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/trait.EnumProperty.html \"trait strum::EnumProperty\")\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\n[IntoDiscriminant](https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html \"trait strum::IntoDiscriminant\")\n    A trait for retrieving the enum generated by [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\n[IntoEnumIterator](https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html \"trait strum::IntoEnumIterator\")\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the [`EnumIter`](https://docs.rs/strum/latest/strum/derive.EnumIter.html) derive macro.\n\n[VariantArray](https://docs.rs/strum/latest/strum/trait.VariantArray.html \"trait strum::VariantArray\")\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside [`EnumDiscriminants`](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\") if you require inner data but still want to have an static array of variants.\n\n[VariantIterator](https://docs.rs/strum/latest/strum/trait.VariantIterator.html \"trait strum::VariantIterator\")\n\n\n[VariantMetadata](https://docs.rs/strum/latest/strum/trait.VariantMetadata.html \"trait strum::VariantMetadata\")\n\n\n[VariantNames](https://docs.rs/strum/latest/strum/trait.VariantNames.html \"trait strum::VariantNames\")\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros[\u00a7](https://docs.rs/strum/latest/strum/#derives)\n\n[AsRefStr](https://docs.rs/strum/latest/strum/derive.AsRefStr.html \"derive strum::AsRefStr\")`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\n[Display](https://docs.rs/strum/latest/strum/derive.Display.html \"derive strum::Display\")`derive`\n    Converts enum variants to strings.\n\n[EnumCount](https://docs.rs/strum/latest/strum/derive.EnumCount.html \"derive strum::EnumCount\")`derive`\n    Add a constant `usize` equal to the number of variants.\n\n[EnumDiscriminants](https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html \"derive strum::EnumDiscriminants\")`derive`\n    Generate a new type with only the discriminant names.\n\n[EnumIs](https://docs.rs/strum/latest/strum/derive.EnumIs.html \"derive strum::EnumIs\")\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\n[EnumIter](https://docs.rs/strum/latest/strum/derive.EnumIter.html \"derive strum::EnumIter\")`derive`\n    Creates a new type that iterates over the variants of an enum.\n\n[EnumMessage](https://docs.rs/strum/latest/strum/derive.EnumMessage.html \"derive strum::EnumMessage\")`derive`\n    Add a verbose message to an enum variant.\n\n[EnumProperty](https://docs.rs/strum/latest/strum/derive.EnumProperty.html \"derive strum::EnumProperty\")`derive`\n    Add custom properties to enum variants.\n\n[EnumString](https://docs.rs/strum/latest/strum/derive.EnumString.html \"derive strum::EnumString\")`derive`\n    Converts strings to enum variants based on their name.\n\n[EnumTryAs](https://docs.rs/strum/latest/strum/derive.EnumTryAs.html \"derive strum::EnumTryAs\")\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\n[FromRepr](https://docs.rs/strum/latest/strum/derive.FromRepr.html \"derive strum::FromRepr\")`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\n[IntoStaticStr](https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html \"derive strum::IntoStaticStr\")`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\n[VariantArray](https://docs.rs/strum/latest/strum/derive.VariantArray.html \"derive strum::VariantArray\")`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\n[VariantNames](https://docs.rs/strum/latest/strum/derive.VariantNames.html \"derive strum::VariantNames\")`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
            "markdown_with_citations": "[](https://docs.rs/strum/latest/strum/all.html \"show sidebar\")\n# Crate strumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Strum\n![Build Status\u27e85\u27e9](https://travis-ci.org/Peternator7/strum) ![Latest Version\u27e86\u27e9](https://crates.io/crates/strum) ![Rust Documentation\u27e87\u27e9](https://docs.rs/strum)\nStrum is a set of macros and traits for working with enums and strings easier in Rust.\nThe full version of the README can be found on GitHub\u27e88\u27e9.\n## \u00a7\u27e89\u27e9Including Strum in Your Project\nImport strum and `strum_macros` into your project by adding the following lines to your Cargo.toml. `strum_macros` contains the macros needed to derive all the traits in Strum.\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n# You can also access strum_macros exports directly through strum using the \"derive\" feature\nstrum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n## Modules\u00a7\u27e810\u27e9\n\nadditional_attributes\u27e811\u27e9\n    Documentation for Additional Attributes\n## Enums\u00a7\u27e812\u27e9\n\nParseError\u27e813\u27e9\n    The `ParseError` enum is a collection of all the possible reasons an enum can fail to parse from a string.\n## Traits\u00a7\u27e814\u27e9\n\nAsStaticRef\u27e815\u27e9Deprecated\n    A cheap reference-to-reference conversion. Used to convert a value to a reference value with `'static` lifetime within generic code.\n\nEnumCount\u27e816\u27e9\n    A trait for capturing the number of variants in Enum. This trait can be autoderived by `strum_macros`.\n\nEnumMessage\u27e817\u27e9\n    Associates additional pieces of information with an Enum. This can be autoimplemented by deriving `EnumMessage` and annotating your variants with `#[strum(message=\"...\")]`.\n\nEnumProperty\u27e818\u27e9\n    `EnumProperty` is a trait that makes it possible to store additional information with enum variants. This trait is designed to be used with the macro of the same name in the `strum_macros` crate. Currently, the string, integer and bool literals are supported in attributes.\n\nIntoDiscriminant\u27e819\u27e9\n    A trait for retrieving the enum generated by `EnumDiscriminants`\u27e820\u27e9 from an associated Type on the original enumeration. This trait can be autoderived by `strum_macros`.\n\nIntoEnumIterator\u27e821\u27e9\n    This trait designates that an `Enum` can be iterated over. It can be auto generated using the `EnumIter`\u27e822\u27e9 derive macro.\n\nVariantArray\u27e823\u27e9\n    A trait for retrieving a static array containing all the variants in an Enum. This trait can be autoderived by `strum_macros`. For derived usage, all the variants in the enumerator need to be unit-types, which means you can\u2019t autoderive enums with inner data in one or more variants. Consider using it alongside `EnumDiscriminants`\u27e820\u27e9 if you require inner data but still want to have an static array of variants.\n\nVariantIterator\u27e824\u27e9\n\n\nVariantMetadata\u27e825\u27e9\n\n\nVariantNames\u27e826\u27e9\n    A trait for retrieving the names of each variant in Enum. This trait can be autoderived by `strum_macros`.\n## Derive Macros\u00a7\u27e827\u27e9\n\nAsRefStr\u27e828\u27e9`derive`\n    Converts enum variants to `&'a str`, where `'a` is the lifetime of the input enum reference.\n\nDisplay\u27e829\u27e9`derive`\n    Converts enum variants to strings.\n\nEnumCount\u27e830\u27e9`derive`\n    Add a constant `usize` equal to the number of variants.\n\nEnumDiscriminants\u27e820\u27e9`derive`\n    Generate a new type with only the discriminant names.\n\nEnumIs\u27e831\u27e9\n    Generated `is_*()` methods for each variant. E.g. `Color.is_red()`.\n\nEnumIter\u27e822\u27e9`derive`\n    Creates a new type that iterates over the variants of an enum.\n\nEnumMessage\u27e832\u27e9`derive`\n    Add a verbose message to an enum variant.\n\nEnumProperty\u27e833\u27e9`derive`\n    Add custom properties to enum variants.\n\nEnumString\u27e834\u27e9`derive`\n    Converts strings to enum variants based on their name.\n\nEnumTryAs\u27e835\u27e9\n    Generated `try_as_*()` methods for all tuple-style variants. E.g. `Message.try_as_write()`.\n\nFromRepr\u27e836\u27e9`derive`\n    Add a function to enum that allows accessing variants by its discriminant\n\nIntoStaticStr\u27e837\u27e9`derive`\n    Implements `From<MyEnum> for &'static str` on an enum.\n\nVariantArray\u27e838\u27e9`derive`\n    Adds a `'static` slice with all of the Enum\u2019s variants.\n\nVariantNames\u27e839\u27e9`derive`\n    Implements `Strum::VariantNames` which adds an associated constant `VARIANTS` which is a `'static` slice of discriminant names.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/strum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/strum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/strum/latest/src/strum/lib.rs.html#1-265: Source\n\u27e84\u27e9 https://docs.rs/strum/latest/strum/#strum: \u00a7\n\u27e85\u27e9 https://travis-ci.org/Peternator7/strum.svg?branch=master: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/strum.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/strum/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://github.com/Peternator7/strum: GitHub\n\u27e89\u27e9 https://docs.rs/strum/latest/strum/#including-strum-in-your-project: \u00a7\n\u27e810\u27e9 https://docs.rs/strum/latest/strum/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/strum/latest/strum/additional_attributes/index.html: mod strum::additional_attributes - additional_attributes\n\u27e812\u27e9 https://docs.rs/strum/latest/strum/#enums: \u00a7\n\u27e813\u27e9 https://docs.rs/strum/latest/strum/enum.ParseError.html: enum strum::ParseError - ParseError\n\u27e814\u27e9 https://docs.rs/strum/latest/strum/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/strum/latest/strum/trait.AsStaticRef.html: trait strum::AsStaticRef - AsStaticRef\n\u27e816\u27e9 https://docs.rs/strum/latest/strum/trait.EnumCount.html: trait strum::EnumCount - EnumCount\n\u27e817\u27e9 https://docs.rs/strum/latest/strum/trait.EnumMessage.html: trait strum::EnumMessage - EnumMessage\n\u27e818\u27e9 https://docs.rs/strum/latest/strum/trait.EnumProperty.html: trait strum::EnumProperty - EnumProperty\n\u27e819\u27e9 https://docs.rs/strum/latest/strum/trait.IntoDiscriminant.html: trait strum::IntoDiscriminant - IntoDiscriminant\n\u27e820\u27e9 https://docs.rs/strum/latest/strum/derive.EnumDiscriminants.html: derive strum::EnumDiscriminants - `EnumDiscriminants`\n\u27e821\u27e9 https://docs.rs/strum/latest/strum/trait.IntoEnumIterator.html: trait strum::IntoEnumIterator - IntoEnumIterator\n\u27e822\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIter.html: `EnumIter`\n\u27e823\u27e9 https://docs.rs/strum/latest/strum/trait.VariantArray.html: trait strum::VariantArray - VariantArray\n\u27e824\u27e9 https://docs.rs/strum/latest/strum/trait.VariantIterator.html: trait strum::VariantIterator - VariantIterator\n\u27e825\u27e9 https://docs.rs/strum/latest/strum/trait.VariantMetadata.html: trait strum::VariantMetadata - VariantMetadata\n\u27e826\u27e9 https://docs.rs/strum/latest/strum/trait.VariantNames.html: trait strum::VariantNames - VariantNames\n\u27e827\u27e9 https://docs.rs/strum/latest/strum/#derives: \u00a7\n\u27e828\u27e9 https://docs.rs/strum/latest/strum/derive.AsRefStr.html: derive strum::AsRefStr - AsRefStr\n\u27e829\u27e9 https://docs.rs/strum/latest/strum/derive.Display.html: derive strum::Display - Display\n\u27e830\u27e9 https://docs.rs/strum/latest/strum/derive.EnumCount.html: derive strum::EnumCount - EnumCount\n\u27e831\u27e9 https://docs.rs/strum/latest/strum/derive.EnumIs.html: derive strum::EnumIs - EnumIs\n\u27e832\u27e9 https://docs.rs/strum/latest/strum/derive.EnumMessage.html: derive strum::EnumMessage - EnumMessage\n\u27e833\u27e9 https://docs.rs/strum/latest/strum/derive.EnumProperty.html: derive strum::EnumProperty - EnumProperty\n\u27e834\u27e9 https://docs.rs/strum/latest/strum/derive.EnumString.html: derive strum::EnumString - EnumString\n\u27e835\u27e9 https://docs.rs/strum/latest/strum/derive.EnumTryAs.html: derive strum::EnumTryAs - EnumTryAs\n\u27e836\u27e9 https://docs.rs/strum/latest/strum/derive.FromRepr.html: derive strum::FromRepr - FromRepr\n\u27e837\u27e9 https://docs.rs/strum/latest/strum/derive.IntoStaticStr.html: derive strum::IntoStaticStr - IntoStaticStr\n\u27e838\u27e9 https://docs.rs/strum/latest/strum/derive.VariantArray.html: derive strum::VariantArray - VariantArray\n\u27e839\u27e9 https://docs.rs/strum/latest/strum/derive.VariantNames.html: derive strum::VariantNames - VariantNames\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `strum` crate provides a collection of macros and traits to simplify working with enums in Rust, enabling features like converting enums to strings, iterating over variants, associating additional metadata, and parsing strings into enums. Key derive macros include `EnumIter` for iteration, `EnumString` for parsing, `Display` for string conversion, and `VariantNames` for retrieving variant names. It is highly useful for enhancing enum functionality with minimal boilerplate.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Enum Iteration  \n\u2705 **Factual:** The `strum` crate allows enums to be iterated over by deriving the `EnumIter` macro from `strum_macros`. This can be useful for scenarios like generating dropdown options or iterating through enum variants in loops.  \n\u274c **Counterfactual:** The `strum` crate automatically enables enum iteration for all enums without requiring the use of the `EnumIter` macro.  \n\n---\n\n### Pair 2: Enum Variant Names  \n\u2705 **Factual:** By deriving the `VariantNames` macro, `strum` enables retrieval of the names of all enum variants as a static array of strings, which can be useful for debugging or serialization.  \n\u274c **Counterfactual:** The `VariantNames` macro in `strum` automatically converts enum variant names into their corresponding string representations at runtime instead of providing a static array.  \n\n---\n\n### Pair 3: Enum Properties  \n\u2705 **Factual:** The `EnumProperty` trait in `strum` allows developers to associate additional metadata with enum variants, such as strings, integers, or boolean literals, using annotations like `#[strum(property = \"value\")]`.  \n\u274c **Counterfactual:** The `EnumProperty` trait in `strum` requires manual implementation for each enum variant, as it does not support deriving metadata annotations via macros.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-2466624a-97d17ba2-1751263983",
      "timestamp": "2025-06-30T06:13:03.998890+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]