[
  {
    "execution_id": "exec-32801f5c-cdbaf544-1751259016",
    "timestamp": "2025-06-30T04:50:16.808019+00:00",
    "sacred_chain": {
      "input_data": "ron",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'ron' -> 'ron'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "ron",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/ron",
            "title": "ron v0.10.1",
            "content": {
              "raw_markdown": "#  ron v0.10.1\nRusty Object Notation \n  * [ #parser ](https://crates.io/keywords/parser)\n  * [ #serde ](https://crates.io/keywords/serde)\n  * [ #serialization ](https://crates.io/keywords/serialization)\n\n\n  * [ Readme ](https://crates.io/crates/ron)\n  * [ 34 Versions ](https://crates.io/crates/ron/versions)\n  * [ Dependencies ](https://crates.io/crates/ron/dependencies)\n  * [ Dependents ](https://crates.io/crates/ron/reverse_dependencies)\n\n\n## Metadata\n3 months ago \nv1.64.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n111 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ron\nOr add the following line to your Cargo.toml:\nron = \"0.10.1\"\n## Documentation\n[ docs.rs/ron ](https://docs.rs/ron/)\n## Repository\n[ github.com/ron-rs/ron ](https://github.com/ron-rs/ron)\n## Owners\n## Categories\n  * [Encoding](https://crates.io/categories/encoding)\n\n\n[ Report crate ](https://crates.io/support?crate=ron&inquire=crate-violation)\n### Stats Overview\n37,473,952 Downloads all time\n34 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  ron v0.10.1\nRusty Object Notation \n  *  #parser \u27e81\u27e9\n  *  #serde \u27e82\u27e9\n  *  #serialization \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  34 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n3 months ago \nv1.64.0 \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n111 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ron\nOr add the following line to your Cargo.toml:\nron = \"0.10.1\"\n## Documentation\n docs.rs/ron \u27e810\u27e9\n## Repository\n github.com/ron-rs/ron \u27e811\u27e9\n## Owners\n## Categories\n  * Encoding\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n37,473,952 Downloads all time\n34 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/parser:  #parser \n\u27e82\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e83\u27e9 https://crates.io/keywords/serialization:  #serialization \n\u27e84\u27e9 https://crates.io/crates/ron:  Readme \n\u27e85\u27e9 https://crates.io/crates/ron/versions:  34 Versions \n\u27e86\u27e9 https://crates.io/crates/ron/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/ron/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://docs.rs/ron/:  docs.rs/ron \n\u27e811\u27e9 https://github.com/ron-rs/ron:  github.com/ron-rs/ron \n\u27e812\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e813\u27e9 https://crates.io/support?crate=ron&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1201,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112806.7191577"
          },
          "docs_rs": {
            "url": "https://docs.rs/ron",
            "title": "Crate ronCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\n[Settings](https://docs.rs/ron/latest/settings.html)\n[Help](https://docs.rs/ron/latest/help.html)\nSummary[Source](https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34)\nExpand description\n## [\u00a7](https://docs.rs/ron/latest/ron/#rusty-object-notation)Rusty Object Notation\n[![MSRV](https://img.shields.io/badge/MSRV-1.64.0-orange)](https://github.com/ron-rs/ron) [![Crates.io](https://img.shields.io/crates/v/ron.svg)](https://crates.io/crates/ron) [![Docs](https://docs.rs/ron/badge.svg)](https://docs.rs/ron)\n[![CI](https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg)](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) [![Coverage](https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json)](https://ron-rs.github.io/ron/coverage/) [![Fuzzing](https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n[![Matrix](https://img.shields.io/matrix/ron-rs:matrix.org.svg)](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of [Serde\u2019s data model](https://serde.rs/data-model.html), so structs, enums, tuples, arrays, generic maps, and primitive values.\n### [\u00a7](https://docs.rs/ron/latest/ron/#example)Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#ron-syntax-overview)RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented [here](https://docs.rs/ron/latest/ron/docs/extensions.md).\n### [\u00a7](https://docs.rs/ron/latest/ron/#specification)Specification\nRON\u2019s formal and complete grammar is available [here](https://docs.rs/ron/latest/ron/docs/grammar.md).\nThere also is a very basic, work in progress specification available on [the wiki page](https://github.com/ron-rs/ron/wiki/Specification).\n### [\u00a7](https://docs.rs/ron/latest/ron/#why-ron)Why RON?\n#### [\u00a7](https://docs.rs/ron/latest/ron/#example-in-json)Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#same-example-in-ron)Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#quickstart)Quickstart\n#### [\u00a7](https://docs.rs/ron/latest/ron/#cargotoml)`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#mainrs)`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#tooling)Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| [intellij-ron](https://github.com/ron-rs/intellij-ron)  \nVS Code| [a5huynh/vscode-ron](https://github.com/a5huynh/vscode-ron)  \nSublime Text| [RON](https://packagecontrol.io/packages/RON)  \nAtom| [language-ron](https://atom.io/packages/language-ron)  \nVim| [ron-rs/ron.vim](https://github.com/ron-rs/ron.vim)  \nEMACS| [emacs-ron](https://chiselapp.com/user/Hutzdog/repository/ron-mode/home)  \n### [\u00a7](https://docs.rs/ron/latest/ron/#limitations)Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when [`deserialize_any`](https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any) is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(untagged)]`, i.e. untagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps [2](https://docs.rs/ron/latest/ron/#fn2)\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [3](https://docs.rs/ron/latest/ron/#fn3) and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a [new issue](https://github.com/ron-rs/ron/issues/new) if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n### [\u00a7](https://docs.rs/ron/latest/ron/#license)License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on enums. See [#451](https://github.com/ron-rs/ron/pull/451) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref1)\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s [`Visitor::expecting`](https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting) implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on structs. See [#455](https://github.com/ron-rs/ron/pull/455) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref2)\n  3. Most of these restrictions are currently blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183), which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. [\u21a9](https://docs.rs/ron/latest/ron/#fnref3)\n\n\n## Re-exports[\u00a7](https://docs.rs/ron/latest/ron/#reexports)\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules[\u00a7](https://docs.rs/ron/latest/ron/#modules)\n\n[de](https://docs.rs/ron/latest/ron/de/index.html \"mod ron::de\")\n\n\n[error](https://docs.rs/ron/latest/ron/error/index.html \"mod ron::error\")\n\n\n[extensions](https://docs.rs/ron/latest/ron/extensions/index.html \"mod ron::extensions\")\n\n\n[options](https://docs.rs/ron/latest/ron/options/index.html \"mod ron::options\")\n    Roundtrip serde Options module.\n\n[ser](https://docs.rs/ron/latest/ron/ser/index.html \"mod ron::ser\")\n\n\n[value](https://docs.rs/ron/latest/ron/value/index.html \"mod ron::value\")\n    Value module.\n",
              "markdown_with_citations": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rusty Object Notation\n![MSRV\u27e85\u27e9](https://github.com/ron-rs/ron) ![Crates.io\u27e86\u27e9](https://crates.io/crates/ron) ![Docs\u27e87\u27e9](https://docs.rs/ron)\n![CI\u27e88\u27e9](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) ![Coverage\u27e89\u27e9](https://ron-rs.github.io/ron/coverage/) ![Fuzzing\u27e810\u27e9](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n![Matrix\u27e811\u27e9](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of Serde\u2019s data model\u27e812\u27e9, so structs, enums, tuples, arrays, generic maps, and primitive values.\n### \u00a7\u27e813\u27e9Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### \u00a7\u27e814\u27e9RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented here\u27e815\u27e9.\n### \u00a7\u27e816\u27e9Specification\nRON\u2019s formal and complete grammar is available here\u27e817\u27e9.\nThere also is a very basic, work in progress specification available on the wiki page\u27e818\u27e9.\n### \u00a7\u27e819\u27e9Why RON?\n#### \u00a7\u27e820\u27e9Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### \u00a7\u27e821\u27e9Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### \u00a7\u27e822\u27e9Quickstart\n#### \u00a7\u27e823\u27e9`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### \u00a7\u27e824\u27e9`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### \u00a7\u27e825\u27e9Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| intellij-ron\u27e826\u27e9  \nVS Code| a5huynh/vscode-ron\u27e827\u27e9  \nSublime Text| RON\u27e828\u27e9  \nAtom| language-ron\u27e829\u27e9  \nVim| ron-rs/ron.vim\u27e830\u27e9  \nEMACS| emacs-ron\u27e831\u27e9  \n### \u00a7\u27e832\u27e9Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when `deserialize_any`\u27e833\u27e9 is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums 1\u27e834\u27e9\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums 1\u27e834\u27e9\n  * `#[serde(untagged)]`, i.e. untagged enums 1\u27e834\u27e9\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps 2\u27e835\u27e9\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply 3\u27e836\u27e9 and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a new issue\u27e837\u27e9 if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on serde#1183\u27e838\u27e9.\n### \u00a7\u27e839\u27e9License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived `Deserialize`\u27e840\u27e9 impls on enums. See #451\u27e841\u27e9 for more details. \u21a9\u27e842\u27e9\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s `Visitor::expecting`\u27e843\u27e9 implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived `Deserialize`\u27e840\u27e9 impls on structs. See #455\u27e844\u27e9 for more details. \u21a9\u27e845\u27e9\n  3. Most of these restrictions are currently blocked on serde#1183\u27e838\u27e9, which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. \u21a9\u27e846\u27e9\n\n\n## Re-exports\u00a7\u27e847\u27e9\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules\u00a7\u27e848\u27e9\n\nde\u27e849\u27e9\n\n\nerror\u27e850\u27e9\n\n\nextensions\u27e851\u27e9\n\n\noptions\u27e852\u27e9\n    Roundtrip serde Options module.\n\nser\u27e853\u27e9\n\n\nvalue\u27e854\u27e9\n    Value module.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34: Source\n\u27e84\u27e9 https://docs.rs/ron/latest/ron/#rusty-object-notation: \u00a7\n\u27e85\u27e9 https://img.shields.io/badge/MSRV-1.64.0-orange: ![MSRV\n\u27e86\u27e9 https://img.shields.io/crates/v/ron.svg: ![Crates.io\n\u27e87\u27e9 https://docs.rs/ron/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg: ![CI\n\u27e89\u27e9 https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json: ![Coverage\n\u27e810\u27e9 https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg: ![Fuzzing\n\u27e811\u27e9 https://img.shields.io/matrix/ron-rs:matrix.org.svg: ![Matrix\n\u27e812\u27e9 https://serde.rs/data-model.html: Serde\u2019s data model\n\u27e813\u27e9 https://docs.rs/ron/latest/ron/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/ron/latest/ron/#ron-syntax-overview: \u00a7\n\u27e815\u27e9 https://docs.rs/ron/latest/ron/docs/extensions.md: here\n\u27e816\u27e9 https://docs.rs/ron/latest/ron/#specification: \u00a7\n\u27e817\u27e9 https://docs.rs/ron/latest/ron/docs/grammar.md: here\n\u27e818\u27e9 https://github.com/ron-rs/ron/wiki/Specification: the wiki page\n\u27e819\u27e9 https://docs.rs/ron/latest/ron/#why-ron: \u00a7\n\u27e820\u27e9 https://docs.rs/ron/latest/ron/#example-in-json: \u00a7\n\u27e821\u27e9 https://docs.rs/ron/latest/ron/#same-example-in-ron: \u00a7\n\u27e822\u27e9 https://docs.rs/ron/latest/ron/#quickstart: \u00a7\n\u27e823\u27e9 https://docs.rs/ron/latest/ron/#cargotoml: \u00a7\n\u27e824\u27e9 https://docs.rs/ron/latest/ron/#mainrs: \u00a7\n\u27e825\u27e9 https://docs.rs/ron/latest/ron/#tooling: \u00a7\n\u27e826\u27e9 https://github.com/ron-rs/intellij-ron: intellij-ron\n\u27e827\u27e9 https://github.com/a5huynh/vscode-ron: a5huynh/vscode-ron\n\u27e828\u27e9 https://packagecontrol.io/packages/RON: RON\n\u27e829\u27e9 https://atom.io/packages/language-ron: language-ron\n\u27e830\u27e9 https://github.com/ron-rs/ron.vim: ron-rs/ron.vim\n\u27e831\u27e9 https://chiselapp.com/user/Hutzdog/repository/ron-mode/home: emacs-ron\n\u27e832\u27e9 https://docs.rs/ron/latest/ron/#limitations: \u00a7\n\u27e833\u27e9 https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any: `deserialize_any`\n\u27e834\u27e9 https://docs.rs/ron/latest/ron/#fn1: 1\n\u27e835\u27e9 https://docs.rs/ron/latest/ron/#fn2: 2\n\u27e836\u27e9 https://docs.rs/ron/latest/ron/#fn3: 3\n\u27e837\u27e9 https://github.com/ron-rs/ron/issues/new: new issue\n\u27e838\u27e9 https://github.com/serde-rs/serde/issues/1183: serde#1183\n\u27e839\u27e9 https://docs.rs/ron/latest/ron/#license: \u00a7\n\u27e840\u27e9 https://docs.rs/serde/latest/serde/de/trait.Deserialize.html: `Deserialize`\n\u27e841\u27e9 https://github.com/ron-rs/ron/pull/451: #451\n\u27e842\u27e9 https://docs.rs/ron/latest/ron/#fnref1: \u21a9\n\u27e843\u27e9 https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting: `Visitor::expecting`\n\u27e844\u27e9 https://github.com/ron-rs/ron/pull/455: #455\n\u27e845\u27e9 https://docs.rs/ron/latest/ron/#fnref2: \u21a9\n\u27e846\u27e9 https://docs.rs/ron/latest/ron/#fnref3: \u21a9\n\u27e847\u27e9 https://docs.rs/ron/latest/ron/#reexports: \u00a7\n\u27e848\u27e9 https://docs.rs/ron/latest/ron/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/ron/latest/ron/de/index.html: mod ron::de - de\n\u27e850\u27e9 https://docs.rs/ron/latest/ron/error/index.html: mod ron::error - error\n\u27e851\u27e9 https://docs.rs/ron/latest/ron/extensions/index.html: mod ron::extensions - extensions\n\u27e852\u27e9 https://docs.rs/ron/latest/ron/options/index.html: mod ron::options - options\n\u27e853\u27e9 https://docs.rs/ron/latest/ron/ser/index.html: mod ron::ser - ser\n\u27e854\u27e9 https://docs.rs/ron/latest/ron/value/index.html: mod ron::value - value\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13507,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112807.3892547"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/ron",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [32 releases](https://lib.rs/crates/ron/versions)\n0.10.1 |  Apr 8, 2025   \n---|---  \n0.9.0 |  Mar 18, 2025   \n0.9.0-alpha.0 |  Mar 9, 2024   \n0.8.1 |  Aug 17, 2023   \n0.0.1 |  Jul 30, 2017   \n#**11** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 821853/week @ 2025-03-09 1025154/week @ 2025-03-16 1223834/week @ 2025-03-23 673354/week @ 2025-03-30 699919/week @ 2025-04-06 550323/week @ 2025-04-13 494503/week @ 2025-04-20 499347/week @ 2025-04-27 522732/week @ 2025-05-04 489350/week @ 2025-05-11 480019/week @ 2025-05-18 423183/week @ 2025-05-25 463694/week @ 2025-06-01 469660/week @ 2025-06-08 468254/week @ 2025-06-15 513638/week @ 2025-06-22\n**1,947,250** downloads per month Used in [**3,012** crates (659 directly)](https://lib.rs/crates/ron/rev)\n**MIT/Apache**\n300KB  7.5K  SLoC\n# Rusty Object Notation\n[![MSRV](https://img.shields.io/badge/MSRV-1.64.0-orange)](https://github.com/ron-rs/ron) [![Crates.io](https://img.shields.io/crates/v/ron.svg)](https://crates.io/crates/ron) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/ron/badge.svg)](https://docs.rs/ron)\n[![CI](https://img.gs/czjpqfbdkz/full/https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg)](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) [![Coverage](https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json)](https://ron-rs.github.io/ron/coverage/) [![Fuzzing](https://img.gs/czjpqfbdkz/full/https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n[![Matrix](https://img.shields.io/matrix/ron-rs:matrix.org.svg)](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It's designed to support all of [Serde's data model](https://serde.rs/data-model.html), so structs, enums, tuples, arrays, generic maps, and primitive values.\n## Example\n```\n`GameConfig`(` ``//` optional struct name`\n  window_size`:` `(``800``,` `600``)``,`\n  window_title`:` ``\"`PAC-MAN`\"```,`\n  fullscreen`:` `false``,`\n  mouse_sensitivity`:` `1.``4``,`\n  key_bindings`:` ``{`\n    ``\"`up`\"```:` Up`,`\n    ``\"`down`\"```:` Down`,`\n    ``\"`left`\"```:` Left`,`\n    ``\"`right`\"```:` Right`,`\n    ``//` Uncomment to enable WASD controls`\n    ``/*`\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    `*/``\n  ```}```,`\n  difficulty_options`:` `(`\n    start_difficulty`:` Easy`,`\n    adaptive`:` `false``,`\n  `)``,`\n`)`\n`\n```\n\n## RON syntax overview\n  * Numbers: ```42```, ```3.``14```, ```0xFF```, ```0b0110```\n  * Strings: ````\"`Hello`\"````, ````\"`with`\\\\`escapes`\\n``\"````, ````r``#\"`raw string, great for regex\\.`\"#````\n  * Byte Strings: ````b``\"`Hello`\"````, ````b``\"`with `\\x65``\\x73``\\x63``\\x61``\\x70``\\x65``\\x73``\\n``\"````, ````br``#`\"raw, too`\"#````\n  * Booleans: ```true```, ```false```\n  * Chars: ````'`e`'````, ````'``\\n``'````\n  * Optionals: ```Some``(```\"`string`\"```)```, ```Some``(``Some``(``1.``34``)``)```, ```None```\n  * Tuples: ```(```\"`abc`\"```,` `1.``23``,` `true``)```, ```(``)```\n  * Lists: ```[```\"`abc`\"```,` ``\"`def`\"```]```\n  * Structs: ```(` foo`:` `1.``0``,` bar`:` `(` baz`:` ``\"`I'm nested`\"`` `)` `)```\n  * Maps: ````{` ``\"`arbitrary`\"```:` ``\"`keys`\"```,` ``\"`are`\"```:` ``\"`allowed`\"`` ```}````\n\n\n> **Note:** Serde's data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented [here](https://github.com/ron-rs/ron/blob/ce6b094b2f027fa83655cda80831b6515d5a882d/docs/extensions.md).\n## Specification\nRON's formal and complete grammar is available [here](https://github.com/ron-rs/ron/blob/ce6b094b2f027fa83655cda80831b6515d5a882d/docs/grammar.md).\nThere also is a very basic, work in progress specification available on [the wiki page](https://github.com/ron-rs/ron/wiki/Specification).\n## Why RON?\n### Example in JSON\n```\n```{`\n  ````\"`materials`\"`````:` ```{`\n````\"`metal`\"`````:` ```{`\n  ````\"`reflectivity`\"`````:` ``1`.`0``\n    `}``,`\n```\"`plastic`\"````:` ```{`\n  ````\"`reflectivity`\"`````:` ``0`.`5``\n    `}`\n  `}``,`\n  ```\"`entities`\"````:` ```[`\n    ``{`\n  ````\"`name`\"``````:` ```\"`hero`\"````,`\n  ```\"`material`\"````:` ```\"`metal`\"```\n    `}``,`\n    ``{`\n  ````\"`name`\"````:` ```\"`monster`\"````,`\n  ```\"`material`\"````:` ```\"`plastic`\"```\n    `}`\n  `]`\n`}`\n\n```\n\n### Same example in RON\n```\n`Scene`(` ``//` class name is optional`\n  materials`:` ``{` ``//` this is a map`\n    ``\"`metal`\"```:` `(`\n      reflectivity`:` `1.``0``,`\n    `)``,`\n    ``\"`plastic`\"```:` `(`\n      reflectivity`:` `0.``5``,`\n    `)``,`\n  ```}```,`\n  entities`:` `[` ``//` this is an array`\n    `(`\n      name`:` ``\"`hero`\"```,`\n      material`:` ``\"`metal`\"```,`\n    `)``,`\n    `(`\n      name`:` ``\"`monster`\"```,`\n      material`:` ``\"`plastic`\"```,`\n    `)``,`\n  `]``,`\n`)`\n`\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren't quoted, so it's less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n## Quickstart\n### ``Cargo.toml``\n```\n```[``dependencies``]`\n`ron ``=` ``\"`0.8`\"``\n`serde = { version = \"1\", features ``=` ``[```\"`derive`\"```]`` }\n``\n```\n\n### ``main.rs``\n```\n``use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``derive```(```Debug`,` Deserialize`,` Serialize```)```]``\n``struct` ```MyStruct` ````{`\n  `boolean``:` `bool`,\n  `float``:` `f32`,\n```}```\n``fn` `main`````(````)``````{`\n  `let` x`:` MyStruct `=` `ron`::``from_str`(```\"`(boolean: true, float: 1.23)`\"```)``.``unwrap``(``)``;`\n  `println!``(```\"`RON: `{}``\"```,` `ron`::``to_string`(``&`x`)``.``unwrap``(``)``)``;`\n  `println!``(```\"`Pretty RON: `{}``\"```,` `ron`::```ser`::``to_string_pretty`(`\n    `&`x`,` `ron`::```ser`::```PrettyConfig`::``default`(``)``)``.``unwrap``(``)``,`\n  `)``;`\n```}```\n`\n```\n\n## Tooling\nEditor | Plugin  \n---|---  \nIntelliJ | [intellij-ron](https://github.com/ron-rs/intellij-ron)  \nVS Code | [a5huynh/vscode-ron](https://github.com/a5huynh/vscode-ron)  \nSublime Text | [RON](https://packagecontrol.io/packages/RON)  \nAtom | [language-ron](https://atom.io/packages/language-ron)  \nVim | [ron-rs/ron.vim](https://github.com/ron-rs/ron.vim)  \nEMACS | [emacs-ron](https://chiselapp.com/user/Hutzdog/repository/ron-mode/home)  \n## Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by ````#``[``serde```(```rename `=` ``\"`...`\"`````)```]```` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when [``deserialize_any``](https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any) is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * ````#``[``serde```(```tag `=` ``\"`tag`\"`````)```]````, i.e. internally tagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```tag `=` ``\"`tag`\"```,` content `=` ``\"`content`\"`````)```]````, i.e. adjacently tagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```untagged```)```]````, i.e. untagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```flatten```)```]````, i.e. flattening of structs into maps [^serde-flatten-hack]\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [^serde-restrictions] and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * struct names, e.g. by enabling the ````#``[``enable```(```explicit_struct_names```)```]```` extension or the ```PrettyConfig`::``struct_names`` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * ```Option```s with ````#``[``enable```(```implicit_some```)```]```` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with ````#``[``enable```(```unwrap_variant_newtypes```)```]```` (including ```Some```)\n    * a ```ron`::```value`::``RawValue``\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the ````#!``[``enable```(```unwrap_variant_newtypes```)```]```` extension is enabled\n  * serializing a ```ron`::```value`::``RawValue`` using a ``PrettyConfig`` may add leading and trailing whitespace and comments, which the ```ron`::```value`::``RawValue`` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a ````#``[``serde```(```flatten```)```]````ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) ````#``[``serde```(```flatten```)```]````ed map field, which collects all unknown fields\n    * if they contain a ````#``[``serde```(```flatten```)```]````ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * ```i128``` or ```u128``` values\n  * internally tagged newtype variants and ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are ````#``[``serde```(```flatten```)```]````ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for ````#``[``serde```(```flatten```)```]````, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde's behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a [new issue](https://github.com/ron-rs/ron/issues/new) if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-``deserialize_any``-based implementations, RON does not yet make any guarantees about roundtrips through ```ron`::``Value``. For instance, even when RON -> Rust works, RON -> ```ron`::``Value`` -> Rust, or RON -> ```ron`::``Value`` -> RON -> Rust may not work. We plan on improving ```ron`::``Value`` in an upcoming version of RON, though this work is partially blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n[^serde-enum-hack]: Deserialising an internally, adjacently, or un-tagged enum requires detecting ``serde``'s internal ```serde`::```__private`::```de`::```content`::``Content`` content type so that RON can describe the deserialised data structure in serde's internal JSON-like format. This detection only works for the automatically-derived [``Deserialize``](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on enums. See [#451](https://github.com/ron-rs/ron/pull/451) for more details.\n[^serde-flatten-hack]: Deserialising a flattened struct from a map requires that the struct's [```Visitor`::``expecting``](https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting) implementation formats a string starting with ````\"`struct `\"````. This is the case for automatically-derived [``Deserialize``](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on structs. See [#455](https://github.com/ron-rs/ron/pull/455) for more details.\n[^serde-restrictions]: Most of these restrictions are currently blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183), which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or ````#``[``serde```(```flatten```)```]````ed fields.\n## License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n#### Dependencies\n~0.5\u20131.3MB  ~29K SLoC\n  * [base64](https://lib.rs/crates/base64 \"new\") 0.22[+std](https://lib.rs/crates/base64/features#feature-std)\n  * [bitflags](https://lib.rs/crates/bitflags \"new\") 2.1[+serde](https://lib.rs/crates/bitflags/features#feature-serde)\n  * [ optional ](https://lib.rs/crates/ron/features#feature-indexmap \"indexmap is optional feature\") [indexmap](https://lib.rs/crates/indexmap \"new\") 2.0[+std](https://lib.rs/crates/indexmap/features#feature-std)[+serde](https://lib.rs/crates/indexmap/features#feature-serde)\n  * [serde](https://lib.rs/crates/serde \"1.0.181\")[+std](https://lib.rs/crates/serde/features#feature-std)\n  * [serde_derive](https://lib.rs/crates/serde_derive \"1.0.181\")\n  * [unicode-ident](https://lib.rs/crates/unicode-ident \"1.0\")\n\n\n  * dev  [bytes](https://lib.rs/crates/bytes \"1.3\")[+serde](https://lib.rs/crates/bytes/features#feature-serde)\n  * dev  [option_set](https://lib.rs/crates/option_set \"0.3\")\n  * dev  [serde_bytes](https://lib.rs/crates/serde_bytes \"0.11\")[+std](https://lib.rs/crates/serde_bytes/features#feature-std)\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0.60\")[+std](https://lib.rs/crates/serde_json/features#feature-std)\n  * dev  [typetag](https://lib.rs/crates/typetag \"0.2\")\n\n\n#### [Other feature](https://lib.rs/crates/ron/features)\n  * [integer128](https://lib.rs/crates/ron/features#feature-integer128)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  32 releases\u27e81\u27e9\n0.10.1 |  Apr 8, 2025   \n---|---  \n0.9.0 |  Mar 18, 2025   \n0.9.0-alpha.0 |  Mar 9, 2024   \n0.8.1 |  Aug 17, 2023   \n0.0.1 |  Jul 30, 2017   \n#**11** in Encoding\u27e82\u27e9\nDownload history 821853/week @ 2025-03-09 1025154/week @ 2025-03-16 1223834/week @ 2025-03-23 673354/week @ 2025-03-30 699919/week @ 2025-04-06 550323/week @ 2025-04-13 494503/week @ 2025-04-20 499347/week @ 2025-04-27 522732/week @ 2025-05-04 489350/week @ 2025-05-11 480019/week @ 2025-05-18 423183/week @ 2025-05-25 463694/week @ 2025-06-01 469660/week @ 2025-06-08 468254/week @ 2025-06-15 513638/week @ 2025-06-22\n**1,947,250** downloads per month Used in **3,012** crates (659 directly)\u27e83\u27e9\n**MIT/Apache**\n300KB  7.5K  SLoC\n# Rusty Object Notation\n![MSRV\u27e84\u27e9](https://github.com/ron-rs/ron) ![Crates.io\u27e85\u27e9](https://crates.io/crates/ron) ![Docs\u27e86\u27e9](https://docs.rs/ron)\n![CI\u27e87\u27e9](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) ![Coverage\u27e88\u27e9](https://ron-rs.github.io/ron/coverage/) ![Fuzzing\u27e89\u27e9](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n![Matrix\u27e810\u27e9](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It's designed to support all of Serde's data model\u27e811\u27e9, so structs, enums, tuples, arrays, generic maps, and primitive values.\n## Example\n```\n`GameConfig`(` ``//` optional struct name`\n  window_size`:` `(``800``,` `600``)``,`\n  window_title`:` ``\"`PAC-MAN`\"```,`\n  fullscreen`:` `false``,`\n  mouse_sensitivity`:` `1.``4``,`\n  key_bindings`:` ``{`\n    ``\"`up`\"```:` Up`,`\n    ``\"`down`\"```:` Down`,`\n    ``\"`left`\"```:` Left`,`\n    ``\"`right`\"```:` Right`,`\n    ``//` Uncomment to enable WASD controls`\n    ``/*`\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    `*/``\n  ```}```,`\n  difficulty_options`:` `(`\n    start_difficulty`:` Easy`,`\n    adaptive`:` `false``,`\n  `)``,`\n`)`\n`\n```\n\n## RON syntax overview\n  * Numbers: ```42```, ```3.``14```, ```0xFF```, ```0b0110```\n  * Strings: ````\"`Hello`\"````, ````\"`with`\\\\`escapes`\\n``\"````, ````r``#\"`raw string, great for regex\\.`\"#````\n  * Byte Strings: ````b``\"`Hello`\"````, ````b``\"`with `\\x65``\\x73``\\x63``\\x61``\\x70``\\x65``\\x73``\\n``\"````, ````br``#`\"raw, too`\"#````\n  * Booleans: ```true```, ```false```\n  * Chars: ````'`e`'````, ````'``\\n``'````\n  * Optionals: ```Some``(```\"`string`\"```)```, ```Some``(``Some``(``1.``34``)``)```, ```None```\n  * Tuples: ```(```\"`abc`\"```,` `1.``23``,` `true``)```, ```(``)```\n  * Lists: ```[```\"`abc`\"```,` ``\"`def`\"```]```\n  * Structs: ```(` foo`:` `1.``0``,` bar`:` `(` baz`:` ``\"`I'm nested`\"`` `)` `)```\n  * Maps: ````{` ``\"`arbitrary`\"```:` ``\"`keys`\"```,` ``\"`are`\"```:` ``\"`allowed`\"`` ```}````\n\n\n> **Note:** Serde's data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented here\u27e812\u27e9.\n## Specification\nRON's formal and complete grammar is available here\u27e813\u27e9.\nThere also is a very basic, work in progress specification available on the wiki page\u27e814\u27e9.\n## Why RON?\n### Example in JSON\n```\n```{`\n  ````\"`materials`\"`````:` ```{`\n````\"`metal`\"`````:` ```{`\n  ````\"`reflectivity`\"`````:` ``1`.`0``\n    `}``,`\n```\"`plastic`\"````:` ```{`\n  ````\"`reflectivity`\"`````:` ``0`.`5``\n    `}`\n  `}``,`\n  ```\"`entities`\"````:` ```[`\n    ``{`\n  ````\"`name`\"``````:` ```\"`hero`\"````,`\n  ```\"`material`\"````:` ```\"`metal`\"```\n    `}``,`\n    ``{`\n  ````\"`name`\"````:` ```\"`monster`\"````,`\n  ```\"`material`\"````:` ```\"`plastic`\"```\n    `}`\n  `]`\n`}`\n\n```\n\n### Same example in RON\n```\n`Scene`(` ``//` class name is optional`\n  materials`:` ``{` ``//` this is a map`\n    ``\"`metal`\"```:` `(`\n      reflectivity`:` `1.``0``,`\n    `)``,`\n    ``\"`plastic`\"```:` `(`\n      reflectivity`:` `0.``5``,`\n    `)``,`\n  ```}```,`\n  entities`:` `[` ``//` this is an array`\n    `(`\n      name`:` ``\"`hero`\"```,`\n      material`:` ``\"`metal`\"```,`\n    `)``,`\n    `(`\n      name`:` ``\"`monster`\"```,`\n      material`:` ``\"`plastic`\"```,`\n    `)``,`\n  `]``,`\n`)`\n`\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren't quoted, so it's less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n## Quickstart\n### ``Cargo.toml``\n```\n```[``dependencies``]`\n`ron ``=` ``\"`0.8`\"``\n`serde = { version = \"1\", features ``=` ``[```\"`derive`\"```]`` }\n``\n```\n\n### ``main.rs``\n```\n``use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``derive```(```Debug`,` Deserialize`,` Serialize```)```]``\n``struct` ```MyStruct` ````{`\n  `boolean``:` `bool`,\n  `float``:` `f32`,\n```}```\n``fn` `main`````(````)``````{`\n  `let` x`:` MyStruct `=` `ron`::``from_str`(```\"`(boolean: true, float: 1.23)`\"```)``.``unwrap``(``)``;`\n  `println!``(```\"`RON: `{}``\"```,` `ron`::``to_string`(``&`x`)``.``unwrap``(``)``)``;`\n  `println!``(```\"`Pretty RON: `{}``\"```,` `ron`::```ser`::``to_string_pretty`(`\n    `&`x`,` `ron`::```ser`::```PrettyConfig`::``default`(``)``)``.``unwrap``(``)``,`\n  `)``;`\n```}```\n`\n```\n\n## Tooling\nEditor | Plugin  \n---|---  \nIntelliJ | intellij-ron\u27e815\u27e9  \nVS Code | a5huynh/vscode-ron\u27e816\u27e9  \nSublime Text | RON\u27e817\u27e9  \nAtom | language-ron\u27e818\u27e9  \nVim | ron-rs/ron.vim\u27e819\u27e9  \nEMACS | emacs-ron\u27e820\u27e9  \n## Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by ````#``[``serde```(```rename `=` ``\"`...`\"`````)```]```` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when ``deserialize_any``\u27e821\u27e9 is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * ````#``[``serde```(```tag `=` ``\"`tag`\"`````)```]````, i.e. internally tagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```tag `=` ``\"`tag`\"```,` content `=` ``\"`content`\"`````)```]````, i.e. adjacently tagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```untagged```)```]````, i.e. untagged enums [^serde-enum-hack]\n  * ````#``[``serde```(```flatten```)```]````, i.e. flattening of structs into maps [^serde-flatten-hack]\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [^serde-restrictions] and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * struct names, e.g. by enabling the ````#``[``enable```(```explicit_struct_names```)```]```` extension or the ```PrettyConfig`::``struct_names`` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * ```Option```s with ````#``[``enable```(```implicit_some```)```]```` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with ````#``[``enable```(```unwrap_variant_newtypes```)```]```` (including ```Some```)\n    * a ```ron`::```value`::``RawValue``\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the ````#!``[``enable```(```unwrap_variant_newtypes```)```]```` extension is enabled\n  * serializing a ```ron`::```value`::``RawValue`` using a ``PrettyConfig`` may add leading and trailing whitespace and comments, which the ```ron`::```value`::``RawValue`` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a ````#``[``serde```(```flatten```)```]````ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) ````#``[``serde```(```flatten```)```]````ed map field, which collects all unknown fields\n    * if they contain a ````#``[``serde```(```flatten```)```]````ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * ```i128``` or ```u128``` values\n  * internally tagged newtype variants and ````#``[``serde```(```flatten```)```]````ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are ````#``[``serde```(```flatten```)```]````ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for ````#``[``serde```(```flatten```)```]````, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde's behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a new issue\u27e822\u27e9 if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-``deserialize_any``-based implementations, RON does not yet make any guarantees about roundtrips through ```ron`::``Value``. For instance, even when RON -> Rust works, RON -> ```ron`::``Value`` -> Rust, or RON -> ```ron`::``Value`` -> RON -> Rust may not work. We plan on improving ```ron`::``Value`` in an upcoming version of RON, though this work is partially blocked on serde#1183\u27e823\u27e9.\n[^serde-enum-hack]: Deserialising an internally, adjacently, or un-tagged enum requires detecting ``serde``'s internal ```serde`::```__private`::```de`::```content`::``Content`` content type so that RON can describe the deserialised data structure in serde's internal JSON-like format. This detection only works for the automatically-derived ``Deserialize``\u27e824\u27e9 impls on enums. See #451\u27e825\u27e9 for more details.\n[^serde-flatten-hack]: Deserialising a flattened struct from a map requires that the struct's ```Visitor`::``expecting``\u27e826\u27e9 implementation formats a string starting with ````\"`struct `\"````. This is the case for automatically-derived ``Deserialize``\u27e824\u27e9 impls on structs. See #455\u27e827\u27e9 for more details.\n[^serde-restrictions]: Most of these restrictions are currently blocked on serde#1183\u27e823\u27e9, which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or ````#``[``serde```(```flatten```)```]````ed fields.\n## License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n#### Dependencies\n~0.5\u20131.3MB  ~29K SLoC\n  * base64\u27e828\u27e9 0.22+std\u27e829\u27e9\n  * bitflags\u27e830\u27e9 2.1+serde\u27e831\u27e9\n  *  optional \u27e832\u27e9 indexmap\u27e833\u27e9 2.0+std\u27e834\u27e9+serde\u27e835\u27e9\n  * serde\u27e836\u27e9+std\u27e837\u27e9\n  * serde_derive\u27e838\u27e9\n  * unicode-ident\u27e839\u27e9\n\n\n  * dev  bytes\u27e840\u27e9+serde\u27e841\u27e9\n  * dev  option_set\u27e842\u27e9\n  * dev  serde_bytes\u27e843\u27e9+std\u27e844\u27e9\n  * dev  serde_json\u27e845\u27e9+std\u27e846\u27e9\n  * dev  typetag\u27e847\u27e9\n\n\n#### Other feature\u27e848\u27e9\n  * integer128\u27e849\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/ron/versions: 32 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/ron/rev: **3,012** crates (659 directly)\n\u27e84\u27e9 https://img.shields.io/badge/MSRV-1.64.0-orange: ![MSRV\n\u27e85\u27e9 https://img.shields.io/crates/v/ron.svg: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/ron/badge.svg: ![Docs\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg: ![CI\n\u27e88\u27e9 https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json: ![Coverage\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg: ![Fuzzing\n\u27e810\u27e9 https://img.shields.io/matrix/ron-rs:matrix.org.svg: ![Matrix\n\u27e811\u27e9 https://serde.rs/data-model.html: Serde's data model\n\u27e812\u27e9 https://github.com/ron-rs/ron/blob/ce6b094b2f027fa83655cda80831b6515d5a882d/docs/extensions.md: here\n\u27e813\u27e9 https://github.com/ron-rs/ron/blob/ce6b094b2f027fa83655cda80831b6515d5a882d/docs/grammar.md: here\n\u27e814\u27e9 https://github.com/ron-rs/ron/wiki/Specification: the wiki page\n\u27e815\u27e9 https://github.com/ron-rs/intellij-ron: intellij-ron\n\u27e816\u27e9 https://github.com/a5huynh/vscode-ron: a5huynh/vscode-ron\n\u27e817\u27e9 https://packagecontrol.io/packages/RON: RON\n\u27e818\u27e9 https://atom.io/packages/language-ron: language-ron\n\u27e819\u27e9 https://github.com/ron-rs/ron.vim: ron-rs/ron.vim\n\u27e820\u27e9 https://chiselapp.com/user/Hutzdog/repository/ron-mode/home: emacs-ron\n\u27e821\u27e9 https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any: ``deserialize_any``\n\u27e822\u27e9 https://github.com/ron-rs/ron/issues/new: new issue\n\u27e823\u27e9 https://github.com/serde-rs/serde/issues/1183: serde#1183\n\u27e824\u27e9 https://docs.rs/serde/latest/serde/de/trait.Deserialize.html: ``Deserialize``\n\u27e825\u27e9 https://github.com/ron-rs/ron/pull/451: #451\n\u27e826\u27e9 https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting: ```Visitor`::``expecting``\n\u27e827\u27e9 https://github.com/ron-rs/ron/pull/455: #455\n\u27e828\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e829\u27e9 https://lib.rs/crates/base64/features#feature-std: +std\n\u27e830\u27e9 https://lib.rs/crates/bitflags: new - bitflags\n\u27e831\u27e9 https://lib.rs/crates/bitflags/features#feature-serde: +serde\n\u27e832\u27e9 https://lib.rs/crates/ron/features#feature-indexmap: indexmap is optional feature -  optional \n\u27e833\u27e9 https://lib.rs/crates/indexmap: new - indexmap\n\u27e834\u27e9 https://lib.rs/crates/indexmap/features#feature-std: +std\n\u27e835\u27e9 https://lib.rs/crates/indexmap/features#feature-serde: +serde\n\u27e836\u27e9 https://lib.rs/crates/serde: 1.0.181 - serde\n\u27e837\u27e9 https://lib.rs/crates/serde/features#feature-std: +std\n\u27e838\u27e9 https://lib.rs/crates/serde_derive: 1.0.181 - serde_derive\n\u27e839\u27e9 https://lib.rs/crates/unicode-ident: 1.0 - unicode-ident\n\u27e840\u27e9 https://lib.rs/crates/bytes: 1.3 - bytes\n\u27e841\u27e9 https://lib.rs/crates/bytes/features#feature-serde: +serde\n\u27e842\u27e9 https://lib.rs/crates/option_set: 0.3 - option_set\n\u27e843\u27e9 https://lib.rs/crates/serde_bytes: 0.11 - serde_bytes\n\u27e844\u27e9 https://lib.rs/crates/serde_bytes/features#feature-std: +std\n\u27e845\u27e9 https://lib.rs/crates/serde_json: 1.0.60 - serde_json\n\u27e846\u27e9 https://lib.rs/crates/serde_json/features#feature-std: +std\n\u27e847\u27e9 https://lib.rs/crates/typetag: 0.2 - typetag\n\u27e848\u27e9 https://lib.rs/crates/ron/features: Other feature\n\u27e849\u27e9 https://lib.rs/crates/ron/features#feature-integer128: integer128\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14688,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112807.8652248"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libbase64-27a5ce1ec30f0140.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-462ae4e9848053e1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-462ae4e9848053e1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-b7e0d514e93e145a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-b7e0d514e93e145a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-6c717f2dd3f9a3ac\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-2fb4bbb858fdd513\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libproc_macro2-6666de978b9efac4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libproc_macro2-6666de978b9efac4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libquote-4915e83a285acbbf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libquote-4915e83a285acbbf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libserde-a68fd74724556396.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libbitflags-bab5739bef7c7c7f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libsyn-a317b1ffbc808e9d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libsyn-a317b1ffbc808e9d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libron-2aab8ceee6073f9b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-462ae4e9848053e1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-462ae4e9848053e1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\proc-macro2-2fb4bbb858fdd513\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-b7e0d514e93e145a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-b7e0d514e93e145a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libbase64-27a5ce1ec30f0140.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libproc_macro2-6666de978b9efac4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libproc_macro2-6666de978b9efac4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\build\\serde-6c717f2dd3f9a3ac\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libquote-4915e83a285acbbf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libquote-4915e83a285acbbf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libserde-a68fd74724556396.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libsyn-a317b1ffbc808e9d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libsyn-a317b1ffbc808e9d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\libbitflags-bab5739bef7c7c7f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\target\\debug\\deps\\serde_derive-4f3e5401288540eb.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `continue` expression is redundant\n   --> src\\parse.rs:990:63\n    |\n990 |                 Some(Comment::ClosedLine | Comment::Block) => continue,\n    |                                                               ^^^^^^^^\n    |\n    = help: consider dropping the `continue` expression\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue\nnote: the lint level is defined here\n   --> src\\lib.rs:6:9\n    |\n6   | #![warn(clippy::pedantic)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[warn(clippy::needless_continue)]` implied by `#[warn(clippy::pedantic)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider dropping the `continue` expression",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 159,
                        "byte_start": 143,
                        "column_end": 25,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 9,
                            "text": "#![warn(clippy::pedantic)]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_continue)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::needless_continue",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `continue` expression is redundant",
                "spans": [
                  {
                    "byte_end": 32845,
                    "byte_start": 32837,
                    "column_end": 71,
                    "column_start": 63,
                    "expansion": null,
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 990,
                    "line_start": 990,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 71,
                        "highlight_start": 63,
                        "text": "                Some(Comment::ClosedLine | Comment::Block) => continue,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: needless `fn main` in doctest\n   --> src\\../README.md:145:1\n    |\n145 | / use serde::{Deserialize, Serialize};\n146 | |\n147 | | #[derive(Debug, Deserialize, Serialize)]\n148 | | struct MyStruct {\n...   |\n160 | |     );\n161 | | }\n    | |_^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\nnote: the lint level is defined here\n   --> src\\lib.rs:5:9\n    |\n5   | #![deny(clippy::style)]\n    |         ^^^^^^^^^^^^^\n    = note: `#[deny(clippy::needless_doctest_main)]` implied by `#[deny(clippy::style)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 132,
                        "byte_start": 119,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 5,
                        "line_start": 5,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "#![deny(clippy::style)]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::needless_doctest_main)]` implied by `#[deny(clippy::style)]`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::needless_doctest_main",
                  "explanation": null
                },
                "level": "error",
                "message": "needless `fn main` in doctest",
                "spans": [
                  {
                    "byte_end": 4166,
                    "byte_start": 3761,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\../README.md",
                    "is_primary": true,
                    "label": null,
                    "line_end": 161,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "use serde::{Deserialize, Serialize};"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "#[derive(Debug, Deserialize, Serialize)]"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "struct MyStruct {"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "    boolean: bool,"
                      },
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "    float: f32,"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 12,
                        "highlight_start": 1,
                        "text": "fn main() {"
                      },
                      {
                        "highlight_end": 78,
                        "highlight_start": 1,
                        "text": "    let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 54,
                        "highlight_start": 1,
                        "text": "    println!(\"RON: {}\", ron::to_string(&x).unwrap());"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 59,
                        "highlight_start": 1,
                        "text": "    println!(\"Pretty RON: {}\", ron::ser::to_string_pretty("
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "        &x, ron::ser::PrettyConfig::default()).unwrap(),"
                      },
                      {
                        "highlight_end": 7,
                        "highlight_start": 1,
                        "text": "    );"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: item in documentation is missing backticks\n   --> src\\../README.md:168:3\n    |\n168 | | IntelliJ     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |\n    |   ^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n    = note: `#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`\nhelp: try\n    |\n168 - | IntelliJ     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |\n168 + | `IntelliJ`     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_markdown)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4352,
                        "byte_start": 4344,
                        "column_end": 11,
                        "column_start": 3,
                        "expansion": null,
                        "file_name": "src\\../README.md",
                        "is_primary": true,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": "`IntelliJ`",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 3,
                            "text": "| IntelliJ     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_markdown",
                  "explanation": null
                },
                "level": "warning",
                "message": "item in documentation is missing backticks",
                "spans": [
                  {
                    "byte_end": 4352,
                    "byte_start": 4344,
                    "column_end": 11,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "src\\../README.md",
                    "is_primary": true,
                    "label": null,
                    "line_end": 168,
                    "line_start": 168,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 3,
                        "text": "| IntelliJ     | [intellij-ron](https://github.com/ron-rs/intellij-ron)      |"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'c\n  --> src\\de\\id.rs:16:18\n   |\n16 | impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {\n   |                  ^^                            ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nnote: the lint level is defined here\n  --> src\\lib.rs:3:9\n   |\n3  | #![deny(clippy::complexity)]\n   |         ^^^^^^^^^^^^^^^^^^\n   = note: `#[deny(clippy::needless_lifetimes)]` implied by `#[deny(clippy::complexity)]`\nhelp: elide the lifetimes\n   |\n16 - impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {\n16 + impl<'a, 'b> de::Deserializer<'b> for &mut Deserializer<'a, 'b> {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 85,
                        "byte_start": 67,
                        "column_end": 27,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 3,
                        "line_start": 3,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 9,
                            "text": "#![deny(clippy::complexity)]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::needless_lifetimes)]` implied by `#[deny(clippy::complexity)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 363,
                        "byte_start": 355,
                        "column_end": 20,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\de\\id.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 16,
                        "line_start": 16,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 12,
                            "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 394,
                        "byte_start": 391,
                        "column_end": 51,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\de\\id.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 16,
                        "line_start": 16,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 48,
                            "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'c",
                "spans": [
                  {
                    "byte_end": 363,
                    "byte_start": 361,
                    "column_end": 20,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\de\\id.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 16,
                    "line_start": 16,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 18,
                        "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 393,
                    "byte_start": 391,
                    "column_end": 50,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\de\\id.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 16,
                    "line_start": 16,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 48,
                        "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'c\n  --> src\\de\\tag.rs:15:18\n   |\n15 | impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {\n   |                  ^^                            ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n   |\n15 - impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {\n15 + impl<'a, 'b> de::Deserializer<'b> for &mut Deserializer<'a, 'b> {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 302,
                        "byte_start": 294,
                        "column_end": 20,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\de\\tag.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 12,
                            "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 333,
                        "byte_start": 330,
                        "column_end": 51,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\de\\tag.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 48,
                            "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'c",
                "spans": [
                  {
                    "byte_end": 302,
                    "byte_start": 300,
                    "column_end": 20,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\de\\tag.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 18,
                        "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 332,
                    "byte_start": 330,
                    "column_end": 50,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\de\\tag.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 48,
                        "text": "impl<'a, 'b: 'a, 'c> de::Deserializer<'b> for &'c mut Deserializer<'a, 'b> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'a\n   --> src\\de\\mod.rs:278:11\n    |\n278 | impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n    |           ^^                             ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n278 - impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {\n278 + impl<'de> de::Deserializer<'de> for &mut Deserializer<'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9093,
                        "byte_start": 9089,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 278,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9125,
                        "byte_start": 9122,
                        "column_end": 45,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 278,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 42,
                            "text": "impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 9093,
                    "byte_start": 9091,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 278,
                    "line_start": 278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 9124,
                    "byte_start": 9122,
                    "column_end": 44,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 278,
                    "line_start": 278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 42,
                        "text": "impl<'de, 'a> de::Deserializer<'de> for &'a mut Deserializer<'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: usage of a legacy numeric constant\n   --> src\\de\\mod.rs:326:38\n    |\n326 |             return visitor.visit_f32(std::f32::INFINITY);\n    |                                      ^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n    = note: `#[deny(clippy::legacy_numeric_constants)]` implied by `#[deny(clippy::style)]`\nhelp: use the associated constant instead\n    |\n326 -             return visitor.visit_f32(std::f32::INFINITY);\n326 +             return visitor.visit_f32(f32::INFINITY);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::legacy_numeric_constants)]` implied by `#[deny(clippy::style)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11330,
                        "byte_start": 11312,
                        "column_end": 56,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 326,
                        "line_start": 326,
                        "suggested_replacement": "f32::INFINITY",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 38,
                            "text": "            return visitor.visit_f32(std::f32::INFINITY);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "error",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 11330,
                    "byte_start": 11312,
                    "column_end": 56,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 326,
                    "line_start": 326,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 38,
                        "text": "            return visitor.visit_f32(std::f32::INFINITY);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: usage of a legacy numeric constant\n   --> src\\de\\mod.rs:328:38\n    |\n328 |             return visitor.visit_f64(std::f64::INFINITY);\n    |                                      ^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n328 -             return visitor.visit_f64(std::f64::INFINITY);\n328 +             return visitor.visit_f64(f64::INFINITY);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11444,
                        "byte_start": 11426,
                        "column_end": 56,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 328,
                        "line_start": 328,
                        "suggested_replacement": "f64::INFINITY",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 38,
                            "text": "            return visitor.visit_f64(std::f64::INFINITY);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "error",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 11444,
                    "byte_start": 11426,
                    "column_end": 56,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 328,
                    "line_start": 328,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 38,
                        "text": "            return visitor.visit_f64(std::f64::INFINITY);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: usage of a legacy numeric constant\n   --> src\\de\\mod.rs:330:38\n    |\n330 |             return visitor.visit_f32(std::f32::NAN);\n    |                                      ^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n330 -             return visitor.visit_f32(std::f32::NAN);\n330 +             return visitor.visit_f32(f32::NAN);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11589,
                        "byte_start": 11576,
                        "column_end": 51,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 330,
                        "line_start": 330,
                        "suggested_replacement": "f32::NAN",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 38,
                            "text": "            return visitor.visit_f32(std::f32::NAN);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "error",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 11589,
                    "byte_start": 11576,
                    "column_end": 51,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 38,
                        "text": "            return visitor.visit_f32(std::f32::NAN);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: usage of a legacy numeric constant\n   --> src\\de\\mod.rs:332:38\n    |\n332 |             return visitor.visit_f64(std::f64::NAN);\n    |                                      ^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n332 -             return visitor.visit_f64(std::f64::NAN);\n332 +             return visitor.visit_f64(f64::NAN);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11698,
                        "byte_start": 11685,
                        "column_end": 51,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 332,
                        "line_start": 332,
                        "suggested_replacement": "f64::NAN",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 38,
                            "text": "            return visitor.visit_f64(std::f64::NAN);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "error",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 11698,
                    "byte_start": 11685,
                    "column_end": 51,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 332,
                    "line_start": 332,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 38,
                        "text": "            return visitor.visit_f64(std::f64::NAN);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de\\mod.rs:828:11\n    |\n828 | impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {\n    |           ^^                                        ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\n    = note: `#[warn(clippy::elidable_lifetime_names)]` implied by `#[warn(clippy::pedantic)]`\nhelp: elide the lifetimes\n    |\n828 - impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {\n828 + impl<'de> de::SeqAccess<'de> for CommaSeparated<'_, 'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::elidable_lifetime_names)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 25447,
                        "byte_start": 25443,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 828,
                        "line_start": 828,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 25489,
                        "byte_start": 25487,
                        "column_end": 55,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 828,
                        "line_start": 828,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 53,
                            "text": "impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 25447,
                    "byte_start": 25445,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 828,
                    "line_start": 828,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 25489,
                    "byte_start": 25487,
                    "column_end": 55,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 828,
                    "line_start": 828,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 53,
                        "text": "impl<'de, 'a> de::SeqAccess<'de> for CommaSeparated<'a, 'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de\\mod.rs:847:11\n    |\n847 | impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {\n    |           ^^                                        ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n847 - impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {\n847 + impl<'de> de::MapAccess<'de> for CommaSeparated<'_, 'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 25920,
                        "byte_start": 25916,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 847,
                        "line_start": 847,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 25962,
                        "byte_start": 25960,
                        "column_end": 55,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 847,
                        "line_start": 847,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 53,
                            "text": "impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 25920,
                    "byte_start": 25918,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 847,
                    "line_start": 847,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 25962,
                    "byte_start": 25960,
                    "column_end": 55,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 847,
                    "line_start": 847,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 53,
                        "text": "impl<'de, 'a> de::MapAccess<'de> for CommaSeparated<'a, 'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de\\mod.rs:912:11\n    |\n912 | impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {\n    |           ^^                               ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n912 - impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {\n912 + impl<'de> de::EnumAccess<'de> for Enum<'_, 'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 27876,
                        "byte_start": 27872,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 912,
                        "line_start": 912,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 27909,
                        "byte_start": 27907,
                        "column_end": 46,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 912,
                        "line_start": 912,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 44,
                            "text": "impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 27876,
                    "byte_start": 27874,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 912,
                    "line_start": 912,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 27909,
                    "byte_start": 27907,
                    "column_end": 46,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 912,
                    "line_start": 912,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 44,
                        "text": "impl<'de, 'a> de::EnumAccess<'de> for Enum<'a, 'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de\\mod.rs:928:11\n    |\n928 | impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {\n    |           ^^                                  ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n928 - impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {\n928 + impl<'de> de::VariantAccess<'de> for Enum<'_, 'de> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28262,
                        "byte_start": 28258,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 928,
                        "line_start": 928,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 28298,
                        "byte_start": 28296,
                        "column_end": 49,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 928,
                        "line_start": 928,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 47,
                            "text": "impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 28262,
                    "byte_start": 28260,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 928,
                    "line_start": 928,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 28298,
                    "byte_start": 28296,
                    "column_end": 49,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 928,
                    "line_start": 928,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 47,
                        "text": "impl<'de, 'a> de::VariantAccess<'de> for Enum<'a, 'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\de\\mod.rs:1023:11\n     |\n1023 | impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {\n     |           ^^                                          ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1023 - impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {\n1023 + impl<'de> de::MapAccess<'de> for SerdeEnumContent<'_, 'de> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 30778,
                        "byte_start": 30774,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1023,
                        "line_start": 1023,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 30822,
                        "byte_start": 30820,
                        "column_end": 57,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\de\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1023,
                        "line_start": 1023,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 55,
                            "text": "impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 30778,
                    "byte_start": 30776,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1023,
                    "line_start": 1023,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 30822,
                    "byte_start": 30820,
                    "column_end": 57,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "src\\de\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1023,
                    "line_start": 1023,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 55,
                        "text": "impl<'de, 'a> de::MapAccess<'de> for SerdeEnumContent<'a, 'de> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\ser\\raw.rs:17:6\n   |\n17 | impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {\n   |      ^^                                                ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n   |\n17 - impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {\n17 + impl<W: fmt::Write> ser::Serializer for Serializer<'_, W> {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 302,
                        "byte_start": 298,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 350,
                        "byte_start": 348,
                        "column_end": 58,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\ser\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 56,
                            "text": "impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 300,
                    "byte_start": 298,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 350,
                    "byte_start": 348,
                    "column_end": 58,
                    "column_start": 56,
                    "expansion": null,
                    "file_name": "src\\ser\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 56,
                        "text": "impl<'a, W: fmt::Write> ser::Serializer for Serializer<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary semicolon\n   --> src\\ser\\mod.rs:436:10\n    |\n436 |         };\n    |          ^ help: remove\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon\n    = note: `#[warn(clippy::unnecessary_semicolon)]` implied by `#[warn(clippy::pedantic)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_semicolon)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12457,
                        "byte_start": 12456,
                        "column_end": 11,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 436,
                        "line_start": 436,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 10,
                            "text": "        };"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_semicolon",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary semicolon",
                "spans": [
                  {
                    "byte_end": 12457,
                    "byte_start": 12456,
                    "column_end": 11,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 436,
                    "line_start": 436,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 10,
                        "text": "        };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\ser\\mod.rs:599:13\n    |\n599 |             write!(self.output, \"{}\", suffix)?;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[deny(clippy::uninlined_format_args)]` implied by `#[deny(clippy::style)]`\nhelp: change this to\n    |\n599 -             write!(self.output, \"{}\", suffix)?;\n599 +             write!(self.output, \"{suffix}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::uninlined_format_args)]` implied by `#[deny(clippy::style)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17791,
                        "byte_start": 17791,
                        "column_end": 35,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 599,
                        "line_start": 599,
                        "suggested_replacement": "suffix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 35,
                            "text": "            write!(self.output, \"{}\", suffix)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 17801,
                        "byte_start": 17793,
                        "column_end": 45,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 599,
                        "line_start": 599,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 37,
                            "text": "            write!(self.output, \"{}\", suffix)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 17802,
                    "byte_start": 17769,
                    "column_end": 46,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 599,
                    "line_start": 599,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 13,
                        "text": "            write!(self.output, \"{}\", suffix)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\ser\\mod.rs:610:13\n    |\n610 |             write!(self.output, \"{}\", suffix)?;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n610 -             write!(self.output, \"{}\", suffix)?;\n610 +             write!(self.output, \"{suffix}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18076,
                        "byte_start": 18076,
                        "column_end": 35,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 610,
                        "line_start": 610,
                        "suggested_replacement": "suffix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 35,
                            "text": "            write!(self.output, \"{}\", suffix)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 18086,
                        "byte_start": 18078,
                        "column_end": 45,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 610,
                        "line_start": 610,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 37,
                            "text": "            write!(self.output, \"{}\", suffix)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 18087,
                    "byte_start": 18054,
                    "column_end": 46,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 610,
                    "line_start": 610,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 13,
                        "text": "            write!(self.output, \"{}\", suffix)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\ser\\mod.rs:737:9\n    |\n737 |         write!(self.output, \"{}\", v)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n737 -         write!(self.output, \"{}\", v)?;\n737 +         write!(self.output, \"{v}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21766,
                        "byte_start": 21766,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 737,
                        "line_start": 737,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 21771,
                        "byte_start": 21768,
                        "column_end": 36,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 737,
                        "line_start": 737,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 33,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21772,
                    "byte_start": 21744,
                    "column_end": 37,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 737,
                    "line_start": 737,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 9,
                        "text": "        write!(self.output, \"{}\", v)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\ser\\mod.rs:755:9\n    |\n755 |         write!(self.output, \"{}\", v)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n755 -         write!(self.output, \"{}\", v)?;\n755 +         write!(self.output, \"{v}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22146,
                        "byte_start": 22146,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 755,
                        "line_start": 755,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 22151,
                        "byte_start": 22148,
                        "column_end": 36,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 755,
                        "line_start": 755,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 33,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22152,
                    "byte_start": 22124,
                    "column_end": 37,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 755,
                    "line_start": 755,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 9,
                        "text": "        write!(self.output, \"{}\", v)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\ser\\mod.rs:773:9\n    |\n773 |         write!(self.output, \"{}\", v)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n773 -         write!(self.output, \"{}\", v)?;\n773 +         write!(self.output, \"{v}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22558,
                        "byte_start": 22558,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 773,
                        "line_start": 773,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 22563,
                        "byte_start": 22560,
                        "column_end": 36,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 773,
                        "line_start": 773,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 33,
                            "text": "        write!(self.output, \"{}\", v)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22564,
                    "byte_start": 22536,
                    "column_end": 37,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 773,
                    "line_start": 773,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 9,
                        "text": "        write!(self.output, \"{}\", v)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1105:6\n     |\n1105 | impl<'a, W: fmt::Write> Drop for Compound<'a, W> {\n     |      ^^                                   ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1105 - impl<'a, W: fmt::Write> Drop for Compound<'a, W> {\n1105 + impl<W: fmt::Write> Drop for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 31192,
                        "byte_start": 31188,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1105,
                        "line_start": 1105,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> Drop for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31227,
                        "byte_start": 31225,
                        "column_end": 45,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1105,
                        "line_start": 1105,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 43,
                            "text": "impl<'a, W: fmt::Write> Drop for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 31190,
                    "byte_start": 31188,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1105,
                    "line_start": 1105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> Drop for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 31227,
                    "byte_start": 31225,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1105,
                    "line_start": 1105,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "impl<'a, W: fmt::Write> Drop for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1113:6\n     |\n1113 | impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {\n     |      ^^                                                ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1113 - impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {\n1113 + impl<W: fmt::Write> ser::SerializeSeq for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 31394,
                        "byte_start": 31390,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1113,
                        "line_start": 1113,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31442,
                        "byte_start": 31440,
                        "column_end": 58,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1113,
                        "line_start": 1113,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 56,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 31392,
                    "byte_start": 31390,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1113,
                    "line_start": 1113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 31442,
                    "byte_start": 31440,
                    "column_end": 58,
                    "column_start": 56,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1113,
                    "line_start": 1113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 56,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeSeq for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1170:6\n     |\n1170 | impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {\n     |      ^^                                                  ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1170 - impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {\n1170 + impl<W: fmt::Write> ser::SerializeTuple for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 33194,
                        "byte_start": 33190,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1170,
                        "line_start": 1170,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 33244,
                        "byte_start": 33242,
                        "column_end": 60,
                        "column_start": 58,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1170,
                        "line_start": 1170,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 58,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 33192,
                    "byte_start": 33190,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1170,
                    "line_start": 1170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 33244,
                    "byte_start": 33242,
                    "column_end": 60,
                    "column_start": 58,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1170,
                    "line_start": 1170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 58,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTuple for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1222:6\n     |\n1222 | impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {\n     |      ^^                                                        ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1222 - impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {\n1222 + impl<W: fmt::Write> ser::SerializeTupleStruct for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 34759,
                        "byte_start": 34755,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1222,
                        "line_start": 1222,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 34815,
                        "byte_start": 34813,
                        "column_end": 66,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1222,
                        "line_start": 1222,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 64,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 34757,
                    "byte_start": 34755,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1222,
                    "line_start": 1222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 34815,
                    "byte_start": 34813,
                    "column_end": 66,
                    "column_start": 64,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1222,
                    "line_start": 1222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 64,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTupleStruct for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1238:6\n     |\n1238 | impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {\n     |      ^^                                                         ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1238 - impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {\n1238 + impl<W: fmt::Write> ser::SerializeTupleVariant for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35131,
                        "byte_start": 35127,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1238,
                        "line_start": 1238,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 35188,
                        "byte_start": 35186,
                        "column_end": 67,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1238,
                        "line_start": 1238,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 65,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 35129,
                    "byte_start": 35127,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1238,
                    "line_start": 1238,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 35188,
                    "byte_start": 35186,
                    "column_end": 67,
                    "column_start": 65,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1238,
                    "line_start": 1238,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 65,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeTupleVariant for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1254:6\n     |\n1254 | impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {\n     |      ^^                                                ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1254 - impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {\n1254 + impl<W: fmt::Write> ser::SerializeMap for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35504,
                        "byte_start": 35500,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1254,
                        "line_start": 1254,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 35552,
                        "byte_start": 35550,
                        "column_end": 58,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1254,
                        "line_start": 1254,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 56,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 35502,
                    "byte_start": 35500,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1254,
                    "line_start": 1254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 35552,
                    "byte_start": 35550,
                    "column_end": 58,
                    "column_start": 56,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1254,
                    "line_start": 1254,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 56,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeMap for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1318:6\n     |\n1318 | impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {\n     |      ^^                                                   ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1318 - impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {\n1318 + impl<W: fmt::Write> ser::SerializeStruct for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 37343,
                        "byte_start": 37339,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1318,
                        "line_start": 1318,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 37394,
                        "byte_start": 37392,
                        "column_end": 61,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1318,
                        "line_start": 1318,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 59,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 37341,
                    "byte_start": 37339,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1318,
                    "line_start": 1318,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 37394,
                    "byte_start": 37392,
                    "column_end": 61,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1318,
                    "line_start": 1318,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 59,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeStruct for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary semicolon\n    --> src\\ser\\mod.rs:1383:10\n     |\n1383 |         };\n     |          ^ help: remove\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 39731,
                        "byte_start": 39730,
                        "column_end": 11,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1383,
                        "line_start": 1383,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 10,
                            "text": "        };"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_semicolon",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary semicolon",
                "spans": [
                  {
                    "byte_end": 39731,
                    "byte_start": 39730,
                    "column_end": 11,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1383,
                    "line_start": 1383,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 10,
                        "text": "        };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\ser\\mod.rs:1410:6\n     |\n1410 | impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {\n     |      ^^                                                          ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n     |\n1410 - impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {\n1410 + impl<W: fmt::Write> ser::SerializeStructVariant for Compound<'_, W> {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 40360,
                        "byte_start": 40356,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1410,
                        "line_start": 1410,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 40418,
                        "byte_start": 40416,
                        "column_end": 68,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\ser\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1410,
                        "line_start": 1410,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 66,
                            "text": "impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 40358,
                    "byte_start": 40356,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1410,
                    "line_start": 1410,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 40418,
                    "byte_start": 40416,
                    "column_end": 68,
                    "column_start": 66,
                    "expansion": null,
                    "file_name": "src\\ser\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1410,
                    "line_start": 1410,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 66,
                        "text": "impl<'a, W: fmt::Write> ser::SerializeStructVariant for Compound<'a, W> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:129:42\n    |\n129 |             Error::Base64Error(ref e) => write!(f, \"Invalid base64: {}\", e),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n129 -             Error::Base64Error(ref e) => write!(f, \"Invalid base64: {}\", e),\n129 +             Error::Base64Error(ref e) => write!(f, \"Invalid base64: {e}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3183,
                        "byte_start": 3183,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "            Error::Base64Error(ref e) => write!(f, \"Invalid base64: {}\", e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3188,
                        "byte_start": 3185,
                        "column_end": 75,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 129,
                        "line_start": 129,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 72,
                            "text": "            Error::Base64Error(ref e) => write!(f, \"Invalid base64: {}\", e),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3189,
                    "byte_start": 3155,
                    "column_end": 76,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 129,
                    "line_start": 129,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 76,
                        "highlight_start": 42,
                        "text": "            Error::Base64Error(ref e) => write!(f, \"Invalid base64: {}\", e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:176:17\n    |\n176 |                 write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n176 -                 write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)\n176 +                 write!(f, \"Invalid digit {digit:?} for base {base} integers\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5865,
                        "byte_start": 5865,
                        "column_end": 43,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "digit",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 43,
                            "text": "                write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)"
                          }
                        ]
                      },
                      {
                        "byte_end": 5879,
                        "byte_start": 5879,
                        "column_end": 57,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "base",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 57,
                            "text": "                write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)"
                          }
                        ]
                      },
                      {
                        "byte_end": 5897,
                        "byte_start": 5890,
                        "column_end": 75,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 68,
                            "text": "                write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)"
                          }
                        ]
                      },
                      {
                        "byte_end": 5903,
                        "byte_start": 5897,
                        "column_end": 81,
                        "column_start": 75,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 75,
                            "text": "                write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5904,
                    "byte_start": 5839,
                    "column_end": 82,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 17,
                        "text": "                write!(f, \"Invalid digit {:?} for base {} integers\", digit, base)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:190:41\n    |\n190 |             Error::UnexpectedChar(c) => write!(f, \"Unexpected char {:?}\", c),\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n190 -             Error::UnexpectedChar(c) => write!(f, \"Unexpected char {:?}\", c),\n190 +             Error::UnexpectedChar(c) => write!(f, \"Unexpected char {c:?}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6616,
                        "byte_start": 6616,
                        "column_end": 69,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 69,
                            "text": "            Error::UnexpectedChar(c) => write!(f, \"Unexpected char {:?}\", c),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6623,
                        "byte_start": 6620,
                        "column_end": 76,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 73,
                            "text": "            Error::UnexpectedChar(c) => write!(f, \"Unexpected char {:?}\", c),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6624,
                    "byte_start": 6588,
                    "column_end": 77,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 41,
                        "text": "            Error::UnexpectedChar(c) => write!(f, \"Unexpected char {:?}\", c),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:196:17\n    |\n196 |                 write!(f, \"Expected {} but found {} instead\", expected, found)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n196 -                 write!(f, \"Expected {} but found {} instead\", expected, found)\n196 +                 write!(f, \"Expected {expected} but found {found} instead\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6872,
                        "byte_start": 6872,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 196,
                        "line_start": 196,
                        "suggested_replacement": "expected",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                write!(f, \"Expected {} but found {} instead\", expected, found)"
                          }
                        ]
                      },
                      {
                        "byte_end": 6885,
                        "byte_start": 6885,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 196,
                        "line_start": 196,
                        "suggested_replacement": "found",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "                write!(f, \"Expected {} but found {} instead\", expected, found)"
                          }
                        ]
                      },
                      {
                        "byte_end": 6905,
                        "byte_start": 6895,
                        "column_end": 71,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 196,
                        "line_start": 196,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 61,
                            "text": "                write!(f, \"Expected {} but found {} instead\", expected, found)"
                          }
                        ]
                      },
                      {
                        "byte_end": 6912,
                        "byte_start": 6905,
                        "column_end": 78,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 196,
                        "line_start": 196,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 71,
                            "text": "                write!(f, \"Expected {} but found {} instead\", expected, found)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6913,
                    "byte_start": 6851,
                    "column_end": 79,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 196,
                    "line_start": 196,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 17,
                        "text": "                write!(f, \"Expected {} but found {} instead\", expected, found)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:202:17\n    |\n202 |                 write!(f, \"Expected {} but found \", expected)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n202 -                 write!(f, \"Expected {} but found \", expected)?;\n202 +                 write!(f, \"Expected {expected} but found \")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7082,
                        "byte_start": 7082,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "expected",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                write!(f, \"Expected {} but found \", expected)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 7105,
                        "byte_start": 7095,
                        "column_end": 61,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 51,
                            "text": "                write!(f, \"Expected {} but found \", expected)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7106,
                    "byte_start": 7061,
                    "column_end": 62,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 17,
                        "text": "                write!(f, \"Expected {} but found \", expected)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:207:26\n    |\n207 |                     n => write!(f, \"{} elements\", n)?,\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n207 -                     n => write!(f, \"{} elements\", n)?,\n207 +                     n => write!(f, \"{n} elements\")?,\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7287,
                        "byte_start": 7287,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 207,
                        "line_start": 207,
                        "suggested_replacement": "n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                    n => write!(f, \"{} elements\", n)?,"
                          }
                        ]
                      },
                      {
                        "byte_end": 7301,
                        "byte_start": 7298,
                        "column_end": 52,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 207,
                        "line_start": 207,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 49,
                            "text": "                    n => write!(f, \"{} elements\", n)?,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7302,
                    "byte_start": 7275,
                    "column_end": 53,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 207,
                    "line_start": 207,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 26,
                        "text": "                    n => write!(f, \"{} elements\", n)?,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:274:54\n    |\n274 |             Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {:?}\", invalid),\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n274 -             Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {:?}\", invalid),\n274 +             Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {invalid:?}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9405,
                        "byte_start": 9405,
                        "column_end": 85,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "invalid",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 85,
                            "highlight_start": 85,
                            "text": "            Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {:?}\", invalid),"
                          }
                        ]
                      },
                      {
                        "byte_end": 9418,
                        "byte_start": 9409,
                        "column_end": 98,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 89,
                            "text": "            Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {:?}\", invalid),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9419,
                    "byte_start": 9374,
                    "column_end": 99,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 99,
                        "highlight_start": 54,
                        "text": "            Error::InvalidIdentifier(ref invalid) => write!(f, \"Invalid identifier {:?}\", invalid),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:275:60\n    |\n275 |               Error::SuggestRawIdentifier(ref identifier) => write!(\n    |  ____________________________________________________________^\n276 | |                 f,\n277 | |                 \"Found invalid std identifier {:?}, try the raw identifier `r#{}` instead\",\n278 | |                 identifier, identifier\n279 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9554,
                        "byte_start": 9554,
                        "column_end": 48,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 277,
                        "line_start": 277,
                        "suggested_replacement": "identifier",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 48,
                            "text": "                \"Found invalid std identifier {:?}, try the raw identifier `r#{}` instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 9586,
                        "byte_start": 9586,
                        "column_end": 80,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 277,
                        "line_start": 277,
                        "suggested_replacement": "identifier",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 80,
                            "text": "                \"Found invalid std identifier {:?}, try the raw identifier `r#{}` instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 9625,
                        "byte_start": 9597,
                        "column_end": 27,
                        "column_start": 91,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 277,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 91,
                            "text": "                \"Found invalid std identifier {:?}, try the raw identifier `r#{}` instead\","
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "                identifier, identifier"
                          }
                        ]
                      },
                      {
                        "byte_end": 9637,
                        "byte_start": 9625,
                        "column_end": 39,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 278,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 27,
                            "text": "                identifier, identifier"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9651,
                    "byte_start": 9480,
                    "column_end": 14,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 279,
                    "line_start": 275,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 60,
                        "text": "            Error::SuggestRawIdentifier(ref identifier) => write!("
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "                f,"
                      },
                      {
                        "highlight_end": 92,
                        "highlight_start": 1,
                        "text": "                \"Found invalid std identifier {:?}, try the raw identifier `r#{}` instead\","
                      },
                      {
                        "highlight_end": 39,
                        "highlight_start": 1,
                        "text": "                identifier, identifier"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\error.rs:338:14\n    |\n338 |         impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {\n    |              ^^                                            ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n338 -         impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {\n338 +         impl fmt::Display for UnexpectedSerdeTypeValue<'_> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11405,
                        "byte_start": 11401,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "        impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 11450,
                        "byte_start": 11448,
                        "column_end": 62,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 60,
                            "text": "        impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 11404,
                    "byte_start": 11402,
                    "column_end": 16,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 338,
                    "line_start": 338,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 14,
                        "text": "        impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 11450,
                    "byte_start": 11448,
                    "column_end": 62,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 338,
                    "line_start": 338,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 60,
                        "text": "        impl<'a> fmt::Display for UnexpectedSerdeTypeValue<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:341:48\n    |\n341 |                     de::Unexpected::Bool(b) => write!(f, \"the boolean `{}`\", b),\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n341 -                     de::Unexpected::Bool(b) => write!(f, \"the boolean `{}`\", b),\n341 +                     de::Unexpected::Bool(b) => write!(f, \"the boolean `{b}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11628,
                        "byte_start": 11628,
                        "column_end": 73,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 341,
                        "line_start": 341,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 73,
                            "text": "                    de::Unexpected::Bool(b) => write!(f, \"the boolean `{}`\", b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11634,
                        "byte_start": 11631,
                        "column_end": 79,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 341,
                        "line_start": 341,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 76,
                            "text": "                    de::Unexpected::Bool(b) => write!(f, \"the boolean `{}`\", b),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11635,
                    "byte_start": 11603,
                    "column_end": 80,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 341,
                    "line_start": 341,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 80,
                        "highlight_start": 48,
                        "text": "                    de::Unexpected::Bool(b) => write!(f, \"the boolean `{}`\", b),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:342:52\n    |\n342 |                     de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{}`\", i),\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n342 -                     de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{}`\", i),\n342 +                     de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{i}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11722,
                        "byte_start": 11722,
                        "column_end": 86,
                        "column_start": 86,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 342,
                        "line_start": 342,
                        "suggested_replacement": "i",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 86,
                            "text": "                    de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{}`\", i),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11728,
                        "byte_start": 11725,
                        "column_end": 92,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 342,
                        "line_start": 342,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 89,
                            "text": "                    de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{}`\", i),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11729,
                    "byte_start": 11688,
                    "column_end": 93,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 342,
                    "line_start": 342,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 93,
                        "highlight_start": 52,
                        "text": "                    de::Unexpected::Unsigned(i) => write!(f, \"the unsigned integer `{}`\", i),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:343:50\n    |\n343 |                     de::Unexpected::Signed(i) => write!(f, \"the signed integer `{}`\", i),\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n343 -                     de::Unexpected::Signed(i) => write!(f, \"the signed integer `{}`\", i),\n343 +                     de::Unexpected::Signed(i) => write!(f, \"the signed integer `{i}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11812,
                        "byte_start": 11812,
                        "column_end": 82,
                        "column_start": 82,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 343,
                        "line_start": 343,
                        "suggested_replacement": "i",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 82,
                            "highlight_start": 82,
                            "text": "                    de::Unexpected::Signed(i) => write!(f, \"the signed integer `{}`\", i),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11818,
                        "byte_start": 11815,
                        "column_end": 88,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 343,
                        "line_start": 343,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 85,
                            "text": "                    de::Unexpected::Signed(i) => write!(f, \"the signed integer `{}`\", i),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11819,
                    "byte_start": 11780,
                    "column_end": 89,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 343,
                    "line_start": 343,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 50,
                        "text": "                    de::Unexpected::Signed(i) => write!(f, \"the signed integer `{}`\", i),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:344:49\n    |\n344 |                     de::Unexpected::Float(n) => write!(f, \"the floating point number `{}`\", n),\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n344 -                     de::Unexpected::Float(n) => write!(f, \"the floating point number `{}`\", n),\n344 +                     de::Unexpected::Float(n) => write!(f, \"the floating point number `{n}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11908,
                        "byte_start": 11908,
                        "column_end": 88,
                        "column_start": 88,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 88,
                            "text": "                    de::Unexpected::Float(n) => write!(f, \"the floating point number `{}`\", n),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11914,
                        "byte_start": 11911,
                        "column_end": 94,
                        "column_start": 91,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 94,
                            "highlight_start": 91,
                            "text": "                    de::Unexpected::Float(n) => write!(f, \"the floating point number `{}`\", n),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11915,
                    "byte_start": 11869,
                    "column_end": 95,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 344,
                    "line_start": 344,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 95,
                        "highlight_start": 49,
                        "text": "                    de::Unexpected::Float(n) => write!(f, \"the floating point number `{}`\", n),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:345:48\n    |\n345 |                     de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{}`\", c),\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n345 -                     de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{}`\", c),\n345 +                     de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{c}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11997,
                        "byte_start": 11997,
                        "column_end": 81,
                        "column_start": 81,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 345,
                        "line_start": 345,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 81,
                            "text": "                    de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{}`\", c),"
                          }
                        ]
                      },
                      {
                        "byte_end": 12003,
                        "byte_start": 12000,
                        "column_end": 87,
                        "column_start": 84,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 345,
                        "line_start": 345,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 84,
                            "text": "                    de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{}`\", c),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 12004,
                    "byte_start": 11964,
                    "column_end": 88,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 345,
                    "line_start": 345,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 88,
                        "highlight_start": 48,
                        "text": "                    de::Unexpected::Char(c) => write!(f, \"the UTF-8 character `{}`\", c),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\error.rs:346:47\n    |\n346 |                     de::Unexpected::Str(s) => write!(f, \"the string {:?}\", s),\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n346 -                     de::Unexpected::Str(s) => write!(f, \"the string {:?}\", s),\n346 +                     de::Unexpected::Str(s) => write!(f, \"the string {s:?}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12075,
                        "byte_start": 12075,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 346,
                        "line_start": 346,
                        "suggested_replacement": "s",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "                    de::Unexpected::Str(s) => write!(f, \"the string {:?}\", s),"
                          }
                        ]
                      },
                      {
                        "byte_end": 12082,
                        "byte_start": 12079,
                        "column_end": 77,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 346,
                        "line_start": 346,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 74,
                            "text": "                    de::Unexpected::Str(s) => write!(f, \"the string {:?}\", s),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 12083,
                    "byte_start": 12052,
                    "column_end": 78,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 346,
                    "line_start": 346,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 47,
                        "text": "                    de::Unexpected::Str(s) => write!(f, \"the string {:?}\", s),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\error.rs:469:6\n    |\n469 | impl<'a> fmt::Display for Identifier<'a> {\n    |      ^^                              ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n469 - impl<'a> fmt::Display for Identifier<'a> {\n469 + impl fmt::Display for Identifier<'_> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15692,
                        "byte_start": 15688,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 469,
                        "line_start": 469,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "impl<'a> fmt::Display for Identifier<'a> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 15723,
                        "byte_start": 15721,
                        "column_end": 40,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 469,
                        "line_start": 469,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 38,
                            "text": "impl<'a> fmt::Display for Identifier<'a> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15691,
                    "byte_start": 15689,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 469,
                    "line_start": 469,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> fmt::Display for Identifier<'a> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 15723,
                    "byte_start": 15721,
                    "column_end": 40,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 469,
                    "line_start": 469,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 38,
                        "text": "impl<'a> fmt::Display for Identifier<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\mod.rs:201:6\n    |\n201 | impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {\n    |      ^^                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n201 - impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {\n201 + impl<'de> SeqAccess<'de> for SeqAccessor<'_> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5138,
                        "byte_start": 5134,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\value\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 201,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 5176,
                        "byte_start": 5174,
                        "column_end": 48,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\value\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 201,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 46,
                            "text": "impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 5136,
                    "byte_start": 5134,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5176,
                    "byte_start": 5174,
                    "column_end": 48,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\value\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 46,
                        "text": "impl<'a, 'de> SeqAccess<'de> for SeqAccessor<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\mod.rs:224:6\n    |\n224 | impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {\n    |      ^^                                      ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names\nhelp: elide the lifetimes\n    |\n224 - impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {\n224 + impl<'de> MapAccess<'de> for MapAccessor<'_> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#elidable_lifetime_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5706,
                        "byte_start": 5702,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\value\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 224,
                        "line_start": 224,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 5744,
                        "byte_start": 5742,
                        "column_end": 48,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\value\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 224,
                        "line_start": 224,
                        "suggested_replacement": "'_",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 46,
                            "text": "impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::elidable_lifetime_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 5704,
                    "byte_start": 5702,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 224,
                    "line_start": 224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5744,
                    "byte_start": 5742,
                    "column_end": 48,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\value\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 224,
                    "line_start": 224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 46,
                        "text": "impl<'a, 'de> MapAccess<'de> for MapAccessor<'a> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary semicolon\n   --> src\\parse.rs:591:18\n    |\n591 |                 };\n    |                  ^ help: remove\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18957,
                        "byte_start": 18956,
                        "column_end": 19,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 591,
                        "line_start": 591,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 18,
                            "text": "                };"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_semicolon",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary semicolon",
                "spans": [
                  {
                    "byte_end": 18957,
                    "byte_start": 18956,
                    "column_end": 19,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 591,
                    "line_start": 591,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 18,
                        "text": "                };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n    --> src\\parse.rs:1022:27\n     |\n1022 |                 expected: format!(\"the Rusty byte string b\\\"{}\\\"\", byte_str),\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1022 -                 expected: format!(\"the Rusty byte string b\\\"{}\\\"\", byte_str),\n1022 +                 expected: format!(\"the Rusty byte string b\\\"{byte_str}\\\"\"),\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 33899,
                        "byte_start": 33899,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1022,
                        "line_start": 1022,
                        "suggested_replacement": "byte_str",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "                expected: format!(\"the Rusty byte string b\\\"{}\\\"\", byte_str),"
                          }
                        ]
                      },
                      {
                        "byte_end": 33913,
                        "byte_start": 33903,
                        "column_end": 76,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1022,
                        "line_start": 1022,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 66,
                            "text": "                expected: format!(\"the Rusty byte string b\\\"{}\\\"\", byte_str),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 33914,
                    "byte_start": 33864,
                    "column_end": 77,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1022,
                    "line_start": 1022,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 27,
                        "text": "                expected: format!(\"the Rusty byte string b\\\"{}\\\"\", byte_str),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n    --> src\\parse.rs:1023:24\n     |\n1023 |                 found: format!(\"the ambiguous base64 string {:?}\", base64_str),\n     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n     |\n1023 -                 found: format!(\"the ambiguous base64 string {:?}\", base64_str),\n1023 +                 found: format!(\"the ambiguous base64 string {base64_str:?}\"),\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 33977,
                        "byte_start": 33977,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1023,
                        "line_start": 1023,
                        "suggested_replacement": "base64_str",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "                found: format!(\"the ambiguous base64 string {:?}\", base64_str),"
                          }
                        ]
                      },
                      {
                        "byte_end": 33993,
                        "byte_start": 33981,
                        "column_end": 78,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1023,
                        "line_start": 1023,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 66,
                            "text": "                found: format!(\"the ambiguous base64 string {:?}\", base64_str),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 33994,
                    "byte_start": 33939,
                    "column_end": 79,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1023,
                    "line_start": 1023,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 24,
                        "text": "                found: format!(\"the ambiguous base64 string {:?}\", base64_str),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting `u8` to `i8` may wrap around the value\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n     = note: `#[warn(clippy::cast_possible_wrap)]` implied by `#[warn(clippy::pedantic)]`\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::cast_possible_wrap)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::cast_possible_wrap",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting `u8` to `i8` may wrap around the value",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `i16` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: `#[warn(clippy::cast_lossless)]` implied by `#[warn(clippy::pedantic)]`\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<i16>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <i16>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::cast_lossless)]` implied by `#[warn(clippy::pedantic)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<i16>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<i16>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `i16` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `i32` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<i32>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <i32>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<i32>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<i32>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `i32` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `i64` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<i64>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <i64>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<i64>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<i64>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `i64` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `u16` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<u16>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <u16>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<u16>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<u16>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `u16` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `u32` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<u32>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <u32>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<u32>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<u32>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `u32` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmprcjocp5z/ron-0.10.1#ron@0.10.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ron",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmprcjocp5z\\ron-0.10.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casts from `u8` to `u64` can be expressed infallibly using `From`\n    --> src\\parse.rs:1378:17\n     |\n1378 |                 x as $ty\n     |                 ^\n...\n1417 | impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }\n     | ------------------------------------------- in this macro invocation\n     |\n     = help: an `as` cast can become silently lossy if the types change in the future\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n     = note: this warning originates in the macro `impl_num` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: use `<u64>::from` instead\n     |\n1378 -                 x as $ty\n1378 +                 <u64>::from(x) as $ty\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "an `as` cast can become silently lossy if the types change in the future",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `<u64>::from` instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 46375,
                        "byte_start": 46374,
                        "column_end": 18,
                        "column_start": 17,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47378,
                            "byte_start": 47363,
                            "column_end": 27,
                            "column_start": 12,
                            "expansion": {
                              "def_site_span": {
                                "byte_end": 46270,
                                "byte_start": 46249,
                                "column_end": 22,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1374,
                                "line_start": 1374,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 22,
                                    "highlight_start": 1,
                                    "text": "macro_rules! impl_num {"
                                  }
                                ]
                              },
                              "macro_decl_name": "impl_num!",
                              "span": {
                                "byte_end": 47436,
                                "byte_start": 47393,
                                "column_end": 44,
                                "column_start": 1,
                                "expansion": null,
                                "file_name": "src\\parse.rs",
                                "is_primary": false,
                                "label": null,
                                "line_end": 1417,
                                "line_start": 1417,
                                "suggested_replacement": null,
                                "suggestion_applicability": null,
                                "text": [
                                  {
                                    "highlight_end": 44,
                                    "highlight_start": 1,
                                    "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                                  }
                                ]
                              }
                            },
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1413,
                            "line_start": 1413,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 27,
                                "highlight_start": 12,
                                "text": "        $( impl_num!($tys); )*"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1378,
                        "line_start": 1378,
                        "suggested_replacement": "<u64>::from(x)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "                x as $ty"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::cast_lossless",
                  "explanation": null
                },
                "level": "warning",
                "message": "casts from `u8` to `u64` can be expressed infallibly using `From`",
                "spans": [
                  {
                    "byte_end": 46375,
                    "byte_start": 46374,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 46270,
                        "byte_start": 46249,
                        "column_end": 22,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1374,
                        "line_start": 1374,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "macro_rules! impl_num {"
                          }
                        ]
                      },
                      "macro_decl_name": "impl_num!",
                      "span": {
                        "byte_end": 47378,
                        "byte_start": 47363,
                        "column_end": 27,
                        "column_start": 12,
                        "expansion": {
                          "def_site_span": {
                            "byte_end": 46270,
                            "byte_start": 46249,
                            "column_end": 22,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1374,
                            "line_start": 1374,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 22,
                                "highlight_start": 1,
                                "text": "macro_rules! impl_num {"
                              }
                            ]
                          },
                          "macro_decl_name": "impl_num!",
                          "span": {
                            "byte_end": 47436,
                            "byte_start": 47393,
                            "column_end": 44,
                            "column_start": 1,
                            "expansion": null,
                            "file_name": "src\\parse.rs",
                            "is_primary": false,
                            "label": null,
                            "line_end": 1417,
                            "line_start": 1417,
                            "suggested_replacement": null,
                            "suggestion_applicability": null,
                            "text": [
                              {
                                "highlight_end": 44,
                                "highlight_start": 1,
                                "text": "impl_num! { i8 i16 i32 i64 u8 u16 u32 u64 }"
                              }
                            ]
                          }
                        },
                        "file_name": "src\\parse.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 1413,
                        "line_start": 1413,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 12,
                            "text": "        $( impl_num!($tys); )*"
                          }
                        ]
                      }
                    },
                    "file_name": "src\\parse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1378,
                    "line_start": 1378,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 17,
                        "text": "                x as $ty"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 27
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "ron",
          "version": "0.10.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\n[Settings](https://docs.rs/ron/latest/settings.html)\n[Help](https://docs.rs/ron/latest/help.html)\nSummary[Source](https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34)\nExpand description\n## [\u00a7](https://docs.rs/ron/latest/ron/#rusty-object-notation)Rusty Object Notation\n[![MSRV](https://img.shields.io/badge/MSRV-1.64.0-orange)](https://github.com/ron-rs/ron) [![Crates.io](https://img.shields.io/crates/v/ron.svg)](https://crates.io/crates/ron) [![Docs](https://docs.rs/ron/badge.svg)](https://docs.rs/ron)\n[![CI](https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg)](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) [![Coverage](https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json)](https://ron-rs.github.io/ron/coverage/) [![Fuzzing](https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n[![Matrix](https://img.shields.io/matrix/ron-rs:matrix.org.svg)](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of [Serde\u2019s data model](https://serde.rs/data-model.html), so structs, enums, tuples, arrays, generic maps, and primitive values.\n### [\u00a7](https://docs.rs/ron/latest/ron/#example)Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#ron-syntax-overview)RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented [here](https://docs.rs/ron/latest/ron/docs/extensions.md).\n### [\u00a7](https://docs.rs/ron/latest/ron/#specification)Specification\nRON\u2019s formal and complete grammar is available [here](https://docs.rs/ron/latest/ron/docs/grammar.md).\nThere also is a very basic, work in progress specification available on [the wiki page](https://github.com/ron-rs/ron/wiki/Specification).\n### [\u00a7](https://docs.rs/ron/latest/ron/#why-ron)Why RON?\n#### [\u00a7](https://docs.rs/ron/latest/ron/#example-in-json)Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#same-example-in-ron)Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#quickstart)Quickstart\n#### [\u00a7](https://docs.rs/ron/latest/ron/#cargotoml)`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#mainrs)`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#tooling)Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| [intellij-ron](https://github.com/ron-rs/intellij-ron)  \nVS Code| [a5huynh/vscode-ron](https://github.com/a5huynh/vscode-ron)  \nSublime Text| [RON](https://packagecontrol.io/packages/RON)  \nAtom| [language-ron](https://atom.io/packages/language-ron)  \nVim| [ron-rs/ron.vim](https://github.com/ron-rs/ron.vim)  \nEMACS| [emacs-ron](https://chiselapp.com/user/Hutzdog/repository/ron-mode/home)  \n### [\u00a7](https://docs.rs/ron/latest/ron/#limitations)Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when [`deserialize_any`](https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any) is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(untagged)]`, i.e. untagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps [2](https://docs.rs/ron/latest/ron/#fn2)\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [3](https://docs.rs/ron/latest/ron/#fn3) and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a [new issue](https://github.com/ron-rs/ron/issues/new) if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n### [\u00a7](https://docs.rs/ron/latest/ron/#license)License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on enums. See [#451](https://github.com/ron-rs/ron/pull/451) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref1)\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s [`Visitor::expecting`](https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting) implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on structs. See [#455](https://github.com/ron-rs/ron/pull/455) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref2)\n  3. Most of these restrictions are currently blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183), which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. [\u21a9](https://docs.rs/ron/latest/ron/#fnref3)\n\n\n## Re-exports[\u00a7](https://docs.rs/ron/latest/ron/#reexports)\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules[\u00a7](https://docs.rs/ron/latest/ron/#modules)\n\n[de](https://docs.rs/ron/latest/ron/de/index.html \"mod ron::de\")\n\n\n[error](https://docs.rs/ron/latest/ron/error/index.html \"mod ron::error\")\n\n\n[extensions](https://docs.rs/ron/latest/ron/extensions/index.html \"mod ron::extensions\")\n\n\n[options](https://docs.rs/ron/latest/ron/options/index.html \"mod ron::options\")\n    Roundtrip serde Options module.\n\n[ser](https://docs.rs/ron/latest/ron/ser/index.html \"mod ron::ser\")\n\n\n[value](https://docs.rs/ron/latest/ron/value/index.html \"mod ron::value\")\n    Value module.\n",
            "markdown_with_citations": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rusty Object Notation\n![MSRV\u27e85\u27e9](https://github.com/ron-rs/ron) ![Crates.io\u27e86\u27e9](https://crates.io/crates/ron) ![Docs\u27e87\u27e9](https://docs.rs/ron)\n![CI\u27e88\u27e9](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) ![Coverage\u27e89\u27e9](https://ron-rs.github.io/ron/coverage/) ![Fuzzing\u27e810\u27e9](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n![Matrix\u27e811\u27e9](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of Serde\u2019s data model\u27e812\u27e9, so structs, enums, tuples, arrays, generic maps, and primitive values.\n### \u00a7\u27e813\u27e9Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### \u00a7\u27e814\u27e9RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented here\u27e815\u27e9.\n### \u00a7\u27e816\u27e9Specification\nRON\u2019s formal and complete grammar is available here\u27e817\u27e9.\nThere also is a very basic, work in progress specification available on the wiki page\u27e818\u27e9.\n### \u00a7\u27e819\u27e9Why RON?\n#### \u00a7\u27e820\u27e9Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### \u00a7\u27e821\u27e9Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### \u00a7\u27e822\u27e9Quickstart\n#### \u00a7\u27e823\u27e9`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### \u00a7\u27e824\u27e9`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### \u00a7\u27e825\u27e9Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| intellij-ron\u27e826\u27e9  \nVS Code| a5huynh/vscode-ron\u27e827\u27e9  \nSublime Text| RON\u27e828\u27e9  \nAtom| language-ron\u27e829\u27e9  \nVim| ron-rs/ron.vim\u27e830\u27e9  \nEMACS| emacs-ron\u27e831\u27e9  \n### \u00a7\u27e832\u27e9Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when `deserialize_any`\u27e833\u27e9 is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums 1\u27e834\u27e9\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums 1\u27e834\u27e9\n  * `#[serde(untagged)]`, i.e. untagged enums 1\u27e834\u27e9\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps 2\u27e835\u27e9\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply 3\u27e836\u27e9 and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a new issue\u27e837\u27e9 if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on serde#1183\u27e838\u27e9.\n### \u00a7\u27e839\u27e9License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived `Deserialize`\u27e840\u27e9 impls on enums. See #451\u27e841\u27e9 for more details. \u21a9\u27e842\u27e9\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s `Visitor::expecting`\u27e843\u27e9 implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived `Deserialize`\u27e840\u27e9 impls on structs. See #455\u27e844\u27e9 for more details. \u21a9\u27e845\u27e9\n  3. Most of these restrictions are currently blocked on serde#1183\u27e838\u27e9, which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. \u21a9\u27e846\u27e9\n\n\n## Re-exports\u00a7\u27e847\u27e9\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules\u00a7\u27e848\u27e9\n\nde\u27e849\u27e9\n\n\nerror\u27e850\u27e9\n\n\nextensions\u27e851\u27e9\n\n\noptions\u27e852\u27e9\n    Roundtrip serde Options module.\n\nser\u27e853\u27e9\n\n\nvalue\u27e854\u27e9\n    Value module.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34: Source\n\u27e84\u27e9 https://docs.rs/ron/latest/ron/#rusty-object-notation: \u00a7\n\u27e85\u27e9 https://img.shields.io/badge/MSRV-1.64.0-orange: ![MSRV\n\u27e86\u27e9 https://img.shields.io/crates/v/ron.svg: ![Crates.io\n\u27e87\u27e9 https://docs.rs/ron/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg: ![CI\n\u27e89\u27e9 https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json: ![Coverage\n\u27e810\u27e9 https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg: ![Fuzzing\n\u27e811\u27e9 https://img.shields.io/matrix/ron-rs:matrix.org.svg: ![Matrix\n\u27e812\u27e9 https://serde.rs/data-model.html: Serde\u2019s data model\n\u27e813\u27e9 https://docs.rs/ron/latest/ron/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/ron/latest/ron/#ron-syntax-overview: \u00a7\n\u27e815\u27e9 https://docs.rs/ron/latest/ron/docs/extensions.md: here\n\u27e816\u27e9 https://docs.rs/ron/latest/ron/#specification: \u00a7\n\u27e817\u27e9 https://docs.rs/ron/latest/ron/docs/grammar.md: here\n\u27e818\u27e9 https://github.com/ron-rs/ron/wiki/Specification: the wiki page\n\u27e819\u27e9 https://docs.rs/ron/latest/ron/#why-ron: \u00a7\n\u27e820\u27e9 https://docs.rs/ron/latest/ron/#example-in-json: \u00a7\n\u27e821\u27e9 https://docs.rs/ron/latest/ron/#same-example-in-ron: \u00a7\n\u27e822\u27e9 https://docs.rs/ron/latest/ron/#quickstart: \u00a7\n\u27e823\u27e9 https://docs.rs/ron/latest/ron/#cargotoml: \u00a7\n\u27e824\u27e9 https://docs.rs/ron/latest/ron/#mainrs: \u00a7\n\u27e825\u27e9 https://docs.rs/ron/latest/ron/#tooling: \u00a7\n\u27e826\u27e9 https://github.com/ron-rs/intellij-ron: intellij-ron\n\u27e827\u27e9 https://github.com/a5huynh/vscode-ron: a5huynh/vscode-ron\n\u27e828\u27e9 https://packagecontrol.io/packages/RON: RON\n\u27e829\u27e9 https://atom.io/packages/language-ron: language-ron\n\u27e830\u27e9 https://github.com/ron-rs/ron.vim: ron-rs/ron.vim\n\u27e831\u27e9 https://chiselapp.com/user/Hutzdog/repository/ron-mode/home: emacs-ron\n\u27e832\u27e9 https://docs.rs/ron/latest/ron/#limitations: \u00a7\n\u27e833\u27e9 https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any: `deserialize_any`\n\u27e834\u27e9 https://docs.rs/ron/latest/ron/#fn1: 1\n\u27e835\u27e9 https://docs.rs/ron/latest/ron/#fn2: 2\n\u27e836\u27e9 https://docs.rs/ron/latest/ron/#fn3: 3\n\u27e837\u27e9 https://github.com/ron-rs/ron/issues/new: new issue\n\u27e838\u27e9 https://github.com/serde-rs/serde/issues/1183: serde#1183\n\u27e839\u27e9 https://docs.rs/ron/latest/ron/#license: \u00a7\n\u27e840\u27e9 https://docs.rs/serde/latest/serde/de/trait.Deserialize.html: `Deserialize`\n\u27e841\u27e9 https://github.com/ron-rs/ron/pull/451: #451\n\u27e842\u27e9 https://docs.rs/ron/latest/ron/#fnref1: \u21a9\n\u27e843\u27e9 https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting: `Visitor::expecting`\n\u27e844\u27e9 https://github.com/ron-rs/ron/pull/455: #455\n\u27e845\u27e9 https://docs.rs/ron/latest/ron/#fnref2: \u21a9\n\u27e846\u27e9 https://docs.rs/ron/latest/ron/#fnref3: \u21a9\n\u27e847\u27e9 https://docs.rs/ron/latest/ron/#reexports: \u00a7\n\u27e848\u27e9 https://docs.rs/ron/latest/ron/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/ron/latest/ron/de/index.html: mod ron::de - de\n\u27e850\u27e9 https://docs.rs/ron/latest/ron/error/index.html: mod ron::error - error\n\u27e851\u27e9 https://docs.rs/ron/latest/ron/extensions/index.html: mod ron::extensions - extensions\n\u27e852\u27e9 https://docs.rs/ron/latest/ron/options/index.html: mod ron::options - options\n\u27e853\u27e9 https://docs.rs/ron/latest/ron/ser/index.html: mod ron::ser - ser\n\u27e854\u27e9 https://docs.rs/ron/latest/ron/value/index.html: mod ron::value - value\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "ron",
          "version": "0.10.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\n[Settings](https://docs.rs/ron/latest/settings.html)\n[Help](https://docs.rs/ron/latest/help.html)\nSummary[Source](https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34)\nExpand description\n## [\u00a7](https://docs.rs/ron/latest/ron/#rusty-object-notation)Rusty Object Notation\n[![MSRV](https://img.shields.io/badge/MSRV-1.64.0-orange)](https://github.com/ron-rs/ron) [![Crates.io](https://img.shields.io/crates/v/ron.svg)](https://crates.io/crates/ron) [![Docs](https://docs.rs/ron/badge.svg)](https://docs.rs/ron)\n[![CI](https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg)](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) [![Coverage](https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json)](https://ron-rs.github.io/ron/coverage/) [![Fuzzing](https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n[![Matrix](https://img.shields.io/matrix/ron-rs:matrix.org.svg)](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of [Serde\u2019s data model](https://serde.rs/data-model.html), so structs, enums, tuples, arrays, generic maps, and primitive values.\n### [\u00a7](https://docs.rs/ron/latest/ron/#example)Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#ron-syntax-overview)RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented [here](https://docs.rs/ron/latest/ron/docs/extensions.md).\n### [\u00a7](https://docs.rs/ron/latest/ron/#specification)Specification\nRON\u2019s formal and complete grammar is available [here](https://docs.rs/ron/latest/ron/docs/grammar.md).\nThere also is a very basic, work in progress specification available on [the wiki page](https://github.com/ron-rs/ron/wiki/Specification).\n### [\u00a7](https://docs.rs/ron/latest/ron/#why-ron)Why RON?\n#### [\u00a7](https://docs.rs/ron/latest/ron/#example-in-json)Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#same-example-in-ron)Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#quickstart)Quickstart\n#### [\u00a7](https://docs.rs/ron/latest/ron/#cargotoml)`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### [\u00a7](https://docs.rs/ron/latest/ron/#mainrs)`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### [\u00a7](https://docs.rs/ron/latest/ron/#tooling)Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| [intellij-ron](https://github.com/ron-rs/intellij-ron)  \nVS Code| [a5huynh/vscode-ron](https://github.com/a5huynh/vscode-ron)  \nSublime Text| [RON](https://packagecontrol.io/packages/RON)  \nAtom| [language-ron](https://atom.io/packages/language-ron)  \nVim| [ron-rs/ron.vim](https://github.com/ron-rs/ron.vim)  \nEMACS| [emacs-ron](https://chiselapp.com/user/Hutzdog/repository/ron-mode/home)  \n### [\u00a7](https://docs.rs/ron/latest/ron/#limitations)Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when [`deserialize_any`](https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any) is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(untagged)]`, i.e. untagged enums [1](https://docs.rs/ron/latest/ron/#fn1)\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps [2](https://docs.rs/ron/latest/ron/#fn2)\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply [3](https://docs.rs/ron/latest/ron/#fn3) and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a [new issue](https://github.com/ron-rs/ron/issues/new) if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183).\n### [\u00a7](https://docs.rs/ron/latest/ron/#license)License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on enums. See [#451](https://github.com/ron-rs/ron/pull/451) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref1)\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s [`Visitor::expecting`](https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting) implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived [`Deserialize`](https://docs.rs/serde/latest/serde/de/trait.Deserialize.html) impls on structs. See [#455](https://github.com/ron-rs/ron/pull/455) for more details. [\u21a9](https://docs.rs/ron/latest/ron/#fnref2)\n  3. Most of these restrictions are currently blocked on [serde#1183](https://github.com/serde-rs/serde/issues/1183), which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. [\u21a9](https://docs.rs/ron/latest/ron/#fnref3)\n\n\n## Re-exports[\u00a7](https://docs.rs/ron/latest/ron/#reexports)\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules[\u00a7](https://docs.rs/ron/latest/ron/#modules)\n\n[de](https://docs.rs/ron/latest/ron/de/index.html \"mod ron::de\")\n\n\n[error](https://docs.rs/ron/latest/ron/error/index.html \"mod ron::error\")\n\n\n[extensions](https://docs.rs/ron/latest/ron/extensions/index.html \"mod ron::extensions\")\n\n\n[options](https://docs.rs/ron/latest/ron/options/index.html \"mod ron::options\")\n    Roundtrip serde Options module.\n\n[ser](https://docs.rs/ron/latest/ron/ser/index.html \"mod ron::ser\")\n\n\n[value](https://docs.rs/ron/latest/ron/value/index.html \"mod ron::value\")\n    Value module.\n",
            "markdown_with_citations": "[](https://docs.rs/ron/latest/ron/all.html \"show sidebar\")\n# Crate ronCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rusty Object Notation\n![MSRV\u27e85\u27e9](https://github.com/ron-rs/ron) ![Crates.io\u27e86\u27e9](https://crates.io/crates/ron) ![Docs\u27e87\u27e9](https://docs.rs/ron)\n![CI\u27e88\u27e9](https://github.com/ron-rs/ron/actions/workflows/ci.yaml) ![Coverage\u27e89\u27e9](https://ron-rs.github.io/ron/coverage/) ![Fuzzing\u27e810\u27e9](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:ron)\n![Matrix\u27e811\u27e9](https://matrix.to/#/#ron-rs:matrix.org)\nRON is a simple readable data serialization format that looks similar to Rust syntax. It\u2019s designed to support all of Serde\u2019s data model\u27e812\u27e9, so structs, enums, tuples, arrays, generic maps, and primitive values.\n### \u00a7\u27e813\u27e9Example\n```\nGameConfig( // optional struct name\n  window_size: (800, 600),\n  window_title: \"PAC-MAN\",\n  fullscreen: false,\n  mouse_sensitivity: 1.4,\n  key_bindings: {\n    \"up\": Up,\n    \"down\": Down,\n    \"left\": Left,\n    \"right\": Right,\n    // Uncomment to enable WASD controls\n    /*\n    \"W\": Up,\n    \"S\": Down,\n    \"A\": Left,\n    \"D\": Right,\n    */\n  },\n  difficulty_options: (\n    start_difficulty: Easy,\n    adaptive: false,\n  ),\n)\n```\n\n### \u00a7\u27e814\u27e9RON syntax overview\n  * Numbers: `42`, `3.14`, `0xFF`, `0b0110`\n  * Strings: `\"Hello\"`, `\"with\\\\escapes\\n\"`, `r#\"raw string, great for regex\\.\"#`\n  * Byte Strings: `b\"Hello\"`, `b\"with \\x65\\x73\\x63\\x61\\x70\\x65\\x73\\n\"`, `br#\"raw, too\"#`\n  * Booleans: `true`, `false`\n  * Chars: `'e'`, `'\\n'`\n  * Optionals: `Some(\"string\")`, `Some(Some(1.34))`, `None`\n  * Tuples: `(\"abc\", 1.23, true)`, `()`\n  * Lists: `[\"abc\", \"def\"]`\n  * Structs: `( foo: 1.0, bar: ( baz: \"I'm nested\" ) )`\n  * Maps: `{ \"arbitrary\": \"keys\", \"are\": \"allowed\" }`\n\n\n> **Note:** Serde\u2019s data model represents fixed-size Rust arrays as tuple (instead of as list)\nRON also supports several extensions, which are documented here\u27e815\u27e9.\n### \u00a7\u27e816\u27e9Specification\nRON\u2019s formal and complete grammar is available here\u27e817\u27e9.\nThere also is a very basic, work in progress specification available on the wiki page\u27e818\u27e9.\n### \u00a7\u27e819\u27e9Why RON?\n#### \u00a7\u27e820\u27e9Example in JSON\n```\n{\n  \"materials\": {\n    \"metal\": {\n      \"reflectivity\": 1.0\n    },\n    \"plastic\": {\n      \"reflectivity\": 0.5\n    }\n  },\n  \"entities\": [\n    {\n      \"name\": \"hero\",\n      \"material\": \"metal\"\n    },\n    {\n      \"name\": \"monster\",\n      \"material\": \"plastic\"\n    }\n  ]\n}\n```\n\n#### \u00a7\u27e821\u27e9Same example in RON\n```\nScene( // class name is optional\n  materials: { // this is a map\n    \"metal\": (\n      reflectivity: 1.0,\n    ),\n    \"plastic\": (\n      reflectivity: 0.5,\n    ),\n  },\n  entities: [ // this is an array\n    (\n      name: \"hero\",\n      material: \"metal\",\n    ),\n    (\n      name: \"monster\",\n      material: \"plastic\",\n    ),\n  ],\n)\n```\n\nNote the following advantages of RON over JSON:\n  * trailing commas allowed\n  * single- and multi-line comments\n  * field names aren\u2019t quoted, so it\u2019s less verbose\n  * optional struct names improve readability\n  * enums are supported (and less verbose than their JSON representation)\n\n\n### \u00a7\u27e822\u27e9Quickstart\n#### \u00a7\u27e823\u27e9`Cargo.toml`\n```\n[dependencies]\nron = \"0.8\"\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n#### \u00a7\u27e824\u27e9`main.rs`\n```\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Deserialize, Serialize)]\nstruct MyStruct {\n  boolean: bool,\n  float: f32,\n}\nfn main() {\n  let x: MyStruct = ron::from_str(\"(boolean: true, float: 1.23)\").unwrap();\n  println!(\"RON: {}\", ron::to_string(&x).unwrap());\n  println!(\"Pretty RON: {}\", ron::ser::to_string_pretty(\n    &x, ron::ser::PrettyConfig::default()).unwrap(),\n  );\n}\n```\n\n### \u00a7\u27e825\u27e9Tooling\nEditor| Plugin  \n---|---  \nIntelliJ| intellij-ron\u27e826\u27e9  \nVS Code| a5huynh/vscode-ron\u27e827\u27e9  \nSublime Text| RON\u27e828\u27e9  \nAtom| language-ron\u27e829\u27e9  \nVim| ron-rs/ron.vim\u27e830\u27e9  \nEMACS| emacs-ron\u27e831\u27e9  \n### \u00a7\u27e832\u27e9Limitations\nRON requires struct, enum, and variant names to be valid Rust identifiers and will reject invalid ones created by `#[serde(rename = \"...\")]` at serialization / deserialization time.\nRON is not designed to be a fully self-describing format (unlike JSON) and is thus not guaranteed to work when `deserialize_any`\u27e833\u27e9 is used instead of its typed alternatives. In particular, the following Serde attributes only have limited support:\n  * `#[serde(tag = \"tag\")]`, i.e. internally tagged enums 1\u27e834\u27e9\n  * `#[serde(tag = \"tag\", content = \"content\")]`, i.e. adjacently tagged enums 1\u27e834\u27e9\n  * `#[serde(untagged)]`, i.e. untagged enums 1\u27e834\u27e9\n  * `#[serde(flatten)]`, i.e. flattening of structs into maps 2\u27e835\u27e9\n\n\nWhile data structures with any of these attributes should generally roundtrip through RON, some restrictions apply 3\u27e836\u27e9 and their textual representation may not always match your expectation:\n  * ron only supports string keys inside maps flattened into structs\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * struct names, e.g. by enabling the `#[enable(explicit_struct_names)]` extension or the `PrettyConfig::struct_names` setting\n    * newtypes\n    * zero-length arrays / tuples / tuple structs / structs / tuple variants / struct variants \n      * `Option`s with `#[enable(implicit_some)]` must not contain any of these or a unit, unit struct, or an untagged unit variant\n    * externally tagged tuple variants with just one field (that are not newtype variants)\n    * tuples or arrays or tuple structs with just one element are not supported inside newtype variants with `#[enable(unwrap_variant_newtypes)]` (including `Some`)\n    * a `ron::value::RawValue`\n  * untagged tuple / struct variants with no fields are not supported\n  * untagged tuple variants with just one field (that are not newtype variants) are not supported when the `#![enable(unwrap_variant_newtypes)]` extension is enabled\n  * serializing a `ron::value::RawValue` using a `PrettyConfig` may add leading and trailing whitespace and comments, which the `ron::value::RawValue` absorbs upon deserialization\n\n\nFurthermore, serde imposes the following restrictions for data to roundtrip:\n  * structs or struct variants that contain a `#[serde(flatten)]`ed field: \n    * are only serialised as maps and deserialised from maps\n    * must not contain duplicate fields / keys, e.g. where an inner-struct field matches an outer-struct or inner-struct field\n    * must not contain more than one (within the super-struct of all flattened structs) `#[serde(flatten)]`ed map field, which collects all unknown fields\n    * if they contain a `#[serde(flatten)]`ed map, they must not contain: \n      * a struct that is not flattened itself but contains some flattened fields and is flattened into the outer struct (variant)\n      * an untagged struct variant that contains some flattened fields\n      * a flattened externally tagged newtype, tuple, or struct variant, flattened internally tagged unit, newtype, or struct variant, or any flattened adjacently tagged variant\n      * a flattened tagged struct\n  * internally (or adjacently) tagged or untagged enum variants or `#[serde(flatten)]`ed fields must not contain: \n    * `i128` or `u128` values\n  * internally tagged newtype variants and `#[serde(flatten)]`ed fields must not contain: \n    * a unit or a unit struct inside an untagged newtype variant\n    * an untagged unit variant\n  * internally tagged newtype variants, which are `#[serde(flatten)]`ed together with other fields, must not contain: \n    * a unit or unit struct or an untagged unit variant\n\n\nWhile RON offers a best-effort implementation for `#[serde(flatten)]`, it may be unsupported in further cases and combinations not listed above. These limitations stem primarily from serde rather than RON. Enumerating all such cases based on serde\u2019s behavior is nontrivial, so the lists above are not exhaustive.\nPlease file a new issue\u27e837\u27e9 if you come across a use case which is not listed among the above restrictions but still breaks.\nWhile RON guarantees roundtrips like Rust -> RON -> Rust for Rust types using non-`deserialize_any`-based implementations, RON does not yet make any guarantees about roundtrips through `ron::Value`. For instance, even when RON -> Rust works, RON -> `ron::Value` -> Rust, or RON -> `ron::Value` -> RON -> Rust may not work. We plan on improving `ron::Value` in an upcoming version of RON, though this work is partially blocked on serde#1183\u27e838\u27e9.\n### \u00a7\u27e839\u27e9License\nRON is dual-licensed under Apache-2.0 and MIT.\nAny contribution intentionally submitted for inclusion in the work must be provided under the same dual-license terms.\n  1. Deserialising an internally, adjacently, or un-tagged enum requires detecting `serde`\u2019s internal `serde::__private::de::content::Content` content type so that RON can describe the deserialised data structure in serde\u2019s internal JSON-like format. This detection only works for the automatically-derived `Deserialize`\u27e840\u27e9 impls on enums. See #451\u27e841\u27e9 for more details. \u21a9\u27e842\u27e9\n  2. Deserialising a flattened struct from a map requires that the struct\u2019s `Visitor::expecting`\u27e843\u27e9 implementation formats a string starting with `\"struct \"`. This is the case for automatically-derived `Deserialize`\u27e840\u27e9 impls on structs. See #455\u27e844\u27e9 for more details. \u21a9\u27e845\u27e9\n  3. Most of these restrictions are currently blocked on serde#1183\u27e838\u27e9, which limits non-self-describing formats from roundtripping format-specific information through internally (or adjacently) tagged or untagged enums or `#[serde(flatten)]`ed fields. \u21a9\u27e846\u27e9\n\n\n## Re-exports\u00a7\u27e847\u27e9\n\n`pub use de::from_str[](https://docs.rs/ron/latest/ron/de/fn.from_str.html \"fn ron::de::from_str\");`\n\n\n`pub use de::Deserializer[](https://docs.rs/ron/latest/ron/de/struct.Deserializer.html \"struct ron::de::Deserializer\");`\n\n\n`pub use error::Error[](https://docs.rs/ron/latest/ron/error/enum.Error.html \"enum ron::error::Error\");`\n\n\n`pub use error::Result[](https://docs.rs/ron/latest/ron/error/type.Result.html \"type ron::error::Result\");`\n\n\n`pub use options::Options[](https://docs.rs/ron/latest/ron/options/struct.Options.html \"struct ron::options::Options\");`\n\n\n`pub use ser::to_string[](https://docs.rs/ron/latest/ron/ser/fn.to_string.html \"fn ron::ser::to_string\");`\n\n\n`pub use ser::Serializer[](https://docs.rs/ron/latest/ron/ser/struct.Serializer.html \"struct ron::ser::Serializer\");`\n\n\n`pub use value::Map[](https://docs.rs/ron/latest/ron/value/struct.Map.html \"struct ron::value::Map\");`\n\n\n`pub use value::Number[](https://docs.rs/ron/latest/ron/value/enum.Number.html \"enum ron::value::Number\");`\n\n\n`pub use value::Value[](https://docs.rs/ron/latest/ron/value/enum.Value.html \"enum ron::value::Value\");`\n\n## Modules\u00a7\u27e848\u27e9\n\nde\u27e849\u27e9\n\n\nerror\u27e850\u27e9\n\n\nextensions\u27e851\u27e9\n\n\noptions\u27e852\u27e9\n    Roundtrip serde Options module.\n\nser\u27e853\u27e9\n\n\nvalue\u27e854\u27e9\n    Value module.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ron/latest/src/ron/lib.rs.html#1-34: Source\n\u27e84\u27e9 https://docs.rs/ron/latest/ron/#rusty-object-notation: \u00a7\n\u27e85\u27e9 https://img.shields.io/badge/MSRV-1.64.0-orange: ![MSRV\n\u27e86\u27e9 https://img.shields.io/crates/v/ron.svg: ![Crates.io\n\u27e87\u27e9 https://docs.rs/ron/badge.svg: ![Docs\n\u27e88\u27e9 https://github.com/ron-rs/ron/actions/workflows/ci.yaml/badge.svg: ![CI\n\u27e89\u27e9 https://img.shields.io/endpoint?url=https%3A%2F%2Fron-rs.github.io%2Fron%2Fcoverage%2Fcoverage.json: ![Coverage\n\u27e810\u27e9 https://oss-fuzz-build-logs.storage.googleapis.com/badges/ron.svg: ![Fuzzing\n\u27e811\u27e9 https://img.shields.io/matrix/ron-rs:matrix.org.svg: ![Matrix\n\u27e812\u27e9 https://serde.rs/data-model.html: Serde\u2019s data model\n\u27e813\u27e9 https://docs.rs/ron/latest/ron/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/ron/latest/ron/#ron-syntax-overview: \u00a7\n\u27e815\u27e9 https://docs.rs/ron/latest/ron/docs/extensions.md: here\n\u27e816\u27e9 https://docs.rs/ron/latest/ron/#specification: \u00a7\n\u27e817\u27e9 https://docs.rs/ron/latest/ron/docs/grammar.md: here\n\u27e818\u27e9 https://github.com/ron-rs/ron/wiki/Specification: the wiki page\n\u27e819\u27e9 https://docs.rs/ron/latest/ron/#why-ron: \u00a7\n\u27e820\u27e9 https://docs.rs/ron/latest/ron/#example-in-json: \u00a7\n\u27e821\u27e9 https://docs.rs/ron/latest/ron/#same-example-in-ron: \u00a7\n\u27e822\u27e9 https://docs.rs/ron/latest/ron/#quickstart: \u00a7\n\u27e823\u27e9 https://docs.rs/ron/latest/ron/#cargotoml: \u00a7\n\u27e824\u27e9 https://docs.rs/ron/latest/ron/#mainrs: \u00a7\n\u27e825\u27e9 https://docs.rs/ron/latest/ron/#tooling: \u00a7\n\u27e826\u27e9 https://github.com/ron-rs/intellij-ron: intellij-ron\n\u27e827\u27e9 https://github.com/a5huynh/vscode-ron: a5huynh/vscode-ron\n\u27e828\u27e9 https://packagecontrol.io/packages/RON: RON\n\u27e829\u27e9 https://atom.io/packages/language-ron: language-ron\n\u27e830\u27e9 https://github.com/ron-rs/ron.vim: ron-rs/ron.vim\n\u27e831\u27e9 https://chiselapp.com/user/Hutzdog/repository/ron-mode/home: emacs-ron\n\u27e832\u27e9 https://docs.rs/ron/latest/ron/#limitations: \u00a7\n\u27e833\u27e9 https://docs.rs/serde/latest/serde/trait.Deserializer.html#tymethod.deserialize_any: `deserialize_any`\n\u27e834\u27e9 https://docs.rs/ron/latest/ron/#fn1: 1\n\u27e835\u27e9 https://docs.rs/ron/latest/ron/#fn2: 2\n\u27e836\u27e9 https://docs.rs/ron/latest/ron/#fn3: 3\n\u27e837\u27e9 https://github.com/ron-rs/ron/issues/new: new issue\n\u27e838\u27e9 https://github.com/serde-rs/serde/issues/1183: serde#1183\n\u27e839\u27e9 https://docs.rs/ron/latest/ron/#license: \u00a7\n\u27e840\u27e9 https://docs.rs/serde/latest/serde/de/trait.Deserialize.html: `Deserialize`\n\u27e841\u27e9 https://github.com/ron-rs/ron/pull/451: #451\n\u27e842\u27e9 https://docs.rs/ron/latest/ron/#fnref1: \u21a9\n\u27e843\u27e9 https://docs.rs/serde/latest/serde/de/trait.Visitor.html#tymethod.expecting: `Visitor::expecting`\n\u27e844\u27e9 https://github.com/ron-rs/ron/pull/455: #455\n\u27e845\u27e9 https://docs.rs/ron/latest/ron/#fnref2: \u21a9\n\u27e846\u27e9 https://docs.rs/ron/latest/ron/#fnref3: \u21a9\n\u27e847\u27e9 https://docs.rs/ron/latest/ron/#reexports: \u00a7\n\u27e848\u27e9 https://docs.rs/ron/latest/ron/#modules: \u00a7\n\u27e849\u27e9 https://docs.rs/ron/latest/ron/de/index.html: mod ron::de - de\n\u27e850\u27e9 https://docs.rs/ron/latest/ron/error/index.html: mod ron::error - error\n\u27e851\u27e9 https://docs.rs/ron/latest/ron/extensions/index.html: mod ron::extensions - extensions\n\u27e852\u27e9 https://docs.rs/ron/latest/ron/options/index.html: mod ron::options - options\n\u27e853\u27e9 https://docs.rs/ron/latest/ron/ser/index.html: mod ron::ser - ser\n\u27e854\u27e9 https://docs.rs/ron/latest/ron/value/index.html: mod ron::value - value\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `ron` crate provides Rusty Object Notation (RON), a human-readable and flexible data serialization format resembling Rust syntax. It supports Serde's data model, enabling serialization and deserialization of structs, enums, tuples, arrays, maps, and primitives. Key features include trailing commas, comments, optional struct names, and less verbose syntax compared to JSON, along with tooling support for popular editors like VS Code and IntelliJ.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 **Factual:** The `ron` crate supports serialization and deserialization of Rust data structures using Serde, including structs, enums, tuples, arrays, and maps.  \n\u274c **Counterfactual:** The `ron` crate requires custom serialization logic for enums, as it does not natively support them through Serde.\n\n---\n\n### Pair 2: Syntax Features\n\u2705 **Factual:** RON allows trailing commas, single-line and multi-line comments, and omits the need for quoting field names, making it more readable than JSON.  \n\u274c **Counterfactual:** RON does not support optional struct names, requiring all serialized data to include explicit type annotations.\n\n---\n\n### Pair 3: Tooling and Editor Support\n\u2705 **Factual:** The `ron` crate has editor plugins available for popular IDEs like IntelliJ, VS Code, and Vim, enabling syntax highlighting and better integration.  \n\u274c **Counterfactual:** The `ron` crate lacks tooling support for editors, requiring developers to manually configure syntax highlighting for RON files.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-32801f5c-cdbaf544-1751259016",
      "timestamp": "2025-06-30T04:50:16.808019+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]