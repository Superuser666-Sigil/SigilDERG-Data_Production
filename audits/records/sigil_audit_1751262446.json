[
  {
    "execution_id": "exec-07695f7e-fdc7eb5c-1751262420",
    "timestamp": "2025-06-30T05:47:00.795193+00:00",
    "sacred_chain": {
      "input_data": "sea-orm",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'sea-orm' -> 'sea-orm'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "sea-orm",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/sea-orm",
            "title": "sea-orm v1.1.13",
            "content": {
              "raw_markdown": "#  sea-orm v1.1.13\n\ud83d\udc1a An async & dynamic ORM for Rust \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #mysql ](https://crates.io/keywords/mysql)\n  * [ #orm ](https://crates.io/keywords/orm)\n  * [ #postgres ](https://crates.io/keywords/postgres)\n  * [ #sqlite ](https://crates.io/keywords/sqlite)\n\n\n  * [ Readme ](https://crates.io/crates/sea-orm)\n  * [ 87 Versions ](https://crates.io/crates/sea-orm/versions)\n  * [ Dependencies ](https://crates.io/crates/sea-orm/dependencies)\n  * [ Dependents ](https://crates.io/crates/sea-orm/reverse_dependencies)\n\n\n## Metadata\nabout 14 hours ago \nv1.81.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n3.44 MiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add sea-orm\nOr add the following line to your Cargo.toml:\nsea-orm = \"1.1.13\"\n## Homepage\n[ sea-ql.org/SeaORM ](https://www.sea-ql.org/SeaORM)\n## Documentation\n[ docs.rs/sea-orm ](https://docs.rs/sea-orm)\n## Repository\n[ github.com/SeaQL/sea-orm ](https://github.com/SeaQL/sea-orm)\n## Owners\n## Categories\n  * [Database interfaces](https://crates.io/categories/database)\n\n\n[ Report crate ](https://crates.io/support?crate=sea-orm&inquire=crate-violation)\n### Stats Overview\n7,355,084 Downloads all time\n87 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  sea-orm v1.1.13\n\ud83d\udc1a An async & dynamic ORM for Rust \n  *  #async \u27e81\u27e9\n  *  #mysql \u27e82\u27e9\n  *  #orm \u27e83\u27e9\n  *  #postgres \u27e84\u27e9\n  *  #sqlite \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  87 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 14 hours ago \nv1.81.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n3.44 MiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add sea-orm\nOr add the following line to your Cargo.toml:\nsea-orm = \"1.1.13\"\n## Homepage\n sea-ql.org/SeaORM \u27e812\u27e9\n## Documentation\n docs.rs/sea-orm \u27e813\u27e9\n## Repository\n github.com/SeaQL/sea-orm \u27e814\u27e9\n## Owners\n## Categories\n  * Database interfaces\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n7,355,084 Downloads all time\n87 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/mysql:  #mysql \n\u27e83\u27e9 https://crates.io/keywords/orm:  #orm \n\u27e84\u27e9 https://crates.io/keywords/postgres:  #postgres \n\u27e85\u27e9 https://crates.io/keywords/sqlite:  #sqlite \n\u27e86\u27e9 https://crates.io/crates/sea-orm:  Readme \n\u27e87\u27e9 https://crates.io/crates/sea-orm/versions:  87 Versions \n\u27e88\u27e9 https://crates.io/crates/sea-orm/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/sea-orm/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://www.sea-ql.org/SeaORM:  sea-ql.org/SeaORM \n\u27e813\u27e9 https://docs.rs/sea-orm:  docs.rs/sea-orm \n\u27e814\u27e9 https://github.com/SeaQL/sea-orm:  github.com/SeaQL/sea-orm \n\u27e815\u27e9 https://crates.io/categories/database: Database interfaces\n\u27e816\u27e9 https://crates.io/support?crate=sea-orm&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1424,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116210.3790431"
          },
          "docs_rs": {
            "url": "https://docs.rs/sea-orm",
            "title": "Crate sea_ormCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\n[Settings](https://docs.rs/sea-orm/latest/settings.html)\n[Help](https://docs.rs/sea-orm/latest/help.html)\nSummary[Source](https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430)\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n[![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm) [![docs](https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm) [![build status](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm)SeaORM\n##### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages)SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#getting-started)Getting Started\n  * [Documentation](https://www.sea-ql.org/SeaORM)\n  * [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n  * [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\n\nIntegration examples:\n  * [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n  * [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n  * [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n  * [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n  * [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n  * [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n  * [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n  * [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n  * [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n  * [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#features)Features\n  1. Async\nRelying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm)A quick taste of SeaORM\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#entity)Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#select)Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#insert)Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#update)Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#save)Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#delete)Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api)\ud83e\udded Seaography: instant GraphQL API\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel)\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\n[SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/) is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * [Example Repo](https://github.com/SeaQL/sea-orm-pro)\n  * [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/)\n  * [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/)\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#releases)Releases\n[SeaORM 1.0](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/) is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm)Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. [Full list here](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \n[Zed](https://github.com/zed-industries/zed)| ![GitHub stars](https://img.shields.io/github/stars/zed-industries/zed.svg?style=social)| A high-performance, multiplayer code editor  \n[OpenObserve](https://github.com/openobserve/openobserve)| ![GitHub stars](https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social)| Open-source observability platform  \n[RisingWave](https://github.com/risingwavelabs/risingwave)| ![GitHub stars](https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social)| Stream processing and management platform  \n[LLDAP](https://github.com/nitnelave/lldap)| ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social)| A light LDAP server for user management  \n[Warpgate](https://github.com/warp-tech/warpgate)| ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social)| Smart SSH bastion that works with any SSH client  \n[Svix](https://github.com/svix/svix-webhooks)| ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social)| The enterprise ready webhooks service  \n[Ryot](https://github.com/IgnisDa/ryot)| ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social)| The only self hosted tracker you will ever need  \n[Lapdev](https://github.com/lapce/lapdev)| ![GitHub stars](https://img.shields.io/github/stars/lapce/lapdev.svg?style=social)| Self-hosted remote development enviroment  \n[System Initiative](https://github.com/systeminit/si)| ![GitHub stars](https://img.shields.io/github/stars/systeminit/si.svg?style=social)| DevOps Automation Platform  \n[OctoBase](https://github.com/toeverything/OctoBase)| ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social)| A light-weight, scalable, offline collaborative data backend  \n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n[![Contributors](https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#sponsorship)Sponsorship\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors)Silver Sponsors\n[ ![](https://www.sea-ql.org/static/sponsors/DigitalOcean.svg) ](https://www.digitalocean.com/) | [ ![](https://www.sea-ql.org/static/sponsors/JetBrains.svg) ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#mascot)Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres](https://www.sea-ql.org/SeaORM/img/Terres.png)\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-)Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\n[Support SeaQL and get a Sticker Pack!](https://www.sea-ql.org/sticker-pack/) All proceeds contributes directly to the ongoing development of SeaQL projects.\n[![Rustacean Sticker Pack by SeaQL](https://www.sea-ql.org/static/sticker-pack-1s.jpg)](https://www.sea-ql.org/sticker-pack/)\n## Re-exports[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#reexports)\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#modules)\n\n[entity](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")\n    Module for the Entity type and operations\n\n[error](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")\n    Error types for all database operations\n\n[metric](https://docs.rs/sea-orm/latest/sea_orm/metric/index.html \"mod sea_orm::metric\")\n    Types and methods to perform metric collection\n\n[query](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")\n    Types and methods to perform queries\n\n[schema](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")\n    Types that defines the schemas of an Entity\n\n[value](https://docs.rs/sea-orm/latest/sea_orm/value/index.html \"mod sea_orm::value\")\n    Helpers for working with Value\n## Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#macros)\n\n[debug_print](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html \"macro sea_orm::debug_print\")\n    Non-debug version\n\n[debug_query](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html \"macro sea_orm::debug_query\")\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\n[debug_query_stmt](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html \"macro sea_orm::debug_query_stmt\")\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#structs)\n\n[ConnectOptions](https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html \"struct sea_orm::ConnectOptions\")\n    Defines the configuration options of a database\n\n[Cursor](https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html \"struct sea_orm::Cursor\")\n    Cursor pagination\n\n[Database](https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html \"struct sea_orm::Database\")\n    Defines a database\n\n[DatabaseTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html \"struct sea_orm::DatabaseTransaction\")\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\n[DeleteResult](https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html \"struct sea_orm::DeleteResult\")\n    The result of a DELETE operation\n\n[Deleter](https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html \"struct sea_orm::Deleter\")\n    Handles DELETE operations in a ActiveModel using [DeleteStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html \"struct sea_query::query::delete::DeleteStatement\")\n\n[ExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html \"struct sea_orm::ExecResult\")\n    Defines the result of executing an operation\n\n[InsertResult](https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html \"struct sea_orm::InsertResult\")\n    The result of an INSERT operation on an ActiveModel\n\n[Inserter](https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html \"struct sea_orm::Inserter\")\n    Defines a structure to perform INSERT operations in an ActiveModel\n\n[ItemsAndPagesNumber](https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html \"struct sea_orm::ItemsAndPagesNumber\")\n    Define a structure containing the numbers of items and pages of a Paginator\n\n[MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")`mock`\n    Defines a Mock database suitable for testing\n\n[MockDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html \"struct sea_orm::MockDatabaseConnection\")\n    Defines a connection for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html \"struct sea_orm::MockDatabaseConnector\")\n    Defines a database driver for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html \"struct sea_orm::MockExecResult\")`mock`\n    Defines the results obtained from a [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\")`mock`\n    Defines the structure of a test Row for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\") which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[OpenTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html \"struct sea_orm::OpenTransaction\")`mock`\n    Defines a transaction that is has not been committed\n\n[Paginator](https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html \"struct sea_orm::Paginator\")\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\n[ProxyDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html \"struct sea_orm::ProxyDatabaseConnection\")\n    Defines a connection for the [ProxyDatabase]\n\n[ProxyDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html \"struct sea_orm::ProxyDatabaseConnector\")\n    Defines a database driver for the [ProxyDatabase]\n\n[ProxyExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html \"struct sea_orm::ProxyExecResult\")`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\n[ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\")\n    Defines the result of a query operation on a Model\n\n[QueryStream](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html \"struct sea_orm::QueryStream\")\n    The self-referencing struct.\n\n[SelectGetableTuple](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html \"struct sea_orm::SelectGetableTuple\")\n    Get tuple from query result based on column index\n\n[SelectGetableValue](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html \"struct sea_orm::SelectGetableValue\")\n    Get tuple from query result based on a list of column identifiers\n\n[SelectModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html \"struct sea_orm::SelectModel\")\n    Helper class to handle query result for 1 Model\n\n[SelectThreeModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html \"struct sea_orm::SelectThreeModel\")\n    Helper class to handle query result for 3 Models\n\n[SelectTwoModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html \"struct sea_orm::SelectTwoModel\")\n    Helper class to handle query result for 2 Models\n\n[Selector](https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html \"struct sea_orm::Selector\")\n    Defines a type to do `SELECT` operations through a [SelectStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html \"struct sea_query::query::select::SelectStatement\") on a Model\n\n[SelectorRaw](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html \"struct sea_orm::SelectorRaw\")\n    Performs a raw `SELECT` operation on a model\n\n[SqlxMySqlConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html \"struct sea_orm::SqlxMySqlConnector\")\n    Defines the [sqlx::mysql](https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html \"mod sqlx_mysql\") connector\n\n[SqlxMySqlPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html \"struct sea_orm::SqlxMySqlPoolConnection\")\n    Defines a sqlx MySQL pool\n\n[SqlxPostgresConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html \"struct sea_orm::SqlxPostgresConnector\")\n    Defines the [sqlx::postgres](https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html \"mod sqlx_postgres\") connector\n\n[SqlxPostgresPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html \"struct sea_orm::SqlxPostgresPoolConnection\")\n    Defines a sqlx PostgreSQL pool\n\n[SqlxSqliteConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html \"struct sea_orm::SqlxSqliteConnector\")\n    Defines the [sqlx::sqlite](https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html \"mod sqlx_sqlite\") connector\n\n[SqlxSqlitePoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html \"struct sea_orm::SqlxSqlitePoolConnection\")\n    Defines a sqlx SQLite pool\n\n[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n    Defines an SQL statement\n\n[Transaction](https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html \"struct sea_orm::Transaction\")`mock`\n    Defines a database transaction as it holds a Vec<[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")>\n\n[TransactionStream](https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html \"struct sea_orm::TransactionStream\")\n    The self-referencing struct.\n\n[UpdateResult](https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html \"struct sea_orm::UpdateResult\")\n    The result of an update operation on an ActiveModel\n\n[Updater](https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html \"struct sea_orm::Updater\")\n    Defines an update operation\n\n[Values](https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html \"struct sea_orm::Values\")\n\n## Enums[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#enums)\n\n[AccessMode](https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html \"enum sea_orm::AccessMode\")\n    Access mode\n\n[DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\")\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\n[DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\n[IsolationLevel](https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html \"enum sea_orm::IsolationLevel\")\n    Isolation level\n\n[TransactionError](https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html \"enum sea_orm::TransactionError\")\n    Defines errors for handling transaction failures\n\n[TryInsertResult](https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html \"enum sea_orm::TryInsertResult\")\n    The types of results for an INSERT operation\n\n[Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")\n    Value variants\n## Traits[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#traits)\n\n[ColIdx](https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html \"trait sea_orm::ColIdx\")\n    Column Index, used by [`TryGetable`](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\"). Implemented for `&str` and `usize`\n\n[ConnectionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html \"trait sea_orm::ConnectionTrait\")\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\n[CursorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html \"trait sea_orm::CursorTrait\")\n    A trait for any type that can be turn into a cursor\n\n[Iden](https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html \"trait sea_orm::Iden\")\n    Identifier\n\n[IntoMockRow](https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html \"trait sea_orm::IntoMockRow\")`mock`\n    A trait to get a [MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\") from a type useful for testing in the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html \"trait sea_orm::MockDatabaseTrait\")\n    A Trait for any type wanting to perform operations on the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[PaginatorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html \"trait sea_orm::PaginatorTrait\")\n    A Trait for any type that can paginate results\n\n[ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\")`proxy`\n    Defines the [ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\") to save the functions\n\n[SelectorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html \"trait sea_orm::SelectorTrait\")\n    A Trait for any type that can perform SELECT queries\n\n[StatementBuilder](https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html \"trait sea_orm::StatementBuilder\")\n    Any type that can build a [Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n\n[StreamTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html \"trait sea_orm::StreamTrait\")\n    Stream query results\n\n[TransactionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html \"trait sea_orm::TransactionTrait\")\n    Spawn database transaction\n\n[TryFromU64](https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html \"trait sea_orm::TryFromU64\")\n    Try to convert a type to a u64\n\n[TryGetable](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\")\n    An interface to get a value from the query result\n\n[TryGetableArray](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html \"trait sea_orm::TryGetableArray\")\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\n[TryGetableFromJson](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html \"trait sea_orm::TryGetableFromJson\")\n    An interface to get a JSON from the query result\n\n[TryGetableMany](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html \"trait sea_orm::TryGetableMany\")\n    An interface to get a tuple value from the query result\n## Functions[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#functions)\n\n[from_query_result_to_proxy_row](https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html \"fn sea_orm::from_query_result_to_proxy_row\")`proxy`\n    Convert [QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\") to [ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")\n## Type Aliases[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#types)\n\n[DbBackend](https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html \"type sea_orm::DbBackend\")\n    The same as [DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\") just shorter :)\n\n[DbConn](https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html \"type sea_orm::DbConn\")\n    The same as a [DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n\n[PinBoxStream](https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html \"type sea_orm::PinBoxStream\")\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#derives)\n\n[DeriveActiveEnum](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html \"derive sea_orm::DeriveActiveEnum\")\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\n[DeriveActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html \"derive sea_orm::DeriveActiveModel\")\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\n[DeriveActiveModelBehavior](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html \"derive sea_orm::DeriveActiveModelBehavior\")\n    Models that a user can override\n\n[DeriveColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html \"derive sea_orm::DeriveColumn\")\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\n[DeriveCustomColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html \"derive sea_orm::DeriveCustomColumn\")\n    Derive a column if column names are not in snake-case\n\n[DeriveDisplay](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html \"derive sea_orm::DeriveDisplay\")\n\n\n[DeriveEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html \"derive sea_orm::DeriveEntity\")\n    Create an Entity\n\n[DeriveEntityModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html \"derive sea_orm::DeriveEntityModel\")\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\n[DeriveIden](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html \"derive sea_orm::DeriveIden\")\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\n[DeriveIntoActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html \"derive sea_orm::DeriveIntoActiveModel\")\n    Derive into an active model\n\n[DeriveMigrationName](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html \"derive sea_orm::DeriveMigrationName\")\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\n[DeriveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html \"derive sea_orm::DeriveModel\")\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\n[DerivePartialModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html \"derive sea_orm::DerivePartialModel\")\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\n[DerivePrimaryKey](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html \"derive sea_orm::DerivePrimaryKey\")\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\") is also derived, allowing iteration over all enum variants.\n\n[DeriveRelatedEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html \"derive sea_orm::DeriveRelatedEntity\")\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\n[DeriveRelation](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html \"derive sea_orm::DeriveRelation\")\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\n[DeriveValueType](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html \"derive sea_orm::DeriveValueType\")\n    Implements traits for types that wrap a database value type.\n\n[EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\")\n    Creates a new type that iterates of the variants of an enum.\n\n[FromJsonQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html \"derive sea_orm::FromJsonQueryResult\")\n\n\n[FromQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html \"derive sea_orm::FromQueryResult\")\n    Convert a query result into the corresponding Model.\n",
              "markdown_with_citations": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n![crate\u27e84\u27e9](https://crates.io/crates/sea-orm) ![docs\u27e85\u27e9](https://docs.rs/sea-orm) ![build status\u27e86\u27e9](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## \u00a7\u27e87\u27e9SeaORM\n##### \u00a7\u27e88\u27e9SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n![GitHub stars\u27e89\u27e9](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the SeaQL Community Survey 2024\u27e810\u27e9!\n![Discord\u27e811\u27e9](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### \u00a7\u27e812\u27e9Getting Started\n  * Documentation\u27e813\u27e9\n  * Tutorial\u27e814\u27e9\n  * Cookbook\u27e815\u27e9\n\n\nIntegration examples:\n  * Actix v4 Example\u27e816\u27e9\n  * Axum Example\u27e817\u27e9\n  * GraphQL Example\u27e818\u27e9\n  * jsonrpsee Example\u27e819\u27e9\n  * Loco TODO Example\u27e820\u27e9 / Loco REST Starter\u27e821\u27e9\n  * Poem Example\u27e822\u27e9\n  * Rocket Example\u27e823\u27e9 / Rocket OpenAPI Example\u27e824\u27e9\n  * Salvo Example\u27e825\u27e9\n  * Tonic Example\u27e826\u27e9\n  * Seaography Example\u27e827\u27e9\n\n\n### \u00a7\u27e828\u27e9Features\n  1. Async\nRelying on SQLx\u27e829\u27e9, SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon SeaQuery\u27e830\u27e9, SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### \u00a7\u27e831\u27e9A quick taste of SeaORM\n#### \u00a7\u27e832\u27e9Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### \u00a7\u27e833\u27e9Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### \u00a7\u27e834\u27e9Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### \u00a7\u27e835\u27e9Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### \u00a7\u27e836\u27e9Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### \u00a7\u27e837\u27e9Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### \u00a7\u27e838\u27e9\ud83e\udded Seaography: instant GraphQL API\nSeaography\u27e839\u27e9 is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the Seaography Example\u27e827\u27e9 to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### \u00a7\u27e840\u27e9\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\nSeaORM Pro\u27e841\u27e9 is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * Example Repo\u27e842\u27e9\n  * Getting Started with Loco\u27e843\u27e9\n  * Getting Started with Axum\u27e844\u27e9\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### \u00a7\u27e845\u27e9Releases\nSeaORM 1.0\u27e846\u27e9 is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * Change Log\u27e847\u27e9\n\n\n#### \u00a7\u27e848\u27e9Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. Full list here\u27e849\u27e9. Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \nZed\u27e850\u27e9| ![GitHub stars\u27e851\u27e9]| A high-performance, multiplayer code editor  \nOpenObserve\u27e852\u27e9| ![GitHub stars\u27e853\u27e9]| Open-source observability platform  \nRisingWave\u27e854\u27e9| ![GitHub stars\u27e855\u27e9]| Stream processing and management platform  \nLLDAP\u27e856\u27e9| ![GitHub stars\u27e857\u27e9]| A light LDAP server for user management  \nWarpgate\u27e858\u27e9| ![GitHub stars\u27e859\u27e9]| Smart SSH bastion that works with any SSH client  \nSvix\u27e860\u27e9| ![GitHub stars\u27e861\u27e9]| The enterprise ready webhooks service  \nRyot\u27e862\u27e9| ![GitHub stars\u27e863\u27e9]| The only self hosted tracker you will ever need  \nLapdev\u27e864\u27e9| ![GitHub stars\u27e865\u27e9]| Self-hosted remote development enviroment  \nSystem Initiative\u27e866\u27e9| ![GitHub stars\u27e867\u27e9]| DevOps Automation Platform  \nOctoBase\u27e868\u27e9| ![GitHub stars\u27e869\u27e9]| A light-weight, scalable, offline collaborative data backend  \n### \u00a7\u27e870\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e871\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e872\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### \u00a7\u27e873\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n![Contributors\u27e874\u27e9](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### \u00a7\u27e875\u27e9Sponsorship\nSeaQL.org\u27e876\u27e9 is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via GitHub Sponsor\u27e877\u27e9 will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### \u00a7\u27e878\u27e9Silver Sponsors\n ![\u27e879\u27e9 ](https://www.digitalocean.com/) |  ![\u27e880\u27e9 ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### \u00a7\u27e881\u27e9Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres\u27e882\u27e9]\n#### \u00a7\u27e883\u27e9Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\nSupport SeaQL and get a Sticker Pack!\u27e884\u27e9 All proceeds contributes directly to the ongoing development of SeaQL projects.\n![Rustacean Sticker Pack by SeaQL\u27e885\u27e9](https://www.sea-ql.org/sticker-pack/)\n## Re-exports\u00a7\u27e886\u27e9\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules\u00a7\u27e887\u27e9\n\nentity\u27e888\u27e9\n    Module for the Entity type and operations\n\nerror\u27e889\u27e9\n    Error types for all database operations\n\nmetric\u27e890\u27e9\n    Types and methods to perform metric collection\n\nquery\u27e891\u27e9\n    Types and methods to perform queries\n\nschema\u27e892\u27e9\n    Types that defines the schemas of an Entity\n\nvalue\u27e893\u27e9\n    Helpers for working with Value\n## Macros\u00a7\u27e894\u27e9\n\ndebug_print\u27e895\u27e9\n    Non-debug version\n\ndebug_query\u27e896\u27e9\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\ndebug_query_stmt\u27e897\u27e9\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs\u00a7\u27e898\u27e9\n\nConnectOptions\u27e899\u27e9\n    Defines the configuration options of a database\n\nCursor\u27e8100\u27e9\n    Cursor pagination\n\nDatabase\u27e8101\u27e9\n    Defines a database\n\nDatabaseTransaction\u27e8102\u27e9\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\nDeleteResult\u27e8103\u27e9\n    The result of a DELETE operation\n\nDeleter\u27e8104\u27e9\n    Handles DELETE operations in a ActiveModel using DeleteStatement\u27e8105\u27e9\n\nExecResult\u27e8106\u27e9\n    Defines the result of executing an operation\n\nInsertResult\u27e8107\u27e9\n    The result of an INSERT operation on an ActiveModel\n\nInserter\u27e8108\u27e9\n    Defines a structure to perform INSERT operations in an ActiveModel\n\nItemsAndPagesNumber\u27e8109\u27e9\n    Define a structure containing the numbers of items and pages of a Paginator\n\nMockDatabase\u27e8110\u27e9`mock`\n    Defines a Mock database suitable for testing\n\nMockDatabaseConnection\u27e8111\u27e9\n    Defines a connection for the MockDatabase\u27e8110\u27e9\n\nMockDatabaseConnector\u27e8112\u27e9\n    Defines a database driver for the MockDatabase\u27e8110\u27e9\n\nMockExecResult\u27e8113\u27e9`mock`\n    Defines the results obtained from a MockDatabase\u27e8110\u27e9\n\nMockRow\u27e8114\u27e9`mock`\n    Defines the structure of a test Row for the MockDatabase\u27e8110\u27e9 which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nOpenTransaction\u27e8118\u27e9`mock`\n    Defines a transaction that is has not been committed\n\nPaginator\u27e8119\u27e9\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\nProxyDatabaseConnection\u27e8120\u27e9\n    Defines a connection for the [ProxyDatabase]\n\nProxyDatabaseConnector\u27e8121\u27e9\n    Defines a database driver for the [ProxyDatabase]\n\nProxyExecResult\u27e8122\u27e9`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\nProxyRow\u27e8123\u27e9`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nQueryResult\u27e8124\u27e9\n    Defines the result of a query operation on a Model\n\nQueryStream\u27e8125\u27e9\n    The self-referencing struct.\n\nSelectGetableTuple\u27e8126\u27e9\n    Get tuple from query result based on column index\n\nSelectGetableValue\u27e8127\u27e9\n    Get tuple from query result based on a list of column identifiers\n\nSelectModel\u27e8128\u27e9\n    Helper class to handle query result for 1 Model\n\nSelectThreeModel\u27e8129\u27e9\n    Helper class to handle query result for 3 Models\n\nSelectTwoModel\u27e8130\u27e9\n    Helper class to handle query result for 2 Models\n\nSelector\u27e8131\u27e9\n    Defines a type to do `SELECT` operations through a SelectStatement\u27e8132\u27e9 on a Model\n\nSelectorRaw\u27e8133\u27e9\n    Performs a raw `SELECT` operation on a model\n\nSqlxMySqlConnector\u27e8134\u27e9\n    Defines the sqlx::mysql\u27e8135\u27e9 connector\n\nSqlxMySqlPoolConnection\u27e8136\u27e9\n    Defines a sqlx MySQL pool\n\nSqlxPostgresConnector\u27e8137\u27e9\n    Defines the sqlx::postgres\u27e8138\u27e9 connector\n\nSqlxPostgresPoolConnection\u27e8139\u27e9\n    Defines a sqlx PostgreSQL pool\n\nSqlxSqliteConnector\u27e8140\u27e9\n    Defines the sqlx::sqlite\u27e8141\u27e9 connector\n\nSqlxSqlitePoolConnection\u27e8142\u27e9\n    Defines a sqlx SQLite pool\n\nStatement\u27e8143\u27e9\n    Defines an SQL statement\n\nTransaction\u27e8144\u27e9`mock`\n    Defines a database transaction as it holds a Vec<Statement\u27e8143\u27e9>\n\nTransactionStream\u27e8145\u27e9\n    The self-referencing struct.\n\nUpdateResult\u27e8146\u27e9\n    The result of an update operation on an ActiveModel\n\nUpdater\u27e8147\u27e9\n    Defines an update operation\n\nValues\u27e8148\u27e9\n\n## Enums\u00a7\u27e8149\u27e9\n\nAccessMode\u27e8150\u27e9\n    Access mode\n\nDatabaseBackend\u27e8151\u27e9\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\nDatabaseConnection\u27e8152\u27e9\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\nIsolationLevel\u27e8153\u27e9\n    Isolation level\n\nTransactionError\u27e8154\u27e9\n    Defines errors for handling transaction failures\n\nTryInsertResult\u27e8155\u27e9\n    The types of results for an INSERT operation\n\nValue\u27e8117\u27e9\n    Value variants\n## Traits\u00a7\u27e8156\u27e9\n\nColIdx\u27e8157\u27e9\n    Column Index, used by `TryGetable`\u27e8158\u27e9. Implemented for `&str` and `usize`\n\nConnectionTrait\u27e8159\u27e9\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\nCursorTrait\u27e8160\u27e9\n    A trait for any type that can be turn into a cursor\n\nIden\u27e8161\u27e9\n    Identifier\n\nIntoMockRow\u27e8162\u27e9`mock`\n    A trait to get a MockRow\u27e8114\u27e9 from a type useful for testing in the MockDatabase\u27e8110\u27e9\n\nMockDatabaseTrait\u27e8163\u27e9\n    A Trait for any type wanting to perform operations on the MockDatabase\u27e8110\u27e9\n\nPaginatorTrait\u27e8164\u27e9\n    A Trait for any type that can paginate results\n\nProxyDatabaseTrait\u27e8165\u27e9`proxy`\n    Defines the ProxyDatabaseTrait\u27e8165\u27e9 to save the functions\n\nSelectorTrait\u27e8166\u27e9\n    A Trait for any type that can perform SELECT queries\n\nStatementBuilder\u27e8167\u27e9\n    Any type that can build a Statement\u27e8143\u27e9\n\nStreamTrait\u27e8168\u27e9\n    Stream query results\n\nTransactionTrait\u27e8169\u27e9\n    Spawn database transaction\n\nTryFromU64\u27e8170\u27e9\n    Try to convert a type to a u64\n\nTryGetable\u27e8158\u27e9\n    An interface to get a value from the query result\n\nTryGetableArray\u27e8171\u27e9\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\nTryGetableFromJson\u27e8172\u27e9\n    An interface to get a JSON from the query result\n\nTryGetableMany\u27e8173\u27e9\n    An interface to get a tuple value from the query result\n## Functions\u00a7\u27e8174\u27e9\n\nfrom_query_result_to_proxy_row\u27e8175\u27e9`proxy`\n    Convert QueryResult\u27e8124\u27e9 to ProxyRow\u27e8123\u27e9\n## Type Aliases\u00a7\u27e8176\u27e9\n\nDbBackend\u27e8177\u27e9\n    The same as DatabaseBackend\u27e8151\u27e9 just shorter :)\n\nDbConn\u27e8178\u27e9\n    The same as a DatabaseConnection\u27e8152\u27e9\n\nPinBoxStream\u27e8179\u27e9\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros\u00a7\u27e8180\u27e9\n\nDeriveActiveEnum\u27e8181\u27e9\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\nDeriveActiveModel\u27e8182\u27e9\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\nDeriveActiveModelBehavior\u27e8183\u27e9\n    Models that a user can override\n\nDeriveColumn\u27e8184\u27e9\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\nDeriveCustomColumn\u27e8185\u27e9\n    Derive a column if column names are not in snake-case\n\nDeriveDisplay\u27e8186\u27e9\n\n\nDeriveEntity\u27e8187\u27e9\n    Create an Entity\n\nDeriveEntityModel\u27e8188\u27e9\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\nDeriveIden\u27e8189\u27e9\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\nDeriveIntoActiveModel\u27e8190\u27e9\n    Derive into an active model\n\nDeriveMigrationName\u27e8191\u27e9\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\nDeriveModel\u27e8192\u27e9\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\nDerivePartialModel\u27e8193\u27e9\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\nDerivePrimaryKey\u27e8194\u27e9\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The EnumIter\u27e8195\u27e9 is also derived, allowing iteration over all enum variants.\n\nDeriveRelatedEntity\u27e8196\u27e9\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\nDeriveRelation\u27e8197\u27e9\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\nDeriveValueType\u27e8198\u27e9\n    Implements traits for types that wrap a database value type.\n\nEnumIter\u27e8195\u27e9\n    Creates a new type that iterates of the variants of an enum.\n\nFromJsonQueryResult\u27e8199\u27e9\n\n\nFromQueryResult\u27e8200\u27e9\n    Convert a query result into the corresponding Model.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sea-orm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sea-orm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/sea-orm.svg: ![crate\n\u27e85\u27e9 https://docs.rs/sea-orm/badge.svg: ![docs\n\u27e86\u27e9 https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg: ![build status\n\u27e87\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm: \u00a7\n\u27e88\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages: \u00a7\n\u27e89\u27e9 https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1: ![GitHub stars\n\u27e810\u27e9 https://sea-ql.org/community-survey: SeaQL Community Survey 2024\n\u27e811\u27e9 https://img.shields.io/discord/873880840487206962?label=Discord: ![Discord\n\u27e812\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#getting-started: \u00a7\n\u27e813\u27e9 https://www.sea-ql.org/SeaORM: Documentation\n\u27e814\u27e9 https://www.sea-ql.org/sea-orm-tutorial: Tutorial\n\u27e815\u27e9 https://www.sea-ql.org/sea-orm-cookbook: Cookbook\n\u27e816\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example: Actix v4 Example\n\u27e817\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example: Axum Example\n\u27e818\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example: GraphQL Example\n\u27e819\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example: jsonrpsee Example\n\u27e820\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example: Loco TODO Example\n\u27e821\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter: Loco REST Starter\n\u27e822\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example: Poem Example\n\u27e823\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example: Rocket Example\n\u27e824\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example: Rocket OpenAPI Example\n\u27e825\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example: Salvo Example\n\u27e826\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example: Tonic Example\n\u27e827\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example: Seaography Example\n\u27e828\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#features: \u00a7\n\u27e829\u27e9 https://github.com/launchbadge/sqlx: SQLx\n\u27e830\u27e9 https://github.com/SeaQL/sea-query: SeaQuery\n\u27e831\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm: \u00a7\n\u27e832\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#entity: \u00a7\n\u27e833\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#select: \u00a7\n\u27e834\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#insert: \u00a7\n\u27e835\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#update: \u00a7\n\u27e836\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#save: \u00a7\n\u27e837\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#delete: \u00a7\n\u27e838\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api: \u00a7\n\u27e839\u27e9 https://github.com/SeaQL/seaography: Seaography\n\u27e840\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel: \u00a7\n\u27e841\u27e9 https://www.sea-ql.org/sea-orm-pro/: SeaORM Pro\n\u27e842\u27e9 https://github.com/SeaQL/sea-orm-pro: Example Repo\n\u27e843\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/: Getting Started with Loco\n\u27e844\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/: Getting Started with Axum\n\u27e845\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#releases: \u00a7\n\u27e846\u27e9 https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/: SeaORM 1.0\n\u27e847\u27e9 https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md: Change Log\n\u27e848\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm: \u00a7\n\u27e849\u27e9 https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm: Full list here\n\u27e850\u27e9 https://github.com/zed-industries/zed: Zed\n\u27e851\u27e9 https://img.shields.io/github/stars/zed-industries/zed.svg?style=social: GitHub stars\n\u27e852\u27e9 https://github.com/openobserve/openobserve: OpenObserve\n\u27e853\u27e9 https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social: GitHub stars\n\u27e854\u27e9 https://github.com/risingwavelabs/risingwave: RisingWave\n\u27e855\u27e9 https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social: GitHub stars\n\u27e856\u27e9 https://github.com/nitnelave/lldap: LLDAP\n\u27e857\u27e9 https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social: GitHub stars\n\u27e858\u27e9 https://github.com/warp-tech/warpgate: Warpgate\n\u27e859\u27e9 https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social: GitHub stars\n\u27e860\u27e9 https://github.com/svix/svix-webhooks: Svix\n\u27e861\u27e9 https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social: GitHub stars\n\u27e862\u27e9 https://github.com/IgnisDa/ryot: Ryot\n\u27e863\u27e9 https://img.shields.io/github/stars/ignisda/ryot.svg?style=social: GitHub stars\n\u27e864\u27e9 https://github.com/lapce/lapdev: Lapdev\n\u27e865\u27e9 https://img.shields.io/github/stars/lapce/lapdev.svg?style=social: GitHub stars\n\u27e866\u27e9 https://github.com/systeminit/si: System Initiative\n\u27e867\u27e9 https://img.shields.io/github/stars/systeminit/si.svg?style=social: GitHub stars\n\u27e868\u27e9 https://github.com/toeverything/OctoBase: OctoBase\n\u27e869\u27e9 https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social: GitHub stars\n\u27e870\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#license: \u00a7\n\u27e871\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE: LICENSE-APACHE\n\u27e872\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT: LICENSE-MIT\n\u27e873\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#contribution: \u00a7\n\u27e874\u27e9 https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false: ![Contributors\n\u27e875\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#sponsorship: \u00a7\n\u27e876\u27e9 https://www.sea-ql.org/: SeaQL.org\n\u27e877\u27e9 https://github.com/sponsors/SeaQL: GitHub Sponsor\n\u27e878\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors: \u00a7\n\u27e879\u27e9 https://www.sea-ql.org/static/sponsors/DigitalOcean.svg:  ![\n\u27e880\u27e9 https://www.sea-ql.org/static/sponsors/JetBrains.svg:  ![\n\u27e881\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#mascot: \u00a7\n\u27e882\u27e9 https://www.sea-ql.org/SeaORM/img/Terres.png: Terres\n\u27e883\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-: \u00a7\n\u27e884\u27e9 https://www.sea-ql.org/sticker-pack/: Support SeaQL and get a Sticker Pack!\n\u27e885\u27e9 https://www.sea-ql.org/static/sticker-pack-1s.jpg: ![Rustacean Sticker Pack by SeaQL\n\u27e886\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#reexports: \u00a7\n\u27e887\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#modules: \u00a7\n\u27e888\u27e9 https://docs.rs/sea-orm/latest/sea_orm/entity/index.html: mod sea_orm::entity - entity\n\u27e889\u27e9 https://docs.rs/sea-orm/latest/sea_orm/error/index.html: mod sea_orm::error - error\n\u27e890\u27e9 https://docs.rs/sea-orm/latest/sea_orm/metric/index.html: mod sea_orm::metric - metric\n\u27e891\u27e9 https://docs.rs/sea-orm/latest/sea_orm/query/index.html: mod sea_orm::query - query\n\u27e892\u27e9 https://docs.rs/sea-orm/latest/sea_orm/schema/index.html: mod sea_orm::schema - schema\n\u27e893\u27e9 https://docs.rs/sea-orm/latest/sea_orm/value/index.html: mod sea_orm::value - value\n\u27e894\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#macros: \u00a7\n\u27e895\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html: macro sea_orm::debug_print - debug_print\n\u27e896\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html: macro sea_orm::debug_query - debug_query\n\u27e897\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html: macro sea_orm::debug_query_stmt - debug_query_stmt\n\u27e898\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#structs: \u00a7\n\u27e899\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html: struct sea_orm::ConnectOptions - ConnectOptions\n\u27e8100\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html: struct sea_orm::Cursor - Cursor\n\u27e8101\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html: struct sea_orm::Database - Database\n\u27e8102\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html: struct sea_orm::DatabaseTransaction - DatabaseTransaction\n\u27e8103\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html: struct sea_orm::DeleteResult - DeleteResult\n\u27e8104\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html: struct sea_orm::Deleter - Deleter\n\u27e8105\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html: struct sea_query::query::delete::DeleteStatement - DeleteStatement\n\u27e8106\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html: struct sea_orm::ExecResult - ExecResult\n\u27e8107\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html: struct sea_orm::InsertResult - InsertResult\n\u27e8108\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html: struct sea_orm::Inserter - Inserter\n\u27e8109\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html: struct sea_orm::ItemsAndPagesNumber - ItemsAndPagesNumber\n\u27e8110\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html: struct sea_orm::MockDatabase - MockDatabase\n\u27e8111\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html: struct sea_orm::MockDatabaseConnection - MockDatabaseConnection\n\u27e8112\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html: struct sea_orm::MockDatabaseConnector - MockDatabaseConnector\n\u27e8113\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html: struct sea_orm::MockExecResult - MockExecResult\n\u27e8114\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html: struct sea_orm::MockRow - MockRow\n\u27e8115\u27e9 https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html: struct alloc::collections::btree::map::BTreeMap - BTreeMap\n\u27e8116\u27e9 https://doc.rust-lang.org/nightly/alloc/string/struct.String.html: struct alloc::string::String - String\n\u27e8117\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html: enum sea_orm::Value - Value\n\u27e8118\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html: struct sea_orm::OpenTransaction - OpenTransaction\n\u27e8119\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html: struct sea_orm::Paginator - Paginator\n\u27e8120\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html: struct sea_orm::ProxyDatabaseConnection - ProxyDatabaseConnection\n\u27e8121\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html: struct sea_orm::ProxyDatabaseConnector - ProxyDatabaseConnector\n\u27e8122\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html: struct sea_orm::ProxyExecResult - ProxyExecResult\n\u27e8123\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html: struct sea_orm::ProxyRow - ProxyRow\n\u27e8124\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html: struct sea_orm::QueryResult - QueryResult\n\u27e8125\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html: struct sea_orm::QueryStream - QueryStream\n\u27e8126\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html: struct sea_orm::SelectGetableTuple - SelectGetableTuple\n\u27e8127\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html: struct sea_orm::SelectGetableValue - SelectGetableValue\n\u27e8128\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html: struct sea_orm::SelectModel - SelectModel\n\u27e8129\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html: struct sea_orm::SelectThreeModel - SelectThreeModel\n\u27e8130\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html: struct sea_orm::SelectTwoModel - SelectTwoModel\n\u27e8131\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html: struct sea_orm::Selector - Selector\n\u27e8132\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html: struct sea_query::query::select::SelectStatement - SelectStatement\n\u27e8133\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html: struct sea_orm::SelectorRaw - SelectorRaw\n\u27e8134\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html: struct sea_orm::SqlxMySqlConnector - SqlxMySqlConnector\n\u27e8135\u27e9 https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html: mod sqlx_mysql - sqlx::mysql\n\u27e8136\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html: struct sea_orm::SqlxMySqlPoolConnection - SqlxMySqlPoolConnection\n\u27e8137\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html: struct sea_orm::SqlxPostgresConnector - SqlxPostgresConnector\n\u27e8138\u27e9 https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html: mod sqlx_postgres - sqlx::postgres\n\u27e8139\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html: struct sea_orm::SqlxPostgresPoolConnection - SqlxPostgresPoolConnection\n\u27e8140\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html: struct sea_orm::SqlxSqliteConnector - SqlxSqliteConnector\n\u27e8141\u27e9 https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html: mod sqlx_sqlite - sqlx::sqlite\n\u27e8142\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html: struct sea_orm::SqlxSqlitePoolConnection - SqlxSqlitePoolConnection\n\u27e8143\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html: struct sea_orm::Statement - Statement\n\u27e8144\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html: struct sea_orm::Transaction - Transaction\n\u27e8145\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html: struct sea_orm::TransactionStream - TransactionStream\n\u27e8146\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html: struct sea_orm::UpdateResult - UpdateResult\n\u27e8147\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html: struct sea_orm::Updater - Updater\n\u27e8148\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html: struct sea_orm::Values - Values\n\u27e8149\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#enums: \u00a7\n\u27e8150\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html: enum sea_orm::AccessMode - AccessMode\n\u27e8151\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html: enum sea_orm::DatabaseBackend - DatabaseBackend\n\u27e8152\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html: enum sea_orm::DatabaseConnection - DatabaseConnection\n\u27e8153\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html: enum sea_orm::IsolationLevel - IsolationLevel\n\u27e8154\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html: enum sea_orm::TransactionError - TransactionError\n\u27e8155\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html: enum sea_orm::TryInsertResult - TryInsertResult\n\u27e8156\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#traits: \u00a7\n\u27e8157\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html: trait sea_orm::ColIdx - ColIdx\n\u27e8158\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html: trait sea_orm::TryGetable - `TryGetable`\n\u27e8159\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html: trait sea_orm::ConnectionTrait - ConnectionTrait\n\u27e8160\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html: trait sea_orm::CursorTrait - CursorTrait\n\u27e8161\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html: trait sea_orm::Iden - Iden\n\u27e8162\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html: trait sea_orm::IntoMockRow - IntoMockRow\n\u27e8163\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html: trait sea_orm::MockDatabaseTrait - MockDatabaseTrait\n\u27e8164\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html: trait sea_orm::PaginatorTrait - PaginatorTrait\n\u27e8165\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html: trait sea_orm::ProxyDatabaseTrait - ProxyDatabaseTrait\n\u27e8166\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html: trait sea_orm::SelectorTrait - SelectorTrait\n\u27e8167\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html: trait sea_orm::StatementBuilder - StatementBuilder\n\u27e8168\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html: trait sea_orm::StreamTrait - StreamTrait\n\u27e8169\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html: trait sea_orm::TransactionTrait - TransactionTrait\n\u27e8170\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html: trait sea_orm::TryFromU64 - TryFromU64\n\u27e8171\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html: trait sea_orm::TryGetableArray - TryGetableArray\n\u27e8172\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html: trait sea_orm::TryGetableFromJson - TryGetableFromJson\n\u27e8173\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html: trait sea_orm::TryGetableMany - TryGetableMany\n\u27e8174\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#functions: \u00a7\n\u27e8175\u27e9 https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html: fn sea_orm::from_query_result_to_proxy_row - from_query_result_to_proxy_row\n\u27e8176\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#types: \u00a7\n\u27e8177\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html: type sea_orm::DbBackend - DbBackend\n\u27e8178\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html: type sea_orm::DbConn - DbConn\n\u27e8179\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html: type sea_orm::PinBoxStream - PinBoxStream\n\u27e8180\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#derives: \u00a7\n\u27e8181\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html: derive sea_orm::DeriveActiveEnum - DeriveActiveEnum\n\u27e8182\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html: derive sea_orm::DeriveActiveModel - DeriveActiveModel\n\u27e8183\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html: derive sea_orm::DeriveActiveModelBehavior - DeriveActiveModelBehavior\n\u27e8184\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html: derive sea_orm::DeriveColumn - DeriveColumn\n\u27e8185\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html: derive sea_orm::DeriveCustomColumn - DeriveCustomColumn\n\u27e8186\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html: derive sea_orm::DeriveDisplay - DeriveDisplay\n\u27e8187\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html: derive sea_orm::DeriveEntity - DeriveEntity\n\u27e8188\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html: derive sea_orm::DeriveEntityModel - DeriveEntityModel\n\u27e8189\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html: derive sea_orm::DeriveIden - DeriveIden\n\u27e8190\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html: derive sea_orm::DeriveIntoActiveModel - DeriveIntoActiveModel\n\u27e8191\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html: derive sea_orm::DeriveMigrationName - DeriveMigrationName\n\u27e8192\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html: derive sea_orm::DeriveModel - DeriveModel\n\u27e8193\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html: derive sea_orm::DerivePartialModel - DerivePartialModel\n\u27e8194\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html: derive sea_orm::DerivePrimaryKey - DerivePrimaryKey\n\u27e8195\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html: derive sea_orm::EnumIter - EnumIter\n\u27e8196\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html: derive sea_orm::DeriveRelatedEntity - DeriveRelatedEntity\n\u27e8197\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html: derive sea_orm::DeriveRelation - DeriveRelation\n\u27e8198\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html: derive sea_orm::DeriveValueType - DeriveValueType\n\u27e8199\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html: derive sea_orm::FromJsonQueryResult - FromJsonQueryResult\n\u27e8200\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html: derive sea_orm::FromQueryResult - FromQueryResult\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 36157,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116211.1649677"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/sea-orm",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [84 releases](https://lib.rs/crates/sea-orm/versions) (16 stable)\nUses new Rust 2024\n1.2.0-rc.1 |  May 29, 2025   \n---|---  \n1.1.12 |  May 27, 2025   \n1.1.8 |  Mar 30, 2025   \n1.1.3 |  Dec 24, 2024   \n0.4.0 |  Nov 19, 2021   \n#**3** in [Database interfaces](https://lib.rs/database \"Crates to interface with database management systems.\")\nDownload history 95548/week @ 2025-03-09 90511/week @ 2025-03-16 83078/week @ 2025-03-23 74590/week @ 2025-03-30 84943/week @ 2025-04-06 95646/week @ 2025-04-13 104991/week @ 2025-04-20 81226/week @ 2025-04-27 72071/week @ 2025-05-04 70502/week @ 2025-05-11 79454/week @ 2025-05-18 81650/week @ 2025-05-25 90943/week @ 2025-06-01 88296/week @ 2025-06-08 87326/week @ 2025-06-15 112765/week @ 2025-06-22\n**384,119** downloads per month Used in [**233** crates (153 directly)](https://lib.rs/crates/sea-orm/rev)\n**MIT/Apache**\n**3.5MB** **20K** SLoC\n![](https://img.gs/czjpqfbdkz/800/https://www.sea-ql.org/SeaORM/img/SeaORM%20banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n[![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm) [![docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm) [![build status](https://img.gs/czjpqfbdkz/full/https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n# SeaORM\n#### SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n## Getting Started\n  * [Documentation](https://www.sea-ql.org/SeaORM)\n  * [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n  * [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\n\nIntegration examples:\n  * [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n  * [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n  * [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n  * [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n  * [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n  * [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n  * [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n  * [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n  * [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n  * [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n\n## Features\n  1. Async\nRelying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n## A quick taste of SeaORM\n### Entity\n```\n``use` `sea_orm`::```entity`::```prelude`::```*``;`\n``#``[``derive```(```Clone`,` Debug`,` PartialEq`,` DeriveEntityModel```)```]``\n``#``[``sea_orm```(```table_name `=` ``\"`cake`\"`````)```]``\n``pub` `struct` ```Model` ````{`\n  ``#``[``sea_orm```(```primary_key```)```]``\n  `pub` `id``:` `i32`,\n  `pub` `name``:` String,\n```}```\n``#``[``derive```(```Copy`,` Clone`,` Debug`,` EnumIter`,` DeriveRelation```)```]``\n``pub` `enum` `Relation` ``{`\n  ``#``[``sea_orm```(```has_many `=` ``\"`super::fruit::Entity`\"`````)```]``\n  Fruit`,`\n```}```\n``impl` ```Related`<``super`::```fruit`::``Entity`>`` `for``` `Entity` ````{`\n  ``fn` `to`````(````)```` ``->` RelationDef` ```{`\n    `Relation`::``Fruit`.``def``(``)`\n  `}``\n```}```\n`\n```\n\n### Select\n```\n```//` find all models`\n`let` cakes`:` ``Vec``<``cake`::``Model`>`` `=` `Cake`::``find`(``)``.``all``(`db`)``.`await`?``;`\n``//` find and filter`\n`let` chocolate`:` ``Vec``<``cake`::``Model`>`` `=` `Cake`::``find`(``)`\n  `.``filter``(``cake`::```Column`::``Name`.``contains``(```\"`chocolate`\"```)``)`\n  `.``all``(`db`)`\n  `.`await`?``;`\n``//` find one model`\n`let` cheese`:` ``Option``<``cake`::``Model`>`` `=` `Cake`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` cheese`:` `cake`::``Model `=` cheese`.``unwrap``(``)``;`\n``//` find related models (lazy)`\n`let` fruits`:` ``Vec``<``fruit`::``Model`>`` `=` cheese`.``find_related``(`Fruit`)``.``all``(`db`)``.`await`?``;`\n``//` find related models (eager)`\n`let` cake_with_fruits`:` ``Vec``<``(``cake`::``Model, `Vec``<``fruit`::``Model`>``)``>`` `=`\n  `Cake`::``find`(``)``.``find_with_related``(`Fruit`)``.``all``(`db`)``.`await`?``;`\n`\n```\n\n### Insert\n```\n``let` apple `=` `fruit`::``ActiveModel ``{`\n  name`:` Set`(```\"`Apple`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)` ``//` no need to set primary key`\n```}```;`\n`let` pear `=` `fruit`::``ActiveModel ``{`\n  name`:` Set`(```\"`Pear`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)`\n```}```;`\n``//` insert one`\n`let` pear `=` pear`.``insert``(`db`)``.`await`?``;`\n``//` insert many`\n`Fruit`::``insert_many`(``[`apple`,` pear`]``)``.``exec``(`db`)``.`await`?``;`\n`\n```\n\n### Update\n```\n``use` `sea_orm`::```sea_query`::````{`Expr`,` Value```}```;`\n`let` pear`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` `mut` pear`:` `fruit`::``ActiveModel `=` pear`.``unwrap``(``)``.``into``(``)``;`\npear`.`name `=` Set`(```\"`Sweet pear`\"```.``to_owned``(``)``)``;`\n``//` update one`\n`let` pear`:` `fruit`::``Model `=` pear`.``update``(`db`)``.`await`?``;`\n``//` update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'`\n`Fruit`::``update_many`(``)`\n  `.``col_expr``(``fruit`::```Column`::``CakeId`,` `Expr`::``value`(``Value`::``Int`(``None``)``)``)`\n  `.``filter``(``fruit`::```Column`::``Name`.``contains``(```\"`Apple`\"```)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n`\n```\n\n### Save\n```\n``let` banana `=` `fruit`::``ActiveModel ``{`\n  id`:` NotSet`,`\n  name`:` Set`(```\"`Banana`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)`\n```}```;`\n``//` create, because primary key `id` is `NotSet``\n`let` `mut` banana `=` banana`.``save``(`db`)``.`await`?``;`\nbanana`.`name `=` Set`(```\"`Banana Mongo`\"```.``to_owned``(``)``)``;`\n``//` update, because primary key `id` is `Set``\n`let` banana `=` banana`.``save``(`db`)``.`await`?``;`\n`\n```\n\n### Delete\n```\n```//` delete one`\n`let` orange`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` orange`:` `fruit`::``Model `=` orange`.``unwrap``(``)``;`\n`fruit`::```Entity`::``delete`(`orange`.``into_active_model``(``)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n``//` or simply`\n`let` orange`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` orange`:` `fruit`::``Model `=` orange`.``unwrap``(``)``;`\norange`.``delete``(`db`)``.`await`?``;`\n``//` delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'`\n`fruit`::```Entity`::``delete_many`(``)`\n  `.``filter``(``fruit`::```Column`::``Name`.``contains``(```\"`Orange`\"```)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n`\n```\n\n## \ud83e\udded Seaography: instant GraphQL API\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n## \ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\n[SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/) is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * [Example Repo](https://github.com/SeaQL/sea-orm-pro)\n  * [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/)\n  * [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/)\n\n\n![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n## Releases\n[SeaORM 1.0](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/) is a stable release. The 1.x version will be updated until at least October 2025, and we'll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn't mean that SeaORM is 'done', we've designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n\n### Who's using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. [Full list here](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to submit yours!\nProject | GitHub | Tagline  \n---|---|---  \n[Zed](https://github.com/zed-industries/zed) | ![GitHub stars](https://img.shields.io/github/stars/zed-industries/zed.svg?style=social) | A high-performance, multiplayer code editor  \n[OpenObserve](https://github.com/openobserve/openobserve) | ![GitHub stars](https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social) | Open-source observability platform  \n[RisingWave](https://github.com/risingwavelabs/risingwave) | ![GitHub stars](https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social) | Stream processing and management platform  \n[LLDAP](https://github.com/nitnelave/lldap) | ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social) | A light LDAP server for user management  \n[Warpgate](https://github.com/warp-tech/warpgate) | ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social) | Smart SSH bastion that works with any SSH client  \n[Svix](https://github.com/svix/svix-webhooks) | ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social) | The enterprise ready webhooks service  \n[Ryot](https://github.com/IgnisDa/ryot) | ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social) | The only self hosted tracker you will ever need  \n[Lapdev](https://github.com/lapce/lapdev) | ![GitHub stars](https://img.shields.io/github/stars/lapce/lapdev.svg?style=social) | Self-hosted remote development enviroment  \n[System Initiative](https://github.com/systeminit/si) | ![GitHub stars](https://img.shields.io/github/stars/systeminit/si.svg?style=social) | DevOps Automation Platform  \n[OctoBase](https://github.com/toeverything/OctoBase) | ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social) | A light-weight, scalable, offline collaborative data backend  \n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/seaql/sea-orm/blob/3c35077424a510269c849296292dd0c6979450a0/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/seaql/sea-orm/blob/3c35077424a510269c849296292dd0c6979450a0/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust's future.\nA big shout out to our contributors!\n[![Contributors](https://img.gs/czjpqfbdkz/full/https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n## Sponsorship\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n### Silver Sponsors\n[ ![](https://img.gs/czjpqfbdkz/125/https://www.sea-ql.org/static/sponsors/DigitalOcean.svg) ](https://www.digitalocean.com/) | [ ![](https://img.gs/czjpqfbdkz/125/https://www.sea-ql.org/static/sponsors/JetBrains.svg) ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n## Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres](https://img.gs/czjpqfbdkz/400/https://www.sea-ql.org/SeaORM/img/Terres.png)\n#### Dependencies\n~4\u201322MB  ~339K SLoC\n  * [async-stream](https://lib.rs/crates/async-stream \"0.3\")\n  * [async-trait](https://lib.rs/crates/async-trait \"0.1\")\n  * [with-bigdecimal](https://lib.rs/crates/sea-orm/features#feature-with-bigdecimal \"default feature\") [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [bigdecimal](https://lib.rs/crates/bigdecimal \"new\") 0.4\n  * [with-chrono](https://lib.rs/crates/sea-orm/features#feature-with-chrono \"default feature\") [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [chrono](https://lib.rs/crates/chrono \"0.4.30\")\n  * [postgres-vector?](https://lib.rs/crates/sea-orm/features#feature-postgres-vector \"optional feature\") [with-json?](https://lib.rs/crates/sea-orm/features#feature-with-json \"optional feature\") [pgvector](https://lib.rs/crates/pgvector \"~0.4\")\n  * [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [with-rust_decimal](https://lib.rs/crates/sea-orm/features#feature-with-rust_decimal \"default feature\") [rust_decimal](https://lib.rs/crates/rust_decimal \"1\")\n  * [postgres-array?](https://lib.rs/crates/sea-orm/features#feature-postgres-array \"optional feature\") [postgres-vector?](https://lib.rs/crates/sea-orm/features#feature-postgres-vector \"optional feature\") [sqlx-mysql?](https://lib.rs/crates/sea-orm/features#feature-sqlx-mysql \"optional feature\") [sqlx-postgres?](https://lib.rs/crates/sea-orm/features#feature-sqlx-postgres \"optional feature\") [sqlx-sqlite?](https://lib.rs/crates/sea-orm/features#feature-sqlx-sqlite \"optional feature\") [with-bigdecimal?](https://lib.rs/crates/sea-orm/features#feature-with-bigdecimal \"optional feature\") [with-chrono?](https://lib.rs/crates/sea-orm/features#feature-with-chrono \"optional feature\") [with-ipnetwork?](https://lib.rs/crates/sea-orm/features#feature-with-ipnetwork \"optional feature\") [with-json?](https://lib.rs/crates/sea-orm/features#feature-with-json \"optional feature\") [with-rust_decimal?](https://lib.rs/crates/sea-orm/features#feature-with-rust_decimal \"optional feature\") [with-time?](https://lib.rs/crates/sea-orm/features#feature-with-time \"optional feature\") [with-uuid?](https://lib.rs/crates/sea-orm/features#feature-with-uuid \"optional feature\") [sea-query-binder](https://lib.rs/crates/sea-query-binder \"new\") 0.8.0-rc.1\n  * [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * [runtime-actix?](https://lib.rs/crates/sea-orm/features#feature-runtime-actix \"optional feature\") [runtime-actix-native-tls?](https://lib.rs/crates/sea-orm/features#feature-runtime-actix-native-tls \"optional feature\") [runtime-actix-rustls?](https://lib.rs/crates/sea-orm/features#feature-runtime-actix-rustls \"optional feature\") [runtime-async-std?](https://lib.rs/crates/sea-orm/features#feature-runtime-async-std \"optional feature\") [runtime-async\u2026native-tls?](https://lib.rs/crates/sea-orm/features#feature-runtime-async-std-native-tls \"optional feature\") [runtime-async-std-rustls?](https://lib.rs/crates/sea-orm/features#feature-runtime-async-std-rustls \"optional feature\") [runtime-tokio?](https://lib.rs/crates/sea-orm/features#feature-runtime-tokio \"optional feature\") [runtime-tokio-native-tls?](https://lib.rs/crates/sea-orm/features#feature-runtime-tokio-native-tls \"optional feature\") [runtime-tokio-rustls?](https://lib.rs/crates/sea-orm/features#feature-runtime-tokio-rustls \"optional feature\") [sqlx-mysql?](https://lib.rs/crates/sea-orm/features#feature-sqlx-mysql \"optional feature\") [sqlx-postgres?](https://lib.rs/crates/sea-orm/features#feature-sqlx-postgres \"optional feature\") [sqlx-sqlite?](https://lib.rs/crates/sea-orm/features#feature-sqlx-sqlite \"optional feature\") [with-bigdecimal?](https://lib.rs/crates/sea-orm/features#feature-with-bigdecimal \"optional feature\") [with-chrono?](https://lib.rs/crates/sea-orm/features#feature-with-chrono \"optional feature\") [with-ipnetwork?](https://lib.rs/crates/sea-orm/features#feature-with-ipnetwork \"optional feature\") [with-json?](https://lib.rs/crates/sea-orm/features#feature-with-json \"optional feature\") [with-rust_decimal?](https://lib.rs/crates/sea-orm/features#feature-with-rust_decimal \"optional feature\") [with-time?](https://lib.rs/crates/sea-orm/features#feature-with-time \"optional feature\") [with-uuid?](https://lib.rs/crates/sea-orm/features#feature-with-uuid \"optional feature\") [sqlx](https://lib.rs/crates/sqlx \"new\") 0.8.4\n  * [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [with-time](https://lib.rs/crates/sea-orm/features#feature-with-time \"default feature\") [time](https://lib.rs/crates/time \"0.3.36\")\n  * [with-json](https://lib.rs/crates/sea-orm/features#feature-with-json \"default feature\") [with-uuid](https://lib.rs/crates/sea-orm/features#feature-with-uuid \"default feature\") [uuid](https://lib.rs/crates/uuid \"1\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3\")[+std](https://lib.rs/crates/futures-util/features#feature-std)\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [ouroboros](https://lib.rs/crates/ouroboros \"new\") 0.18\n  * [sea-orm-macros](https://lib.rs/crates/sea-orm-macros \"new\") ~1.2.0-rc.1[+strum](https://lib.rs/crates/sea-orm-macros/features#feature-strum)\n  * [sea-query](https://lib.rs/crates/sea-query \"new\") 1.0.0-rc.1[+thread-safe](https://lib.rs/crates/sea-query/features#feature-thread-safe)[+hashable-value](https://lib.rs/crates/sea-query/features#feature-hashable-value)[+backend-mysql](https://lib.rs/crates/sea-query/features#feature-backend-mysql)[+backend-postgres](https://lib.rs/crates/sea-query/features#feature-backend-postgres)[+backend-sqlite](https://lib.rs/crates/sea-query/features#feature-backend-sqlite)\n  * [serde](https://lib.rs/crates/serde \"1.0\")\n  * [strum](https://lib.rs/crates/strum \"outdated\") 0.26\n  * [thiserror](https://lib.rs/crates/thiserror \"new\") 2.0\n  * [tracing](https://lib.rs/crates/tracing \"0.1\")[+attributes](https://lib.rs/crates/tracing/features#feature-attributes)[+log](https://lib.rs/crates/tracing/features#feature-log)\n  * [url](https://lib.rs/crates/url \"2.2\")\n  * [with-ipnetwork?](https://lib.rs/crates/sea-orm/features#feature-with-ipnetwork \"optional feature\") [ipnetwork](https://lib.rs/crates/ipnetwork \"outdated\") 0.20\n\n\n  * dev  [actix-rt](https://lib.rs/crates/actix-rt \"new\") 2.2\n  * dev  [arraystring](https://lib.rs/crates/arraystring \"0.3\")\n  * dev  [async-std](https://lib.rs/crates/async-std \"outdated\") 1.0[+attributes](https://lib.rs/crates/async-std/features#feature-attributes)[+tokio1](https://lib.rs/crates/async-std/features#feature-tokio1)\n  * dev  [dotenv](https://lib.rs/crates/dotenv \"0.15\")\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")\n  * dev  [maplit](https://lib.rs/crates/maplit \"1\")\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"obsolete\") 0.7\n  * dev  [smol](https://lib.rs/crates/smol \"outdated\") 1.2\n  * dev  [smol-potat](https://lib.rs/crates/smol-potat \"1.1\")\n  * dev  [tokio](https://lib.rs/crates/tokio \"1.6\")[+full](https://lib.rs/crates/tokio/features#feature-full)\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3.17\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n\n\n#### [Other features](https://lib.rs/crates/sea-orm/features)\n  * [debug-print](https://lib.rs/crates/sea-orm/features#feature-debug-print)\n  * [json-array](https://lib.rs/crates/sea-orm/features#feature-json-array)\n  * [macros](https://lib.rs/crates/sea-orm/features#feature-macros)\n  * [mock](https://lib.rs/crates/sea-orm/features#feature-mock)\n  * [proxy](https://lib.rs/crates/sea-orm/features#feature-proxy)\n  * [sea-orm-internal](https://lib.rs/crates/sea-orm/features#feature-sea-orm-internal)\n  * [seaography](https://lib.rs/crates/sea-orm/features#feature-seaography)\n  * [sqlite-use-returning-for-3_35](https://lib.rs/crates/sea-orm/features#feature-sqlite-use-returning-for-3_35)\n  * [sqlx-all](https://lib.rs/crates/sea-orm/features#feature-sqlx-all)\n  * [sqlx-dep](https://lib.rs/crates/sea-orm/features#feature-sqlx-dep)\n  * [tests-cfg](https://lib.rs/crates/sea-orm/features#feature-tests-cfg)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  84 releases\u27e81\u27e9 (16 stable)\nUses new Rust 2024\n1.2.0-rc.1 |  May 29, 2025   \n---|---  \n1.1.12 |  May 27, 2025   \n1.1.8 |  Mar 30, 2025   \n1.1.3 |  Dec 24, 2024   \n0.4.0 |  Nov 19, 2021   \n#**3** in Database interfaces\u27e82\u27e9\nDownload history 95548/week @ 2025-03-09 90511/week @ 2025-03-16 83078/week @ 2025-03-23 74590/week @ 2025-03-30 84943/week @ 2025-04-06 95646/week @ 2025-04-13 104991/week @ 2025-04-20 81226/week @ 2025-04-27 72071/week @ 2025-05-04 70502/week @ 2025-05-11 79454/week @ 2025-05-18 81650/week @ 2025-05-25 90943/week @ 2025-06-01 88296/week @ 2025-06-08 87326/week @ 2025-06-15 112765/week @ 2025-06-22\n**384,119** downloads per month Used in **233** crates (153 directly)\u27e83\u27e9\n**MIT/Apache**\n**3.5MB** **20K** SLoC\n![](https://img.gs/czjpqfbdkz/800/https://www.sea-ql.org/SeaORM/img/SeaORM%20banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n![crate\u27e84\u27e9](https://crates.io/crates/sea-orm) ![docs\u27e85\u27e9](https://docs.rs/sea-orm) ![build status\u27e86\u27e9](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n# SeaORM\n#### SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n![GitHub stars\u27e87\u27e9](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the SeaQL Community Survey 2024\u27e88\u27e9!\n![Discord\u27e89\u27e9](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n## Getting Started\n  * Documentation\u27e810\u27e9\n  * Tutorial\u27e811\u27e9\n  * Cookbook\u27e812\u27e9\n\n\nIntegration examples:\n  * Actix v4 Example\u27e813\u27e9\n  * Axum Example\u27e814\u27e9\n  * GraphQL Example\u27e815\u27e9\n  * jsonrpsee Example\u27e816\u27e9\n  * Loco TODO Example\u27e817\u27e9 / Loco REST Starter\u27e818\u27e9\n  * Poem Example\u27e819\u27e9\n  * Rocket Example\u27e820\u27e9 / Rocket OpenAPI Example\u27e821\u27e9\n  * Salvo Example\u27e822\u27e9\n  * Tonic Example\u27e823\u27e9\n  * Seaography Example\u27e824\u27e9\n\n\n## Features\n  1. Async\nRelying on SQLx\u27e825\u27e9, SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon SeaQuery\u27e826\u27e9, SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n## A quick taste of SeaORM\n### Entity\n```\n``use` `sea_orm`::```entity`::```prelude`::```*``;`\n``#``[``derive```(```Clone`,` Debug`,` PartialEq`,` DeriveEntityModel```)```]``\n``#``[``sea_orm```(```table_name `=` ``\"`cake`\"`````)```]``\n``pub` `struct` ```Model` ````{`\n  ``#``[``sea_orm```(```primary_key```)```]``\n  `pub` `id``:` `i32`,\n  `pub` `name``:` String,\n```}```\n``#``[``derive```(```Copy`,` Clone`,` Debug`,` EnumIter`,` DeriveRelation```)```]``\n``pub` `enum` `Relation` ``{`\n  ``#``[``sea_orm```(```has_many `=` ``\"`super::fruit::Entity`\"`````)```]``\n  Fruit`,`\n```}```\n``impl` ```Related`<``super`::```fruit`::``Entity`>`` `for``` `Entity` ````{`\n  ``fn` `to`````(````)```` ``->` RelationDef` ```{`\n    `Relation`::``Fruit`.``def``(``)`\n  `}``\n```}```\n`\n```\n\n### Select\n```\n```//` find all models`\n`let` cakes`:` ``Vec``<``cake`::``Model`>`` `=` `Cake`::``find`(``)``.``all``(`db`)``.`await`?``;`\n``//` find and filter`\n`let` chocolate`:` ``Vec``<``cake`::``Model`>`` `=` `Cake`::``find`(``)`\n  `.``filter``(``cake`::```Column`::``Name`.``contains``(```\"`chocolate`\"```)``)`\n  `.``all``(`db`)`\n  `.`await`?``;`\n``//` find one model`\n`let` cheese`:` ``Option``<``cake`::``Model`>`` `=` `Cake`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` cheese`:` `cake`::``Model `=` cheese`.``unwrap``(``)``;`\n``//` find related models (lazy)`\n`let` fruits`:` ``Vec``<``fruit`::``Model`>`` `=` cheese`.``find_related``(`Fruit`)``.``all``(`db`)``.`await`?``;`\n``//` find related models (eager)`\n`let` cake_with_fruits`:` ``Vec``<``(``cake`::``Model, `Vec``<``fruit`::``Model`>``)``>`` `=`\n  `Cake`::``find`(``)``.``find_with_related``(`Fruit`)``.``all``(`db`)``.`await`?``;`\n`\n```\n\n### Insert\n```\n``let` apple `=` `fruit`::``ActiveModel ``{`\n  name`:` Set`(```\"`Apple`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)` ``//` no need to set primary key`\n```}```;`\n`let` pear `=` `fruit`::``ActiveModel ``{`\n  name`:` Set`(```\"`Pear`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)`\n```}```;`\n``//` insert one`\n`let` pear `=` pear`.``insert``(`db`)``.`await`?``;`\n``//` insert many`\n`Fruit`::``insert_many`(``[`apple`,` pear`]``)``.``exec``(`db`)``.`await`?``;`\n`\n```\n\n### Update\n```\n``use` `sea_orm`::```sea_query`::````{`Expr`,` Value```}```;`\n`let` pear`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` `mut` pear`:` `fruit`::``ActiveModel `=` pear`.``unwrap``(``)``.``into``(``)``;`\npear`.`name `=` Set`(```\"`Sweet pear`\"```.``to_owned``(``)``)``;`\n``//` update one`\n`let` pear`:` `fruit`::``Model `=` pear`.``update``(`db`)``.`await`?``;`\n``//` update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'`\n`Fruit`::``update_many`(``)`\n  `.``col_expr``(``fruit`::```Column`::``CakeId`,` `Expr`::``value`(``Value`::``Int`(``None``)``)``)`\n  `.``filter``(``fruit`::```Column`::``Name`.``contains``(```\"`Apple`\"```)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n`\n```\n\n### Save\n```\n``let` banana `=` `fruit`::``ActiveModel ``{`\n  id`:` NotSet`,`\n  name`:` Set`(```\"`Banana`\"```.``to_owned``(``)``)``,`\n  `..``Default```::``default`(``)`\n```}```;`\n``//` create, because primary key `id` is `NotSet``\n`let` `mut` banana `=` banana`.``save``(`db`)``.`await`?``;`\nbanana`.`name `=` Set`(```\"`Banana Mongo`\"```.``to_owned``(``)``)``;`\n``//` update, because primary key `id` is `Set``\n`let` banana `=` banana`.``save``(`db`)``.`await`?``;`\n`\n```\n\n### Delete\n```\n```//` delete one`\n`let` orange`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` orange`:` `fruit`::``Model `=` orange`.``unwrap``(``)``;`\n`fruit`::```Entity`::``delete`(`orange`.``into_active_model``(``)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n``//` or simply`\n`let` orange`:` ``Option``<``fruit`::``Model`>`` `=` `Fruit`::``find_by_id`(``1``)``.``one``(`db`)``.`await`?``;`\n`let` orange`:` `fruit`::``Model `=` orange`.``unwrap``(``)``;`\norange`.``delete``(`db`)``.`await`?``;`\n``//` delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'`\n`fruit`::```Entity`::``delete_many`(``)`\n  `.``filter``(``fruit`::```Column`::``Name`.``contains``(```\"`Orange`\"```)``)`\n  `.``exec``(`db`)`\n  `.`await`?``;`\n`\n```\n\n## \ud83e\udded Seaography: instant GraphQL API\nSeaography\u27e827\u27e9 is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the Seaography Example\u27e824\u27e9 to learn more.\n![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n## \ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\nSeaORM Pro\u27e828\u27e9 is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * Example Repo\u27e829\u27e9\n  * Getting Started with Loco\u27e830\u27e9\n  * Getting Started with Axum\u27e831\u27e9\n\n\n![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n## Releases\nSeaORM 1.0\u27e832\u27e9 is a stable release. The 1.x version will be updated until at least October 2025, and we'll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn't mean that SeaORM is 'done', we've designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * Change Log\u27e833\u27e9\n\n\n### Who's using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. Full list here\u27e834\u27e9. Feel free to submit yours!\nProject | GitHub | Tagline  \n---|---|---  \nZed\u27e835\u27e9 | ![GitHub stars\u27e836\u27e9] | A high-performance, multiplayer code editor  \nOpenObserve\u27e837\u27e9 | ![GitHub stars\u27e838\u27e9] | Open-source observability platform  \nRisingWave\u27e839\u27e9 | ![GitHub stars\u27e840\u27e9] | Stream processing and management platform  \nLLDAP\u27e841\u27e9 | ![GitHub stars\u27e842\u27e9] | A light LDAP server for user management  \nWarpgate\u27e843\u27e9 | ![GitHub stars\u27e844\u27e9] | Smart SSH bastion that works with any SSH client  \nSvix\u27e845\u27e9 | ![GitHub stars\u27e846\u27e9] | The enterprise ready webhooks service  \nRyot\u27e847\u27e9 | ![GitHub stars\u27e848\u27e9] | The only self hosted tracker you will ever need  \nLapdev\u27e849\u27e9 | ![GitHub stars\u27e850\u27e9] | Self-hosted remote development enviroment  \nSystem Initiative\u27e851\u27e9 | ![GitHub stars\u27e852\u27e9] | DevOps Automation Platform  \nOctoBase\u27e853\u27e9 | ![GitHub stars\u27e854\u27e9] | A light-weight, scalable, offline collaborative data backend  \n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e855\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e856\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust's future.\nA big shout out to our contributors!\n![Contributors\u27e857\u27e9](https://github.com/SeaQL/sea-orm/graphs/contributors)\n## Sponsorship\nSeaQL.org\u27e858\u27e9 is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via GitHub Sponsor\u27e859\u27e9 will be greatly appreciated, and goes a long way towards sustaining the organization.\n### Silver Sponsors\n ![\u27e860\u27e9 ](https://www.digitalocean.com/) |  ![\u27e861\u27e9 ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n## Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres\u27e862\u27e9]\n#### Dependencies\n~4\u201322MB  ~339K SLoC\n  * async-stream\u27e863\u27e9\n  * async-trait\u27e864\u27e9\n  * with-bigdecimal\u27e865\u27e9 with-json\u27e866\u27e9 bigdecimal\u27e867\u27e9 0.4\n  * with-chrono\u27e868\u27e9 with-json\u27e866\u27e9 chrono\u27e869\u27e9\n  * postgres-vector?\u27e870\u27e9 with-json?\u27e866\u27e9 pgvector\u27e871\u27e9\n  * with-json\u27e866\u27e9 with-rust_decimal\u27e872\u27e9 rust_decimal\u27e873\u27e9\n  * postgres-array?\u27e874\u27e9 postgres-vector?\u27e870\u27e9 sqlx-mysql?\u27e875\u27e9 sqlx-postgres?\u27e876\u27e9 sqlx-sqlite?\u27e877\u27e9 with-bigdecimal?\u27e865\u27e9 with-chrono?\u27e868\u27e9 with-ipnetwork?\u27e878\u27e9 with-json?\u27e866\u27e9 with-rust_decimal?\u27e872\u27e9 with-time?\u27e879\u27e9 with-uuid?\u27e880\u27e9 sea-query-binder\u27e881\u27e9 0.8.0-rc.1\n  * with-json\u27e866\u27e9 serde_json\u27e882\u27e9\n  * runtime-actix?\u27e883\u27e9 runtime-actix-native-tls?\u27e884\u27e9 runtime-actix-rustls?\u27e885\u27e9 runtime-async-std?\u27e886\u27e9 runtime-async\u2026native-tls?\u27e887\u27e9 runtime-async-std-rustls?\u27e888\u27e9 runtime-tokio?\u27e889\u27e9 runtime-tokio-native-tls?\u27e890\u27e9 runtime-tokio-rustls?\u27e891\u27e9 sqlx-mysql?\u27e875\u27e9 sqlx-postgres?\u27e876\u27e9 sqlx-sqlite?\u27e877\u27e9 with-bigdecimal?\u27e865\u27e9 with-chrono?\u27e868\u27e9 with-ipnetwork?\u27e878\u27e9 with-json?\u27e866\u27e9 with-rust_decimal?\u27e872\u27e9 with-time?\u27e879\u27e9 with-uuid?\u27e880\u27e9 sqlx\u27e892\u27e9 0.8.4\n  * with-json\u27e866\u27e9 with-time\u27e879\u27e9 time\u27e893\u27e9\n  * with-json\u27e866\u27e9 with-uuid\u27e880\u27e9 uuid\u27e894\u27e9\n  * futures-util\u27e895\u27e9+std\u27e896\u27e9\n  * log\u27e897\u27e9\n  * ouroboros\u27e898\u27e9 0.18\n  * sea-orm-macros\u27e899\u27e9 ~1.2.0-rc.1+strum\u27e8100\u27e9\n  * sea-query\u27e8101\u27e9 1.0.0-rc.1+thread-safe\u27e8102\u27e9+hashable-value\u27e8103\u27e9+backend-mysql\u27e8104\u27e9+backend-postgres\u27e8105\u27e9+backend-sqlite\u27e8106\u27e9\n  * serde\u27e8107\u27e9\n  * strum\u27e8108\u27e9 0.26\n  * thiserror\u27e8109\u27e9 2.0\n  * tracing\u27e8110\u27e9+attributes\u27e8111\u27e9+log\u27e8112\u27e9\n  * url\u27e8113\u27e9\n  * with-ipnetwork?\u27e878\u27e9 ipnetwork\u27e8114\u27e9 0.20\n\n\n  * dev  actix-rt\u27e8115\u27e9 2.2\n  * dev  arraystring\u27e8116\u27e9\n  * dev  async-std\u27e8117\u27e9 1.0+attributes\u27e8118\u27e9+tokio1\u27e8119\u27e9\n  * dev  dotenv\u27e8120\u27e9\n  * dev  futures\u27e8121\u27e9\n  * dev  maplit\u27e8122\u27e9\n  * dev  pretty_assertions\u27e8123\u27e9 0.7\n  * dev  smol\u27e8124\u27e9 1.2\n  * dev  smol-potat\u27e8125\u27e9\n  * dev  tokio\u27e8126\u27e9+full\u27e8127\u27e9\n  * dev  tracing-subscriber\u27e8128\u27e9+env-filter\u27e8129\u27e9\n\n\n#### Other features\u27e8130\u27e9\n  * debug-print\u27e8131\u27e9\n  * json-array\u27e8132\u27e9\n  * macros\u27e8133\u27e9\n  * mock\u27e8134\u27e9\n  * proxy\u27e8135\u27e9\n  * sea-orm-internal\u27e8136\u27e9\n  * seaography\u27e8137\u27e9\n  * sqlite-use-returning-for-3_35\u27e8138\u27e9\n  * sqlx-all\u27e8139\u27e9\n  * sqlx-dep\u27e8140\u27e9\n  * tests-cfg\u27e8141\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/sea-orm/versions: 84 releases\n\u27e82\u27e9 https://lib.rs/database: Crates to interface with database management systems. - Database interfaces\n\u27e83\u27e9 https://lib.rs/crates/sea-orm/rev: **233** crates (153 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/sea-orm.svg: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/sea-orm/badge.svg: ![docs\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg: ![build status\n\u27e87\u27e9 https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1: ![GitHub stars\n\u27e88\u27e9 https://sea-ql.org/community-survey: SeaQL Community Survey 2024\n\u27e89\u27e9 https://img.shields.io/discord/873880840487206962?label=Discord: ![Discord\n\u27e810\u27e9 https://www.sea-ql.org/SeaORM: Documentation\n\u27e811\u27e9 https://www.sea-ql.org/sea-orm-tutorial: Tutorial\n\u27e812\u27e9 https://www.sea-ql.org/sea-orm-cookbook: Cookbook\n\u27e813\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example: Actix v4 Example\n\u27e814\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example: Axum Example\n\u27e815\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example: GraphQL Example\n\u27e816\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example: jsonrpsee Example\n\u27e817\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example: Loco TODO Example\n\u27e818\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter: Loco REST Starter\n\u27e819\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example: Poem Example\n\u27e820\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example: Rocket Example\n\u27e821\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example: Rocket OpenAPI Example\n\u27e822\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example: Salvo Example\n\u27e823\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example: Tonic Example\n\u27e824\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example: Seaography Example\n\u27e825\u27e9 https://github.com/launchbadge/sqlx: SQLx\n\u27e826\u27e9 https://github.com/SeaQL/sea-query: SeaQuery\n\u27e827\u27e9 https://github.com/SeaQL/seaography: Seaography\n\u27e828\u27e9 https://www.sea-ql.org/sea-orm-pro/: SeaORM Pro\n\u27e829\u27e9 https://github.com/SeaQL/sea-orm-pro: Example Repo\n\u27e830\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/: Getting Started with Loco\n\u27e831\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/: Getting Started with Axum\n\u27e832\u27e9 https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/: SeaORM 1.0\n\u27e833\u27e9 https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md: Change Log\n\u27e834\u27e9 https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm: Full list here\n\u27e835\u27e9 https://github.com/zed-industries/zed: Zed\n\u27e836\u27e9 https://img.shields.io/github/stars/zed-industries/zed.svg?style=social: GitHub stars\n\u27e837\u27e9 https://github.com/openobserve/openobserve: OpenObserve\n\u27e838\u27e9 https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social: GitHub stars\n\u27e839\u27e9 https://github.com/risingwavelabs/risingwave: RisingWave\n\u27e840\u27e9 https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social: GitHub stars\n\u27e841\u27e9 https://github.com/nitnelave/lldap: LLDAP\n\u27e842\u27e9 https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social: GitHub stars\n\u27e843\u27e9 https://github.com/warp-tech/warpgate: Warpgate\n\u27e844\u27e9 https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social: GitHub stars\n\u27e845\u27e9 https://github.com/svix/svix-webhooks: Svix\n\u27e846\u27e9 https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social: GitHub stars\n\u27e847\u27e9 https://github.com/IgnisDa/ryot: Ryot\n\u27e848\u27e9 https://img.shields.io/github/stars/ignisda/ryot.svg?style=social: GitHub stars\n\u27e849\u27e9 https://github.com/lapce/lapdev: Lapdev\n\u27e850\u27e9 https://img.shields.io/github/stars/lapce/lapdev.svg?style=social: GitHub stars\n\u27e851\u27e9 https://github.com/systeminit/si: System Initiative\n\u27e852\u27e9 https://img.shields.io/github/stars/systeminit/si.svg?style=social: GitHub stars\n\u27e853\u27e9 https://github.com/toeverything/OctoBase: OctoBase\n\u27e854\u27e9 https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social: GitHub stars\n\u27e855\u27e9 https://github.com/seaql/sea-orm/blob/3c35077424a510269c849296292dd0c6979450a0/LICENSE-APACHE: LICENSE-APACHE\n\u27e856\u27e9 https://github.com/seaql/sea-orm/blob/3c35077424a510269c849296292dd0c6979450a0/LICENSE-MIT: LICENSE-MIT\n\u27e857\u27e9 https://img.gs/czjpqfbdkz/full/https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false: ![Contributors\n\u27e858\u27e9 https://www.sea-ql.org/: SeaQL.org\n\u27e859\u27e9 https://github.com/sponsors/SeaQL: GitHub Sponsor\n\u27e860\u27e9 https://img.gs/czjpqfbdkz/125/https://www.sea-ql.org/static/sponsors/DigitalOcean.svg:  ![\n\u27e861\u27e9 https://img.gs/czjpqfbdkz/125/https://www.sea-ql.org/static/sponsors/JetBrains.svg:  ![\n\u27e862\u27e9 https://img.gs/czjpqfbdkz/400/https://www.sea-ql.org/SeaORM/img/Terres.png: Terres\n\u27e863\u27e9 https://lib.rs/crates/async-stream: 0.3 - async-stream\n\u27e864\u27e9 https://lib.rs/crates/async-trait: 0.1 - async-trait\n\u27e865\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-bigdecimal: default feature - with-bigdecimal\n\u27e866\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-json: default feature - with-json\n\u27e867\u27e9 https://lib.rs/crates/bigdecimal: new - bigdecimal\n\u27e868\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-chrono: default feature - with-chrono\n\u27e869\u27e9 https://lib.rs/crates/chrono: 0.4.30 - chrono\n\u27e870\u27e9 https://lib.rs/crates/sea-orm/features#feature-postgres-vector: optional feature - postgres-vector?\n\u27e871\u27e9 https://lib.rs/crates/pgvector: ~0.4 - pgvector\n\u27e872\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-rust_decimal: default feature - with-rust_decimal\n\u27e873\u27e9 https://lib.rs/crates/rust_decimal: 1 - rust_decimal\n\u27e874\u27e9 https://lib.rs/crates/sea-orm/features#feature-postgres-array: optional feature - postgres-array?\n\u27e875\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlx-mysql: optional feature - sqlx-mysql?\n\u27e876\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlx-postgres: optional feature - sqlx-postgres?\n\u27e877\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlx-sqlite: optional feature - sqlx-sqlite?\n\u27e878\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-ipnetwork: optional feature - with-ipnetwork?\n\u27e879\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-time: optional feature - with-time?\n\u27e880\u27e9 https://lib.rs/crates/sea-orm/features#feature-with-uuid: optional feature - with-uuid?\n\u27e881\u27e9 https://lib.rs/crates/sea-query-binder: new - sea-query-binder\n\u27e882\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e883\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-actix: optional feature - runtime-actix?\n\u27e884\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-actix-native-tls: optional feature - runtime-actix-native-tls?\n\u27e885\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-actix-rustls: optional feature - runtime-actix-rustls?\n\u27e886\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-async-std: optional feature - runtime-async-std?\n\u27e887\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-async-std-native-tls: optional feature - runtime-async\u2026native-tls?\n\u27e888\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-async-std-rustls: optional feature - runtime-async-std-rustls?\n\u27e889\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-tokio: optional feature - runtime-tokio?\n\u27e890\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-tokio-native-tls: optional feature - runtime-tokio-native-tls?\n\u27e891\u27e9 https://lib.rs/crates/sea-orm/features#feature-runtime-tokio-rustls: optional feature - runtime-tokio-rustls?\n\u27e892\u27e9 https://lib.rs/crates/sqlx: new - sqlx\n\u27e893\u27e9 https://lib.rs/crates/time: 0.3.36 - time\n\u27e894\u27e9 https://lib.rs/crates/uuid: 1 - uuid\n\u27e895\u27e9 https://lib.rs/crates/futures-util: 0.3 - futures-util\n\u27e896\u27e9 https://lib.rs/crates/futures-util/features#feature-std: +std\n\u27e897\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e898\u27e9 https://lib.rs/crates/ouroboros: new - ouroboros\n\u27e899\u27e9 https://lib.rs/crates/sea-orm-macros: new - sea-orm-macros\n\u27e8100\u27e9 https://lib.rs/crates/sea-orm-macros/features#feature-strum: +strum\n\u27e8101\u27e9 https://lib.rs/crates/sea-query: new - sea-query\n\u27e8102\u27e9 https://lib.rs/crates/sea-query/features#feature-thread-safe: +thread-safe\n\u27e8103\u27e9 https://lib.rs/crates/sea-query/features#feature-hashable-value: +hashable-value\n\u27e8104\u27e9 https://lib.rs/crates/sea-query/features#feature-backend-mysql: +backend-mysql\n\u27e8105\u27e9 https://lib.rs/crates/sea-query/features#feature-backend-postgres: +backend-postgres\n\u27e8106\u27e9 https://lib.rs/crates/sea-query/features#feature-backend-sqlite: +backend-sqlite\n\u27e8107\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e8108\u27e9 https://lib.rs/crates/strum: outdated - strum\n\u27e8109\u27e9 https://lib.rs/crates/thiserror: new - thiserror\n\u27e8110\u27e9 https://lib.rs/crates/tracing: 0.1 - tracing\n\u27e8111\u27e9 https://lib.rs/crates/tracing/features#feature-attributes: +attributes\n\u27e8112\u27e9 https://lib.rs/crates/tracing/features#feature-log: +log\n\u27e8113\u27e9 https://lib.rs/crates/url: 2.2 - url\n\u27e8114\u27e9 https://lib.rs/crates/ipnetwork: outdated - ipnetwork\n\u27e8115\u27e9 https://lib.rs/crates/actix-rt: new - actix-rt\n\u27e8116\u27e9 https://lib.rs/crates/arraystring: 0.3 - arraystring\n\u27e8117\u27e9 https://lib.rs/crates/async-std: outdated - async-std\n\u27e8118\u27e9 https://lib.rs/crates/async-std/features#feature-attributes: +attributes\n\u27e8119\u27e9 https://lib.rs/crates/async-std/features#feature-tokio1: +tokio1\n\u27e8120\u27e9 https://lib.rs/crates/dotenv: 0.15 - dotenv\n\u27e8121\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e8122\u27e9 https://lib.rs/crates/maplit: 1 - maplit\n\u27e8123\u27e9 https://lib.rs/crates/pretty_assertions: obsolete - pretty_assertions\n\u27e8124\u27e9 https://lib.rs/crates/smol: outdated - smol\n\u27e8125\u27e9 https://lib.rs/crates/smol-potat: 1.1 - smol-potat\n\u27e8126\u27e9 https://lib.rs/crates/tokio: 1.6 - tokio\n\u27e8127\u27e9 https://lib.rs/crates/tokio/features#feature-full: +full\n\u27e8128\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3.17 - tracing-subscriber\n\u27e8129\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e8130\u27e9 https://lib.rs/crates/sea-orm/features: Other features\n\u27e8131\u27e9 https://lib.rs/crates/sea-orm/features#feature-debug-print: debug-print\n\u27e8132\u27e9 https://lib.rs/crates/sea-orm/features#feature-json-array: json-array\n\u27e8133\u27e9 https://lib.rs/crates/sea-orm/features#feature-macros: macros\n\u27e8134\u27e9 https://lib.rs/crates/sea-orm/features#feature-mock: mock\n\u27e8135\u27e9 https://lib.rs/crates/sea-orm/features#feature-proxy: proxy\n\u27e8136\u27e9 https://lib.rs/crates/sea-orm/features#feature-sea-orm-internal: sea-orm-internal\n\u27e8137\u27e9 https://lib.rs/crates/sea-orm/features#feature-seaography: seaography\n\u27e8138\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlite-use-returning-for-3_35: sqlite-use-returning-for-3_35\n\u27e8139\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlx-all: sqlx-all\n\u27e8140\u27e9 https://lib.rs/crates/sea-orm/features#feature-sqlx-dep: sqlx-dep\n\u27e8141\u27e9 https://lib.rs/crates/sea-orm/features#feature-tests-cfg: tests-cfg\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 22500,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116211.8896617"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "powerfmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpowerfmt-b5a769e72545940a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-551b0531ee4c4ec6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-551b0531ee4c4ec6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-44c875d5f379c963.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-93a4986df196f615\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-93a4986df196f615\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-d2fc5d1b8b5ed7b8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-d2fc5d1b8b5ed7b8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-1416855c531bcc89\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-fea4dd2b2aee23a8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-fea4dd2b2aee23a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-971f8b66f693cf93\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-971f8b66f693cf93\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-4c1329d67a616ea9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-90bd06dcaebf9c3d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-90bd06dcaebf9c3d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-1951bced89343f0e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libyansi-8177f3b7b88e20b3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libyansi-8177f3b7b88e20b3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-b83c7830871d8d85\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-10bcba958eeefd22.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "hardcoded-data",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_bidi-f2dfd768a735610d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libmemchr-1582e0d0cb00c2d8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libform_urlencoded-9704b762345f949f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-d43b2ab2b320b7ef\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-d43b2ab2b320b7ef\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aliasable@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aliasable-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aliasable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aliasable-0.1.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libaliasable-29a2bcff6d9c90f3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "colors",
                "default",
                "yansi"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5b4728060c8df7e2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5b4728060c8df7e2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "static_assertions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libstatic_assertions-d4c248694dbc366f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libarrayvec-07b79bb29467599c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-18af4efa034a7811\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum@0.26.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.26.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.26.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libstrum-d49a9d68499385dc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5c6016dd0b4e963d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-0b4312082989e948\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-0b4312082989e948\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtinyvec-3d458d42e12785f8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-3fa685af315ea699\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-3fa685af315ea699\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-1891b9828919a1b7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-1891b9828919a1b7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtracing_core-5a8a8513457cdfe7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-515f0681d71e3734\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-ad85cae5ab0b1648\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "rustc_1_70",
                "rustc_1_46"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-3e388a11bbb5525d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libslab-f2a6797c9ae73fcb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libquote-42171f68d588a2b8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libquote-42171f68d588a2b8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_normalization-7416cdf727f6d222.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_traits-44e53a2154ebf5ea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_integer-ae4baa9fddfe186d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#idna@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "idna",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.5.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libidna-ff41a16915774827.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ordered-float@4.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ordered-float-4.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ordered_float",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ordered-float-4.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libordered_float-5b173ec638b8630f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libm",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liblibm-6695d063fb80e32e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-macros@0.2.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.18\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "time_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "formatting",
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#url@2.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-2.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "url",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-2.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liburl-5939ac7a827a7839.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libserde-c2c22acd3dfd78a5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_util-f04c3c0ffc6ec036.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_bigint-6df0def3d437c988.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.11.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libuuid-546939c8cac48acb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rust_decimal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\librust_decimal-2c1b1b25b4a829d2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#deranged@0.3.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.3.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "deranged",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.3.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "powerfmt",
                "serde",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libderanged-a723dc5412417a7e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libserde_json-8a62157ee22428ab.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bigdecimal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libbigdecimal-29b020d3c9c3e46e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "chrono",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.38\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "android-tzdata",
                "clock",
                "iana-time-zone",
                "now",
                "serde",
                "std",
                "winapi",
                "windows-targets"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libchrono-5fe080849a715de0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error2@2.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error2-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error2-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro_error2-6d076688c1edfad4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro_error2-6d076688c1edfad4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2_diagnostics",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "colors",
                "default",
                "yansi"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2_diagnostics-ac26a86019886e48.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2_diagnostics-ac26a86019886e48.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsyn-8968d234a0039968.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsyn-8968d234a0039968.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time@0.3.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.36\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "formatting",
                "macros",
                "serde",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime-24ffb7d57c00e013.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#inherent@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inherent-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "inherent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inherent-1.0.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-impl-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_stream_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-impl-0.3.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-bae@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-bae-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "sea_bae",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-bae-0.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_stream",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-0.3.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libasync_stream-de957784e220a230.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.83",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libthiserror-731f1993342867e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "log",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtracing-24b0cea169160305.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ouroboros_macro@0.18.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros_macro-0.18.5\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "ouroboros_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros_macro-0.18.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ouroboros@0.18.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros-0.18.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ouroboros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros-0.18.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libouroboros-e0821aaf511cb0c0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-query@1.0.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-query-1.0.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sea_query",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-query-1.0.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "backend-mysql",
                "backend-postgres",
                "backend-sqlite",
                "bigdecimal",
                "chrono",
                "hashable-value",
                "ordered-float",
                "rust_decimal",
                "serde_json",
                "thread-safe",
                "time",
                "uuid",
                "with-bigdecimal",
                "with-chrono",
                "with-json",
                "with-rust_decimal",
                "with-time",
                "with-uuid"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsea_query-0bf2d4d464380c77.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-orm-macros@1.2.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-orm-macros-1.2.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "sea_orm_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-orm-macros-1.2.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bae",
                "derive",
                "strum"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0e1_3rt2/sea-orm-1.2.0-rc.1#sea-orm@1.2.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sea_orm",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bigdecimal",
                "chrono",
                "default",
                "macros",
                "rust_decimal",
                "serde_json",
                "time",
                "uuid",
                "with-bigdecimal",
                "with-chrono",
                "with-json",
                "with-rust_decimal",
                "with-time",
                "with-uuid"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsea_orm-2ad6feca97a0c1cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-d2fc5d1b8b5ed7b8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-d2fc5d1b8b5ed7b8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-93a4986df196f615\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-93a4986df196f615\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-fea4dd2b2aee23a8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-fea4dd2b2aee23a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-551b0531ee4c4ec6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-551b0531ee4c4ec6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#yansi@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yansi-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "yansi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\yansi-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libyansi-8177f3b7b88e20b3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libyansi-8177f3b7b88e20b3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "powerfmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpowerfmt-b5a769e72545940a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-90bd06dcaebf9c3d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-90bd06dcaebf9c3d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-971f8b66f693cf93\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-971f8b66f693cf93\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde-4c1329d67a616ea9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-0b4312082989e948\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-0b4312082989e948\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "colors",
                "default",
                "yansi"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5b4728060c8df7e2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5b4728060c8df7e2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\libm-1416855c531bcc89\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtinyvec-3d458d42e12785f8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-3fa685af315ea699\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-3fa685af315ea699\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-1891b9828919a1b7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-1891b9828919a1b7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\serde_json-1951bced89343f0e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-macros@0.2.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.18\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "time_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "formatting",
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\time_macros-2ce82e87e0199b8c.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\rust_decimal-b83c7830871d8d85\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-d43b2ab2b320b7ef\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-d43b2ab2b320b7ef\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "hardcoded-data",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_bidi-f2dfd768a735610d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libquote-42171f68d588a2b8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libquote-42171f68d588a2b8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_total_cmp"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\num-traits-515f0681d71e3734\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libserde-c2c22acd3dfd78a5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\proc-macro2-diagnostics-5c6016dd0b4e963d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libunicode_normalization-7416cdf727f6d222.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "rustc_1_70",
                "rustc_1_46"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\bigdecimal-3e388a11bbb5525d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libm@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libm",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libm-0.2.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liblibm-6695d063fb80e32e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\slab-ad85cae5ab0b1648\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libmemchr-1582e0d0cb00c2d8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libarrayvec-07b79bb29467599c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime_core-10bcba958eeefd22.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_conv-44c875d5f379c963.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\build\\thiserror-18af4efa034a7811\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsyn-8968d234a0039968.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsyn-8968d234a0039968.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_traits",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-traits-0.2.19\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_traits-44e53a2154ebf5ea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\proc_macro_error_attr2-de674b14ec5fad73.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#deranged@0.3.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.3.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "deranged",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.3.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "powerfmt",
                "serde",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libderanged-a723dc5412417a7e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#idna@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "idna",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\idna-0.5.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": false,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libidna-ff41a16915774827.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.129",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.129\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libserde_json-8a62157ee22428ab.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libslab-f2a6797c9ae73fcb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@1.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.11.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libuuid-546939c8cac48acb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libform_urlencoded-9704b762345f949f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aliasable@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aliasable-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aliasable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aliasable-0.1.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libaliasable-29a2bcff6d9c90f3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "static_assertions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libstatic_assertions-d4c248694dbc366f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_integer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-integer-0.1.46\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_integer-ae4baa9fddfe186d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2-diagnostics@0.10.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2_diagnostics",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-diagnostics-0.10.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "colors",
                "default",
                "yansi"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2_diagnostics-ac26a86019886e48.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro2_diagnostics-ac26a86019886e48.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error2@2.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error2-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error2-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro_error2-6d076688c1edfad4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libproc_macro_error2-6d076688c1edfad4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "chrono",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\chrono-0.4.38\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "android-tzdata",
                "clock",
                "iana-time-zone",
                "now",
                "serde",
                "std",
                "winapi",
                "windows-targets"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libchrono-5fe080849a715de0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time@0.3.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.36\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "formatting",
                "macros",
                "serde",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtime-24ffb7d57c00e013.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ordered-float@4.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ordered-float-4.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ordered_float",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ordered-float-4.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libordered_float-5b173ec638b8630f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rust_decimal@1.36.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rust_decimal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rust_decimal-1.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\librust_decimal-2c1b1b25b4a829d2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#inherent@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inherent-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "inherent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\inherent-1.0.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\inherent-09f6a5186d8fe8b2.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-impl-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_stream_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-impl-0.3.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_stream_impl-2ad955d3f6738d45.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtracing_core-5a8a8513457cdfe7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#url@2.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-2.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "url",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\url-2.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\liburl-5939ac7a827a7839.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.83",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libfutures_util-f04c3c0ffc6ec036.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strum@0.26.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.26.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strum-0.26.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libstrum-d49a9d68499385dc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_bigint",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-bigint-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libnum_bigint-6df0def3d437c988.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ouroboros_macro@0.18.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros_macro-0.18.5\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "ouroboros_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros_macro-0.18.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\ouroboros_macro-6cf7e969511b22b6.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-bae@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-bae-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "sea_bae",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-bae-0.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_bae-ab27922e603723a7.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "log",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libtracing-24b0cea169160305.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_stream",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-stream-0.3.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libasync_stream-de957784e220a230.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libthiserror-731f1993342867e4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bigdecimal@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bigdecimal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bigdecimal-0.4.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libbigdecimal-29b020d3c9c3e46e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ouroboros@0.18.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros-0.18.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ouroboros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ouroboros-0.18.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libouroboros-e0821aaf511cb0c0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-orm-macros@1.2.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-orm-macros-1.2.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "sea_orm_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-orm-macros-1.2.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bae",
                "derive",
                "strum"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\sea_orm_macros-6094e7c18abf6ce8.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sea-query@1.0.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-query-1.0.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sea_query",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sea-query-1.0.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "backend-mysql",
                "backend-postgres",
                "backend-sqlite",
                "bigdecimal",
                "chrono",
                "hashable-value",
                "ordered-float",
                "rust_decimal",
                "serde_json",
                "thread-safe",
                "time",
                "uuid",
                "with-bigdecimal",
                "with-chrono",
                "with-json",
                "with-rust_decimal",
                "with-time",
                "with-uuid"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsea_query-0bf2d4d464380c77.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0e1_3rt2/sea-orm-1.2.0-rc.1#sea-orm@1.2.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sea_orm",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\query\\loader.rs:395:37\n    |\n395 |                 .unwrap_or_else(|_| panic!(\"Failed at mapping '{}' to column\", col_name));\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n395 -                 .unwrap_or_else(|_| panic!(\"Failed at mapping '{}' to column\", col_name));\n395 +                 .unwrap_or_else(|_| panic!(\"Failed at mapping '{col_name}' to column\"));\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13056,
                        "byte_start": 13056,
                        "column_end": 65,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\query\\loader.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 395,
                        "line_start": 395,
                        "suggested_replacement": "col_name",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 65,
                            "text": "                .unwrap_or_else(|_| panic!(\"Failed at mapping '{}' to column\", col_name));"
                          }
                        ]
                      },
                      {
                        "byte_end": 13079,
                        "byte_start": 13069,
                        "column_end": 88,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\query\\loader.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 395,
                        "line_start": 395,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 78,
                            "text": "                .unwrap_or_else(|_| panic!(\"Failed at mapping '{}' to column\", col_name));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 13080,
                    "byte_start": 13028,
                    "column_end": 89,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\query\\loader.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 395,
                    "line_start": 395,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 37,
                        "text": "                .unwrap_or_else(|_| panic!(\"Failed at mapping '{}' to column\", col_name));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0e1_3rt2/sea-orm-1.2.0-rc.1#sea-orm@1.2.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sea_orm",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bigdecimal",
                "chrono",
                "default",
                "macros",
                "rust_decimal",
                "serde_json",
                "time",
                "uuid",
                "with-bigdecimal",
                "with-chrono",
                "with-json",
                "with-rust_decimal",
                "with-time",
                "with-uuid"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0e1_3rt2\\sea-orm-1.2.0-rc.1\\target\\debug\\deps\\libsea_orm-50ecb68738127390.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 326
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 7,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0402",
                    "package": "hashbrown",
                    "title": "Borsh serialization of HashMap is non-canonical",
                    "description": "The borsh serialization of the HashMap did not follow the borsh specification.\nIt potentially produced non-canonical encodings dependent on insertion order.\nIt also did not perform canonicty checks on decoding.\n\nThis can result in consensus splits and cause equivalent objects to be\nconsidered distinct.\n\nThis was patched in 0.15.1.",
                    "date": "2024-10-11",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "borsh"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-lang/hashbrown/issues/576",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.15.1"
                    ],
                    "unaffected": [
                      "<0.15.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "hashbrown::HashMap::borsh_serialize": [
                        "=0.15.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "hashbrown",
                    "version": "0.15.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb",
                    "dependencies": [
                      {
                        "name": "allocator-api2",
                        "version": "0.2.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "equivalent",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foldhash",
                        "version": "0.1.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.5.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6",
                    "dependencies": [
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.17",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.24",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0004",
                    "package": "openssl",
                    "title": "ssl::select_next_proto use after free",
                    "description": "In `openssl` versions before `0.10.70`, `ssl::select_next_proto` can return a slice pointing into the `server` argument's buffer but with a lifetime bound to the `client` argument. In situations where the `server` buffer's lifetime is shorter than the `client` buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.\n\n`openssl` 0.10.70 fixes the signature of `ssl::select_next_proto` to properly constrain the output buffer's lifetime to that of both input buffers.\n\nIn standard usage of `ssl::select_next_proto` in the callback passed to `SslContextBuilder::set_alpn_select_callback`, code is only affected if the `server` buffer is constructed *within* the callback. For example:\n\nNot vulnerable - the server buffer has a `'static` lifetime:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(b\"\\x02h2\", client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nNot vulnerable - the server buffer outlives the handshake:\n```rust\nlet server_protos = b\"\\x02h2\".to_vec();\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nVulnerable - the server buffer is freed when the callback returns:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    let server_protos = b\"\\x02h2\".to_vec();\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```",
                    "date": "2025-02-02",
                    "aliases": [
                      "GHSA-rpmj-rpgj-qmpm"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "ssl",
                      "tls",
                      "alpn"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/sfackler/rust-openssl/pull/2360"
                    ],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.70"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::ssl::select_next_proto": [
                        ">=0.10.0, <0.10.70"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.68",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "2.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.20.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.104",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0022",
                    "package": "openssl",
                    "title": "Use-After-Free in `Md::fetch` and `Cipher::fetch`",
                    "description": "When a `Some(...)` value was passed to the `properties` argument of either of these functions, a use-after-free would result.\n\nIn practice this would nearly always result in OpenSSL treating the properties as an empty string (due to `CString::drop`'s behavior).\n\nThe maintainers thank [quitbug](https://github.com/quitbug/) for reporting this vulnerability to us.",
                    "date": "2025-04-04",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2390",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.72"
                    ],
                    "unaffected": [
                      "<0.10.39"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::cipher::Cipher::fetch": [
                        ">=0.10.39, <0.10.72"
                      ],
                      "openssl::md::Md::fetch": [
                        ">=0.10.39, <0.10.72"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.68",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "2.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.20.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.104",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0009",
                    "package": "ring",
                    "title": "Some AES functions may panic when overflow checking is enabled.",
                    "description": "`ring::aead::quic::HeaderProtectionKey::new_mask()` may panic when overflow\nchecking is enabled. In the QUIC protocol, an attacker can induce this panic by\nsending a specially-crafted packet. Even unintentionally it is likely to occur\nin 1 out of every 2**32 packets sent and/or received.\n\nOn 64-bit targets operations using `ring::aead::{AES_128_GCM, AES_256_GCM}` may\npanic when overflow checking is enabled, when encrypting/decrypting approximately\n68,719,476,700 bytes (about 64 gigabytes) of data in a single chunk. Protocols\nlike TLS and SSH are not affected by this because those protocols break large\namounts of data into small chunks. Similarly, most applications will not\nattempt to encrypt/decrypt 64GB of data in one chunk.\n\nOverflow checking is not enabled in release mode by default, but\n`RUSTFLAGS=\"-C overflow-checks\"` or `overflow-checks = true` in the Cargo.toml\nprofile can override this. Overflow checking is usually enabled by default in\ndebug mode.",
                    "date": "2025-03-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.17.12"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "ring",
                    "version": "0.17.8",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.1.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "getrandom",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.9.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0071",
                    "package": "rsa",
                    "title": "Marvin Attack: potential key recovery through timing sidechannels",
                    "description": "### Impact\nDue to a non-constant-time implementation, information about the private key is leaked through timing information which is observable over the network. An attacker may be able to use that information to recover the key.\n\n### Patches\nNo patch is yet available, however work is underway to migrate to a fully constant-time implementation.\n\n### Workarounds\nThe only currently available workaround is to avoid using the `rsa` crate in settings where attackers are able to observe timing information, e.g. local use on a non-compromised computer is fine.\n\n### References\nThis vulnerability was discovered as part of the \"[Marvin Attack]\", which revealed several implementations of RSA including OpenSSL had not properly mitigated timing sidechannel attacks.\n\n[Marvin Attack]: https://people.redhat.com/~hkario/marvin/",
                    "date": "2023-11-22",
                    "aliases": [
                      "CVE-2023-49092",
                      "GHSA-c38w-74pg-36hr",
                      "GHSA-4grx-2x9w-596c"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "crypto-failure"
                    ],
                    "keywords": [
                      "cryptography"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
                    "informational": null,
                    "references": [
                      "https://people.redhat.com/~hkario/marvin/"
                    ],
                    "source": null,
                    "url": "https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "rsa",
                    "version": "0.9.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5d0e5124fcb30e76a7e79bfee683a2746db83784b86289f6251b54b7950a0dfc",
                    "dependencies": [
                      {
                        "name": "const-oid",
                        "version": "0.9.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "digest",
                        "version": "0.10.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-bigint-dig",
                        "version": "0.8.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-integer",
                        "version": "0.1.46",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num-traits",
                        "version": "0.2.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pkcs1",
                        "version": "0.7.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pkcs8",
                        "version": "0.10.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rand_core",
                        "version": "0.6.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "signature",
                        "version": "2.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spki",
                        "version": "0.7.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "subtle",
                        "version": "2.6.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "zeroize",
                        "version": "1.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0399",
                    "package": "rustls",
                    "title": "rustls network-reachable panic in `Acceptor::accept`",
                    "description": "A bug introduced in rustls 0.23.13 leads to a panic if the received\nTLS ClientHello is fragmented.  Only servers that use\n`rustls::server::Acceptor::accept()` are affected.\n\nServers that use `tokio-rustls`'s `LazyConfigAcceptor` API are affected.\n\nServers that use `tokio-rustls`'s `TlsAcceptor` API are not affected.\n\nServers that use `rustls-ffi`'s `rustls_acceptor_accept` API are affected.",
                    "date": "2024-11-22",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustls/rustls/issues/2227",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.23.18"
                    ],
                    "unaffected": [
                      ">=0.23, <0.23.13",
                      "<0.23"
                    ]
                  },
                  "affected": null,
                  "package": {
                    "name": "rustls",
                    "version": "0.23.15",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5fbb44d7acc4e873d613422379f69f237a1b141928c02f6bc6ccfddddc2d7993",
                    "dependencies": [
                      {
                        "name": "once_cell",
                        "version": "1.20.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ring",
                        "version": "0.17.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-pki-types",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-webpki",
                        "version": "0.102.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "subtle",
                        "version": "2.6.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "zeroize",
                        "version": "1.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.12.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "dotenv",
                    "version": "0.15.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "77c90badedccf4105eca100756a0b1289e191f6fcbdadd3cee1d2f614f97da8f",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0141",
                    "package": "dotenv",
                    "title": "dotenv is Unmaintained",
                    "description": "dotenv by description is meant to be used in development or testing only.\n\nUsing this in production may or may not be advisable.\n\n## Alternatives\n\nThe below may or may not be feasible alternative(s):\n- [dotenvy](https://crates.io/crates/dotenvy)",
                    "date": "2021-12-24",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dotenv-rs/dotenv/issues/74",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "proc-macro-error",
                    "version": "1.0.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c",
                    "dependencies": [
                      {
                        "name": "proc-macro-error-attr",
                        "version": "1.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "proc-macro2",
                        "version": "1.0.94",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "quote",
                        "version": "1.0.37",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "version_check",
                        "version": "0.9.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0370",
                    "package": "proc-macro-error",
                    "title": "proc-macro-error is unmaintained",
                    "description": "proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab repo or response to email.\n\nproc-macro-error also depends on `syn 1.x`, which may be bringing duplicate dependencies into dependant build trees.\n\n## Possible Alternative(s)\n\n- [manyhow](https://crates.io/crates/manyhow)\n- [proc-macro-error2](https://crates.io/crates/proc-macro-error2)\n- [proc-macro2-diagnostics](https://github.com/SergioBenitez/proc-macro2-diagnostics)",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/20",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.40.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e2b070231665d27ad9ec9b8df639893f46727666c6767db40317fbe920a5d998",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.74",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "1.0.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "parking_lot",
                        "version": "0.12.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "signal-hook-registry",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "socket2",
                        "version": "0.5.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "sea-orm",
          "version": "1.2.0-rc.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\n[Settings](https://docs.rs/sea-orm/latest/settings.html)\n[Help](https://docs.rs/sea-orm/latest/help.html)\nSummary[Source](https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430)\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n[![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm) [![docs](https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm) [![build status](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm)SeaORM\n##### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages)SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#getting-started)Getting Started\n  * [Documentation](https://www.sea-ql.org/SeaORM)\n  * [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n  * [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\n\nIntegration examples:\n  * [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n  * [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n  * [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n  * [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n  * [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n  * [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n  * [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n  * [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n  * [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n  * [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#features)Features\n  1. Async\nRelying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm)A quick taste of SeaORM\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#entity)Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#select)Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#insert)Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#update)Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#save)Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#delete)Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api)\ud83e\udded Seaography: instant GraphQL API\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel)\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\n[SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/) is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * [Example Repo](https://github.com/SeaQL/sea-orm-pro)\n  * [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/)\n  * [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/)\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#releases)Releases\n[SeaORM 1.0](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/) is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm)Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. [Full list here](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \n[Zed](https://github.com/zed-industries/zed)| ![GitHub stars](https://img.shields.io/github/stars/zed-industries/zed.svg?style=social)| A high-performance, multiplayer code editor  \n[OpenObserve](https://github.com/openobserve/openobserve)| ![GitHub stars](https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social)| Open-source observability platform  \n[RisingWave](https://github.com/risingwavelabs/risingwave)| ![GitHub stars](https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social)| Stream processing and management platform  \n[LLDAP](https://github.com/nitnelave/lldap)| ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social)| A light LDAP server for user management  \n[Warpgate](https://github.com/warp-tech/warpgate)| ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social)| Smart SSH bastion that works with any SSH client  \n[Svix](https://github.com/svix/svix-webhooks)| ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social)| The enterprise ready webhooks service  \n[Ryot](https://github.com/IgnisDa/ryot)| ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social)| The only self hosted tracker you will ever need  \n[Lapdev](https://github.com/lapce/lapdev)| ![GitHub stars](https://img.shields.io/github/stars/lapce/lapdev.svg?style=social)| Self-hosted remote development enviroment  \n[System Initiative](https://github.com/systeminit/si)| ![GitHub stars](https://img.shields.io/github/stars/systeminit/si.svg?style=social)| DevOps Automation Platform  \n[OctoBase](https://github.com/toeverything/OctoBase)| ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social)| A light-weight, scalable, offline collaborative data backend  \n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n[![Contributors](https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#sponsorship)Sponsorship\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors)Silver Sponsors\n[ ![](https://www.sea-ql.org/static/sponsors/DigitalOcean.svg) ](https://www.digitalocean.com/) | [ ![](https://www.sea-ql.org/static/sponsors/JetBrains.svg) ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#mascot)Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres](https://www.sea-ql.org/SeaORM/img/Terres.png)\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-)Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\n[Support SeaQL and get a Sticker Pack!](https://www.sea-ql.org/sticker-pack/) All proceeds contributes directly to the ongoing development of SeaQL projects.\n[![Rustacean Sticker Pack by SeaQL](https://www.sea-ql.org/static/sticker-pack-1s.jpg)](https://www.sea-ql.org/sticker-pack/)\n## Re-exports[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#reexports)\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#modules)\n\n[entity](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")\n    Module for the Entity type and operations\n\n[error](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")\n    Error types for all database operations\n\n[metric](https://docs.rs/sea-orm/latest/sea_orm/metric/index.html \"mod sea_orm::metric\")\n    Types and methods to perform metric collection\n\n[query](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")\n    Types and methods to perform queries\n\n[schema](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")\n    Types that defines the schemas of an Entity\n\n[value](https://docs.rs/sea-orm/latest/sea_orm/value/index.html \"mod sea_orm::value\")\n    Helpers for working with Value\n## Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#macros)\n\n[debug_print](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html \"macro sea_orm::debug_print\")\n    Non-debug version\n\n[debug_query](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html \"macro sea_orm::debug_query\")\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\n[debug_query_stmt](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html \"macro sea_orm::debug_query_stmt\")\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#structs)\n\n[ConnectOptions](https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html \"struct sea_orm::ConnectOptions\")\n    Defines the configuration options of a database\n\n[Cursor](https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html \"struct sea_orm::Cursor\")\n    Cursor pagination\n\n[Database](https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html \"struct sea_orm::Database\")\n    Defines a database\n\n[DatabaseTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html \"struct sea_orm::DatabaseTransaction\")\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\n[DeleteResult](https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html \"struct sea_orm::DeleteResult\")\n    The result of a DELETE operation\n\n[Deleter](https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html \"struct sea_orm::Deleter\")\n    Handles DELETE operations in a ActiveModel using [DeleteStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html \"struct sea_query::query::delete::DeleteStatement\")\n\n[ExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html \"struct sea_orm::ExecResult\")\n    Defines the result of executing an operation\n\n[InsertResult](https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html \"struct sea_orm::InsertResult\")\n    The result of an INSERT operation on an ActiveModel\n\n[Inserter](https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html \"struct sea_orm::Inserter\")\n    Defines a structure to perform INSERT operations in an ActiveModel\n\n[ItemsAndPagesNumber](https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html \"struct sea_orm::ItemsAndPagesNumber\")\n    Define a structure containing the numbers of items and pages of a Paginator\n\n[MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")`mock`\n    Defines a Mock database suitable for testing\n\n[MockDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html \"struct sea_orm::MockDatabaseConnection\")\n    Defines a connection for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html \"struct sea_orm::MockDatabaseConnector\")\n    Defines a database driver for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html \"struct sea_orm::MockExecResult\")`mock`\n    Defines the results obtained from a [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\")`mock`\n    Defines the structure of a test Row for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\") which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[OpenTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html \"struct sea_orm::OpenTransaction\")`mock`\n    Defines a transaction that is has not been committed\n\n[Paginator](https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html \"struct sea_orm::Paginator\")\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\n[ProxyDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html \"struct sea_orm::ProxyDatabaseConnection\")\n    Defines a connection for the [ProxyDatabase]\n\n[ProxyDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html \"struct sea_orm::ProxyDatabaseConnector\")\n    Defines a database driver for the [ProxyDatabase]\n\n[ProxyExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html \"struct sea_orm::ProxyExecResult\")`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\n[ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\")\n    Defines the result of a query operation on a Model\n\n[QueryStream](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html \"struct sea_orm::QueryStream\")\n    The self-referencing struct.\n\n[SelectGetableTuple](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html \"struct sea_orm::SelectGetableTuple\")\n    Get tuple from query result based on column index\n\n[SelectGetableValue](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html \"struct sea_orm::SelectGetableValue\")\n    Get tuple from query result based on a list of column identifiers\n\n[SelectModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html \"struct sea_orm::SelectModel\")\n    Helper class to handle query result for 1 Model\n\n[SelectThreeModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html \"struct sea_orm::SelectThreeModel\")\n    Helper class to handle query result for 3 Models\n\n[SelectTwoModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html \"struct sea_orm::SelectTwoModel\")\n    Helper class to handle query result for 2 Models\n\n[Selector](https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html \"struct sea_orm::Selector\")\n    Defines a type to do `SELECT` operations through a [SelectStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html \"struct sea_query::query::select::SelectStatement\") on a Model\n\n[SelectorRaw](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html \"struct sea_orm::SelectorRaw\")\n    Performs a raw `SELECT` operation on a model\n\n[SqlxMySqlConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html \"struct sea_orm::SqlxMySqlConnector\")\n    Defines the [sqlx::mysql](https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html \"mod sqlx_mysql\") connector\n\n[SqlxMySqlPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html \"struct sea_orm::SqlxMySqlPoolConnection\")\n    Defines a sqlx MySQL pool\n\n[SqlxPostgresConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html \"struct sea_orm::SqlxPostgresConnector\")\n    Defines the [sqlx::postgres](https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html \"mod sqlx_postgres\") connector\n\n[SqlxPostgresPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html \"struct sea_orm::SqlxPostgresPoolConnection\")\n    Defines a sqlx PostgreSQL pool\n\n[SqlxSqliteConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html \"struct sea_orm::SqlxSqliteConnector\")\n    Defines the [sqlx::sqlite](https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html \"mod sqlx_sqlite\") connector\n\n[SqlxSqlitePoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html \"struct sea_orm::SqlxSqlitePoolConnection\")\n    Defines a sqlx SQLite pool\n\n[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n    Defines an SQL statement\n\n[Transaction](https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html \"struct sea_orm::Transaction\")`mock`\n    Defines a database transaction as it holds a Vec<[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")>\n\n[TransactionStream](https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html \"struct sea_orm::TransactionStream\")\n    The self-referencing struct.\n\n[UpdateResult](https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html \"struct sea_orm::UpdateResult\")\n    The result of an update operation on an ActiveModel\n\n[Updater](https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html \"struct sea_orm::Updater\")\n    Defines an update operation\n\n[Values](https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html \"struct sea_orm::Values\")\n\n## Enums[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#enums)\n\n[AccessMode](https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html \"enum sea_orm::AccessMode\")\n    Access mode\n\n[DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\")\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\n[DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\n[IsolationLevel](https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html \"enum sea_orm::IsolationLevel\")\n    Isolation level\n\n[TransactionError](https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html \"enum sea_orm::TransactionError\")\n    Defines errors for handling transaction failures\n\n[TryInsertResult](https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html \"enum sea_orm::TryInsertResult\")\n    The types of results for an INSERT operation\n\n[Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")\n    Value variants\n## Traits[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#traits)\n\n[ColIdx](https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html \"trait sea_orm::ColIdx\")\n    Column Index, used by [`TryGetable`](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\"). Implemented for `&str` and `usize`\n\n[ConnectionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html \"trait sea_orm::ConnectionTrait\")\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\n[CursorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html \"trait sea_orm::CursorTrait\")\n    A trait for any type that can be turn into a cursor\n\n[Iden](https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html \"trait sea_orm::Iden\")\n    Identifier\n\n[IntoMockRow](https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html \"trait sea_orm::IntoMockRow\")`mock`\n    A trait to get a [MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\") from a type useful for testing in the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html \"trait sea_orm::MockDatabaseTrait\")\n    A Trait for any type wanting to perform operations on the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[PaginatorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html \"trait sea_orm::PaginatorTrait\")\n    A Trait for any type that can paginate results\n\n[ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\")`proxy`\n    Defines the [ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\") to save the functions\n\n[SelectorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html \"trait sea_orm::SelectorTrait\")\n    A Trait for any type that can perform SELECT queries\n\n[StatementBuilder](https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html \"trait sea_orm::StatementBuilder\")\n    Any type that can build a [Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n\n[StreamTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html \"trait sea_orm::StreamTrait\")\n    Stream query results\n\n[TransactionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html \"trait sea_orm::TransactionTrait\")\n    Spawn database transaction\n\n[TryFromU64](https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html \"trait sea_orm::TryFromU64\")\n    Try to convert a type to a u64\n\n[TryGetable](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\")\n    An interface to get a value from the query result\n\n[TryGetableArray](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html \"trait sea_orm::TryGetableArray\")\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\n[TryGetableFromJson](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html \"trait sea_orm::TryGetableFromJson\")\n    An interface to get a JSON from the query result\n\n[TryGetableMany](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html \"trait sea_orm::TryGetableMany\")\n    An interface to get a tuple value from the query result\n## Functions[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#functions)\n\n[from_query_result_to_proxy_row](https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html \"fn sea_orm::from_query_result_to_proxy_row\")`proxy`\n    Convert [QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\") to [ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")\n## Type Aliases[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#types)\n\n[DbBackend](https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html \"type sea_orm::DbBackend\")\n    The same as [DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\") just shorter :)\n\n[DbConn](https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html \"type sea_orm::DbConn\")\n    The same as a [DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n\n[PinBoxStream](https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html \"type sea_orm::PinBoxStream\")\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#derives)\n\n[DeriveActiveEnum](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html \"derive sea_orm::DeriveActiveEnum\")\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\n[DeriveActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html \"derive sea_orm::DeriveActiveModel\")\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\n[DeriveActiveModelBehavior](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html \"derive sea_orm::DeriveActiveModelBehavior\")\n    Models that a user can override\n\n[DeriveColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html \"derive sea_orm::DeriveColumn\")\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\n[DeriveCustomColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html \"derive sea_orm::DeriveCustomColumn\")\n    Derive a column if column names are not in snake-case\n\n[DeriveDisplay](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html \"derive sea_orm::DeriveDisplay\")\n\n\n[DeriveEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html \"derive sea_orm::DeriveEntity\")\n    Create an Entity\n\n[DeriveEntityModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html \"derive sea_orm::DeriveEntityModel\")\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\n[DeriveIden](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html \"derive sea_orm::DeriveIden\")\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\n[DeriveIntoActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html \"derive sea_orm::DeriveIntoActiveModel\")\n    Derive into an active model\n\n[DeriveMigrationName](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html \"derive sea_orm::DeriveMigrationName\")\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\n[DeriveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html \"derive sea_orm::DeriveModel\")\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\n[DerivePartialModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html \"derive sea_orm::DerivePartialModel\")\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\n[DerivePrimaryKey](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html \"derive sea_orm::DerivePrimaryKey\")\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\") is also derived, allowing iteration over all enum variants.\n\n[DeriveRelatedEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html \"derive sea_orm::DeriveRelatedEntity\")\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\n[DeriveRelation](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html \"derive sea_orm::DeriveRelation\")\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\n[DeriveValueType](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html \"derive sea_orm::DeriveValueType\")\n    Implements traits for types that wrap a database value type.\n\n[EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\")\n    Creates a new type that iterates of the variants of an enum.\n\n[FromJsonQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html \"derive sea_orm::FromJsonQueryResult\")\n\n\n[FromQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html \"derive sea_orm::FromQueryResult\")\n    Convert a query result into the corresponding Model.\n",
            "markdown_with_citations": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n![crate\u27e84\u27e9](https://crates.io/crates/sea-orm) ![docs\u27e85\u27e9](https://docs.rs/sea-orm) ![build status\u27e86\u27e9](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## \u00a7\u27e87\u27e9SeaORM\n##### \u00a7\u27e88\u27e9SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n![GitHub stars\u27e89\u27e9](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the SeaQL Community Survey 2024\u27e810\u27e9!\n![Discord\u27e811\u27e9](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### \u00a7\u27e812\u27e9Getting Started\n  * Documentation\u27e813\u27e9\n  * Tutorial\u27e814\u27e9\n  * Cookbook\u27e815\u27e9\n\n\nIntegration examples:\n  * Actix v4 Example\u27e816\u27e9\n  * Axum Example\u27e817\u27e9\n  * GraphQL Example\u27e818\u27e9\n  * jsonrpsee Example\u27e819\u27e9\n  * Loco TODO Example\u27e820\u27e9 / Loco REST Starter\u27e821\u27e9\n  * Poem Example\u27e822\u27e9\n  * Rocket Example\u27e823\u27e9 / Rocket OpenAPI Example\u27e824\u27e9\n  * Salvo Example\u27e825\u27e9\n  * Tonic Example\u27e826\u27e9\n  * Seaography Example\u27e827\u27e9\n\n\n### \u00a7\u27e828\u27e9Features\n  1. Async\nRelying on SQLx\u27e829\u27e9, SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon SeaQuery\u27e830\u27e9, SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### \u00a7\u27e831\u27e9A quick taste of SeaORM\n#### \u00a7\u27e832\u27e9Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### \u00a7\u27e833\u27e9Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### \u00a7\u27e834\u27e9Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### \u00a7\u27e835\u27e9Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### \u00a7\u27e836\u27e9Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### \u00a7\u27e837\u27e9Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### \u00a7\u27e838\u27e9\ud83e\udded Seaography: instant GraphQL API\nSeaography\u27e839\u27e9 is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the Seaography Example\u27e827\u27e9 to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### \u00a7\u27e840\u27e9\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\nSeaORM Pro\u27e841\u27e9 is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * Example Repo\u27e842\u27e9\n  * Getting Started with Loco\u27e843\u27e9\n  * Getting Started with Axum\u27e844\u27e9\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### \u00a7\u27e845\u27e9Releases\nSeaORM 1.0\u27e846\u27e9 is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * Change Log\u27e847\u27e9\n\n\n#### \u00a7\u27e848\u27e9Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. Full list here\u27e849\u27e9. Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \nZed\u27e850\u27e9| ![GitHub stars\u27e851\u27e9]| A high-performance, multiplayer code editor  \nOpenObserve\u27e852\u27e9| ![GitHub stars\u27e853\u27e9]| Open-source observability platform  \nRisingWave\u27e854\u27e9| ![GitHub stars\u27e855\u27e9]| Stream processing and management platform  \nLLDAP\u27e856\u27e9| ![GitHub stars\u27e857\u27e9]| A light LDAP server for user management  \nWarpgate\u27e858\u27e9| ![GitHub stars\u27e859\u27e9]| Smart SSH bastion that works with any SSH client  \nSvix\u27e860\u27e9| ![GitHub stars\u27e861\u27e9]| The enterprise ready webhooks service  \nRyot\u27e862\u27e9| ![GitHub stars\u27e863\u27e9]| The only self hosted tracker you will ever need  \nLapdev\u27e864\u27e9| ![GitHub stars\u27e865\u27e9]| Self-hosted remote development enviroment  \nSystem Initiative\u27e866\u27e9| ![GitHub stars\u27e867\u27e9]| DevOps Automation Platform  \nOctoBase\u27e868\u27e9| ![GitHub stars\u27e869\u27e9]| A light-weight, scalable, offline collaborative data backend  \n### \u00a7\u27e870\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e871\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e872\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### \u00a7\u27e873\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n![Contributors\u27e874\u27e9](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### \u00a7\u27e875\u27e9Sponsorship\nSeaQL.org\u27e876\u27e9 is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via GitHub Sponsor\u27e877\u27e9 will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### \u00a7\u27e878\u27e9Silver Sponsors\n ![\u27e879\u27e9 ](https://www.digitalocean.com/) |  ![\u27e880\u27e9 ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### \u00a7\u27e881\u27e9Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres\u27e882\u27e9]\n#### \u00a7\u27e883\u27e9Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\nSupport SeaQL and get a Sticker Pack!\u27e884\u27e9 All proceeds contributes directly to the ongoing development of SeaQL projects.\n![Rustacean Sticker Pack by SeaQL\u27e885\u27e9](https://www.sea-ql.org/sticker-pack/)\n## Re-exports\u00a7\u27e886\u27e9\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules\u00a7\u27e887\u27e9\n\nentity\u27e888\u27e9\n    Module for the Entity type and operations\n\nerror\u27e889\u27e9\n    Error types for all database operations\n\nmetric\u27e890\u27e9\n    Types and methods to perform metric collection\n\nquery\u27e891\u27e9\n    Types and methods to perform queries\n\nschema\u27e892\u27e9\n    Types that defines the schemas of an Entity\n\nvalue\u27e893\u27e9\n    Helpers for working with Value\n## Macros\u00a7\u27e894\u27e9\n\ndebug_print\u27e895\u27e9\n    Non-debug version\n\ndebug_query\u27e896\u27e9\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\ndebug_query_stmt\u27e897\u27e9\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs\u00a7\u27e898\u27e9\n\nConnectOptions\u27e899\u27e9\n    Defines the configuration options of a database\n\nCursor\u27e8100\u27e9\n    Cursor pagination\n\nDatabase\u27e8101\u27e9\n    Defines a database\n\nDatabaseTransaction\u27e8102\u27e9\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\nDeleteResult\u27e8103\u27e9\n    The result of a DELETE operation\n\nDeleter\u27e8104\u27e9\n    Handles DELETE operations in a ActiveModel using DeleteStatement\u27e8105\u27e9\n\nExecResult\u27e8106\u27e9\n    Defines the result of executing an operation\n\nInsertResult\u27e8107\u27e9\n    The result of an INSERT operation on an ActiveModel\n\nInserter\u27e8108\u27e9\n    Defines a structure to perform INSERT operations in an ActiveModel\n\nItemsAndPagesNumber\u27e8109\u27e9\n    Define a structure containing the numbers of items and pages of a Paginator\n\nMockDatabase\u27e8110\u27e9`mock`\n    Defines a Mock database suitable for testing\n\nMockDatabaseConnection\u27e8111\u27e9\n    Defines a connection for the MockDatabase\u27e8110\u27e9\n\nMockDatabaseConnector\u27e8112\u27e9\n    Defines a database driver for the MockDatabase\u27e8110\u27e9\n\nMockExecResult\u27e8113\u27e9`mock`\n    Defines the results obtained from a MockDatabase\u27e8110\u27e9\n\nMockRow\u27e8114\u27e9`mock`\n    Defines the structure of a test Row for the MockDatabase\u27e8110\u27e9 which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nOpenTransaction\u27e8118\u27e9`mock`\n    Defines a transaction that is has not been committed\n\nPaginator\u27e8119\u27e9\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\nProxyDatabaseConnection\u27e8120\u27e9\n    Defines a connection for the [ProxyDatabase]\n\nProxyDatabaseConnector\u27e8121\u27e9\n    Defines a database driver for the [ProxyDatabase]\n\nProxyExecResult\u27e8122\u27e9`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\nProxyRow\u27e8123\u27e9`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nQueryResult\u27e8124\u27e9\n    Defines the result of a query operation on a Model\n\nQueryStream\u27e8125\u27e9\n    The self-referencing struct.\n\nSelectGetableTuple\u27e8126\u27e9\n    Get tuple from query result based on column index\n\nSelectGetableValue\u27e8127\u27e9\n    Get tuple from query result based on a list of column identifiers\n\nSelectModel\u27e8128\u27e9\n    Helper class to handle query result for 1 Model\n\nSelectThreeModel\u27e8129\u27e9\n    Helper class to handle query result for 3 Models\n\nSelectTwoModel\u27e8130\u27e9\n    Helper class to handle query result for 2 Models\n\nSelector\u27e8131\u27e9\n    Defines a type to do `SELECT` operations through a SelectStatement\u27e8132\u27e9 on a Model\n\nSelectorRaw\u27e8133\u27e9\n    Performs a raw `SELECT` operation on a model\n\nSqlxMySqlConnector\u27e8134\u27e9\n    Defines the sqlx::mysql\u27e8135\u27e9 connector\n\nSqlxMySqlPoolConnection\u27e8136\u27e9\n    Defines a sqlx MySQL pool\n\nSqlxPostgresConnector\u27e8137\u27e9\n    Defines the sqlx::postgres\u27e8138\u27e9 connector\n\nSqlxPostgresPoolConnection\u27e8139\u27e9\n    Defines a sqlx PostgreSQL pool\n\nSqlxSqliteConnector\u27e8140\u27e9\n    Defines the sqlx::sqlite\u27e8141\u27e9 connector\n\nSqlxSqlitePoolConnection\u27e8142\u27e9\n    Defines a sqlx SQLite pool\n\nStatement\u27e8143\u27e9\n    Defines an SQL statement\n\nTransaction\u27e8144\u27e9`mock`\n    Defines a database transaction as it holds a Vec<Statement\u27e8143\u27e9>\n\nTransactionStream\u27e8145\u27e9\n    The self-referencing struct.\n\nUpdateResult\u27e8146\u27e9\n    The result of an update operation on an ActiveModel\n\nUpdater\u27e8147\u27e9\n    Defines an update operation\n\nValues\u27e8148\u27e9\n\n## Enums\u00a7\u27e8149\u27e9\n\nAccessMode\u27e8150\u27e9\n    Access mode\n\nDatabaseBackend\u27e8151\u27e9\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\nDatabaseConnection\u27e8152\u27e9\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\nIsolationLevel\u27e8153\u27e9\n    Isolation level\n\nTransactionError\u27e8154\u27e9\n    Defines errors for handling transaction failures\n\nTryInsertResult\u27e8155\u27e9\n    The types of results for an INSERT operation\n\nValue\u27e8117\u27e9\n    Value variants\n## Traits\u00a7\u27e8156\u27e9\n\nColIdx\u27e8157\u27e9\n    Column Index, used by `TryGetable`\u27e8158\u27e9. Implemented for `&str` and `usize`\n\nConnectionTrait\u27e8159\u27e9\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\nCursorTrait\u27e8160\u27e9\n    A trait for any type that can be turn into a cursor\n\nIden\u27e8161\u27e9\n    Identifier\n\nIntoMockRow\u27e8162\u27e9`mock`\n    A trait to get a MockRow\u27e8114\u27e9 from a type useful for testing in the MockDatabase\u27e8110\u27e9\n\nMockDatabaseTrait\u27e8163\u27e9\n    A Trait for any type wanting to perform operations on the MockDatabase\u27e8110\u27e9\n\nPaginatorTrait\u27e8164\u27e9\n    A Trait for any type that can paginate results\n\nProxyDatabaseTrait\u27e8165\u27e9`proxy`\n    Defines the ProxyDatabaseTrait\u27e8165\u27e9 to save the functions\n\nSelectorTrait\u27e8166\u27e9\n    A Trait for any type that can perform SELECT queries\n\nStatementBuilder\u27e8167\u27e9\n    Any type that can build a Statement\u27e8143\u27e9\n\nStreamTrait\u27e8168\u27e9\n    Stream query results\n\nTransactionTrait\u27e8169\u27e9\n    Spawn database transaction\n\nTryFromU64\u27e8170\u27e9\n    Try to convert a type to a u64\n\nTryGetable\u27e8158\u27e9\n    An interface to get a value from the query result\n\nTryGetableArray\u27e8171\u27e9\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\nTryGetableFromJson\u27e8172\u27e9\n    An interface to get a JSON from the query result\n\nTryGetableMany\u27e8173\u27e9\n    An interface to get a tuple value from the query result\n## Functions\u00a7\u27e8174\u27e9\n\nfrom_query_result_to_proxy_row\u27e8175\u27e9`proxy`\n    Convert QueryResult\u27e8124\u27e9 to ProxyRow\u27e8123\u27e9\n## Type Aliases\u00a7\u27e8176\u27e9\n\nDbBackend\u27e8177\u27e9\n    The same as DatabaseBackend\u27e8151\u27e9 just shorter :)\n\nDbConn\u27e8178\u27e9\n    The same as a DatabaseConnection\u27e8152\u27e9\n\nPinBoxStream\u27e8179\u27e9\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros\u00a7\u27e8180\u27e9\n\nDeriveActiveEnum\u27e8181\u27e9\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\nDeriveActiveModel\u27e8182\u27e9\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\nDeriveActiveModelBehavior\u27e8183\u27e9\n    Models that a user can override\n\nDeriveColumn\u27e8184\u27e9\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\nDeriveCustomColumn\u27e8185\u27e9\n    Derive a column if column names are not in snake-case\n\nDeriveDisplay\u27e8186\u27e9\n\n\nDeriveEntity\u27e8187\u27e9\n    Create an Entity\n\nDeriveEntityModel\u27e8188\u27e9\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\nDeriveIden\u27e8189\u27e9\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\nDeriveIntoActiveModel\u27e8190\u27e9\n    Derive into an active model\n\nDeriveMigrationName\u27e8191\u27e9\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\nDeriveModel\u27e8192\u27e9\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\nDerivePartialModel\u27e8193\u27e9\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\nDerivePrimaryKey\u27e8194\u27e9\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The EnumIter\u27e8195\u27e9 is also derived, allowing iteration over all enum variants.\n\nDeriveRelatedEntity\u27e8196\u27e9\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\nDeriveRelation\u27e8197\u27e9\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\nDeriveValueType\u27e8198\u27e9\n    Implements traits for types that wrap a database value type.\n\nEnumIter\u27e8195\u27e9\n    Creates a new type that iterates of the variants of an enum.\n\nFromJsonQueryResult\u27e8199\u27e9\n\n\nFromQueryResult\u27e8200\u27e9\n    Convert a query result into the corresponding Model.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sea-orm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sea-orm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/sea-orm.svg: ![crate\n\u27e85\u27e9 https://docs.rs/sea-orm/badge.svg: ![docs\n\u27e86\u27e9 https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg: ![build status\n\u27e87\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm: \u00a7\n\u27e88\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages: \u00a7\n\u27e89\u27e9 https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1: ![GitHub stars\n\u27e810\u27e9 https://sea-ql.org/community-survey: SeaQL Community Survey 2024\n\u27e811\u27e9 https://img.shields.io/discord/873880840487206962?label=Discord: ![Discord\n\u27e812\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#getting-started: \u00a7\n\u27e813\u27e9 https://www.sea-ql.org/SeaORM: Documentation\n\u27e814\u27e9 https://www.sea-ql.org/sea-orm-tutorial: Tutorial\n\u27e815\u27e9 https://www.sea-ql.org/sea-orm-cookbook: Cookbook\n\u27e816\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example: Actix v4 Example\n\u27e817\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example: Axum Example\n\u27e818\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example: GraphQL Example\n\u27e819\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example: jsonrpsee Example\n\u27e820\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example: Loco TODO Example\n\u27e821\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter: Loco REST Starter\n\u27e822\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example: Poem Example\n\u27e823\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example: Rocket Example\n\u27e824\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example: Rocket OpenAPI Example\n\u27e825\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example: Salvo Example\n\u27e826\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example: Tonic Example\n\u27e827\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example: Seaography Example\n\u27e828\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#features: \u00a7\n\u27e829\u27e9 https://github.com/launchbadge/sqlx: SQLx\n\u27e830\u27e9 https://github.com/SeaQL/sea-query: SeaQuery\n\u27e831\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm: \u00a7\n\u27e832\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#entity: \u00a7\n\u27e833\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#select: \u00a7\n\u27e834\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#insert: \u00a7\n\u27e835\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#update: \u00a7\n\u27e836\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#save: \u00a7\n\u27e837\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#delete: \u00a7\n\u27e838\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api: \u00a7\n\u27e839\u27e9 https://github.com/SeaQL/seaography: Seaography\n\u27e840\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel: \u00a7\n\u27e841\u27e9 https://www.sea-ql.org/sea-orm-pro/: SeaORM Pro\n\u27e842\u27e9 https://github.com/SeaQL/sea-orm-pro: Example Repo\n\u27e843\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/: Getting Started with Loco\n\u27e844\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/: Getting Started with Axum\n\u27e845\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#releases: \u00a7\n\u27e846\u27e9 https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/: SeaORM 1.0\n\u27e847\u27e9 https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md: Change Log\n\u27e848\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm: \u00a7\n\u27e849\u27e9 https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm: Full list here\n\u27e850\u27e9 https://github.com/zed-industries/zed: Zed\n\u27e851\u27e9 https://img.shields.io/github/stars/zed-industries/zed.svg?style=social: GitHub stars\n\u27e852\u27e9 https://github.com/openobserve/openobserve: OpenObserve\n\u27e853\u27e9 https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social: GitHub stars\n\u27e854\u27e9 https://github.com/risingwavelabs/risingwave: RisingWave\n\u27e855\u27e9 https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social: GitHub stars\n\u27e856\u27e9 https://github.com/nitnelave/lldap: LLDAP\n\u27e857\u27e9 https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social: GitHub stars\n\u27e858\u27e9 https://github.com/warp-tech/warpgate: Warpgate\n\u27e859\u27e9 https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social: GitHub stars\n\u27e860\u27e9 https://github.com/svix/svix-webhooks: Svix\n\u27e861\u27e9 https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social: GitHub stars\n\u27e862\u27e9 https://github.com/IgnisDa/ryot: Ryot\n\u27e863\u27e9 https://img.shields.io/github/stars/ignisda/ryot.svg?style=social: GitHub stars\n\u27e864\u27e9 https://github.com/lapce/lapdev: Lapdev\n\u27e865\u27e9 https://img.shields.io/github/stars/lapce/lapdev.svg?style=social: GitHub stars\n\u27e866\u27e9 https://github.com/systeminit/si: System Initiative\n\u27e867\u27e9 https://img.shields.io/github/stars/systeminit/si.svg?style=social: GitHub stars\n\u27e868\u27e9 https://github.com/toeverything/OctoBase: OctoBase\n\u27e869\u27e9 https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social: GitHub stars\n\u27e870\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#license: \u00a7\n\u27e871\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE: LICENSE-APACHE\n\u27e872\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT: LICENSE-MIT\n\u27e873\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#contribution: \u00a7\n\u27e874\u27e9 https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false: ![Contributors\n\u27e875\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#sponsorship: \u00a7\n\u27e876\u27e9 https://www.sea-ql.org/: SeaQL.org\n\u27e877\u27e9 https://github.com/sponsors/SeaQL: GitHub Sponsor\n\u27e878\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors: \u00a7\n\u27e879\u27e9 https://www.sea-ql.org/static/sponsors/DigitalOcean.svg:  ![\n\u27e880\u27e9 https://www.sea-ql.org/static/sponsors/JetBrains.svg:  ![\n\u27e881\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#mascot: \u00a7\n\u27e882\u27e9 https://www.sea-ql.org/SeaORM/img/Terres.png: Terres\n\u27e883\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-: \u00a7\n\u27e884\u27e9 https://www.sea-ql.org/sticker-pack/: Support SeaQL and get a Sticker Pack!\n\u27e885\u27e9 https://www.sea-ql.org/static/sticker-pack-1s.jpg: ![Rustacean Sticker Pack by SeaQL\n\u27e886\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#reexports: \u00a7\n\u27e887\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#modules: \u00a7\n\u27e888\u27e9 https://docs.rs/sea-orm/latest/sea_orm/entity/index.html: mod sea_orm::entity - entity\n\u27e889\u27e9 https://docs.rs/sea-orm/latest/sea_orm/error/index.html: mod sea_orm::error - error\n\u27e890\u27e9 https://docs.rs/sea-orm/latest/sea_orm/metric/index.html: mod sea_orm::metric - metric\n\u27e891\u27e9 https://docs.rs/sea-orm/latest/sea_orm/query/index.html: mod sea_orm::query - query\n\u27e892\u27e9 https://docs.rs/sea-orm/latest/sea_orm/schema/index.html: mod sea_orm::schema - schema\n\u27e893\u27e9 https://docs.rs/sea-orm/latest/sea_orm/value/index.html: mod sea_orm::value - value\n\u27e894\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#macros: \u00a7\n\u27e895\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html: macro sea_orm::debug_print - debug_print\n\u27e896\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html: macro sea_orm::debug_query - debug_query\n\u27e897\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html: macro sea_orm::debug_query_stmt - debug_query_stmt\n\u27e898\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#structs: \u00a7\n\u27e899\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html: struct sea_orm::ConnectOptions - ConnectOptions\n\u27e8100\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html: struct sea_orm::Cursor - Cursor\n\u27e8101\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html: struct sea_orm::Database - Database\n\u27e8102\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html: struct sea_orm::DatabaseTransaction - DatabaseTransaction\n\u27e8103\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html: struct sea_orm::DeleteResult - DeleteResult\n\u27e8104\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html: struct sea_orm::Deleter - Deleter\n\u27e8105\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html: struct sea_query::query::delete::DeleteStatement - DeleteStatement\n\u27e8106\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html: struct sea_orm::ExecResult - ExecResult\n\u27e8107\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html: struct sea_orm::InsertResult - InsertResult\n\u27e8108\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html: struct sea_orm::Inserter - Inserter\n\u27e8109\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html: struct sea_orm::ItemsAndPagesNumber - ItemsAndPagesNumber\n\u27e8110\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html: struct sea_orm::MockDatabase - MockDatabase\n\u27e8111\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html: struct sea_orm::MockDatabaseConnection - MockDatabaseConnection\n\u27e8112\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html: struct sea_orm::MockDatabaseConnector - MockDatabaseConnector\n\u27e8113\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html: struct sea_orm::MockExecResult - MockExecResult\n\u27e8114\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html: struct sea_orm::MockRow - MockRow\n\u27e8115\u27e9 https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html: struct alloc::collections::btree::map::BTreeMap - BTreeMap\n\u27e8116\u27e9 https://doc.rust-lang.org/nightly/alloc/string/struct.String.html: struct alloc::string::String - String\n\u27e8117\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html: enum sea_orm::Value - Value\n\u27e8118\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html: struct sea_orm::OpenTransaction - OpenTransaction\n\u27e8119\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html: struct sea_orm::Paginator - Paginator\n\u27e8120\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html: struct sea_orm::ProxyDatabaseConnection - ProxyDatabaseConnection\n\u27e8121\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html: struct sea_orm::ProxyDatabaseConnector - ProxyDatabaseConnector\n\u27e8122\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html: struct sea_orm::ProxyExecResult - ProxyExecResult\n\u27e8123\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html: struct sea_orm::ProxyRow - ProxyRow\n\u27e8124\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html: struct sea_orm::QueryResult - QueryResult\n\u27e8125\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html: struct sea_orm::QueryStream - QueryStream\n\u27e8126\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html: struct sea_orm::SelectGetableTuple - SelectGetableTuple\n\u27e8127\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html: struct sea_orm::SelectGetableValue - SelectGetableValue\n\u27e8128\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html: struct sea_orm::SelectModel - SelectModel\n\u27e8129\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html: struct sea_orm::SelectThreeModel - SelectThreeModel\n\u27e8130\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html: struct sea_orm::SelectTwoModel - SelectTwoModel\n\u27e8131\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html: struct sea_orm::Selector - Selector\n\u27e8132\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html: struct sea_query::query::select::SelectStatement - SelectStatement\n\u27e8133\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html: struct sea_orm::SelectorRaw - SelectorRaw\n\u27e8134\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html: struct sea_orm::SqlxMySqlConnector - SqlxMySqlConnector\n\u27e8135\u27e9 https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html: mod sqlx_mysql - sqlx::mysql\n\u27e8136\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html: struct sea_orm::SqlxMySqlPoolConnection - SqlxMySqlPoolConnection\n\u27e8137\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html: struct sea_orm::SqlxPostgresConnector - SqlxPostgresConnector\n\u27e8138\u27e9 https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html: mod sqlx_postgres - sqlx::postgres\n\u27e8139\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html: struct sea_orm::SqlxPostgresPoolConnection - SqlxPostgresPoolConnection\n\u27e8140\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html: struct sea_orm::SqlxSqliteConnector - SqlxSqliteConnector\n\u27e8141\u27e9 https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html: mod sqlx_sqlite - sqlx::sqlite\n\u27e8142\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html: struct sea_orm::SqlxSqlitePoolConnection - SqlxSqlitePoolConnection\n\u27e8143\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html: struct sea_orm::Statement - Statement\n\u27e8144\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html: struct sea_orm::Transaction - Transaction\n\u27e8145\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html: struct sea_orm::TransactionStream - TransactionStream\n\u27e8146\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html: struct sea_orm::UpdateResult - UpdateResult\n\u27e8147\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html: struct sea_orm::Updater - Updater\n\u27e8148\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html: struct sea_orm::Values - Values\n\u27e8149\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#enums: \u00a7\n\u27e8150\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html: enum sea_orm::AccessMode - AccessMode\n\u27e8151\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html: enum sea_orm::DatabaseBackend - DatabaseBackend\n\u27e8152\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html: enum sea_orm::DatabaseConnection - DatabaseConnection\n\u27e8153\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html: enum sea_orm::IsolationLevel - IsolationLevel\n\u27e8154\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html: enum sea_orm::TransactionError - TransactionError\n\u27e8155\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html: enum sea_orm::TryInsertResult - TryInsertResult\n\u27e8156\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#traits: \u00a7\n\u27e8157\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html: trait sea_orm::ColIdx - ColIdx\n\u27e8158\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html: trait sea_orm::TryGetable - `TryGetable`\n\u27e8159\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html: trait sea_orm::ConnectionTrait - ConnectionTrait\n\u27e8160\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html: trait sea_orm::CursorTrait - CursorTrait\n\u27e8161\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html: trait sea_orm::Iden - Iden\n\u27e8162\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html: trait sea_orm::IntoMockRow - IntoMockRow\n\u27e8163\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html: trait sea_orm::MockDatabaseTrait - MockDatabaseTrait\n\u27e8164\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html: trait sea_orm::PaginatorTrait - PaginatorTrait\n\u27e8165\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html: trait sea_orm::ProxyDatabaseTrait - ProxyDatabaseTrait\n\u27e8166\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html: trait sea_orm::SelectorTrait - SelectorTrait\n\u27e8167\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html: trait sea_orm::StatementBuilder - StatementBuilder\n\u27e8168\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html: trait sea_orm::StreamTrait - StreamTrait\n\u27e8169\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html: trait sea_orm::TransactionTrait - TransactionTrait\n\u27e8170\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html: trait sea_orm::TryFromU64 - TryFromU64\n\u27e8171\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html: trait sea_orm::TryGetableArray - TryGetableArray\n\u27e8172\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html: trait sea_orm::TryGetableFromJson - TryGetableFromJson\n\u27e8173\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html: trait sea_orm::TryGetableMany - TryGetableMany\n\u27e8174\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#functions: \u00a7\n\u27e8175\u27e9 https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html: fn sea_orm::from_query_result_to_proxy_row - from_query_result_to_proxy_row\n\u27e8176\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#types: \u00a7\n\u27e8177\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html: type sea_orm::DbBackend - DbBackend\n\u27e8178\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html: type sea_orm::DbConn - DbConn\n\u27e8179\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html: type sea_orm::PinBoxStream - PinBoxStream\n\u27e8180\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#derives: \u00a7\n\u27e8181\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html: derive sea_orm::DeriveActiveEnum - DeriveActiveEnum\n\u27e8182\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html: derive sea_orm::DeriveActiveModel - DeriveActiveModel\n\u27e8183\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html: derive sea_orm::DeriveActiveModelBehavior - DeriveActiveModelBehavior\n\u27e8184\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html: derive sea_orm::DeriveColumn - DeriveColumn\n\u27e8185\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html: derive sea_orm::DeriveCustomColumn - DeriveCustomColumn\n\u27e8186\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html: derive sea_orm::DeriveDisplay - DeriveDisplay\n\u27e8187\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html: derive sea_orm::DeriveEntity - DeriveEntity\n\u27e8188\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html: derive sea_orm::DeriveEntityModel - DeriveEntityModel\n\u27e8189\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html: derive sea_orm::DeriveIden - DeriveIden\n\u27e8190\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html: derive sea_orm::DeriveIntoActiveModel - DeriveIntoActiveModel\n\u27e8191\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html: derive sea_orm::DeriveMigrationName - DeriveMigrationName\n\u27e8192\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html: derive sea_orm::DeriveModel - DeriveModel\n\u27e8193\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html: derive sea_orm::DerivePartialModel - DerivePartialModel\n\u27e8194\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html: derive sea_orm::DerivePrimaryKey - DerivePrimaryKey\n\u27e8195\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html: derive sea_orm::EnumIter - EnumIter\n\u27e8196\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html: derive sea_orm::DeriveRelatedEntity - DeriveRelatedEntity\n\u27e8197\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html: derive sea_orm::DeriveRelation - DeriveRelation\n\u27e8198\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html: derive sea_orm::DeriveValueType - DeriveValueType\n\u27e8199\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html: derive sea_orm::FromJsonQueryResult - FromJsonQueryResult\n\u27e8200\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html: derive sea_orm::FromQueryResult - FromQueryResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "sea-orm",
          "version": "1.2.0-rc.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\n[Settings](https://docs.rs/sea-orm/latest/settings.html)\n[Help](https://docs.rs/sea-orm/latest/help.html)\nSummary[Source](https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430)\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n[![crate](https://img.shields.io/crates/v/sea-orm.svg)](https://crates.io/crates/sea-orm) [![docs](https://docs.rs/sea-orm/badge.svg)](https://docs.rs/sea-orm) [![build status](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg)](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm)SeaORM\n##### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages)SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n[![GitHub stars](https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1)](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the [SeaQL Community Survey 2024](https://sea-ql.org/community-survey)!\n[![Discord](https://img.shields.io/discord/873880840487206962?label=Discord)](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#getting-started)Getting Started\n  * [Documentation](https://www.sea-ql.org/SeaORM)\n  * [Tutorial](https://www.sea-ql.org/sea-orm-tutorial)\n  * [Cookbook](https://www.sea-ql.org/sea-orm-cookbook)\n\n\nIntegration examples:\n  * [Actix v4 Example](https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example)\n  * [Axum Example](https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example)\n  * [GraphQL Example](https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example)\n  * [jsonrpsee Example](https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example)\n  * [Loco TODO Example](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example) / [Loco REST Starter](https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter)\n  * [Poem Example](https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example)\n  * [Rocket Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example) / [Rocket OpenAPI Example](https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example)\n  * [Salvo Example](https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example)\n  * [Tonic Example](https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example)\n  * [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example)\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#features)Features\n  1. Async\nRelying on [SQLx](https://github.com/launchbadge/sqlx), SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon [SeaQuery](https://github.com/SeaQL/sea-query), SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm)A quick taste of SeaORM\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#entity)Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#select)Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#insert)Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#update)Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#save)Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#delete)Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api)\ud83e\udded Seaography: instant GraphQL API\n[Seaography](https://github.com/SeaQL/seaography) is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the [Seaography Example](https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example) to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel)\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\n[SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/) is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * [Example Repo](https://github.com/SeaQL/sea-orm-pro)\n  * [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/)\n  * [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/)\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#releases)Releases\n[SeaORM 1.0](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/) is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * [Change Log](https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md)\n\n\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm)Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. [Full list here](https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm). Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \n[Zed](https://github.com/zed-industries/zed)| ![GitHub stars](https://img.shields.io/github/stars/zed-industries/zed.svg?style=social)| A high-performance, multiplayer code editor  \n[OpenObserve](https://github.com/openobserve/openobserve)| ![GitHub stars](https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social)| Open-source observability platform  \n[RisingWave](https://github.com/risingwavelabs/risingwave)| ![GitHub stars](https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social)| Stream processing and management platform  \n[LLDAP](https://github.com/nitnelave/lldap)| ![GitHub stars](https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social)| A light LDAP server for user management  \n[Warpgate](https://github.com/warp-tech/warpgate)| ![GitHub stars](https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social)| Smart SSH bastion that works with any SSH client  \n[Svix](https://github.com/svix/svix-webhooks)| ![GitHub stars](https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social)| The enterprise ready webhooks service  \n[Ryot](https://github.com/IgnisDa/ryot)| ![GitHub stars](https://img.shields.io/github/stars/ignisda/ryot.svg?style=social)| The only self hosted tracker you will ever need  \n[Lapdev](https://github.com/lapce/lapdev)| ![GitHub stars](https://img.shields.io/github/stars/lapce/lapdev.svg?style=social)| Self-hosted remote development enviroment  \n[System Initiative](https://github.com/systeminit/si)| ![GitHub stars](https://img.shields.io/github/stars/systeminit/si.svg?style=social)| DevOps Automation Platform  \n[OctoBase](https://github.com/toeverything/OctoBase)| ![GitHub stars](https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social)| A light-weight, scalable, offline collaborative data backend  \n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n[![Contributors](https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false)](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#sponsorship)Sponsorship\n[SeaQL.org](https://www.sea-ql.org/) is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via [GitHub Sponsor](https://github.com/sponsors/SeaQL) will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors)Silver Sponsors\n[ ![](https://www.sea-ql.org/static/sponsors/DigitalOcean.svg) ](https://www.digitalocean.com/) | [ ![](https://www.sea-ql.org/static/sponsors/JetBrains.svg) ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#mascot)Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres](https://www.sea-ql.org/SeaORM/img/Terres.png)\n#### [\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-)Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\n[Support SeaQL and get a Sticker Pack!](https://www.sea-ql.org/sticker-pack/) All proceeds contributes directly to the ongoing development of SeaQL projects.\n[![Rustacean Sticker Pack by SeaQL](https://www.sea-ql.org/static/sticker-pack-1s.jpg)](https://www.sea-ql.org/sticker-pack/)\n## Re-exports[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#reexports)\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#modules)\n\n[entity](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")\n    Module for the Entity type and operations\n\n[error](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")\n    Error types for all database operations\n\n[metric](https://docs.rs/sea-orm/latest/sea_orm/metric/index.html \"mod sea_orm::metric\")\n    Types and methods to perform metric collection\n\n[query](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")\n    Types and methods to perform queries\n\n[schema](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")\n    Types that defines the schemas of an Entity\n\n[value](https://docs.rs/sea-orm/latest/sea_orm/value/index.html \"mod sea_orm::value\")\n    Helpers for working with Value\n## Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#macros)\n\n[debug_print](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html \"macro sea_orm::debug_print\")\n    Non-debug version\n\n[debug_query](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html \"macro sea_orm::debug_query\")\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\n[debug_query_stmt](https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html \"macro sea_orm::debug_query_stmt\")\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#structs)\n\n[ConnectOptions](https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html \"struct sea_orm::ConnectOptions\")\n    Defines the configuration options of a database\n\n[Cursor](https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html \"struct sea_orm::Cursor\")\n    Cursor pagination\n\n[Database](https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html \"struct sea_orm::Database\")\n    Defines a database\n\n[DatabaseTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html \"struct sea_orm::DatabaseTransaction\")\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\n[DeleteResult](https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html \"struct sea_orm::DeleteResult\")\n    The result of a DELETE operation\n\n[Deleter](https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html \"struct sea_orm::Deleter\")\n    Handles DELETE operations in a ActiveModel using [DeleteStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html \"struct sea_query::query::delete::DeleteStatement\")\n\n[ExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html \"struct sea_orm::ExecResult\")\n    Defines the result of executing an operation\n\n[InsertResult](https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html \"struct sea_orm::InsertResult\")\n    The result of an INSERT operation on an ActiveModel\n\n[Inserter](https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html \"struct sea_orm::Inserter\")\n    Defines a structure to perform INSERT operations in an ActiveModel\n\n[ItemsAndPagesNumber](https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html \"struct sea_orm::ItemsAndPagesNumber\")\n    Define a structure containing the numbers of items and pages of a Paginator\n\n[MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")`mock`\n    Defines a Mock database suitable for testing\n\n[MockDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html \"struct sea_orm::MockDatabaseConnection\")\n    Defines a connection for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html \"struct sea_orm::MockDatabaseConnector\")\n    Defines a database driver for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html \"struct sea_orm::MockExecResult\")`mock`\n    Defines the results obtained from a [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\")`mock`\n    Defines the structure of a test Row for the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\") which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[OpenTransaction](https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html \"struct sea_orm::OpenTransaction\")`mock`\n    Defines a transaction that is has not been committed\n\n[Paginator](https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html \"struct sea_orm::Paginator\")\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\n[ProxyDatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html \"struct sea_orm::ProxyDatabaseConnection\")\n    Defines a connection for the [ProxyDatabase]\n\n[ProxyDatabaseConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html \"struct sea_orm::ProxyDatabaseConnector\")\n    Defines a database driver for the [ProxyDatabase]\n\n[ProxyExecResult](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html \"struct sea_orm::ProxyExecResult\")`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\n[ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a [BTreeMap](https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html \"struct alloc::collections::btree::map::BTreeMap\")<[String](https://doc.rust-lang.org/nightly/alloc/string/struct.String.html \"struct alloc::string::String\"), [Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")>\n\n[QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\")\n    Defines the result of a query operation on a Model\n\n[QueryStream](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html \"struct sea_orm::QueryStream\")\n    The self-referencing struct.\n\n[SelectGetableTuple](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html \"struct sea_orm::SelectGetableTuple\")\n    Get tuple from query result based on column index\n\n[SelectGetableValue](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html \"struct sea_orm::SelectGetableValue\")\n    Get tuple from query result based on a list of column identifiers\n\n[SelectModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html \"struct sea_orm::SelectModel\")\n    Helper class to handle query result for 1 Model\n\n[SelectThreeModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html \"struct sea_orm::SelectThreeModel\")\n    Helper class to handle query result for 3 Models\n\n[SelectTwoModel](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html \"struct sea_orm::SelectTwoModel\")\n    Helper class to handle query result for 2 Models\n\n[Selector](https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html \"struct sea_orm::Selector\")\n    Defines a type to do `SELECT` operations through a [SelectStatement](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html \"struct sea_query::query::select::SelectStatement\") on a Model\n\n[SelectorRaw](https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html \"struct sea_orm::SelectorRaw\")\n    Performs a raw `SELECT` operation on a model\n\n[SqlxMySqlConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html \"struct sea_orm::SqlxMySqlConnector\")\n    Defines the [sqlx::mysql](https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html \"mod sqlx_mysql\") connector\n\n[SqlxMySqlPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html \"struct sea_orm::SqlxMySqlPoolConnection\")\n    Defines a sqlx MySQL pool\n\n[SqlxPostgresConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html \"struct sea_orm::SqlxPostgresConnector\")\n    Defines the [sqlx::postgres](https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html \"mod sqlx_postgres\") connector\n\n[SqlxPostgresPoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html \"struct sea_orm::SqlxPostgresPoolConnection\")\n    Defines a sqlx PostgreSQL pool\n\n[SqlxSqliteConnector](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html \"struct sea_orm::SqlxSqliteConnector\")\n    Defines the [sqlx::sqlite](https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html \"mod sqlx_sqlite\") connector\n\n[SqlxSqlitePoolConnection](https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html \"struct sea_orm::SqlxSqlitePoolConnection\")\n    Defines a sqlx SQLite pool\n\n[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n    Defines an SQL statement\n\n[Transaction](https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html \"struct sea_orm::Transaction\")`mock`\n    Defines a database transaction as it holds a Vec<[Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")>\n\n[TransactionStream](https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html \"struct sea_orm::TransactionStream\")\n    The self-referencing struct.\n\n[UpdateResult](https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html \"struct sea_orm::UpdateResult\")\n    The result of an update operation on an ActiveModel\n\n[Updater](https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html \"struct sea_orm::Updater\")\n    Defines an update operation\n\n[Values](https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html \"struct sea_orm::Values\")\n\n## Enums[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#enums)\n\n[AccessMode](https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html \"enum sea_orm::AccessMode\")\n    Access mode\n\n[DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\")\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\n[DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\n[IsolationLevel](https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html \"enum sea_orm::IsolationLevel\")\n    Isolation level\n\n[TransactionError](https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html \"enum sea_orm::TransactionError\")\n    Defines errors for handling transaction failures\n\n[TryInsertResult](https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html \"enum sea_orm::TryInsertResult\")\n    The types of results for an INSERT operation\n\n[Value](https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html \"enum sea_orm::Value\")\n    Value variants\n## Traits[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#traits)\n\n[ColIdx](https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html \"trait sea_orm::ColIdx\")\n    Column Index, used by [`TryGetable`](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\"). Implemented for `&str` and `usize`\n\n[ConnectionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html \"trait sea_orm::ConnectionTrait\")\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\n[CursorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html \"trait sea_orm::CursorTrait\")\n    A trait for any type that can be turn into a cursor\n\n[Iden](https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html \"trait sea_orm::Iden\")\n    Identifier\n\n[IntoMockRow](https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html \"trait sea_orm::IntoMockRow\")`mock`\n    A trait to get a [MockRow](https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html \"struct sea_orm::MockRow\") from a type useful for testing in the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[MockDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html \"trait sea_orm::MockDatabaseTrait\")\n    A Trait for any type wanting to perform operations on the [MockDatabase](https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html \"struct sea_orm::MockDatabase\")\n\n[PaginatorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html \"trait sea_orm::PaginatorTrait\")\n    A Trait for any type that can paginate results\n\n[ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\")`proxy`\n    Defines the [ProxyDatabaseTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html \"trait sea_orm::ProxyDatabaseTrait\") to save the functions\n\n[SelectorTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html \"trait sea_orm::SelectorTrait\")\n    A Trait for any type that can perform SELECT queries\n\n[StatementBuilder](https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html \"trait sea_orm::StatementBuilder\")\n    Any type that can build a [Statement](https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html \"struct sea_orm::Statement\")\n\n[StreamTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html \"trait sea_orm::StreamTrait\")\n    Stream query results\n\n[TransactionTrait](https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html \"trait sea_orm::TransactionTrait\")\n    Spawn database transaction\n\n[TryFromU64](https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html \"trait sea_orm::TryFromU64\")\n    Try to convert a type to a u64\n\n[TryGetable](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html \"trait sea_orm::TryGetable\")\n    An interface to get a value from the query result\n\n[TryGetableArray](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html \"trait sea_orm::TryGetableArray\")\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\n[TryGetableFromJson](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html \"trait sea_orm::TryGetableFromJson\")\n    An interface to get a JSON from the query result\n\n[TryGetableMany](https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html \"trait sea_orm::TryGetableMany\")\n    An interface to get a tuple value from the query result\n## Functions[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#functions)\n\n[from_query_result_to_proxy_row](https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html \"fn sea_orm::from_query_result_to_proxy_row\")`proxy`\n    Convert [QueryResult](https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html \"struct sea_orm::QueryResult\") to [ProxyRow](https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html \"struct sea_orm::ProxyRow\")\n## Type Aliases[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#types)\n\n[DbBackend](https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html \"type sea_orm::DbBackend\")\n    The same as [DatabaseBackend](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html \"enum sea_orm::DatabaseBackend\") just shorter :)\n\n[DbConn](https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html \"type sea_orm::DbConn\")\n    The same as a [DatabaseConnection](https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html \"enum sea_orm::DatabaseConnection\")\n\n[PinBoxStream](https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html \"type sea_orm::PinBoxStream\")\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros[\u00a7](https://docs.rs/sea-orm/latest/sea_orm/#derives)\n\n[DeriveActiveEnum](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html \"derive sea_orm::DeriveActiveEnum\")\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\n[DeriveActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html \"derive sea_orm::DeriveActiveModel\")\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\n[DeriveActiveModelBehavior](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html \"derive sea_orm::DeriveActiveModelBehavior\")\n    Models that a user can override\n\n[DeriveColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html \"derive sea_orm::DeriveColumn\")\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\n[DeriveCustomColumn](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html \"derive sea_orm::DeriveCustomColumn\")\n    Derive a column if column names are not in snake-case\n\n[DeriveDisplay](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html \"derive sea_orm::DeriveDisplay\")\n\n\n[DeriveEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html \"derive sea_orm::DeriveEntity\")\n    Create an Entity\n\n[DeriveEntityModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html \"derive sea_orm::DeriveEntityModel\")\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\n[DeriveIden](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html \"derive sea_orm::DeriveIden\")\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\n[DeriveIntoActiveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html \"derive sea_orm::DeriveIntoActiveModel\")\n    Derive into an active model\n\n[DeriveMigrationName](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html \"derive sea_orm::DeriveMigrationName\")\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\n[DeriveModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html \"derive sea_orm::DeriveModel\")\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\n[DerivePartialModel](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html \"derive sea_orm::DerivePartialModel\")\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\n[DerivePrimaryKey](https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html \"derive sea_orm::DerivePrimaryKey\")\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The [EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\") is also derived, allowing iteration over all enum variants.\n\n[DeriveRelatedEntity](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html \"derive sea_orm::DeriveRelatedEntity\")\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\n[DeriveRelation](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html \"derive sea_orm::DeriveRelation\")\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\n[DeriveValueType](https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html \"derive sea_orm::DeriveValueType\")\n    Implements traits for types that wrap a database value type.\n\n[EnumIter](https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html \"derive sea_orm::EnumIter\")\n    Creates a new type that iterates of the variants of an enum.\n\n[FromJsonQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html \"derive sea_orm::FromJsonQueryResult\")\n\n\n[FromQueryResult](https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html \"derive sea_orm::FromQueryResult\")\n    Convert a query result into the corresponding Model.\n",
            "markdown_with_citations": "[](https://docs.rs/sea-orm/latest/sea_orm/all.html \"show sidebar\")\n# Crate sea_ormCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![](https://www.sea-ql.org/SeaORM/img/SeaORM banner.png)\n# SeaORM\n### \ud83d\udc1a An async & dynamic ORM for Rust\n![crate\u27e84\u27e9](https://crates.io/crates/sea-orm) ![docs\u27e85\u27e9](https://docs.rs/sea-orm) ![build status\u27e86\u27e9](https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml)\n## \u00a7\u27e87\u27e9SeaORM\n##### \u00a7\u27e88\u27e9SeaORM is a relational ORM to help you build web services in Rust with the familiarity of dynamic languages.\n![GitHub stars\u27e89\u27e9](https://github.com/SeaQL/sea-orm/stargazers/) If you like what we do, consider starring, sharing and contributing!\nPlease help us with maintaining SeaORM by completing the SeaQL Community Survey 2024\u27e810\u27e9!\n![Discord\u27e811\u27e9](https://discord.com/invite/uCPdDXzbdv) Join our Discord server to chat with other members of the SeaQL community!\n### \u00a7\u27e812\u27e9Getting Started\n  * Documentation\u27e813\u27e9\n  * Tutorial\u27e814\u27e9\n  * Cookbook\u27e815\u27e9\n\n\nIntegration examples:\n  * Actix v4 Example\u27e816\u27e9\n  * Axum Example\u27e817\u27e9\n  * GraphQL Example\u27e818\u27e9\n  * jsonrpsee Example\u27e819\u27e9\n  * Loco TODO Example\u27e820\u27e9 / Loco REST Starter\u27e821\u27e9\n  * Poem Example\u27e822\u27e9\n  * Rocket Example\u27e823\u27e9 / Rocket OpenAPI Example\u27e824\u27e9\n  * Salvo Example\u27e825\u27e9\n  * Tonic Example\u27e826\u27e9\n  * Seaography Example\u27e827\u27e9\n\n\n### \u00a7\u27e828\u27e9Features\n  1. Async\nRelying on SQLx\u27e829\u27e9, SeaORM is a new library with async support from day 1.\n  2. Dynamic\nBuilt upon SeaQuery\u27e830\u27e9, SeaORM allows you to build complex dynamic queries.\n  3. Service Oriented\nQuickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.\n  4. Production Ready\nSeaORM is feature-rich, well-tested and used in production by companies and startups.\n\n\n### \u00a7\u27e831\u27e9A quick taste of SeaORM\n#### \u00a7\u27e832\u27e9Entity\n```\nuse sea_orm::entity::prelude::*;\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n  #[sea_orm(primary_key)]\n  pub id: i32,\n  pub name: String,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n  #[sea_orm(has_many = \"super::fruit::Entity\")]\n  Fruit,\n}\nimpl Related<super::fruit::Entity> for Entity {\n  fn to() -> RelationDef {\n    Relation::Fruit.def()\n  }\n}\n```\n\n#### \u00a7\u27e833\u27e9Select\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n  .filter(cake::Column::Name.contains(\"chocolate\"))\n  .all(db)\n  .await?;\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n  Cake::find().find_with_related(Fruit).all(db).await?;\n\n```\n\n#### \u00a7\u27e834\u27e9Insert\n```\nlet apple = fruit::ActiveModel {\n  name: Set(\"Apple\".to_owned()),\n  ..Default::default() // no need to set primary key\n};\nlet pear = fruit::ActiveModel {\n  name: Set(\"Pear\".to_owned()),\n  ..Default::default()\n};\n// insert one\nlet pear = pear.insert(db).await?;\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n#### \u00a7\u27e835\u27e9Update\n```\nuse sea_orm::sea_query::{Expr, Value};\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\npear.name = Set(\"Sweet pear\".to_owned());\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n  .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n  .filter(fruit::Column::Name.contains(\"Apple\"))\n  .exec(db)\n  .await?;\n\n```\n\n#### \u00a7\u27e836\u27e9Save\n```\nlet banana = fruit::ActiveModel {\n  id: NotSet,\n  name: Set(\"Banana\".to_owned()),\n  ..Default::default()\n};\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\nbanana.name = Set(\"Banana Mongo\".to_owned());\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n```\n\n#### \u00a7\u27e837\u27e9Delete\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n  .exec(db)\n  .await?;\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n  .filter(fruit::Column::Name.contains(\"Orange\"))\n  .exec(db)\n  .await?;\n\n```\n\n### \u00a7\u27e838\u27e9\ud83e\udded Seaography: instant GraphQL API\nSeaography\u27e839\u27e9 is a GraphQL framework built on top of SeaORM. Seaography allows you to build GraphQL resolvers quickly. With just a few commands, you can launch a GraphQL server from SeaORM entities!\nLook at the Seaography Example\u27e827\u27e9 to learn more.\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png)\n### \u00a7\u27e840\u27e9\ud83d\udda5\ufe0f SeaORM Pro: Effortless Admin Panel\nSeaORM Pro\u27e841\u27e9 is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!\nFeatures:\n  * Full CRUD\n  * Built on React + GraphQL\n  * Built-in GraphQL resolver\n  * Customize the UI with simple TOML\n\n\nLearn More\n  * Example Repo\u27e842\u27e9\n  * Getting Started with Loco\u27e843\u27e9\n  * Getting Started with Axum\u27e844\u27e9\n\n\n![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-dark.png#gh-dark-mode-only) ![](https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/docs/sea-orm-pro-light.png#gh-light-mode-only)\n### \u00a7\u27e845\u27e9Releases\nSeaORM 1.0\u27e846\u27e9 is a stable release. The 1.x version will be updated until at least October 2025, and we\u2019ll decide whether to release a 2.0 version or extend the 1.x life cycle.\nIt doesn\u2019t mean that SeaORM is \u2018done\u2019, we\u2019ve designed an architecture to allow us to deliver new features without major breaking changes. In fact, more features are coming!\n  * Change Log\u27e847\u27e9\n\n\n#### \u00a7\u27e848\u27e9Who\u2019s using SeaORM?\nHere is a short list of awesome open source software built with SeaORM. Full list here\u27e849\u27e9. Feel free to submit yours!\nProject| GitHub| Tagline  \n---|---|---  \nZed\u27e850\u27e9| ![GitHub stars\u27e851\u27e9]| A high-performance, multiplayer code editor  \nOpenObserve\u27e852\u27e9| ![GitHub stars\u27e853\u27e9]| Open-source observability platform  \nRisingWave\u27e854\u27e9| ![GitHub stars\u27e855\u27e9]| Stream processing and management platform  \nLLDAP\u27e856\u27e9| ![GitHub stars\u27e857\u27e9]| A light LDAP server for user management  \nWarpgate\u27e858\u27e9| ![GitHub stars\u27e859\u27e9]| Smart SSH bastion that works with any SSH client  \nSvix\u27e860\u27e9| ![GitHub stars\u27e861\u27e9]| The enterprise ready webhooks service  \nRyot\u27e862\u27e9| ![GitHub stars\u27e863\u27e9]| The only self hosted tracker you will ever need  \nLapdev\u27e864\u27e9| ![GitHub stars\u27e865\u27e9]| Self-hosted remote development enviroment  \nSystem Initiative\u27e866\u27e9| ![GitHub stars\u27e867\u27e9]| DevOps Automation Platform  \nOctoBase\u27e868\u27e9| ![GitHub stars\u27e869\u27e9]| A light-weight, scalable, offline collaborative data backend  \n### \u00a7\u27e870\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e871\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e872\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### \u00a7\u27e873\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\nWe invite you to participate, contribute and together help build Rust\u2019s future.\nA big shout out to our contributors!\n![Contributors\u27e874\u27e9](https://github.com/SeaQL/sea-orm/graphs/contributors)\n### \u00a7\u27e875\u27e9Sponsorship\nSeaQL.org\u27e876\u27e9 is an independent open-source organization run by passionate developers. If you enjoy using our libraries, please star and share our repositories. If you feel generous, a small donation via GitHub Sponsor\u27e877\u27e9 will be greatly appreciated, and goes a long way towards sustaining the organization.\n#### \u00a7\u27e878\u27e9Silver Sponsors\n ![\u27e879\u27e9 ](https://www.digitalocean.com/) |  ![\u27e880\u27e9 ](https://www.jetbrains.com/)  \n---|---  \nWe\u2019re immensely grateful to our sponsors: Digital Ocean, for sponsoring our servers. And JetBrains, for sponsoring our IDE.\n### \u00a7\u27e881\u27e9Mascot\nA friend of Ferris, Terres the hermit crab is the official mascot of SeaORM. His hobby is collecting shells.\n![Terres\u27e882\u27e9]\n#### \u00a7\u27e883\u27e9Rustacean Sticker Pack \ud83e\udd80\nThe Rustacean Sticker Pack is the perfect way to express your passion for Rust. Our stickers are made with a premium water-resistant vinyl with a unique matte finish. Stick them on your laptop, notebook, or any gadget to show off your love for Rust!\nSticker Pack Contents:\n  * Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG\n  * Mascot of SeaQL: Terres the Hermit Crab\n  * Mascot of Rust: Ferris the Crab\n  * The Rustacean word\n\n\nSupport SeaQL and get a Sticker Pack!\u27e884\u27e9 All proceeds contributes directly to the ongoing development of SeaQL projects.\n![Rustacean Sticker Pack by SeaQL\u27e885\u27e9](https://www.sea-ql.org/sticker-pack/)\n## Re-exports\u00a7\u27e886\u27e9\n\n`pub use crate::error::TryGetError[](https://docs.rs/sea-orm/latest/sea_orm/error/enum.TryGetError.html \"enum sea_orm::error::TryGetError\");`\n\n\n`pub use sea_query[](https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/index.html \"mod sea_query\");`\n\n\n`pub use strum[](https://docs.rs/strum/0.26.3/x86_64-unknown-linux-gnu/strum/index.html \"mod strum\");`\n\n\n`pub use sqlx[](https://docs.rs/sqlx/0.8.6/x86_64-unknown-linux-gnu/sqlx/index.html \"mod sqlx\");`\n\n\n`pub use entity[](https://docs.rs/sea-orm/latest/sea_orm/entity/index.html \"mod sea_orm::entity\")::*;`\n\n\n`pub use error[](https://docs.rs/sea-orm/latest/sea_orm/error/index.html \"mod sea_orm::error\")::*;`\n\n\n`pub use query[](https://docs.rs/sea-orm/latest/sea_orm/query/index.html \"mod sea_orm::query\")::*;`\n\n\n`pub use schema[](https://docs.rs/sea-orm/latest/sea_orm/schema/index.html \"mod sea_orm::schema\")::*;`\n\n## Modules\u00a7\u27e887\u27e9\n\nentity\u27e888\u27e9\n    Module for the Entity type and operations\n\nerror\u27e889\u27e9\n    Error types for all database operations\n\nmetric\u27e890\u27e9\n    Types and methods to perform metric collection\n\nquery\u27e891\u27e9\n    Types and methods to perform queries\n\nschema\u27e892\u27e9\n    Types that defines the schemas of an Entity\n\nvalue\u27e893\u27e9\n    Helpers for working with Value\n## Macros\u00a7\u27e894\u27e9\n\ndebug_print\u27e895\u27e9\n    Non-debug version\n\ndebug_query\u27e896\u27e9\n    Helper to get a raw SQL string from an object that impl `QueryTrait`.\n\ndebug_query_stmt\u27e897\u27e9\n    Helper to get a `Statement` from an object that impl `QueryTrait`.\n## Structs\u00a7\u27e898\u27e9\n\nConnectOptions\u27e899\u27e9\n    Defines the configuration options of a database\n\nCursor\u27e8100\u27e9\n    Cursor pagination\n\nDatabase\u27e8101\u27e9\n    Defines a database\n\nDatabaseTransaction\u27e8102\u27e9\n    Defines a database transaction, whether it is an open transaction and the type of backend to use\n\nDeleteResult\u27e8103\u27e9\n    The result of a DELETE operation\n\nDeleter\u27e8104\u27e9\n    Handles DELETE operations in a ActiveModel using DeleteStatement\u27e8105\u27e9\n\nExecResult\u27e8106\u27e9\n    Defines the result of executing an operation\n\nInsertResult\u27e8107\u27e9\n    The result of an INSERT operation on an ActiveModel\n\nInserter\u27e8108\u27e9\n    Defines a structure to perform INSERT operations in an ActiveModel\n\nItemsAndPagesNumber\u27e8109\u27e9\n    Define a structure containing the numbers of items and pages of a Paginator\n\nMockDatabase\u27e8110\u27e9`mock`\n    Defines a Mock database suitable for testing\n\nMockDatabaseConnection\u27e8111\u27e9\n    Defines a connection for the MockDatabase\u27e8110\u27e9\n\nMockDatabaseConnector\u27e8112\u27e9\n    Defines a database driver for the MockDatabase\u27e8110\u27e9\n\nMockExecResult\u27e8113\u27e9`mock`\n    Defines the results obtained from a MockDatabase\u27e8110\u27e9\n\nMockRow\u27e8114\u27e9`mock`\n    Defines the structure of a test Row for the MockDatabase\u27e8110\u27e9 which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nOpenTransaction\u27e8118\u27e9`mock`\n    Defines a transaction that is has not been committed\n\nPaginator\u27e8119\u27e9\n    Defined a structure to handle pagination of a result from a query operation on a Model\n\nProxyDatabaseConnection\u27e8120\u27e9\n    Defines a connection for the [ProxyDatabase]\n\nProxyDatabaseConnector\u27e8121\u27e9\n    Defines a database driver for the [ProxyDatabase]\n\nProxyExecResult\u27e8122\u27e9`proxy`\n    Defines the results obtained from a [ProxyDatabase]\n\nProxyRow\u27e8123\u27e9`proxy`\n    Defines the structure of a Row for the [ProxyDatabase] which is just a BTreeMap\u27e8115\u27e9<String\u27e8116\u27e9, Value\u27e8117\u27e9>\n\nQueryResult\u27e8124\u27e9\n    Defines the result of a query operation on a Model\n\nQueryStream\u27e8125\u27e9\n    The self-referencing struct.\n\nSelectGetableTuple\u27e8126\u27e9\n    Get tuple from query result based on column index\n\nSelectGetableValue\u27e8127\u27e9\n    Get tuple from query result based on a list of column identifiers\n\nSelectModel\u27e8128\u27e9\n    Helper class to handle query result for 1 Model\n\nSelectThreeModel\u27e8129\u27e9\n    Helper class to handle query result for 3 Models\n\nSelectTwoModel\u27e8130\u27e9\n    Helper class to handle query result for 2 Models\n\nSelector\u27e8131\u27e9\n    Defines a type to do `SELECT` operations through a SelectStatement\u27e8132\u27e9 on a Model\n\nSelectorRaw\u27e8133\u27e9\n    Performs a raw `SELECT` operation on a model\n\nSqlxMySqlConnector\u27e8134\u27e9\n    Defines the sqlx::mysql\u27e8135\u27e9 connector\n\nSqlxMySqlPoolConnection\u27e8136\u27e9\n    Defines a sqlx MySQL pool\n\nSqlxPostgresConnector\u27e8137\u27e9\n    Defines the sqlx::postgres\u27e8138\u27e9 connector\n\nSqlxPostgresPoolConnection\u27e8139\u27e9\n    Defines a sqlx PostgreSQL pool\n\nSqlxSqliteConnector\u27e8140\u27e9\n    Defines the sqlx::sqlite\u27e8141\u27e9 connector\n\nSqlxSqlitePoolConnection\u27e8142\u27e9\n    Defines a sqlx SQLite pool\n\nStatement\u27e8143\u27e9\n    Defines an SQL statement\n\nTransaction\u27e8144\u27e9`mock`\n    Defines a database transaction as it holds a Vec<Statement\u27e8143\u27e9>\n\nTransactionStream\u27e8145\u27e9\n    The self-referencing struct.\n\nUpdateResult\u27e8146\u27e9\n    The result of an update operation on an ActiveModel\n\nUpdater\u27e8147\u27e9\n    Defines an update operation\n\nValues\u27e8148\u27e9\n\n## Enums\u00a7\u27e8149\u27e9\n\nAccessMode\u27e8150\u27e9\n    Access mode\n\nDatabaseBackend\u27e8151\u27e9\n    The type of database backend for real world databases. This is enabled by feature flags as specified in the crate documentation\n\nDatabaseConnection\u27e8152\u27e9\n    Handle a database connection depending on the backend enabled by the feature flags. This creates a database pool. This will be `Clone` unless the feature flag `mock` is enabled.\n\nIsolationLevel\u27e8153\u27e9\n    Isolation level\n\nTransactionError\u27e8154\u27e9\n    Defines errors for handling transaction failures\n\nTryInsertResult\u27e8155\u27e9\n    The types of results for an INSERT operation\n\nValue\u27e8117\u27e9\n    Value variants\n## Traits\u00a7\u27e8156\u27e9\n\nColIdx\u27e8157\u27e9\n    Column Index, used by `TryGetable`\u27e8158\u27e9. Implemented for `&str` and `usize`\n\nConnectionTrait\u27e8159\u27e9\n    The generic API for a database connection that can perform query or execute statements. It abstracts database connection and transaction\n\nCursorTrait\u27e8160\u27e9\n    A trait for any type that can be turn into a cursor\n\nIden\u27e8161\u27e9\n    Identifier\n\nIntoMockRow\u27e8162\u27e9`mock`\n    A trait to get a MockRow\u27e8114\u27e9 from a type useful for testing in the MockDatabase\u27e8110\u27e9\n\nMockDatabaseTrait\u27e8163\u27e9\n    A Trait for any type wanting to perform operations on the MockDatabase\u27e8110\u27e9\n\nPaginatorTrait\u27e8164\u27e9\n    A Trait for any type that can paginate results\n\nProxyDatabaseTrait\u27e8165\u27e9`proxy`\n    Defines the ProxyDatabaseTrait\u27e8165\u27e9 to save the functions\n\nSelectorTrait\u27e8166\u27e9\n    A Trait for any type that can perform SELECT queries\n\nStatementBuilder\u27e8167\u27e9\n    Any type that can build a Statement\u27e8143\u27e9\n\nStreamTrait\u27e8168\u27e9\n    Stream query results\n\nTransactionTrait\u27e8169\u27e9\n    Spawn database transaction\n\nTryFromU64\u27e8170\u27e9\n    Try to convert a type to a u64\n\nTryGetable\u27e8158\u27e9\n    An interface to get a value from the query result\n\nTryGetableArray\u27e8171\u27e9\n    An interface to get an array of values from the query result. A type can only implement `ActiveEnum` or `TryGetableFromJson`, but not both. A blanket impl is provided for `TryGetableFromJson`, while the impl for `ActiveEnum` is provided by the `DeriveActiveEnum` macro. So as an end user you won\u2019t normally touch this trait.\n\nTryGetableFromJson\u27e8172\u27e9\n    An interface to get a JSON from the query result\n\nTryGetableMany\u27e8173\u27e9\n    An interface to get a tuple value from the query result\n## Functions\u00a7\u27e8174\u27e9\n\nfrom_query_result_to_proxy_row\u27e8175\u27e9`proxy`\n    Convert QueryResult\u27e8124\u27e9 to ProxyRow\u27e8123\u27e9\n## Type Aliases\u00a7\u27e8176\u27e9\n\nDbBackend\u27e8177\u27e9\n    The same as DatabaseBackend\u27e8151\u27e9 just shorter :)\n\nDbConn\u27e8178\u27e9\n    The same as a DatabaseConnection\u27e8152\u27e9\n\nPinBoxStream\u27e8179\u27e9\n    Pin a Model so that stream operations can be performed on the model\n## Derive Macros\u00a7\u27e8180\u27e9\n\nDeriveActiveEnum\u27e8181\u27e9\n    A derive macro to implement `sea_orm::ActiveEnum` trait for enums.\n\nDeriveActiveModel\u27e8182\u27e9\n    The DeriveActiveModel derive macro will implement ActiveModelTrait for ActiveModel which provides setters and getters for all active values in the active model.\n\nDeriveActiveModelBehavior\u27e8183\u27e9\n    Models that a user can override\n\nDeriveColumn\u27e8184\u27e9\n    The DeriveColumn derive macro will implement [ColumnTrait] for Columns. It defines the identifier of each column by implementing Iden and IdenStatic. The EnumIter is also derived, allowing iteration over all enum variants.\n\nDeriveCustomColumn\u27e8185\u27e9\n    Derive a column if column names are not in snake-case\n\nDeriveDisplay\u27e8186\u27e9\n\n\nDeriveEntity\u27e8187\u27e9\n    Create an Entity\n\nDeriveEntityModel\u27e8188\u27e9\n    This derive macro is the \u2018almighty\u2019 macro which automatically generates Entity, Column, and PrimaryKey from a given Model.\n\nDeriveIden\u27e8189\u27e9\n    The DeriveIden derive macro will implement `sea_orm::sea_query::Iden` for simplify Iden implementation.\n\nDeriveIntoActiveModel\u27e8190\u27e9\n    Derive into an active model\n\nDeriveMigrationName\u27e8191\u27e9\n    The DeriveMigrationName derive macro will implement `sea_orm_migration::MigrationName` for a migration.\n\nDeriveModel\u27e8192\u27e9\n    The DeriveModel derive macro will implement ModelTrait for Model, which provides setters and getters for all attributes in the mod It also implements FromQueryResult to convert a query result into the corresponding Model.\n\nDerivePartialModel\u27e8193\u27e9\n    The DerivePartialModel derive macro will implement [`sea_orm::PartialModelTrait`] for simplify partial model queries.\n\nDerivePrimaryKey\u27e8194\u27e9\n    The DerivePrimaryKey derive macro will implement [PrimaryKeyToColumn] for PrimaryKey which defines tedious mappings between primary keys and columns. The EnumIter\u27e8195\u27e9 is also derived, allowing iteration over all enum variants.\n\nDeriveRelatedEntity\u27e8196\u27e9\n    The DeriveRelatedEntity derive macro will implement seaography::RelationBuilder for RelatedEntity enumeration.\n\nDeriveRelation\u27e8197\u27e9\n    The DeriveRelation derive macro will implement RelationTrait for Relation.\n\nDeriveValueType\u27e8198\u27e9\n    Implements traits for types that wrap a database value type.\n\nEnumIter\u27e8195\u27e9\n    Creates a new type that iterates of the variants of an enum.\n\nFromJsonQueryResult\u27e8199\u27e9\n\n\nFromQueryResult\u27e8200\u27e9\n    Convert a query result into the corresponding Model.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/sea-orm/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/sea-orm/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/sea-orm/latest/src/sea_orm/lib.rs.html#1-430: Source\n\u27e84\u27e9 https://img.shields.io/crates/v/sea-orm.svg: ![crate\n\u27e85\u27e9 https://docs.rs/sea-orm/badge.svg: ![docs\n\u27e86\u27e9 https://github.com/SeaQL/sea-orm/actions/workflows/rust.yml/badge.svg: ![build status\n\u27e87\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm: \u00a7\n\u27e88\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#seaorm-is-a-relational-orm-to-help-you-build-web-services-in-rust-with-the-familiarity-of-dynamic-languages: \u00a7\n\u27e89\u27e9 https://img.shields.io/github/stars/SeaQL/sea-orm.svg?style=social&label=Star&maxAge=1: ![GitHub stars\n\u27e810\u27e9 https://sea-ql.org/community-survey: SeaQL Community Survey 2024\n\u27e811\u27e9 https://img.shields.io/discord/873880840487206962?label=Discord: ![Discord\n\u27e812\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#getting-started: \u00a7\n\u27e813\u27e9 https://www.sea-ql.org/SeaORM: Documentation\n\u27e814\u27e9 https://www.sea-ql.org/sea-orm-tutorial: Tutorial\n\u27e815\u27e9 https://www.sea-ql.org/sea-orm-cookbook: Cookbook\n\u27e816\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example: Actix v4 Example\n\u27e817\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example: Axum Example\n\u27e818\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example: GraphQL Example\n\u27e819\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example: jsonrpsee Example\n\u27e820\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_example: Loco TODO Example\n\u27e821\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter: Loco REST Starter\n\u27e822\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example: Poem Example\n\u27e823\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example: Rocket Example\n\u27e824\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_okapi_example: Rocket OpenAPI Example\n\u27e825\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example: Salvo Example\n\u27e826\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example: Tonic Example\n\u27e827\u27e9 https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example: Seaography Example\n\u27e828\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#features: \u00a7\n\u27e829\u27e9 https://github.com/launchbadge/sqlx: SQLx\n\u27e830\u27e9 https://github.com/SeaQL/sea-query: SeaQuery\n\u27e831\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#a-quick-taste-of-seaorm: \u00a7\n\u27e832\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#entity: \u00a7\n\u27e833\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#select: \u00a7\n\u27e834\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#insert: \u00a7\n\u27e835\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#update: \u00a7\n\u27e836\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#save: \u00a7\n\u27e837\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#delete: \u00a7\n\u27e838\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaography-instant-graphql-api: \u00a7\n\u27e839\u27e9 https://github.com/SeaQL/seaography: Seaography\n\u27e840\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#-seaorm-pro-effortless-admin-panel: \u00a7\n\u27e841\u27e9 https://www.sea-ql.org/sea-orm-pro/: SeaORM Pro\n\u27e842\u27e9 https://github.com/SeaQL/sea-orm-pro: Example Repo\n\u27e843\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/: Getting Started with Loco\n\u27e844\u27e9 https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/: Getting Started with Axum\n\u27e845\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#releases: \u00a7\n\u27e846\u27e9 https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/: SeaORM 1.0\n\u27e847\u27e9 https://github.com/SeaQL/sea-orm/tree/master/CHANGELOG.md: Change Log\n\u27e848\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#whos-using-seaorm: \u00a7\n\u27e849\u27e9 https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm: Full list here\n\u27e850\u27e9 https://github.com/zed-industries/zed: Zed\n\u27e851\u27e9 https://img.shields.io/github/stars/zed-industries/zed.svg?style=social: GitHub stars\n\u27e852\u27e9 https://github.com/openobserve/openobserve: OpenObserve\n\u27e853\u27e9 https://img.shields.io/github/stars/openobserve/openobserve.svg?style=social: GitHub stars\n\u27e854\u27e9 https://github.com/risingwavelabs/risingwave: RisingWave\n\u27e855\u27e9 https://img.shields.io/github/stars/risingwavelabs/risingwave.svg?style=social: GitHub stars\n\u27e856\u27e9 https://github.com/nitnelave/lldap: LLDAP\n\u27e857\u27e9 https://img.shields.io/github/stars/nitnelave/lldap.svg?style=social: GitHub stars\n\u27e858\u27e9 https://github.com/warp-tech/warpgate: Warpgate\n\u27e859\u27e9 https://img.shields.io/github/stars/warp-tech/warpgate.svg?style=social: GitHub stars\n\u27e860\u27e9 https://github.com/svix/svix-webhooks: Svix\n\u27e861\u27e9 https://img.shields.io/github/stars/svix/svix-webhooks.svg?style=social: GitHub stars\n\u27e862\u27e9 https://github.com/IgnisDa/ryot: Ryot\n\u27e863\u27e9 https://img.shields.io/github/stars/ignisda/ryot.svg?style=social: GitHub stars\n\u27e864\u27e9 https://github.com/lapce/lapdev: Lapdev\n\u27e865\u27e9 https://img.shields.io/github/stars/lapce/lapdev.svg?style=social: GitHub stars\n\u27e866\u27e9 https://github.com/systeminit/si: System Initiative\n\u27e867\u27e9 https://img.shields.io/github/stars/systeminit/si.svg?style=social: GitHub stars\n\u27e868\u27e9 https://github.com/toeverything/OctoBase: OctoBase\n\u27e869\u27e9 https://img.shields.io/github/stars/toeverything/OctoBase.svg?style=social: GitHub stars\n\u27e870\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#license: \u00a7\n\u27e871\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-APACHE: LICENSE-APACHE\n\u27e872\u27e9 https://docs.rs/sea-orm/latest/sea_orm/LICENSE-MIT: LICENSE-MIT\n\u27e873\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#contribution: \u00a7\n\u27e874\u27e9 https://opencollective.com/sea-orm/contributors.svg?width=1000&button=false: ![Contributors\n\u27e875\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#sponsorship: \u00a7\n\u27e876\u27e9 https://www.sea-ql.org/: SeaQL.org\n\u27e877\u27e9 https://github.com/sponsors/SeaQL: GitHub Sponsor\n\u27e878\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#silver-sponsors: \u00a7\n\u27e879\u27e9 https://www.sea-ql.org/static/sponsors/DigitalOcean.svg:  ![\n\u27e880\u27e9 https://www.sea-ql.org/static/sponsors/JetBrains.svg:  ![\n\u27e881\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#mascot: \u00a7\n\u27e882\u27e9 https://www.sea-ql.org/SeaORM/img/Terres.png: Terres\n\u27e883\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#rustacean-sticker-pack-: \u00a7\n\u27e884\u27e9 https://www.sea-ql.org/sticker-pack/: Support SeaQL and get a Sticker Pack!\n\u27e885\u27e9 https://www.sea-ql.org/static/sticker-pack-1s.jpg: ![Rustacean Sticker Pack by SeaQL\n\u27e886\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#reexports: \u00a7\n\u27e887\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#modules: \u00a7\n\u27e888\u27e9 https://docs.rs/sea-orm/latest/sea_orm/entity/index.html: mod sea_orm::entity - entity\n\u27e889\u27e9 https://docs.rs/sea-orm/latest/sea_orm/error/index.html: mod sea_orm::error - error\n\u27e890\u27e9 https://docs.rs/sea-orm/latest/sea_orm/metric/index.html: mod sea_orm::metric - metric\n\u27e891\u27e9 https://docs.rs/sea-orm/latest/sea_orm/query/index.html: mod sea_orm::query - query\n\u27e892\u27e9 https://docs.rs/sea-orm/latest/sea_orm/schema/index.html: mod sea_orm::schema - schema\n\u27e893\u27e9 https://docs.rs/sea-orm/latest/sea_orm/value/index.html: mod sea_orm::value - value\n\u27e894\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#macros: \u00a7\n\u27e895\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_print.html: macro sea_orm::debug_print - debug_print\n\u27e896\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query.html: macro sea_orm::debug_query - debug_query\n\u27e897\u27e9 https://docs.rs/sea-orm/latest/sea_orm/macro.debug_query_stmt.html: macro sea_orm::debug_query_stmt - debug_query_stmt\n\u27e898\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#structs: \u00a7\n\u27e899\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ConnectOptions.html: struct sea_orm::ConnectOptions - ConnectOptions\n\u27e8100\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Cursor.html: struct sea_orm::Cursor - Cursor\n\u27e8101\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Database.html: struct sea_orm::Database - Database\n\u27e8102\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DatabaseTransaction.html: struct sea_orm::DatabaseTransaction - DatabaseTransaction\n\u27e8103\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.DeleteResult.html: struct sea_orm::DeleteResult - DeleteResult\n\u27e8104\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Deleter.html: struct sea_orm::Deleter - Deleter\n\u27e8105\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/delete/struct.DeleteStatement.html: struct sea_query::query::delete::DeleteStatement - DeleteStatement\n\u27e8106\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ExecResult.html: struct sea_orm::ExecResult - ExecResult\n\u27e8107\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.InsertResult.html: struct sea_orm::InsertResult - InsertResult\n\u27e8108\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Inserter.html: struct sea_orm::Inserter - Inserter\n\u27e8109\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ItemsAndPagesNumber.html: struct sea_orm::ItemsAndPagesNumber - ItemsAndPagesNumber\n\u27e8110\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabase.html: struct sea_orm::MockDatabase - MockDatabase\n\u27e8111\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnection.html: struct sea_orm::MockDatabaseConnection - MockDatabaseConnection\n\u27e8112\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockDatabaseConnector.html: struct sea_orm::MockDatabaseConnector - MockDatabaseConnector\n\u27e8113\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockExecResult.html: struct sea_orm::MockExecResult - MockExecResult\n\u27e8114\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.MockRow.html: struct sea_orm::MockRow - MockRow\n\u27e8115\u27e9 https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html: struct alloc::collections::btree::map::BTreeMap - BTreeMap\n\u27e8116\u27e9 https://doc.rust-lang.org/nightly/alloc/string/struct.String.html: struct alloc::string::String - String\n\u27e8117\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.Value.html: enum sea_orm::Value - Value\n\u27e8118\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.OpenTransaction.html: struct sea_orm::OpenTransaction - OpenTransaction\n\u27e8119\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Paginator.html: struct sea_orm::Paginator - Paginator\n\u27e8120\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnection.html: struct sea_orm::ProxyDatabaseConnection - ProxyDatabaseConnection\n\u27e8121\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyDatabaseConnector.html: struct sea_orm::ProxyDatabaseConnector - ProxyDatabaseConnector\n\u27e8122\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyExecResult.html: struct sea_orm::ProxyExecResult - ProxyExecResult\n\u27e8123\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.ProxyRow.html: struct sea_orm::ProxyRow - ProxyRow\n\u27e8124\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryResult.html: struct sea_orm::QueryResult - QueryResult\n\u27e8125\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.QueryStream.html: struct sea_orm::QueryStream - QueryStream\n\u27e8126\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableTuple.html: struct sea_orm::SelectGetableTuple - SelectGetableTuple\n\u27e8127\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectGetableValue.html: struct sea_orm::SelectGetableValue - SelectGetableValue\n\u27e8128\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectModel.html: struct sea_orm::SelectModel - SelectModel\n\u27e8129\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectThreeModel.html: struct sea_orm::SelectThreeModel - SelectThreeModel\n\u27e8130\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectTwoModel.html: struct sea_orm::SelectTwoModel - SelectTwoModel\n\u27e8131\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Selector.html: struct sea_orm::Selector - Selector\n\u27e8132\u27e9 https://docs.rs/sea-query/0.32.6/x86_64-unknown-linux-gnu/sea_query/query/select/struct.SelectStatement.html: struct sea_query::query::select::SelectStatement - SelectStatement\n\u27e8133\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SelectorRaw.html: struct sea_orm::SelectorRaw - SelectorRaw\n\u27e8134\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlConnector.html: struct sea_orm::SqlxMySqlConnector - SqlxMySqlConnector\n\u27e8135\u27e9 https://docs.rs/sqlx-mysql/0.8.6/x86_64-unknown-linux-gnu/sqlx_mysql/index.html: mod sqlx_mysql - sqlx::mysql\n\u27e8136\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxMySqlPoolConnection.html: struct sea_orm::SqlxMySqlPoolConnection - SqlxMySqlPoolConnection\n\u27e8137\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresConnector.html: struct sea_orm::SqlxPostgresConnector - SqlxPostgresConnector\n\u27e8138\u27e9 https://docs.rs/sqlx-postgres/0.8.6/x86_64-unknown-linux-gnu/sqlx_postgres/index.html: mod sqlx_postgres - sqlx::postgres\n\u27e8139\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxPostgresPoolConnection.html: struct sea_orm::SqlxPostgresPoolConnection - SqlxPostgresPoolConnection\n\u27e8140\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqliteConnector.html: struct sea_orm::SqlxSqliteConnector - SqlxSqliteConnector\n\u27e8141\u27e9 https://docs.rs/sqlx-sqlite/0.8.6/x86_64-unknown-linux-gnu/sqlx_sqlite/index.html: mod sqlx_sqlite - sqlx::sqlite\n\u27e8142\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.SqlxSqlitePoolConnection.html: struct sea_orm::SqlxSqlitePoolConnection - SqlxSqlitePoolConnection\n\u27e8143\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Statement.html: struct sea_orm::Statement - Statement\n\u27e8144\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Transaction.html: struct sea_orm::Transaction - Transaction\n\u27e8145\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.TransactionStream.html: struct sea_orm::TransactionStream - TransactionStream\n\u27e8146\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.UpdateResult.html: struct sea_orm::UpdateResult - UpdateResult\n\u27e8147\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Updater.html: struct sea_orm::Updater - Updater\n\u27e8148\u27e9 https://docs.rs/sea-orm/latest/sea_orm/struct.Values.html: struct sea_orm::Values - Values\n\u27e8149\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#enums: \u00a7\n\u27e8150\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.AccessMode.html: enum sea_orm::AccessMode - AccessMode\n\u27e8151\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseBackend.html: enum sea_orm::DatabaseBackend - DatabaseBackend\n\u27e8152\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.DatabaseConnection.html: enum sea_orm::DatabaseConnection - DatabaseConnection\n\u27e8153\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.IsolationLevel.html: enum sea_orm::IsolationLevel - IsolationLevel\n\u27e8154\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TransactionError.html: enum sea_orm::TransactionError - TransactionError\n\u27e8155\u27e9 https://docs.rs/sea-orm/latest/sea_orm/enum.TryInsertResult.html: enum sea_orm::TryInsertResult - TryInsertResult\n\u27e8156\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#traits: \u00a7\n\u27e8157\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ColIdx.html: trait sea_orm::ColIdx - ColIdx\n\u27e8158\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetable.html: trait sea_orm::TryGetable - `TryGetable`\n\u27e8159\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ConnectionTrait.html: trait sea_orm::ConnectionTrait - ConnectionTrait\n\u27e8160\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.CursorTrait.html: trait sea_orm::CursorTrait - CursorTrait\n\u27e8161\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.Iden.html: trait sea_orm::Iden - Iden\n\u27e8162\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.IntoMockRow.html: trait sea_orm::IntoMockRow - IntoMockRow\n\u27e8163\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.MockDatabaseTrait.html: trait sea_orm::MockDatabaseTrait - MockDatabaseTrait\n\u27e8164\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.PaginatorTrait.html: trait sea_orm::PaginatorTrait - PaginatorTrait\n\u27e8165\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.ProxyDatabaseTrait.html: trait sea_orm::ProxyDatabaseTrait - ProxyDatabaseTrait\n\u27e8166\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.SelectorTrait.html: trait sea_orm::SelectorTrait - SelectorTrait\n\u27e8167\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StatementBuilder.html: trait sea_orm::StatementBuilder - StatementBuilder\n\u27e8168\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.StreamTrait.html: trait sea_orm::StreamTrait - StreamTrait\n\u27e8169\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TransactionTrait.html: trait sea_orm::TransactionTrait - TransactionTrait\n\u27e8170\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryFromU64.html: trait sea_orm::TryFromU64 - TryFromU64\n\u27e8171\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableArray.html: trait sea_orm::TryGetableArray - TryGetableArray\n\u27e8172\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableFromJson.html: trait sea_orm::TryGetableFromJson - TryGetableFromJson\n\u27e8173\u27e9 https://docs.rs/sea-orm/latest/sea_orm/trait.TryGetableMany.html: trait sea_orm::TryGetableMany - TryGetableMany\n\u27e8174\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#functions: \u00a7\n\u27e8175\u27e9 https://docs.rs/sea-orm/latest/sea_orm/fn.from_query_result_to_proxy_row.html: fn sea_orm::from_query_result_to_proxy_row - from_query_result_to_proxy_row\n\u27e8176\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#types: \u00a7\n\u27e8177\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbBackend.html: type sea_orm::DbBackend - DbBackend\n\u27e8178\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.DbConn.html: type sea_orm::DbConn - DbConn\n\u27e8179\u27e9 https://docs.rs/sea-orm/latest/sea_orm/type.PinBoxStream.html: type sea_orm::PinBoxStream - PinBoxStream\n\u27e8180\u27e9 https://docs.rs/sea-orm/latest/sea_orm/#derives: \u00a7\n\u27e8181\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveEnum.html: derive sea_orm::DeriveActiveEnum - DeriveActiveEnum\n\u27e8182\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModel.html: derive sea_orm::DeriveActiveModel - DeriveActiveModel\n\u27e8183\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveActiveModelBehavior.html: derive sea_orm::DeriveActiveModelBehavior - DeriveActiveModelBehavior\n\u27e8184\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveColumn.html: derive sea_orm::DeriveColumn - DeriveColumn\n\u27e8185\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveCustomColumn.html: derive sea_orm::DeriveCustomColumn - DeriveCustomColumn\n\u27e8186\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveDisplay.html: derive sea_orm::DeriveDisplay - DeriveDisplay\n\u27e8187\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntity.html: derive sea_orm::DeriveEntity - DeriveEntity\n\u27e8188\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveEntityModel.html: derive sea_orm::DeriveEntityModel - DeriveEntityModel\n\u27e8189\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIden.html: derive sea_orm::DeriveIden - DeriveIden\n\u27e8190\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveIntoActiveModel.html: derive sea_orm::DeriveIntoActiveModel - DeriveIntoActiveModel\n\u27e8191\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveMigrationName.html: derive sea_orm::DeriveMigrationName - DeriveMigrationName\n\u27e8192\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveModel.html: derive sea_orm::DeriveModel - DeriveModel\n\u27e8193\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html: derive sea_orm::DerivePartialModel - DerivePartialModel\n\u27e8194\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePrimaryKey.html: derive sea_orm::DerivePrimaryKey - DerivePrimaryKey\n\u27e8195\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.EnumIter.html: derive sea_orm::EnumIter - EnumIter\n\u27e8196\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelatedEntity.html: derive sea_orm::DeriveRelatedEntity - DeriveRelatedEntity\n\u27e8197\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveRelation.html: derive sea_orm::DeriveRelation - DeriveRelation\n\u27e8198\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.DeriveValueType.html: derive sea_orm::DeriveValueType - DeriveValueType\n\u27e8199\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromJsonQueryResult.html: derive sea_orm::FromJsonQueryResult - FromJsonQueryResult\n\u27e8200\u27e9 https://docs.rs/sea-orm/latest/sea_orm/derive.FromQueryResult.html: derive sea_orm::FromQueryResult - FromQueryResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `sea-orm` crate is an async and dynamic relational ORM for Rust, designed to simplify building web services with features like entity modeling, query building, and CRUD operations. It supports complex dynamic queries via SeaQuery, integrates seamlessly with frameworks like Actix, Axum, and GraphQL, and is production-ready with robust testing and active community support. Additionally, it offers tools like Seaography for quickly generating GraphQL APIs from database entities.",
          "feature_summary": null,
          "use_case": "Database",
          "score": 0.0,
          "factual_counterfactual": "### Pair 1: Async Support  \n\u2705 Factual: SeaORM is built with async support from day one, relying on SQLx for asynchronous database operations.  \n\u274c Counterfactual: SeaORM does not support async operations and relies solely on blocking database queries.  \n\n---\n\n### Pair 2: Dynamic Query Building  \n\u2705 Factual: SeaORM enables dynamic query building through integration with SeaQuery, allowing developers to construct complex queries programmatically.  \n\u274c Counterfactual: SeaORM requires all queries to be hardcoded and does not support dynamic query construction.  \n\n---\n\n### Pair 3: GraphQL Integration via Seaography  \n\u2705 Factual: SeaORM provides seamless integration with GraphQL through the Seaography framework, enabling developers to quickly launch GraphQL servers using ORM entities.  \n\u274c Counterfactual: SeaORM does not support GraphQL integration and requires external tools to implement GraphQL functionality.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-07695f7e-fdc7eb5c-1751262420",
      "timestamp": "2025-06-30T05:47:00.795193+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]