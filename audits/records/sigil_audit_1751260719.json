[
  {
    "execution_id": "exec-7f4ba095-7cea552a-1751260709",
    "timestamp": "2025-06-30T05:18:29.738334+00:00",
    "sacred_chain": {
      "input_data": "flate2",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'flate2' -> 'flate2'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "flate2",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/flate2",
            "title": "flate2 v1.1.2",
            "content": {
              "raw_markdown": "#  flate2 v1.1.2\nDEFLATE compression and decompression exposed as Read/BufRead/Write streams. Supports miniz_oxide and multiple zlib implementations. Supports zlib, gzip, and raw deflate streams. \n  * [ #deflate ](https://crates.io/keywords/deflate)\n  * [ #encoding ](https://crates.io/keywords/encoding)\n  * [ #gzip ](https://crates.io/keywords/gzip)\n  * [ #zlib ](https://crates.io/keywords/zlib)\n  * [ #zlib-ng ](https://crates.io/keywords/zlib-ng)\n\n\n  * [ Readme ](https://crates.io/crates/flate2)\n  * [ 70 Versions ](https://crates.io/crates/flate2/versions)\n  * [ Dependencies ](https://crates.io/crates/flate2/dependencies)\n  * [ Dependents ](https://crates.io/crates/flate2/reverse_dependencies)\n\n\n## Metadata\n23 days ago \nv1.67.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n74.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add flate2\nOr add the following line to your Cargo.toml:\nflate2 = \"1.1.2\"\n## Documentation\n[ docs.rs/flate2 ](https://docs.rs/flate2)\n## Repository\n[ github.com/rust-lang/flate2-rs ](https://github.com/rust-lang/flate2-rs)\n## Owners\n## Categories\n  * [API bindings](https://crates.io/categories/api-bindings)\n  * [Compression](https://crates.io/categories/compression)\n\n\n[ Report crate ](https://crates.io/support?crate=flate2&inquire=crate-violation)\n### Stats Overview\n253,212,077 Downloads all time\n70 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  flate2 v1.1.2\nDEFLATE compression and decompression exposed as Read/BufRead/Write streams. Supports miniz_oxide and multiple zlib implementations. Supports zlib, gzip, and raw deflate streams. \n  *  #deflate \u27e81\u27e9\n  *  #encoding \u27e82\u27e9\n  *  #gzip \u27e83\u27e9\n  *  #zlib \u27e84\u27e9\n  *  #zlib-ng \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  70 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n23 days ago \nv1.67.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n74.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add flate2\nOr add the following line to your Cargo.toml:\nflate2 = \"1.1.2\"\n## Documentation\n docs.rs/flate2 \u27e812\u27e9\n## Repository\n github.com/rust-lang/flate2-rs \u27e813\u27e9\n## Owners\n## Categories\n  * API bindings\u27e814\u27e9\n  * Compression\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n253,212,077 Downloads all time\n70 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/deflate:  #deflate \n\u27e82\u27e9 https://crates.io/keywords/encoding:  #encoding \n\u27e83\u27e9 https://crates.io/keywords/gzip:  #gzip \n\u27e84\u27e9 https://crates.io/keywords/zlib:  #zlib \n\u27e85\u27e9 https://crates.io/keywords/zlib-ng:  #zlib-ng \n\u27e86\u27e9 https://crates.io/crates/flate2:  Readme \n\u27e87\u27e9 https://crates.io/crates/flate2/versions:  70 Versions \n\u27e88\u27e9 https://crates.io/crates/flate2/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/flate2/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/flate2:  docs.rs/flate2 \n\u27e813\u27e9 https://github.com/rust-lang/flate2-rs:  github.com/rust-lang/flate2-rs \n\u27e814\u27e9 https://crates.io/categories/api-bindings: API bindings\n\u27e815\u27e9 https://crates.io/categories/compression: Compression\n\u27e816\u27e9 https://crates.io/support?crate=flate2&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1562,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114499.535299"
          },
          "docs_rs": {
            "url": "https://docs.rs/flate2",
            "title": "Crate flate2Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\n[Settings](https://docs.rs/flate2/latest/settings.html)\n[Help](https://docs.rs/flate2/latest/help.html)\nSummary[Source](https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244)\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#implementation)Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#organization)Organization\nThis crate consists mainly of three modules, [`read`](https://docs.rs/flate2/latest/flate2/read/index.html), [`write`](https://docs.rs/flate2/latest/flate2/write/index.html), and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html). Each module contains a number of types used to encode and decode various streams of data.\nAll types in the [`write`](https://docs.rs/flate2/latest/flate2/write/index.html) module work on instances of [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html), whereas all types in the [`read`](https://docs.rs/flate2/latest/flate2/read/index.html) module work on instances of [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) works with [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html). If you are decoding directly from a `&[u8]`, use the [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files)About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html), there may be some files which have multiple members.\nA [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html) will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe [`MultiGzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html) on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules[\u00a7](https://docs.rs/flate2/latest/flate2/#modules)\n\n[bufread](https://docs.rs/flate2/latest/flate2/bufread/index.html \"mod flate2::bufread\")\n    Types which operate over [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html) streams, both encoders and decoders for various formats.\n\n[read](https://docs.rs/flate2/latest/flate2/read/index.html \"mod flate2::read\")\n    Types which operate over [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) streams, both encoders and decoders for various formats.\n\n[write](https://docs.rs/flate2/latest/flate2/write/index.html \"mod flate2::write\")\n    Types which operate over [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) streams, both encoders and decoders for various formats.\n## Structs[\u00a7](https://docs.rs/flate2/latest/flate2/#structs)\n\n[Compress](https://docs.rs/flate2/latest/flate2/struct.Compress.html \"struct flate2::Compress\")\n    Raw in-memory compression stream for blocks of data.\n\n[CompressError](https://docs.rs/flate2/latest/flate2/struct.CompressError.html \"struct flate2::CompressError\")\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\n[Compression](https://docs.rs/flate2/latest/flate2/struct.Compression.html \"struct flate2::Compression\")\n    When compressing data, the compression level can be specified by a value in this struct.\n\n[Crc](https://docs.rs/flate2/latest/flate2/struct.Crc.html \"struct flate2::Crc\")\n    The CRC calculated by a [`CrcReader`](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html).\n\n[CrcReader](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html \"struct flate2::CrcReader\")\n    A wrapper around a [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) that calculates the CRC.\n\n[CrcWriter](https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html \"struct flate2::CrcWriter\")\n    A wrapper around a [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) that calculates the CRC.\n\n[Decompress](https://docs.rs/flate2/latest/flate2/struct.Decompress.html \"struct flate2::Decompress\")\n    Raw in-memory decompression stream for blocks of data.\n\n[DecompressError](https://docs.rs/flate2/latest/flate2/struct.DecompressError.html \"struct flate2::DecompressError\")\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\n[GzBuilder](https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html \"struct flate2::GzBuilder\")\n    A builder structure to create a new gzip Encoder.\n\n[GzHeader](https://docs.rs/flate2/latest/flate2/struct.GzHeader.html \"struct flate2::GzHeader\")\n    A structure representing the header of a gzip stream.\n## Enums[\u00a7](https://docs.rs/flate2/latest/flate2/#enums)\n\n[FlushCompress](https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html \"enum flate2::FlushCompress\")\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\n[FlushDecompress](https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html \"enum flate2::FlushDecompress\")\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\n[Status](https://docs.rs/flate2/latest/flate2/enum.Status.html \"enum flate2::Status\")\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
              "markdown_with_citations": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## \u00a7\u27e84\u27e9Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## \u00a7\u27e85\u27e9Organization\nThis crate consists mainly of three modules, `read`\u27e86\u27e9, `write`\u27e87\u27e9, and `bufread`\u27e88\u27e9. Each module contains a number of types used to encode and decode various streams of data.\nAll types in the `write`\u27e87\u27e9 module work on instances of `Write`\u27e89\u27e9, whereas all types in the `read`\u27e86\u27e9 module work on instances of `Read`\u27e810\u27e9 and `bufread`\u27e88\u27e9 works with `BufRead`\u27e811\u27e9. If you are decoding directly from a `&[u8]`, use the `bufread`\u27e88\u27e9 types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## \u00a7\u27e812\u27e9About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the `GzDecoder`\u27e813\u27e9, there may be some files which have multiple members.\nA `GzDecoder`\u27e813\u27e9 will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe `MultiGzDecoder`\u27e814\u27e9 on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules\u00a7\u27e815\u27e9\n\nbufread\u27e88\u27e9\n    Types which operate over `BufRead`\u27e811\u27e9 streams, both encoders and decoders for various formats.\n\nread\u27e86\u27e9\n    Types which operate over `Read`\u27e810\u27e9 streams, both encoders and decoders for various formats.\n\nwrite\u27e87\u27e9\n    Types which operate over `Write`\u27e89\u27e9 streams, both encoders and decoders for various formats.\n## Structs\u00a7\u27e816\u27e9\n\nCompress\u27e817\u27e9\n    Raw in-memory compression stream for blocks of data.\n\nCompressError\u27e818\u27e9\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\nCompression\u27e819\u27e9\n    When compressing data, the compression level can be specified by a value in this struct.\n\nCrc\u27e820\u27e9\n    The CRC calculated by a `CrcReader`\u27e821\u27e9.\n\nCrcReader\u27e821\u27e9\n    A wrapper around a `Read`\u27e810\u27e9 that calculates the CRC.\n\nCrcWriter\u27e822\u27e9\n    A wrapper around a `Write`\u27e89\u27e9 that calculates the CRC.\n\nDecompress\u27e823\u27e9\n    Raw in-memory decompression stream for blocks of data.\n\nDecompressError\u27e824\u27e9\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\nGzBuilder\u27e825\u27e9\n    A builder structure to create a new gzip Encoder.\n\nGzHeader\u27e826\u27e9\n    A structure representing the header of a gzip stream.\n## Enums\u00a7\u27e827\u27e9\n\nFlushCompress\u27e828\u27e9\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\nFlushDecompress\u27e829\u27e9\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\nStatus\u27e830\u27e9\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/flate2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/flate2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244: Source\n\u27e84\u27e9 https://docs.rs/flate2/latest/flate2/#implementation: \u00a7\n\u27e85\u27e9 https://docs.rs/flate2/latest/flate2/#organization: \u00a7\n\u27e86\u27e9 https://docs.rs/flate2/latest/flate2/read/index.html: `read`\n\u27e87\u27e9 https://docs.rs/flate2/latest/flate2/write/index.html: `write`\n\u27e88\u27e9 https://docs.rs/flate2/latest/flate2/bufread/index.html: `bufread`\n\u27e89\u27e9 https://doc.rust-lang.org/std/io/trait.Write.html: `Write`\n\u27e810\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `Read`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.BufRead.html: `BufRead`\n\u27e812\u27e9 https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files: \u00a7\n\u27e813\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html: `GzDecoder`\n\u27e814\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html: `MultiGzDecoder`\n\u27e815\u27e9 https://docs.rs/flate2/latest/flate2/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/flate2/latest/flate2/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compress.html: struct flate2::Compress - Compress\n\u27e818\u27e9 https://docs.rs/flate2/latest/flate2/struct.CompressError.html: struct flate2::CompressError - CompressError\n\u27e819\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compression.html: struct flate2::Compression - Compression\n\u27e820\u27e9 https://docs.rs/flate2/latest/flate2/struct.Crc.html: struct flate2::Crc - Crc\n\u27e821\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcReader.html: `CrcReader`\n\u27e822\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html: struct flate2::CrcWriter - CrcWriter\n\u27e823\u27e9 https://docs.rs/flate2/latest/flate2/struct.Decompress.html: struct flate2::Decompress - Decompress\n\u27e824\u27e9 https://docs.rs/flate2/latest/flate2/struct.DecompressError.html: struct flate2::DecompressError - DecompressError\n\u27e825\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html: struct flate2::GzBuilder - GzBuilder\n\u27e826\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzHeader.html: struct flate2::GzHeader - GzHeader\n\u27e827\u27e9 https://docs.rs/flate2/latest/flate2/#enums: \u00a7\n\u27e828\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html: enum flate2::FlushCompress - FlushCompress\n\u27e829\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html: enum flate2::FlushDecompress - FlushDecompress\n\u27e830\u27e9 https://docs.rs/flate2/latest/flate2/enum.Status.html: enum flate2::Status - Status\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7742,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114500.2058321"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/flate2",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [70 releases](https://lib.rs/crates/flate2/versions) (38 stable)\n1.1.2 |  Jun 7, 2025   \n---|---  \n1.1.0 |  Feb 24, 2025   \n1.0.35 |  Nov 14, 2024   \n1.0.30 |  Apr 29, 2024   \n0.1.0 |  Nov 27, 2014   \n#**1** in [Compression](https://lib.rs/compression \"Algorithms for making data smaller.\")\nDownload history 2980514/week @ 2025-03-09 3247467/week @ 2025-03-16 3364303/week @ 2025-03-23 2831646/week @ 2025-03-30 3046007/week @ 2025-04-06 2732588/week @ 2025-04-13 2668870/week @ 2025-04-20 2529079/week @ 2025-04-27 2591357/week @ 2025-05-04 2682090/week @ 2025-05-11 2696319/week @ 2025-05-18 2405663/week @ 2025-05-25 2624429/week @ 2025-06-01 2775652/week @ 2025-06-08 2879135/week @ 2025-06-15 2995705/week @ 2025-06-22\n**11,443,893** downloads per month Used in [**13,501** crates (2,530 directly)](https://lib.rs/crates/flate2/rev)\n**MIT/Apache**\n235KB  4K  SLoC\n# flate2\n[![Crates.io](https://img.shields.io/crates/v/flate2.svg?maxAge=2592000)](https://crates.io/crates/flate2) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/flate2/badge.svg)](https://docs.rs/flate2)\nA streaming compression/decompression library DEFLATE-based streams in Rust.\nThis crate by default uses the ``miniz_oxide`` crate, a port of ``miniz.c`` to pure Rust. This crate also supports other [backends](https://lib.rs/crates/flate2#readme-backends), such as the widely available zlib library or the high-performance zlib-ng library.\nSupported formats:\n  * deflate\n  * zlib\n  * gzip\n\n```\n```# Cargo.toml``\n``[``dependencies``]`\n`flate2 ``=` ``\"`1.0`\"``\n``\n```\n\n## MSRV (Minimum Supported Rust Version) Policy\nThis crate supports the current and previous stable versions of the Rust compiler. For example, if the current stable is 1.80, this crate supports 1.80 and 1.79.\nOther compiler versions may work, but failures may not be treated as a ``flate2`` bug.\nThe ``Cargo.toml`` file specifies a ``rust-version`` for which builds of the current version passed at some point. This value is indicative only, and may change at any time.\nThe ``rust-version`` is a best-effort measured value and is different to the MSRV. The ``rust-version`` can be incremented by a PR in order to pass tests, as long as the MSRV continues to hold. When the ``rust-version`` increases, the next release should be a minor version, to allow any affected users to pin to a previous minor version.\n## Compression\n```\n``use` `std`::```io`::```prelude`::```*``;`\n`use` `flate2`::``Compression`;`\n`use` `flate2`::```write`::``ZlibEncoder`;`\n``fn` `main`````(````)``````{`\n  `let` `mut` e `=` `ZlibEncoder`::``new`(``Vec```::``new`(``)``,` `Compression`::``default`(``)``)``;`\n  e`.``write_all``(```b``\"`foo`\"```)``;`\n  e`.``write_all``(```b``\"`bar`\"```)``;`\n  `let` compressed_bytes `=` e`.``finish``(``)``;`\n```}```\n`\n```\n\n## Decompression\n```\n``use` `std`::```io`::```prelude`::```*``;`\n`use` `flate2`::```read`::``GzDecoder`;`\n``fn` `main`````(````)``````{`\n  `let` `mut` d `=` `GzDecoder`::``new`(```\"`...`\"```.``as_bytes``(``)``)``;`\n  `let` `mut` s `=` `String```::``new`(``)``;`\n  d`.``read_to_string``(``&``mut` s`)``.``unwrap``(``)``;`\n  `println!``(```\"``{}``\"```,` s`)``;`\n```}```\n`\n```\n\n## Backends\nThe default ``miniz_oxide`` backend has the advantage of only using safe Rust.\nIf you want maximum performance while still benefiting from a Rust implementation at the cost of some ```unsafe```, you can use ``zlib-rs``:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-rs`\"```]``, default-features = false }\n``\n```\n\n### C backends\nWhile zlib-rs is [the fastest overall](https://trifectatech.org/blog/zlib-rs-is-faster-than-c/), the zlib-ng C library can be slightly faster in certain cases:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-ng`\"```]``, default-features = false }\n``\n```\n\nNote that the ````\"`zlib-ng`\"```` feature works even if some other part of your crate graph depends on zlib.\nHowever, if you're already using another C or Rust library that depends on zlib, and you want to avoid including both zlib and zlib-ng, you can use that for Rust code as well:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib`\"```]``, default-features = false }\n``\n```\n\nOr, if you have C or Rust code that depends on zlib and you want to use zlib-ng via libz-sys in zlib-compat mode, use:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-ng-compat`\"```]``, default-features = false }\n``\n```\n\nNote that when using the ````\"`zlib-ng-compat`\"```` feature, if any crate in your dependency graph explicitly requests stock zlib, or uses libz-sys directly without ``default`-`features `=` `false```, you'll get stock zlib rather than zlib-ng. See [the libz-sys README](https://github.com/rust-lang/libz-sys/blob/main/README.md) for details. To avoid that, use the ````\"`zlib-ng`\"```` feature instead.\nFor compatibility with previous versions of ``flate2``, the Cloudflare optimized version of zlib is available, via the ``cloudflare_zlib`` feature. It's not as fast as zlib-ng, but it's faster than stock zlib. It requires an x86-64 CPU with SSE 4.2 or ARM64 with NEON & CRC. It does not support 32-bit CPUs at all and is incompatible with mingw. For more information check the [crate documentation](https://lib.rs/crates/cloudflare-zlib-sys). Note that ``cloudflare_zlib`` will cause breakage if any other crate in your crate graph uses another version of zlib/libz.\n# License\nThis project is licensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/rust-lang/flate2-rs/blob/ac4d950ffdeab209350423c528d876a7a7811abb/LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/rust-lang/flate2-rs/blob/ac4d950ffdeab209350423c528d876a7a7811abb/LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~66\u2013650KB  ~12K SLoC\n  * [cloudflare_zlib?](https://lib.rs/crates/flate2/features#feature-cloudflare_zlib \"optional feature\") [cloudflare-zlib-sys](https://lib.rs/crates/cloudflare-zlib-sys \"0.3.5\")\n  * [crc32fast](https://lib.rs/crates/crc32fast \"1.2.0\")\n  * [zlib-ng?](https://lib.rs/crates/flate2/features#feature-zlib-ng \"optional feature\") [libz-ng-sys](https://lib.rs/crates/libz-ng-sys \"1.1.16\")\n  * [zlib-rs?](https://lib.rs/crates/flate2/features#feature-zlib-rs \"optional feature\") [libz-rs-sys](https://lib.rs/crates/libz-rs-sys \"0.5.1\")[+std](https://lib.rs/crates/libz-rs-sys/features#feature-std)[+rust-allocator](https://lib.rs/crates/libz-rs-sys/features#feature-rust-allocator)\n  * [zlib?](https://lib.rs/crates/flate2/features#feature-zlib \"optional feature\") [zlib-default?](https://lib.rs/crates/flate2/features#feature-zlib-default \"optional feature\") [zlib-ng-compat?](https://lib.rs/crates/flate2/features#feature-zlib-ng-compat \"optional feature\") [libz-sys](https://lib.rs/crates/libz-sys \"1.1.20\")\n  * [rust_backend](https://lib.rs/crates/flate2/features#feature-rust_backend \"default feature\") [miniz_oxide](https://lib.rs/crates/miniz_oxide \"0.8.5\")[+with-alloc](https://lib.rs/crates/miniz_oxide/features#feature-with-alloc)\n\n\n  * dev  [quickcheck](https://lib.rs/crates/quickcheck \"new\") 1.0\n  * dev  [rand](https://lib.rs/crates/rand \"new\") 0.9\n\n\n#### [Other features](https://lib.rs/crates/flate2/features)\n  * [any_impl](https://lib.rs/crates/flate2/features#feature-any_impl)\n  * [any_zlib](https://lib.rs/crates/flate2/features#feature-any_zlib)\n  * [miniz-sys](https://lib.rs/crates/flate2/features#feature-miniz-sys)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  70 releases\u27e81\u27e9 (38 stable)\n1.1.2 |  Jun 7, 2025   \n---|---  \n1.1.0 |  Feb 24, 2025   \n1.0.35 |  Nov 14, 2024   \n1.0.30 |  Apr 29, 2024   \n0.1.0 |  Nov 27, 2014   \n#**1** in Compression\u27e82\u27e9\nDownload history 2980514/week @ 2025-03-09 3247467/week @ 2025-03-16 3364303/week @ 2025-03-23 2831646/week @ 2025-03-30 3046007/week @ 2025-04-06 2732588/week @ 2025-04-13 2668870/week @ 2025-04-20 2529079/week @ 2025-04-27 2591357/week @ 2025-05-04 2682090/week @ 2025-05-11 2696319/week @ 2025-05-18 2405663/week @ 2025-05-25 2624429/week @ 2025-06-01 2775652/week @ 2025-06-08 2879135/week @ 2025-06-15 2995705/week @ 2025-06-22\n**11,443,893** downloads per month Used in **13,501** crates (2,530 directly)\u27e83\u27e9\n**MIT/Apache**\n235KB  4K  SLoC\n# flate2\n![Crates.io\u27e84\u27e9](https://crates.io/crates/flate2) ![Documentation\u27e85\u27e9](https://docs.rs/flate2)\nA streaming compression/decompression library DEFLATE-based streams in Rust.\nThis crate by default uses the ``miniz_oxide`` crate, a port of ``miniz.c`` to pure Rust. This crate also supports other backends\u27e86\u27e9, such as the widely available zlib library or the high-performance zlib-ng library.\nSupported formats:\n  * deflate\n  * zlib\n  * gzip\n\n```\n```# Cargo.toml``\n``[``dependencies``]`\n`flate2 ``=` ``\"`1.0`\"``\n``\n```\n\n## MSRV (Minimum Supported Rust Version) Policy\nThis crate supports the current and previous stable versions of the Rust compiler. For example, if the current stable is 1.80, this crate supports 1.80 and 1.79.\nOther compiler versions may work, but failures may not be treated as a ``flate2`` bug.\nThe ``Cargo.toml`` file specifies a ``rust-version`` for which builds of the current version passed at some point. This value is indicative only, and may change at any time.\nThe ``rust-version`` is a best-effort measured value and is different to the MSRV. The ``rust-version`` can be incremented by a PR in order to pass tests, as long as the MSRV continues to hold. When the ``rust-version`` increases, the next release should be a minor version, to allow any affected users to pin to a previous minor version.\n## Compression\n```\n``use` `std`::```io`::```prelude`::```*``;`\n`use` `flate2`::``Compression`;`\n`use` `flate2`::```write`::``ZlibEncoder`;`\n``fn` `main`````(````)``````{`\n  `let` `mut` e `=` `ZlibEncoder`::``new`(``Vec```::``new`(``)``,` `Compression`::``default`(``)``)``;`\n  e`.``write_all``(```b``\"`foo`\"```)``;`\n  e`.``write_all``(```b``\"`bar`\"```)``;`\n  `let` compressed_bytes `=` e`.``finish``(``)``;`\n```}```\n`\n```\n\n## Decompression\n```\n``use` `std`::```io`::```prelude`::```*``;`\n`use` `flate2`::```read`::``GzDecoder`;`\n``fn` `main`````(````)``````{`\n  `let` `mut` d `=` `GzDecoder`::``new`(```\"`...`\"```.``as_bytes``(``)``)``;`\n  `let` `mut` s `=` `String```::``new`(``)``;`\n  d`.``read_to_string``(``&``mut` s`)``.``unwrap``(``)``;`\n  `println!``(```\"``{}``\"```,` s`)``;`\n```}```\n`\n```\n\n## Backends\nThe default ``miniz_oxide`` backend has the advantage of only using safe Rust.\nIf you want maximum performance while still benefiting from a Rust implementation at the cost of some ```unsafe```, you can use ``zlib-rs``:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-rs`\"```]``, default-features = false }\n``\n```\n\n### C backends\nWhile zlib-rs is the fastest overall\u27e87\u27e9, the zlib-ng C library can be slightly faster in certain cases:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-ng`\"```]``, default-features = false }\n``\n```\n\nNote that the ````\"`zlib-ng`\"```` feature works even if some other part of your crate graph depends on zlib.\nHowever, if you're already using another C or Rust library that depends on zlib, and you want to avoid including both zlib and zlib-ng, you can use that for Rust code as well:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib`\"```]``, default-features = false }\n``\n```\n\nOr, if you have C or Rust code that depends on zlib and you want to use zlib-ng via libz-sys in zlib-compat mode, use:\n```\n```[``dependencies``]`\n`flate2 = { version = \"1.0.17\", features ``=` ``[```\"`zlib-ng-compat`\"```]``, default-features = false }\n``\n```\n\nNote that when using the ````\"`zlib-ng-compat`\"```` feature, if any crate in your dependency graph explicitly requests stock zlib, or uses libz-sys directly without ``default`-`features `=` `false```, you'll get stock zlib rather than zlib-ng. See the libz-sys README\u27e88\u27e9 for details. To avoid that, use the ````\"`zlib-ng`\"```` feature instead.\nFor compatibility with previous versions of ``flate2``, the Cloudflare optimized version of zlib is available, via the ``cloudflare_zlib`` feature. It's not as fast as zlib-ng, but it's faster than stock zlib. It requires an x86-64 CPU with SSE 4.2 or ARM64 with NEON & CRC. It does not support 32-bit CPUs at all and is incompatible with mingw. For more information check the crate documentation\u27e89\u27e9. Note that ``cloudflare_zlib`` will cause breakage if any other crate in your crate graph uses another version of zlib/libz.\n# License\nThis project is licensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e810\u27e9 or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e811\u27e9 or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this project by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~66\u2013650KB  ~12K SLoC\n  * cloudflare_zlib?\u27e812\u27e9 cloudflare-zlib-sys\u27e89\u27e9\n  * crc32fast\u27e813\u27e9\n  * zlib-ng?\u27e814\u27e9 libz-ng-sys\u27e815\u27e9\n  * zlib-rs?\u27e816\u27e9 libz-rs-sys\u27e817\u27e9+std\u27e818\u27e9+rust-allocator\u27e819\u27e9\n  * zlib?\u27e820\u27e9 zlib-default?\u27e821\u27e9 zlib-ng-compat?\u27e822\u27e9 libz-sys\u27e823\u27e9\n  * rust_backend\u27e824\u27e9 miniz_oxide\u27e825\u27e9+with-alloc\u27e826\u27e9\n\n\n  * dev  quickcheck\u27e827\u27e9 1.0\n  * dev  rand\u27e828\u27e9 0.9\n\n\n#### Other features\u27e829\u27e9\n  * any_impl\u27e830\u27e9\n  * any_zlib\u27e831\u27e9\n  * miniz-sys\u27e832\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/flate2/versions: 70 releases\n\u27e82\u27e9 https://lib.rs/compression: Algorithms for making data smaller. - Compression\n\u27e83\u27e9 https://lib.rs/crates/flate2/rev: **13,501** crates (2,530 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/flate2.svg?maxAge=2592000: ![Crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/flate2/badge.svg: ![Documentation\n\u27e86\u27e9 https://lib.rs/crates/flate2#readme-backends: backends\n\u27e87\u27e9 https://trifectatech.org/blog/zlib-rs-is-faster-than-c/: the fastest overall\n\u27e88\u27e9 https://github.com/rust-lang/libz-sys/blob/main/README.md: the libz-sys README\n\u27e89\u27e9 https://lib.rs/crates/cloudflare-zlib-sys: crate documentation\n\u27e810\u27e9 https://github.com/rust-lang/flate2-rs/blob/ac4d950ffdeab209350423c528d876a7a7811abb/LICENSE-APACHE: LICENSE-APACHE\n\u27e811\u27e9 https://github.com/rust-lang/flate2-rs/blob/ac4d950ffdeab209350423c528d876a7a7811abb/LICENSE-MIT: LICENSE-MIT\n\u27e812\u27e9 https://lib.rs/crates/flate2/features#feature-cloudflare_zlib: optional feature - cloudflare_zlib?\n\u27e813\u27e9 https://lib.rs/crates/crc32fast: 1.2.0 - crc32fast\n\u27e814\u27e9 https://lib.rs/crates/flate2/features#feature-zlib-ng: optional feature - zlib-ng?\n\u27e815\u27e9 https://lib.rs/crates/libz-ng-sys: 1.1.16 - libz-ng-sys\n\u27e816\u27e9 https://lib.rs/crates/flate2/features#feature-zlib-rs: optional feature - zlib-rs?\n\u27e817\u27e9 https://lib.rs/crates/libz-rs-sys: 0.5.1 - libz-rs-sys\n\u27e818\u27e9 https://lib.rs/crates/libz-rs-sys/features#feature-std: +std\n\u27e819\u27e9 https://lib.rs/crates/libz-rs-sys/features#feature-rust-allocator: +rust-allocator\n\u27e820\u27e9 https://lib.rs/crates/flate2/features#feature-zlib: optional feature - zlib?\n\u27e821\u27e9 https://lib.rs/crates/flate2/features#feature-zlib-default: optional feature - zlib-default?\n\u27e822\u27e9 https://lib.rs/crates/flate2/features#feature-zlib-ng-compat: optional feature - zlib-ng-compat?\n\u27e823\u27e9 https://lib.rs/crates/libz-sys: 1.1.20 - libz-sys\n\u27e824\u27e9 https://lib.rs/crates/flate2/features#feature-rust_backend: default feature - rust_backend\n\u27e825\u27e9 https://lib.rs/crates/miniz_oxide: 0.8.5 - miniz_oxide\n\u27e826\u27e9 https://lib.rs/crates/miniz_oxide/features#feature-with-alloc: +with-alloc\n\u27e827\u27e9 https://lib.rs/crates/quickcheck: new - quickcheck\n\u27e828\u27e9 https://lib.rs/crates/rand: new - rand\n\u27e829\u27e9 https://lib.rs/crates/flate2/features: Other features\n\u27e830\u27e9 https://lib.rs/crates/flate2/features#feature-any_impl: any_impl\n\u27e831\u27e9 https://lib.rs/crates/flate2/features#feature-any_zlib: any_zlib\n\u27e832\u27e9 https://lib.rs/crates/flate2/features#feature-miniz-sys: miniz-sys\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7898,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114500.8139453"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libadler2-fd0b97f5f75249cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-fc6b28f859d1b416\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-fc6b28f859d1b416\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "crc32fast_stdarchx86"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-f44c1afd68cc2688\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libcrc32fast-806676eade06efd8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "miniz_oxide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "with-alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libminiz_oxide-938326ec2c2f55ed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpj1vpa82a/flate2-1.1.2#flate2@1.1.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "any_impl",
                "default",
                "miniz_oxide",
                "rust_backend"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libflate2-5b740dedbe8a2543.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-fc6b28f859d1b416\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-fc6b28f859d1b416\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "crc32fast_stdarchx86"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\build\\crc32fast-f44c1afd68cc2688\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "adler2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\adler2-2.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libadler2-fd0b97f5f75249cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "miniz_oxide",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\miniz_oxide-0.8.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "with-alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libminiz_oxide-938326ec2c2f55ed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crc32fast",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crc32fast-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libcrc32fast-806676eade06efd8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpj1vpa82a/flate2-1.1.2#flate2@1.1.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mem.rs:546:26\n    |\n546 |             Some(msg) => write!(f, \"deflate decompression error: {}\", msg),\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n546 -             Some(msg) => write!(f, \"deflate decompression error: {}\", msg),\n546 +             Some(msg) => write!(f, \"deflate decompression error: {msg}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21273,
                        "byte_start": 21273,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\mem.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 546,
                        "suggested_replacement": "msg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "            Some(msg) => write!(f, \"deflate decompression error: {}\", msg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 21280,
                        "byte_start": 21275,
                        "column_end": 74,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\mem.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 546,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 69,
                            "text": "            Some(msg) => write!(f, \"deflate decompression error: {}\", msg),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21281,
                    "byte_start": 21232,
                    "column_end": 75,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\mem.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 546,
                    "line_start": 546,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 26,
                        "text": "            Some(msg) => write!(f, \"deflate decompression error: {}\", msg),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpj1vpa82a/flate2-1.1.2#flate2@1.1.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mem.rs:570:26\n    |\n570 |             Some(msg) => write!(f, \"deflate compression error: {}\", msg),\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n570 -             Some(msg) => write!(f, \"deflate compression error: {}\", msg),\n570 +             Some(msg) => write!(f, \"deflate compression error: {msg}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21928,
                        "byte_start": 21928,
                        "column_end": 65,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\mem.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 570,
                        "line_start": 570,
                        "suggested_replacement": "msg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 65,
                            "text": "            Some(msg) => write!(f, \"deflate compression error: {}\", msg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 21935,
                        "byte_start": 21930,
                        "column_end": 72,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\mem.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 570,
                        "line_start": 570,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 67,
                            "text": "            Some(msg) => write!(f, \"deflate compression error: {}\", msg),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21936,
                    "byte_start": 21889,
                    "column_end": 73,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\mem.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 570,
                    "line_start": 570,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 73,
                        "highlight_start": 26,
                        "text": "            Some(msg) => write!(f, \"deflate compression error: {}\", msg),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpj1vpa82a/flate2-1.1.2#flate2@1.1.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "flate2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "any_impl",
                "default",
                "miniz_oxide",
                "rust_backend"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpj1vpa82a\\flate2-1.1.2\\target\\debug\\deps\\libflate2-0078846eaa321f0b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 30
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "flate2",
          "version": "1.1.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\n[Settings](https://docs.rs/flate2/latest/settings.html)\n[Help](https://docs.rs/flate2/latest/help.html)\nSummary[Source](https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244)\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#implementation)Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#organization)Organization\nThis crate consists mainly of three modules, [`read`](https://docs.rs/flate2/latest/flate2/read/index.html), [`write`](https://docs.rs/flate2/latest/flate2/write/index.html), and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html). Each module contains a number of types used to encode and decode various streams of data.\nAll types in the [`write`](https://docs.rs/flate2/latest/flate2/write/index.html) module work on instances of [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html), whereas all types in the [`read`](https://docs.rs/flate2/latest/flate2/read/index.html) module work on instances of [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) works with [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html). If you are decoding directly from a `&[u8]`, use the [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files)About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html), there may be some files which have multiple members.\nA [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html) will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe [`MultiGzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html) on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules[\u00a7](https://docs.rs/flate2/latest/flate2/#modules)\n\n[bufread](https://docs.rs/flate2/latest/flate2/bufread/index.html \"mod flate2::bufread\")\n    Types which operate over [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html) streams, both encoders and decoders for various formats.\n\n[read](https://docs.rs/flate2/latest/flate2/read/index.html \"mod flate2::read\")\n    Types which operate over [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) streams, both encoders and decoders for various formats.\n\n[write](https://docs.rs/flate2/latest/flate2/write/index.html \"mod flate2::write\")\n    Types which operate over [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) streams, both encoders and decoders for various formats.\n## Structs[\u00a7](https://docs.rs/flate2/latest/flate2/#structs)\n\n[Compress](https://docs.rs/flate2/latest/flate2/struct.Compress.html \"struct flate2::Compress\")\n    Raw in-memory compression stream for blocks of data.\n\n[CompressError](https://docs.rs/flate2/latest/flate2/struct.CompressError.html \"struct flate2::CompressError\")\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\n[Compression](https://docs.rs/flate2/latest/flate2/struct.Compression.html \"struct flate2::Compression\")\n    When compressing data, the compression level can be specified by a value in this struct.\n\n[Crc](https://docs.rs/flate2/latest/flate2/struct.Crc.html \"struct flate2::Crc\")\n    The CRC calculated by a [`CrcReader`](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html).\n\n[CrcReader](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html \"struct flate2::CrcReader\")\n    A wrapper around a [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) that calculates the CRC.\n\n[CrcWriter](https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html \"struct flate2::CrcWriter\")\n    A wrapper around a [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) that calculates the CRC.\n\n[Decompress](https://docs.rs/flate2/latest/flate2/struct.Decompress.html \"struct flate2::Decompress\")\n    Raw in-memory decompression stream for blocks of data.\n\n[DecompressError](https://docs.rs/flate2/latest/flate2/struct.DecompressError.html \"struct flate2::DecompressError\")\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\n[GzBuilder](https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html \"struct flate2::GzBuilder\")\n    A builder structure to create a new gzip Encoder.\n\n[GzHeader](https://docs.rs/flate2/latest/flate2/struct.GzHeader.html \"struct flate2::GzHeader\")\n    A structure representing the header of a gzip stream.\n## Enums[\u00a7](https://docs.rs/flate2/latest/flate2/#enums)\n\n[FlushCompress](https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html \"enum flate2::FlushCompress\")\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\n[FlushDecompress](https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html \"enum flate2::FlushDecompress\")\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\n[Status](https://docs.rs/flate2/latest/flate2/enum.Status.html \"enum flate2::Status\")\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
            "markdown_with_citations": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## \u00a7\u27e84\u27e9Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## \u00a7\u27e85\u27e9Organization\nThis crate consists mainly of three modules, `read`\u27e86\u27e9, `write`\u27e87\u27e9, and `bufread`\u27e88\u27e9. Each module contains a number of types used to encode and decode various streams of data.\nAll types in the `write`\u27e87\u27e9 module work on instances of `Write`\u27e89\u27e9, whereas all types in the `read`\u27e86\u27e9 module work on instances of `Read`\u27e810\u27e9 and `bufread`\u27e88\u27e9 works with `BufRead`\u27e811\u27e9. If you are decoding directly from a `&[u8]`, use the `bufread`\u27e88\u27e9 types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## \u00a7\u27e812\u27e9About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the `GzDecoder`\u27e813\u27e9, there may be some files which have multiple members.\nA `GzDecoder`\u27e813\u27e9 will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe `MultiGzDecoder`\u27e814\u27e9 on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules\u00a7\u27e815\u27e9\n\nbufread\u27e88\u27e9\n    Types which operate over `BufRead`\u27e811\u27e9 streams, both encoders and decoders for various formats.\n\nread\u27e86\u27e9\n    Types which operate over `Read`\u27e810\u27e9 streams, both encoders and decoders for various formats.\n\nwrite\u27e87\u27e9\n    Types which operate over `Write`\u27e89\u27e9 streams, both encoders and decoders for various formats.\n## Structs\u00a7\u27e816\u27e9\n\nCompress\u27e817\u27e9\n    Raw in-memory compression stream for blocks of data.\n\nCompressError\u27e818\u27e9\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\nCompression\u27e819\u27e9\n    When compressing data, the compression level can be specified by a value in this struct.\n\nCrc\u27e820\u27e9\n    The CRC calculated by a `CrcReader`\u27e821\u27e9.\n\nCrcReader\u27e821\u27e9\n    A wrapper around a `Read`\u27e810\u27e9 that calculates the CRC.\n\nCrcWriter\u27e822\u27e9\n    A wrapper around a `Write`\u27e89\u27e9 that calculates the CRC.\n\nDecompress\u27e823\u27e9\n    Raw in-memory decompression stream for blocks of data.\n\nDecompressError\u27e824\u27e9\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\nGzBuilder\u27e825\u27e9\n    A builder structure to create a new gzip Encoder.\n\nGzHeader\u27e826\u27e9\n    A structure representing the header of a gzip stream.\n## Enums\u00a7\u27e827\u27e9\n\nFlushCompress\u27e828\u27e9\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\nFlushDecompress\u27e829\u27e9\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\nStatus\u27e830\u27e9\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/flate2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/flate2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244: Source\n\u27e84\u27e9 https://docs.rs/flate2/latest/flate2/#implementation: \u00a7\n\u27e85\u27e9 https://docs.rs/flate2/latest/flate2/#organization: \u00a7\n\u27e86\u27e9 https://docs.rs/flate2/latest/flate2/read/index.html: `read`\n\u27e87\u27e9 https://docs.rs/flate2/latest/flate2/write/index.html: `write`\n\u27e88\u27e9 https://docs.rs/flate2/latest/flate2/bufread/index.html: `bufread`\n\u27e89\u27e9 https://doc.rust-lang.org/std/io/trait.Write.html: `Write`\n\u27e810\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `Read`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.BufRead.html: `BufRead`\n\u27e812\u27e9 https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files: \u00a7\n\u27e813\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html: `GzDecoder`\n\u27e814\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html: `MultiGzDecoder`\n\u27e815\u27e9 https://docs.rs/flate2/latest/flate2/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/flate2/latest/flate2/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compress.html: struct flate2::Compress - Compress\n\u27e818\u27e9 https://docs.rs/flate2/latest/flate2/struct.CompressError.html: struct flate2::CompressError - CompressError\n\u27e819\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compression.html: struct flate2::Compression - Compression\n\u27e820\u27e9 https://docs.rs/flate2/latest/flate2/struct.Crc.html: struct flate2::Crc - Crc\n\u27e821\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcReader.html: `CrcReader`\n\u27e822\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html: struct flate2::CrcWriter - CrcWriter\n\u27e823\u27e9 https://docs.rs/flate2/latest/flate2/struct.Decompress.html: struct flate2::Decompress - Decompress\n\u27e824\u27e9 https://docs.rs/flate2/latest/flate2/struct.DecompressError.html: struct flate2::DecompressError - DecompressError\n\u27e825\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html: struct flate2::GzBuilder - GzBuilder\n\u27e826\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzHeader.html: struct flate2::GzHeader - GzHeader\n\u27e827\u27e9 https://docs.rs/flate2/latest/flate2/#enums: \u00a7\n\u27e828\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html: enum flate2::FlushCompress - FlushCompress\n\u27e829\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html: enum flate2::FlushDecompress - FlushDecompress\n\u27e830\u27e9 https://docs.rs/flate2/latest/flate2/enum.Status.html: enum flate2::Status - Status\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "flate2",
          "version": "1.1.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\n[Settings](https://docs.rs/flate2/latest/settings.html)\n[Help](https://docs.rs/flate2/latest/help.html)\nSummary[Source](https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244)\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#implementation)Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#organization)Organization\nThis crate consists mainly of three modules, [`read`](https://docs.rs/flate2/latest/flate2/read/index.html), [`write`](https://docs.rs/flate2/latest/flate2/write/index.html), and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html). Each module contains a number of types used to encode and decode various streams of data.\nAll types in the [`write`](https://docs.rs/flate2/latest/flate2/write/index.html) module work on instances of [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html), whereas all types in the [`read`](https://docs.rs/flate2/latest/flate2/read/index.html) module work on instances of [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) works with [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html). If you are decoding directly from a `&[u8]`, use the [`bufread`](https://docs.rs/flate2/latest/flate2/bufread/index.html) types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## [\u00a7](https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files)About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html), there may be some files which have multiple members.\nA [`GzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html) will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe [`MultiGzDecoder`](https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html) on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules[\u00a7](https://docs.rs/flate2/latest/flate2/#modules)\n\n[bufread](https://docs.rs/flate2/latest/flate2/bufread/index.html \"mod flate2::bufread\")\n    Types which operate over [`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html) streams, both encoders and decoders for various formats.\n\n[read](https://docs.rs/flate2/latest/flate2/read/index.html \"mod flate2::read\")\n    Types which operate over [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) streams, both encoders and decoders for various formats.\n\n[write](https://docs.rs/flate2/latest/flate2/write/index.html \"mod flate2::write\")\n    Types which operate over [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) streams, both encoders and decoders for various formats.\n## Structs[\u00a7](https://docs.rs/flate2/latest/flate2/#structs)\n\n[Compress](https://docs.rs/flate2/latest/flate2/struct.Compress.html \"struct flate2::Compress\")\n    Raw in-memory compression stream for blocks of data.\n\n[CompressError](https://docs.rs/flate2/latest/flate2/struct.CompressError.html \"struct flate2::CompressError\")\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\n[Compression](https://docs.rs/flate2/latest/flate2/struct.Compression.html \"struct flate2::Compression\")\n    When compressing data, the compression level can be specified by a value in this struct.\n\n[Crc](https://docs.rs/flate2/latest/flate2/struct.Crc.html \"struct flate2::Crc\")\n    The CRC calculated by a [`CrcReader`](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html).\n\n[CrcReader](https://docs.rs/flate2/latest/flate2/struct.CrcReader.html \"struct flate2::CrcReader\")\n    A wrapper around a [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) that calculates the CRC.\n\n[CrcWriter](https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html \"struct flate2::CrcWriter\")\n    A wrapper around a [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) that calculates the CRC.\n\n[Decompress](https://docs.rs/flate2/latest/flate2/struct.Decompress.html \"struct flate2::Decompress\")\n    Raw in-memory decompression stream for blocks of data.\n\n[DecompressError](https://docs.rs/flate2/latest/flate2/struct.DecompressError.html \"struct flate2::DecompressError\")\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\n[GzBuilder](https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html \"struct flate2::GzBuilder\")\n    A builder structure to create a new gzip Encoder.\n\n[GzHeader](https://docs.rs/flate2/latest/flate2/struct.GzHeader.html \"struct flate2::GzHeader\")\n    A structure representing the header of a gzip stream.\n## Enums[\u00a7](https://docs.rs/flate2/latest/flate2/#enums)\n\n[FlushCompress](https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html \"enum flate2::FlushCompress\")\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\n[FlushDecompress](https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html \"enum flate2::FlushDecompress\")\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\n[Status](https://docs.rs/flate2/latest/flate2/enum.Status.html \"enum flate2::Status\")\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
            "markdown_with_citations": "[](https://docs.rs/flate2/latest/flate2/all.html \"show sidebar\")\n# Crate flate2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA DEFLATE-based stream compression/decompression library\nThis library provides support for compression and decompression of DEFLATE-based streams:\n  * the DEFLATE format itself\n  * the zlib format\n  * gzip\n\n\nThese three formats are all closely related and largely only differ in their headers/footers. This crate has three types in each submodule for dealing with these three formats.\n## \u00a7\u27e84\u27e9Implementation\nIn addition to supporting three formats, this crate supports several different backends, controlled through this crate\u2019s features:\n  * `default`, or `rust_backend` - this implementation uses the `miniz_oxide` crate which is a port of `miniz.c` to Rust. This feature does not require a C compiler, and only uses safe Rust code.\n  * `zlib-rs` - this implementation utilizes the `zlib-rs` crate, a Rust rewrite of zlib. This backend is the fastest, at the cost of some `unsafe` Rust code.\n\n\nSeveral backends implemented in C are also available. These are useful in case you are already using a specific C implementation and need the result of compression to be bit-identical. See the crate\u2019s README for details on the available C backends.\nThe `zlib-rs` backend typically outperforms all the C implementations.\n## \u00a7\u27e85\u27e9Organization\nThis crate consists mainly of three modules, `read`\u27e86\u27e9, `write`\u27e87\u27e9, and `bufread`\u27e88\u27e9. Each module contains a number of types used to encode and decode various streams of data.\nAll types in the `write`\u27e87\u27e9 module work on instances of `Write`\u27e89\u27e9, whereas all types in the `read`\u27e86\u27e9 module work on instances of `Read`\u27e810\u27e9 and `bufread`\u27e88\u27e9 works with `BufRead`\u27e811\u27e9. If you are decoding directly from a `&[u8]`, use the `bufread`\u27e88\u27e9 types.\n```\nuse flate2::write::GzEncoder;\nuse flate2::Compression;\nuse std::io;\nuse std::io::prelude::*;\nlet mut encoder = GzEncoder::new(Vec::new(), Compression::default());\nencoder.write_all(b\"Example\")?;\n```\n\nOther various types are provided at the top-level of the crate for management and dealing with encoders/decoders. Also note that types which operate over a specific trait often implement the mirroring trait as well. For example a `flate2::read::DeflateDecoder<T>` _also_ implements the `Write` trait if `T: Write`. That is, the \u201cdual trait\u201d is forwarded directly to the underlying object if available.\n## \u00a7\u27e812\u27e9About multi-member Gzip files\nWhile most `gzip` files one encounters will have a single _member_ that can be read with the `GzDecoder`\u27e813\u27e9, there may be some files which have multiple members.\nA `GzDecoder`\u27e813\u27e9 will only read the first member of gzip data, which may unexpectedly provide partial results when a multi-member gzip file is encountered. `GzDecoder` is appropriate for data that is designed to be read as single members from a multi-member file. `bufread::GzDecoder` and `write::GzDecoder` also allow non-gzip data following gzip data to be handled.\nThe `MultiGzDecoder`\u27e814\u27e9 on the other hand will decode all members of a `gzip` file into one consecutive stream of bytes, which hides the underlying _members_ entirely. If a file contains non-gzip data after the gzip data, MultiGzDecoder will emit an error after decoding the gzip data. This behavior matches the `gzip`, `gunzip`, and `zcat` command line tools.\n## Modules\u00a7\u27e815\u27e9\n\nbufread\u27e88\u27e9\n    Types which operate over `BufRead`\u27e811\u27e9 streams, both encoders and decoders for various formats.\n\nread\u27e86\u27e9\n    Types which operate over `Read`\u27e810\u27e9 streams, both encoders and decoders for various formats.\n\nwrite\u27e87\u27e9\n    Types which operate over `Write`\u27e89\u27e9 streams, both encoders and decoders for various formats.\n## Structs\u00a7\u27e816\u27e9\n\nCompress\u27e817\u27e9\n    Raw in-memory compression stream for blocks of data.\n\nCompressError\u27e818\u27e9\n    Error returned when a compression object is used incorrectly or otherwise generates an error.\n\nCompression\u27e819\u27e9\n    When compressing data, the compression level can be specified by a value in this struct.\n\nCrc\u27e820\u27e9\n    The CRC calculated by a `CrcReader`\u27e821\u27e9.\n\nCrcReader\u27e821\u27e9\n    A wrapper around a `Read`\u27e810\u27e9 that calculates the CRC.\n\nCrcWriter\u27e822\u27e9\n    A wrapper around a `Write`\u27e89\u27e9 that calculates the CRC.\n\nDecompress\u27e823\u27e9\n    Raw in-memory decompression stream for blocks of data.\n\nDecompressError\u27e824\u27e9\n    Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.\n\nGzBuilder\u27e825\u27e9\n    A builder structure to create a new gzip Encoder.\n\nGzHeader\u27e826\u27e9\n    A structure representing the header of a gzip stream.\n## Enums\u00a7\u27e827\u27e9\n\nFlushCompress\u27e828\u27e9\n    Values which indicate the form of flushing to be used when compressing in-memory data.\n\nFlushDecompress\u27e829\u27e9\n    Values which indicate the form of flushing to be used when decompressing in-memory data.\n\nStatus\u27e830\u27e9\n    Possible status results of compressing some data or successfully decompressing a block of data.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/flate2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/flate2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/flate2/latest/src/flate2/lib.rs.html#1-244: Source\n\u27e84\u27e9 https://docs.rs/flate2/latest/flate2/#implementation: \u00a7\n\u27e85\u27e9 https://docs.rs/flate2/latest/flate2/#organization: \u00a7\n\u27e86\u27e9 https://docs.rs/flate2/latest/flate2/read/index.html: `read`\n\u27e87\u27e9 https://docs.rs/flate2/latest/flate2/write/index.html: `write`\n\u27e88\u27e9 https://docs.rs/flate2/latest/flate2/bufread/index.html: `bufread`\n\u27e89\u27e9 https://doc.rust-lang.org/std/io/trait.Write.html: `Write`\n\u27e810\u27e9 https://doc.rust-lang.org/std/io/trait.Read.html: `Read`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.BufRead.html: `BufRead`\n\u27e812\u27e9 https://docs.rs/flate2/latest/flate2/#about-multi-member-gzip-files: \u00a7\n\u27e813\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.GzDecoder.html: `GzDecoder`\n\u27e814\u27e9 https://docs.rs/flate2/latest/flate2/read/struct.MultiGzDecoder.html: `MultiGzDecoder`\n\u27e815\u27e9 https://docs.rs/flate2/latest/flate2/#modules: \u00a7\n\u27e816\u27e9 https://docs.rs/flate2/latest/flate2/#structs: \u00a7\n\u27e817\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compress.html: struct flate2::Compress - Compress\n\u27e818\u27e9 https://docs.rs/flate2/latest/flate2/struct.CompressError.html: struct flate2::CompressError - CompressError\n\u27e819\u27e9 https://docs.rs/flate2/latest/flate2/struct.Compression.html: struct flate2::Compression - Compression\n\u27e820\u27e9 https://docs.rs/flate2/latest/flate2/struct.Crc.html: struct flate2::Crc - Crc\n\u27e821\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcReader.html: `CrcReader`\n\u27e822\u27e9 https://docs.rs/flate2/latest/flate2/struct.CrcWriter.html: struct flate2::CrcWriter - CrcWriter\n\u27e823\u27e9 https://docs.rs/flate2/latest/flate2/struct.Decompress.html: struct flate2::Decompress - Decompress\n\u27e824\u27e9 https://docs.rs/flate2/latest/flate2/struct.DecompressError.html: struct flate2::DecompressError - DecompressError\n\u27e825\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzBuilder.html: struct flate2::GzBuilder - GzBuilder\n\u27e826\u27e9 https://docs.rs/flate2/latest/flate2/struct.GzHeader.html: struct flate2::GzHeader - GzHeader\n\u27e827\u27e9 https://docs.rs/flate2/latest/flate2/#enums: \u00a7\n\u27e828\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushCompress.html: enum flate2::FlushCompress - FlushCompress\n\u27e829\u27e9 https://docs.rs/flate2/latest/flate2/enum.FlushDecompress.html: enum flate2::FlushDecompress - FlushDecompress\n\u27e830\u27e9 https://docs.rs/flate2/latest/flate2/enum.Status.html: enum flate2::Status - Status\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `flate2` crate is a DEFLATE-based compression and decompression library supporting the DEFLATE, zlib, and gzip formats. It offers flexible backends, including a safe Rust implementation (`miniz_oxide`) and a high-performance option (`zlib-rs`), as well as C-based alternatives for bit-identical results. The crate provides modular APIs (`read`, `write`, `bufread`) for stream-based encoding/decoding and supports handling multi-member gzip files.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 0.0,
          "factual_counterfactual": "### Pair 1: Multi-member Gzip File Handling  \n\u2705 **Factual:** The `MultiGzDecoder` provided by the `flate2` crate can decode all members of a multi-member gzip file into a single consecutive stream of bytes, while emitting an error if non-gzip data follows the gzip data.  \n\u274c **Counterfactual:** The `MultiGzDecoder` can selectively decode specific members of a multi-member gzip file based on user-defined criteria, allowing partial extraction of gzip data.  \n\n---\n\n### Pair 2: Backend Performance  \n\u2705 **Factual:** The `zlib-rs` backend in `flate2` is the fastest backend available, outperforming both the default Rust-based implementation (`miniz_oxide`) and the C-based implementations.  \n\u274c **Counterfactual:** The default Rust-based backend (`miniz_oxide`) is faster than the `zlib-rs` backend, making it the preferred choice for high-performance applications.  \n\n---\n\n### Pair 3: Module Organization  \n\u2705 **Factual:** The `flate2` crate organizes its functionality into three main modules: `read`, `write`, and `bufread`, which correspond to the Rust I/O traits `Read`, `Write`, and `BufRead`, respectively.  \n\u274c **Counterfactual:** The `flate2` crate combines all encoding and decoding functionality into a single unified module, without distinguishing between `Read`, `Write`, or `BufRead` traits",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7f4ba095-7cea552a-1751260709",
      "timestamp": "2025-06-30T05:18:29.738334+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]