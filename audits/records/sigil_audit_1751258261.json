[
  {
    "execution_id": "exec-fa2d26cb-96418432-1751258237",
    "timestamp": "2025-06-30T04:37:17.418436+00:00",
    "sacred_chain": {
      "input_data": "mockito",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'mockito' -> 'mockito'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "mockito",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/mockito",
            "title": "mockito v1.7.0",
            "content": {
              "raw_markdown": "#  mockito v1.7.0\nHTTP mocking for Rust. \n  * [ #http ](https://crates.io/keywords/http)\n  * [ #mock ](https://crates.io/keywords/mock)\n  * [ #mocks ](https://crates.io/keywords/mocks)\n  * [ #webmock ](https://crates.io/keywords/webmock)\n  * [ #webmocks ](https://crates.io/keywords/webmocks)\n\n\n  * [ Readme ](https://crates.io/crates/mockito)\n  * [ 75 Versions ](https://crates.io/crates/mockito/versions)\n  * [ Dependencies ](https://crates.io/crates/mockito/dependencies)\n  * [ Dependents ](https://crates.io/crates/mockito/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n41.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add mockito\nOr add the following line to your Cargo.toml:\nmockito = \"1.7.0\"\n## Documentation\n[ docs.rs/mockito ](https://docs.rs/mockito)\n## Repository\n[ github.com/lipanski/mockito ](https://github.com/lipanski/mockito)\n## Owners\n## Categories\n  * [Testing](https://crates.io/categories/development-tools::testing)\n  * [Web programming](https://crates.io/categories/web-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=mockito&inquire=crate-violation)\n### Stats Overview\n17,737,161 Downloads all time\n75 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  mockito v1.7.0\nHTTP mocking for Rust. \n  *  #http \u27e81\u27e9\n  *  #mock \u27e82\u27e9\n  *  #mocks \u27e83\u27e9\n  *  #webmock \u27e84\u27e9\n  *  #webmocks \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  75 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n4 months ago \nv1.70.0 \n MIT \u27e810\u27e9\n41.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add mockito\nOr add the following line to your Cargo.toml:\nmockito = \"1.7.0\"\n## Documentation\n docs.rs/mockito \u27e811\u27e9\n## Repository\n github.com/lipanski/mockito \u27e812\u27e9\n## Owners\n## Categories\n  * Testing\u27e813\u27e9\n  * Web programming\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n17,737,161 Downloads all time\n75 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/http:  #http \n\u27e82\u27e9 https://crates.io/keywords/mock:  #mock \n\u27e83\u27e9 https://crates.io/keywords/mocks:  #mocks \n\u27e84\u27e9 https://crates.io/keywords/webmock:  #webmock \n\u27e85\u27e9 https://crates.io/keywords/webmocks:  #webmocks \n\u27e86\u27e9 https://crates.io/crates/mockito:  Readme \n\u27e87\u27e9 https://crates.io/crates/mockito/versions:  75 Versions \n\u27e88\u27e9 https://crates.io/crates/mockito/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/mockito/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/mockito:  docs.rs/mockito \n\u27e812\u27e9 https://github.com/lipanski/mockito:  github.com/lipanski/mockito \n\u27e813\u27e9 https://crates.io/categories/development-tools::testing: Testing\n\u27e814\u27e9 https://crates.io/categories/web-programming: Web programming\n\u27e815\u27e9 https://crates.io/support?crate=mockito&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1357,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112026.8243609"
          },
          "docs_rs": {
            "url": "https://docs.rs/mockito",
            "title": "Crate mockitoCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\n[Settings](https://docs.rs/mockito/latest/settings.html)\n[Help](https://docs.rs/mockito/latest/help.html)\nSummary[Source](https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746)\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#features)Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#getting-started)Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#lifetime)Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\").\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#async)Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * [`Server::new_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async \"associated function mockito::Server::new_async\")\n  * [`Server::new_with_opts_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async \"associated function mockito::Server::new_with_opts_async\")\n  * [`Mock::create_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async \"method mockito::Mock::create_async\")\n  * [`Mock::assert_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async \"method mockito::Mock::assert_async\")\n  * [`Mock::matched_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async \"method mockito::Mock::matched_async\")\n  * [`Mock::remove_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async \"method mockito::Mock::remove_async\")\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#configuring-the-server)Configuring the server\nWhen calling [`Server::new()`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new \"associated function mockito::Server::new\"), a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use [`Server::new_with_opts`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts \"associated function mockito::Server::new_with_opts\"). The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call [`Mock::assert()`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matchers)Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") documentation for all the rest.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query)Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example)Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-1)Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-2)Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-query)Matching by query\nYou can match the query part by using the [`Mock::match_query`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query \"method mockito::Mock::match_query\") function together with the various matchers, most notably [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\"):\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-3)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\") should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a [`mock`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock \"method mockito::Server::mock\") call, in which case an exact match will be performed:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-4)Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-5)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-header)Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-6)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the [`Matcher::Regex`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex \"variant mockito::Matcher::Regex\") matcher:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-7)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-8)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Missing`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing \"variant mockito::Matcher::Missing\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-9)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-body)Matching by body\nYou can match a request by its body by using the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method. By default, the request body is ignored, similar to passing the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") argument to the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method.\nYou can match a body by an exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-10)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-11)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-12)Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use [`Matcher::JsonString`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString \"variant mockito::Matcher::JsonString\") the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-anyof-matcher)The `AnyOf` matcher\nThe [`Matcher::AnyOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf \"variant mockito::Matcher::AnyOf\") construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-13)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-allof-matcher)The `AllOf` matcher\nThe [`Matcher::AllOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf \"variant mockito::Matcher::AllOf\") construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-14)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#custom-matchers)Custom matchers\nIf you need a more custom matcher, you can use the [`Mock::match_request`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request \"method mockito::Mock::match_request\") function, which takes a closure and exposes the [`Request`](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\") object as an argument. The closure should return a boolean value.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-15)Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#asserts)Asserts\nYou can use the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-16)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-17)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the [`Mock::expect`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect \"method mockito::Mock::expect\") method to specify the exact amount of requests:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-18)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the [`Mock::expect_at_least`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least \"method mockito::Mock::expect_at_least\") and [`Mock::expect_at_most`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most \"method mockito::Mock::expect_at_most\") methods:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-19)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the [`Mock::matched`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched \"method mockito::Mock::matched\") method to return a boolean for whether the mock was called the correct number of times without panicking\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-20)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#non-matching-calls)Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#cleaning-up)Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call [`Server::reset`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset \"method mockito::Server::reset\") to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\") to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#debug)Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the [env_logger](https://crates.rs/crates/env_logger) crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs[\u00a7](https://docs.rs/mockito/latest/mockito/#structs)\n\n[Error](https://docs.rs/mockito/latest/mockito/struct.Error.html \"struct mockito::Error\")\n    Contains information about an error occurence\n\n[Mock](https://docs.rs/mockito/latest/mockito/struct.Mock.html \"struct mockito::Mock\")\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\n[Request](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\")\n    Stores a HTTP request\n\n[Server](https://docs.rs/mockito/latest/mockito/struct.Server.html \"struct mockito::Server\")\n    One instance of the mock server.\n\n[ServerGuard](https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html \"struct mockito::ServerGuard\")\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\n[ServerOpts](https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html \"struct mockito::ServerOpts\")\n    Options to configure a mock server. Provides a default implementation.\n## Enums[\u00a7](https://docs.rs/mockito/latest/mockito/#enums)\n\n[ErrorKind](https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html \"enum mockito::ErrorKind\")\n    The type of an error\n\n[Matcher](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\")\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits[\u00a7](https://docs.rs/mockito/latest/mockito/#traits)\n\n[IntoHeaderName](https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html \"trait mockito::IntoHeaderName\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## \u00a7\u27e84\u27e9Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## \u00a7\u27e85\u27e9Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf `Mock::assert`\u27e86\u27e9 fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png\u27e87\u27e9]\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## \u00a7\u27e88\u27e9Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling `Mock::remove`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * `Server::new_async`\u27e811\u27e9\n  * `Server::new_with_opts_async`\u27e812\u27e9\n  * `Mock::create_async`\u27e813\u27e9\n  * `Mock::assert_async`\u27e814\u27e9\n  * `Mock::matched_async`\u27e815\u27e9\n  * `Mock::remove_async`\u27e816\u27e9\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## \u00a7\u27e817\u27e9Configuring the server\nWhen calling `Server::new()`\u27e818\u27e9, a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use `Server::new_with_opts`\u27e819\u27e9. The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call `Mock::assert()`\u27e86\u27e9 before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## \u00a7\u27e820\u27e9Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the `Matcher`\u27e821\u27e9 type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the `Matcher`\u27e821\u27e9 documentation for all the rest.\n## \u00a7\u27e822\u27e9Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### \u00a7\u27e823\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### \u00a7\u27e824\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e826\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e827\u27e9Matching by query\nYou can match the query part by using the `Mock::match_query`\u27e828\u27e9 function together with the various matchers, most notably `Matcher::UrlEncoded`\u27e829\u27e9:\n### \u00a7\u27e830\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for `Matcher::UrlEncoded`\u27e829\u27e9 should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a `mock`\u27e831\u27e9 call, in which case an exact match will be performed:\n### \u00a7\u27e832\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e833\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e834\u27e9Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### \u00a7\u27e835\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the `Matcher::Regex`\u27e836\u27e9 matcher:\n### \u00a7\u27e837\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Any`\u27e825\u27e9.\n### \u00a7\u27e839\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Missing`\u27e840\u27e9.\n### \u00a7\u27e841\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## \u00a7\u27e842\u27e9Matching by body\nYou can match a request by its body by using the `Mock::match_body`\u27e843\u27e9 method. By default, the request body is ignored, similar to passing the `Matcher::Any`\u27e825\u27e9 argument to the `Mock::match_body`\u27e843\u27e9 method.\nYou can match a body by an exact value:\n### \u00a7\u27e844\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### \u00a7\u27e845\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### \u00a7\u27e846\u27e9Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use `Matcher::JsonString`\u27e847\u27e9 the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## \u00a7\u27e848\u27e9The `AnyOf` matcher\nThe `Matcher::AnyOf`\u27e849\u27e9 construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### \u00a7\u27e850\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e851\u27e9The `AllOf` matcher\nThe `Matcher::AllOf`\u27e852\u27e9 construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### \u00a7\u27e853\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e854\u27e9Custom matchers\nIf you need a more custom matcher, you can use the `Mock::match_request`\u27e855\u27e9 function, which takes a closure and exposes the `Request`\u27e856\u27e9 object as an argument. The closure should return a boolean value.\n### \u00a7\u27e857\u27e9Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## \u00a7\u27e858\u27e9Asserts\nYou can use the `Mock::assert`\u27e86\u27e9 method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### \u00a7\u27e859\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### \u00a7\u27e860\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the `Mock::expect`\u27e861\u27e9 method to specify the exact amount of requests:\n### \u00a7\u27e862\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the `Mock::expect_at_least`\u27e863\u27e9 and `Mock::expect_at_most`\u27e864\u27e9 methods:\n### \u00a7\u27e865\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the `Mock::assert`\u27e86\u27e9 method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png\u27e87\u27e9]\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a `Mock::assert`\u27e86\u27e9 error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the `Mock::matched`\u27e866\u27e9 method to return a boolean for whether the mock was called the correct number of times without panicking\n### \u00a7\u27e867\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## \u00a7\u27e868\u27e9Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## \u00a7\u27e869\u27e9Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call `Server::reset`\u27e870\u27e9 to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call `Mock::remove`\u27e89\u27e9 to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## \u00a7\u27e871\u27e9Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the env_logger\u27e872\u27e9 crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs\u00a7\u27e873\u27e9\n\nError\u27e874\u27e9\n    Contains information about an error occurence\n\nMock\u27e875\u27e9\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\nRequest\u27e856\u27e9\n    Stores a HTTP request\n\nServer\u27e876\u27e9\n    One instance of the mock server.\n\nServerGuard\u27e877\u27e9\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\nServerOpts\u27e878\u27e9\n    Options to configure a mock server. Provides a default implementation.\n## Enums\u00a7\u27e879\u27e9\n\nErrorKind\u27e880\u27e9\n    The type of an error\n\nMatcher\u27e821\u27e9\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits\u00a7\u27e881\u27e9\n\nIntoHeaderName\u27e882\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mockito/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mockito/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746: Source\n\u27e84\u27e9 https://docs.rs/mockito/latest/mockito/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/mockito/latest/mockito/#getting-started: \u00a7\n\u27e86\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert: method mockito::Mock::assert - `Mock::assert`\n\u27e87\u27e9 https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png: colored-diff.png\n\u27e88\u27e9 https://docs.rs/mockito/latest/mockito/#lifetime: \u00a7\n\u27e89\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove: method mockito::Mock::remove - `Mock::remove`\n\u27e810\u27e9 https://docs.rs/mockito/latest/mockito/#async: \u00a7\n\u27e811\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async: associated function mockito::Server::new_async - `Server::new_async`\n\u27e812\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async: associated function mockito::Server::new_with_opts_async - `Server::new_with_opts_async`\n\u27e813\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async: method mockito::Mock::create_async - `Mock::create_async`\n\u27e814\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async: method mockito::Mock::assert_async - `Mock::assert_async`\n\u27e815\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async: method mockito::Mock::matched_async - `Mock::matched_async`\n\u27e816\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async: method mockito::Mock::remove_async - `Mock::remove_async`\n\u27e817\u27e9 https://docs.rs/mockito/latest/mockito/#configuring-the-server: \u00a7\n\u27e818\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new: associated function mockito::Server::new - `Server::new()`\n\u27e819\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts: associated function mockito::Server::new_with_opts - `Server::new_with_opts`\n\u27e820\u27e9 https://docs.rs/mockito/latest/mockito/#matchers: \u00a7\n\u27e821\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html: enum mockito::Matcher - `Matcher`\n\u27e822\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query: \u00a7\n\u27e823\u27e9 https://docs.rs/mockito/latest/mockito/#example: \u00a7\n\u27e824\u27e9 https://docs.rs/mockito/latest/mockito/#example-1: \u00a7\n\u27e825\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any: variant mockito::Matcher::Any - `Matcher::Any`\n\u27e826\u27e9 https://docs.rs/mockito/latest/mockito/#example-2: \u00a7\n\u27e827\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-query: \u00a7\n\u27e828\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query: method mockito::Mock::match_query - `Mock::match_query`\n\u27e829\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded: variant mockito::Matcher::UrlEncoded - `Matcher::UrlEncoded`\n\u27e830\u27e9 https://docs.rs/mockito/latest/mockito/#example-3: \u00a7\n\u27e831\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock: method mockito::Server::mock - `mock`\n\u27e832\u27e9 https://docs.rs/mockito/latest/mockito/#example-4: \u00a7\n\u27e833\u27e9 https://docs.rs/mockito/latest/mockito/#example-5: \u00a7\n\u27e834\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-header: \u00a7\n\u27e835\u27e9 https://docs.rs/mockito/latest/mockito/#example-6: \u00a7\n\u27e836\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex: variant mockito::Matcher::Regex - `Matcher::Regex`\n\u27e837\u27e9 https://docs.rs/mockito/latest/mockito/#example-7: \u00a7\n\u27e838\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header: method mockito::Mock::match_header - `Mock::match_header`\n\u27e839\u27e9 https://docs.rs/mockito/latest/mockito/#example-8: \u00a7\n\u27e840\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing: variant mockito::Matcher::Missing - `Matcher::Missing`\n\u27e841\u27e9 https://docs.rs/mockito/latest/mockito/#example-9: \u00a7\n\u27e842\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-body: \u00a7\n\u27e843\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body: method mockito::Mock::match_body - `Mock::match_body`\n\u27e844\u27e9 https://docs.rs/mockito/latest/mockito/#example-10: \u00a7\n\u27e845\u27e9 https://docs.rs/mockito/latest/mockito/#example-11: \u00a7\n\u27e846\u27e9 https://docs.rs/mockito/latest/mockito/#example-12: \u00a7\n\u27e847\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString: variant mockito::Matcher::JsonString - `Matcher::JsonString`\n\u27e848\u27e9 https://docs.rs/mockito/latest/mockito/#the-anyof-matcher: \u00a7\n\u27e849\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf: variant mockito::Matcher::AnyOf - `Matcher::AnyOf`\n\u27e850\u27e9 https://docs.rs/mockito/latest/mockito/#example-13: \u00a7\n\u27e851\u27e9 https://docs.rs/mockito/latest/mockito/#the-allof-matcher: \u00a7\n\u27e852\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf: variant mockito::Matcher::AllOf - `Matcher::AllOf`\n\u27e853\u27e9 https://docs.rs/mockito/latest/mockito/#example-14: \u00a7\n\u27e854\u27e9 https://docs.rs/mockito/latest/mockito/#custom-matchers: \u00a7\n\u27e855\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request: method mockito::Mock::match_request - `Mock::match_request`\n\u27e856\u27e9 https://docs.rs/mockito/latest/mockito/struct.Request.html: struct mockito::Request - `Request`\n\u27e857\u27e9 https://docs.rs/mockito/latest/mockito/#example-15: \u00a7\n\u27e858\u27e9 https://docs.rs/mockito/latest/mockito/#asserts: \u00a7\n\u27e859\u27e9 https://docs.rs/mockito/latest/mockito/#example-16: \u00a7\n\u27e860\u27e9 https://docs.rs/mockito/latest/mockito/#example-17: \u00a7\n\u27e861\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect: method mockito::Mock::expect - `Mock::expect`\n\u27e862\u27e9 https://docs.rs/mockito/latest/mockito/#example-18: \u00a7\n\u27e863\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least: method mockito::Mock::expect_at_least - `Mock::expect_at_least`\n\u27e864\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most: method mockito::Mock::expect_at_most - `Mock::expect_at_most`\n\u27e865\u27e9 https://docs.rs/mockito/latest/mockito/#example-19: \u00a7\n\u27e866\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched: method mockito::Mock::matched - `Mock::matched`\n\u27e867\u27e9 https://docs.rs/mockito/latest/mockito/#example-20: \u00a7\n\u27e868\u27e9 https://docs.rs/mockito/latest/mockito/#non-matching-calls: \u00a7\n\u27e869\u27e9 https://docs.rs/mockito/latest/mockito/#cleaning-up: \u00a7\n\u27e870\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset: method mockito::Server::reset - `Server::reset`\n\u27e871\u27e9 https://docs.rs/mockito/latest/mockito/#debug: \u00a7\n\u27e872\u27e9 https://crates.rs/crates/env_logger: env_logger\n\u27e873\u27e9 https://docs.rs/mockito/latest/mockito/#structs: \u00a7\n\u27e874\u27e9 https://docs.rs/mockito/latest/mockito/struct.Error.html: struct mockito::Error - Error\n\u27e875\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html: struct mockito::Mock - Mock\n\u27e876\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html: struct mockito::Server - Server\n\u27e877\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html: struct mockito::ServerGuard - ServerGuard\n\u27e878\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html: struct mockito::ServerOpts - ServerOpts\n\u27e879\u27e9 https://docs.rs/mockito/latest/mockito/#enums: \u00a7\n\u27e880\u27e9 https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html: enum mockito::ErrorKind - ErrorKind\n\u27e881\u27e9 https://docs.rs/mockito/latest/mockito/#traits: \u00a7\n\u27e882\u27e9 https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html: trait mockito::IntoHeaderName - IntoHeaderName\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 27182,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112027.5724561"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/mockito",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [73 releases](https://lib.rs/crates/mockito/versions) (13 stable)\n1.7.0 |  Mar 4, 2025   \n---|---  \n1.6.1 |  Nov 13, 2024   \n1.5.0 |  Jul 31, 2024   \n1.4.0 |  Feb 28, 2024   \n0.1.4 |  Jan 11, 2016   \n#**3** in [Testing](https://lib.rs/development-tools/testing \"Crates to help you verify the correctness of your code.\")\nDownload history 709225/week @ 2025-03-06 597953/week @ 2025-03-13 1283604/week @ 2025-03-20 462108/week @ 2025-03-27 490636/week @ 2025-04-03 428862/week @ 2025-04-10 264592/week @ 2025-04-17 260744/week @ 2025-04-24 281557/week @ 2025-05-01 350981/week @ 2025-05-08 328317/week @ 2025-05-15 304506/week @ 2025-05-22 313041/week @ 2025-05-29 265220/week @ 2025-06-05 371709/week @ 2025-06-12 323667/week @ 2025-06-19\n**1,341,907** downloads per month Used in [**567** crates (560 directly)](https://lib.rs/crates/mockito/rev)\n**MIT** license \n100KB  1.5K  SLoC\n![](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/lipanski/mockito/master/docs/logo-black.png)\n[![](https://img.gs/czjpqfbdkz/full/https://docs.rs/mockito/badge.svg)](https://docs.rs/mockito) [![](https://img.shields.io/crates/v/mockito.svg)](https://crates.io/crates/mockito) ![](https://img.shields.io/badge/rust%20version-%3E%3D1.70.0-orange) [![](https://img.shields.io/crates/d/mockito)](https://crates.io/crates/mockito) [![](https://img.gs/czjpqfbdkz/full/https://github.com/lipanski/mockito/actions/workflows/tests.yml/badge.svg?branch=master)](https://github.com/lipanski/mockito/actions/workflows/tests.yml/?branch=master)\n_HTTP mocking for Rust!_\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\nThe full documentation is available at <https://docs.rs/mockito>.\nBefore upgrading, make sure to check out the [changelog](https://github.com/lipanski/mockito/releases).\n## Getting Started\nAdd ``mockito`` to your ``Cargo.toml`` and start mocking:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  ``//` Request a new server from the pool`\n  `let` `mut` server `=` `mockito`::```Server`::``new`(``)``;`\n  ``//` Use one of these addresses to configure your client`\n  `let` host `=` server`.``host_with_port``(``)``;`\n  `let` url `=` server`.``url``(``)``;`\n  ``//` Create a mock`\n  `let` mock `=` server`.``mock``(```\"`GET`\"```,` ``\"`/hello`\"```)`\n   `.``with_status``(``201``)`\n   `.``with_header``(```\"`content-type`\"```,` ``\"`text/plain`\"```)`\n   `.``with_header``(```\"`x-api-key`\"```,` ``\"`1234`\"```)`\n   `.``with_body``(```\"`world`\"```)`\n   `.``create``(``)``;`\n  ``//` Any calls to GET /hello beyond this line will respond with 201, the`\n  ``//` `content-type: text/plain` header and the body \"world\".`\n  ``//` You can use `Mock::assert` to verify that your mock was called`\n  mock`.``assert``(``)``;`\n```}```\n`\n```\n\nIf ```Mock`::``assert`` fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  `let` `mut` server `=` `mockito`::```Server`::``new`(``)``;`\n  server`.``mock``(```\"`GET`\"```,` ``\"`/greetings`\"```)`\n   `.``match_header``(```\"`content-type`\"```,` ``\"`application/json`\"```)`\n   `.``match_body``(``mockito`::```Matcher`::``PartialJsonString`(`\n     ``\"`{`\\\"`greeting`\\\"`: `\\\"`hello`\\\"`}`\"```.``to_string``(``)``,`\n   `)``)`\n   `.``with_body``(```\"`hello json`\"```)`\n   `.``create``(``)``;`\n  server`.``mock``(```\"`GET`\"```,` ``\"`/greetings`\"```)`\n   `.``match_header``(```\"`content-type`\"```,` ``\"`application/text`\"```)`\n   `.``match_body``(``mockito`::```Matcher`::``Regex`(```\"`greeting=hello`\"```.``to_string``(``)``)``)`\n   `.``with_body``(```\"`hello text`\"```)`\n   `.``create``(``)``;`\n```}```\n`\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  `let` `mut` twitter `=` `mockito`::```Server`::``new`(``)``;`\n  `let` `mut` github `=` `mockito`::```Server`::``new`(``)``;`\n  ``//` These mocks will be available at `twitter.url()``\n  `let` twitter_mock `=` twitter`.``mock``(```\"`GET`\"```,` ``\"`/api`\"```)``.``create``(``)``;`\n  ``//` These mocks will be available at `github.url()``\n  `let` github_mock `=` github`.``mock``(```\"`GET`\"```,` ``\"`/api`\"```)``.``create``(``)``;`\n```}```\n`\n```\n\nWrite **async** tests (make sure to use the ``_async`` methods!):\n```\n```#``[``tokio`::`test``]``\nasync ``fn` `test_simple_route_mock_async`````(````)``````{`\n  `let` `mut` server `=` `Server`::``new_async`(``)``.`await`;`\n  `let` m1 `=` server`.``mock``(```\"`GET`\"```,` ``\"`/a`\"```)``.``with_body``(```\"`aaa`\"```)``.``create_async``(``)``.`await`;`\n  `let` m2 `=` server`.``mock``(```\"`GET`\"```,` ``\"`/b`\"```)``.``with_body``(```\"`bbb`\"```)``.``create_async``(``)``.`await`;`\n  `let` `(`m1`,` m2`)` `=` `futures`::``join`!``(`m1`,` m2`)``;`\n  ``//` You can use `Mock::assert_async` to verify that your mock was called`\n  ``//` m1.assert_async().await;`\n  ``//` m2.assert_async().await;`\n```}```\n`\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\n```fn` `main`````(````)``````{`\n  `let` opts `=` `mockito`::``ServerOpts `{`\n    host`:` ``\"`0.0.0.0`\"```,`\n    port`:` `1234``,`\n    `..``Default```::``default`(``)`\n  `}``;`\n  `let` `mut` server `=` `mockito`::```Server`::``new_with_opts`(`opts`)``;`\n  `let` _m `=` server`.``mock``(```\"`GET`\"```,` ``\"`/`\"```)``.``with_body``(```\"`hello world`\"```)``.``create``(``)``;`\n  `loop` `{``}`\n```}```\n`\n```\n\n## Minimum supported Rust toolchain\nThe current minimum support Rust toolchain is **1.70.0**\n## Contribution Guidelines\n  1. Check the existing issues and pull requests.\n  2. One commit is one feature - consider squashing.\n  3. Format code with ````cargo``` fmt```.\n  4. :shipit:\n\n\n## Development\n### Tests\nRun tests:\n```\n```cargo``` test`\n`\n```\n\n...or run tests using a different toolchain:\n```\n```rustup``` run`` --`install` 1.70.0 cargo test`\n`\n```\n\n...or run tests while disabling the default features (e.g. the colors):\n```\n```cargo``` test`` --`no-default-features``\n`\n```\n\n### Code style\nMockito uses [rustfmt](https://github.com/rust-lang/rustfmt) as a general code style.\nInstall ``rustfmt``:\n```\n```rustup``` component add rustfmt`\n`\n```\n\nFormat code:\n```\n```cargo``` fmt`\n`\n```\n\nSome editors might provide a plugin to format your Rust code automatically.\n### Linter\nMockito uses [clippy](https://github.com/rust-lang/rust-clippy) and it should be run always on the minimum supported Rust version, in order to ensure backwards compatibility.\nInstall ``clippy``:\n```\n```rustup``` component add clippy`\n`\n```\n\nThe linter is always run on the minimum supported Rust version:\n```\n```rustup``` run`` --`install` 1.70.0 cargo clippy-mockito`\n`\n```\n\n### Release\nRelease:\n```\n```cargo``` publish`\n`\n```\n\n### Benchmarks\nInstall ``rust nightly``:\n```\n```rustup``` install nightly`\n`\n```\n\nRun benchmarks:\n```\n```rustup``` run nightly cargo bench`\n`\n```\n\n#### Dependencies\n~7\u201317MB  ~224K SLoC\n  * [assert-json-diff](https://lib.rs/crates/assert-json-diff \"2.0\")\n  * [bytes](https://lib.rs/crates/bytes \"1\")\n  * [color](https://lib.rs/crates/mockito/features#feature-color \"default feature\") [colored](https://lib.rs/crates/colored \">=2.0, <=3\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3\")\n  * [http](https://lib.rs/crates/http \"new\") 1.0\n  * [http-body](https://lib.rs/crates/http-body \"new\") 1.0\n  * [http-body-util](https://lib.rs/crates/http-body-util \"0.1\")\n  * [hyper](https://lib.rs/crates/hyper \"new\") 1.0\n  * [hyper-util](https://lib.rs/crates/hyper-util \"0.1\")[+server-auto](https://lib.rs/crates/hyper-util/features#feature-server-auto)[+tokio](https://lib.rs/crates/hyper-util/features#feature-tokio)\n  * [log](https://lib.rs/crates/log \"0.4\")\n  * [rand](https://lib.rs/crates/rand \"new\") 0.9\n  * [regex](https://lib.rs/crates/regex \"1.7\")\n  * [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * [serde_urlencoded](https://lib.rs/crates/serde_urlencoded \"0.7\")\n  * [similar](https://lib.rs/crates/similar \"2.2\")\n  * [tokio](https://lib.rs/crates/tokio \"1.25\")[+net](https://lib.rs/crates/tokio/features#feature-net)[+rt](https://lib.rs/crates/tokio/features#feature-rt)[+sync](https://lib.rs/crates/tokio/features#feature-sync)\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.8\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")[+alloc](https://lib.rs/crates/futures/features#feature-alloc)[+async-await](https://lib.rs/crates/futures/features#feature-async-await)\n  * dev  [reqwest](https://lib.rs/crates/reqwest \"new\") 0.12[+http2](https://lib.rs/crates/reqwest/features#feature-http2)\n  * dev  [testing_logger](https://lib.rs/crates/testing_logger \"0.1\")\n\n\n#### [Other feature](https://lib.rs/crates/mockito/features)\n  * [parking_lot](https://lib.rs/crates/mockito/features#feature-parking_lot)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  73 releases\u27e81\u27e9 (13 stable)\n1.7.0 |  Mar 4, 2025   \n---|---  \n1.6.1 |  Nov 13, 2024   \n1.5.0 |  Jul 31, 2024   \n1.4.0 |  Feb 28, 2024   \n0.1.4 |  Jan 11, 2016   \n#**3** in Testing\u27e82\u27e9\nDownload history 709225/week @ 2025-03-06 597953/week @ 2025-03-13 1283604/week @ 2025-03-20 462108/week @ 2025-03-27 490636/week @ 2025-04-03 428862/week @ 2025-04-10 264592/week @ 2025-04-17 260744/week @ 2025-04-24 281557/week @ 2025-05-01 350981/week @ 2025-05-08 328317/week @ 2025-05-15 304506/week @ 2025-05-22 313041/week @ 2025-05-29 265220/week @ 2025-06-05 371709/week @ 2025-06-12 323667/week @ 2025-06-19\n**1,341,907** downloads per month Used in **567** crates (560 directly)\u27e83\u27e9\n**MIT** license \n100KB  1.5K  SLoC\n![](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/lipanski/mockito/master/docs/logo-black.png)\n![\u27e84\u27e9](https://docs.rs/mockito) ![\u27e85\u27e9](https://crates.io/crates/mockito) ![](https://img.shields.io/badge/rust%20version-%3E%3D1.70.0-orange) ![\u27e86\u27e9](https://crates.io/crates/mockito) ![\u27e87\u27e9](https://github.com/lipanski/mockito/actions/workflows/tests.yml/?branch=master)\n_HTTP mocking for Rust!_\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\nThe full documentation is available at <https://docs.rs/mockito>.\nBefore upgrading, make sure to check out the changelog\u27e88\u27e9.\n## Getting Started\nAdd ``mockito`` to your ``Cargo.toml`` and start mocking:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  ``//` Request a new server from the pool`\n  `let` `mut` server `=` `mockito`::```Server`::``new`(``)``;`\n  ``//` Use one of these addresses to configure your client`\n  `let` host `=` server`.``host_with_port``(``)``;`\n  `let` url `=` server`.``url``(``)``;`\n  ``//` Create a mock`\n  `let` mock `=` server`.``mock``(```\"`GET`\"```,` ``\"`/hello`\"```)`\n   `.``with_status``(``201``)`\n   `.``with_header``(```\"`content-type`\"```,` ``\"`text/plain`\"```)`\n   `.``with_header``(```\"`x-api-key`\"```,` ``\"`1234`\"```)`\n   `.``with_body``(```\"`world`\"```)`\n   `.``create``(``)``;`\n  ``//` Any calls to GET /hello beyond this line will respond with 201, the`\n  ``//` `content-type: text/plain` header and the body \"world\".`\n  ``//` You can use `Mock::assert` to verify that your mock was called`\n  mock`.``assert``(``)``;`\n```}```\n`\n```\n\nIf ```Mock`::``assert`` fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png\u27e89\u27e9]\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  `let` `mut` server `=` `mockito`::```Server`::``new`(``)``;`\n  server`.``mock``(```\"`GET`\"```,` ``\"`/greetings`\"```)`\n   `.``match_header``(```\"`content-type`\"```,` ``\"`application/json`\"```)`\n   `.``match_body``(``mockito`::```Matcher`::``PartialJsonString`(`\n     ``\"`{`\\\"`greeting`\\\"`: `\\\"`hello`\\\"`}`\"```.``to_string``(``)``,`\n   `)``)`\n   `.``with_body``(```\"`hello json`\"```)`\n   `.``create``(``)``;`\n  server`.``mock``(```\"`GET`\"```,` ``\"`/greetings`\"```)`\n   `.``match_header``(```\"`content-type`\"```,` ``\"`application/text`\"```)`\n   `.``match_body``(``mockito`::```Matcher`::``Regex`(```\"`greeting=hello`\"```.``to_string``(``)``)``)`\n   `.``with_body``(```\"`hello text`\"```)`\n   `.``create``(``)``;`\n```}```\n`\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n```#``[``test``]``\n``fn` `test_something`````(````)``````{`\n  `let` `mut` twitter `=` `mockito`::```Server`::``new`(``)``;`\n  `let` `mut` github `=` `mockito`::```Server`::``new`(``)``;`\n  ``//` These mocks will be available at `twitter.url()``\n  `let` twitter_mock `=` twitter`.``mock``(```\"`GET`\"```,` ``\"`/api`\"```)``.``create``(``)``;`\n  ``//` These mocks will be available at `github.url()``\n  `let` github_mock `=` github`.``mock``(```\"`GET`\"```,` ``\"`/api`\"```)``.``create``(``)``;`\n```}```\n`\n```\n\nWrite **async** tests (make sure to use the ``_async`` methods!):\n```\n```#``[``tokio`::`test``]``\nasync ``fn` `test_simple_route_mock_async`````(````)``````{`\n  `let` `mut` server `=` `Server`::``new_async`(``)``.`await`;`\n  `let` m1 `=` server`.``mock``(```\"`GET`\"```,` ``\"`/a`\"```)``.``with_body``(```\"`aaa`\"```)``.``create_async``(``)``.`await`;`\n  `let` m2 `=` server`.``mock``(```\"`GET`\"```,` ``\"`/b`\"```)``.``with_body``(```\"`bbb`\"```)``.``create_async``(``)``.`await`;`\n  `let` `(`m1`,` m2`)` `=` `futures`::``join`!``(`m1`,` m2`)``;`\n  ``//` You can use `Mock::assert_async` to verify that your mock was called`\n  ``//` m1.assert_async().await;`\n  ``//` m2.assert_async().await;`\n```}```\n`\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\n```fn` `main`````(````)``````{`\n  `let` opts `=` `mockito`::``ServerOpts `{`\n    host`:` ``\"`0.0.0.0`\"```,`\n    port`:` `1234``,`\n    `..``Default```::``default`(``)`\n  `}``;`\n  `let` `mut` server `=` `mockito`::```Server`::``new_with_opts`(`opts`)``;`\n  `let` _m `=` server`.``mock``(```\"`GET`\"```,` ``\"`/`\"```)``.``with_body``(```\"`hello world`\"```)``.``create``(``)``;`\n  `loop` `{``}`\n```}```\n`\n```\n\n## Minimum supported Rust toolchain\nThe current minimum support Rust toolchain is **1.70.0**\n## Contribution Guidelines\n  1. Check the existing issues and pull requests.\n  2. One commit is one feature - consider squashing.\n  3. Format code with ````cargo``` fmt```.\n  4. :shipit:\n\n\n## Development\n### Tests\nRun tests:\n```\n```cargo``` test`\n`\n```\n\n...or run tests using a different toolchain:\n```\n```rustup``` run`` --`install` 1.70.0 cargo test`\n`\n```\n\n...or run tests while disabling the default features (e.g. the colors):\n```\n```cargo``` test`` --`no-default-features``\n`\n```\n\n### Code style\nMockito uses rustfmt\u27e810\u27e9 as a general code style.\nInstall ``rustfmt``:\n```\n```rustup``` component add rustfmt`\n`\n```\n\nFormat code:\n```\n```cargo``` fmt`\n`\n```\n\nSome editors might provide a plugin to format your Rust code automatically.\n### Linter\nMockito uses clippy\u27e811\u27e9 and it should be run always on the minimum supported Rust version, in order to ensure backwards compatibility.\nInstall ``clippy``:\n```\n```rustup``` component add clippy`\n`\n```\n\nThe linter is always run on the minimum supported Rust version:\n```\n```rustup``` run`` --`install` 1.70.0 cargo clippy-mockito`\n`\n```\n\n### Release\nRelease:\n```\n```cargo``` publish`\n`\n```\n\n### Benchmarks\nInstall ``rust nightly``:\n```\n```rustup``` install nightly`\n`\n```\n\nRun benchmarks:\n```\n```rustup``` run nightly cargo bench`\n`\n```\n\n#### Dependencies\n~7\u201317MB  ~224K SLoC\n  * assert-json-diff\u27e812\u27e9\n  * bytes\u27e813\u27e9\n  * color\u27e814\u27e9 colored\u27e815\u27e9\n  * futures-util\u27e816\u27e9\n  * http\u27e817\u27e9 1.0\n  * http-body\u27e818\u27e9 1.0\n  * http-body-util\u27e819\u27e9\n  * hyper\u27e820\u27e9 1.0\n  * hyper-util\u27e821\u27e9+server-auto\u27e822\u27e9+tokio\u27e823\u27e9\n  * log\u27e824\u27e9\n  * rand\u27e825\u27e9 0.9\n  * regex\u27e826\u27e9\n  * serde_json\u27e827\u27e9\n  * serde_urlencoded\u27e828\u27e9\n  * similar\u27e829\u27e9\n  * tokio\u27e830\u27e9+net\u27e831\u27e9+rt\u27e832\u27e9+sync\u27e833\u27e9\n\n\n  * dev  env_logger\u27e834\u27e9 0.8\n  * dev  futures\u27e835\u27e9+alloc\u27e836\u27e9+async-await\u27e837\u27e9\n  * dev  reqwest\u27e838\u27e9 0.12+http2\u27e839\u27e9\n  * dev  testing_logger\u27e840\u27e9\n\n\n#### Other feature\u27e841\u27e9\n  * parking_lot\u27e842\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/mockito/versions: 73 releases\n\u27e82\u27e9 https://lib.rs/development-tools/testing: Crates to help you verify the correctness of your code. - Testing\n\u27e83\u27e9 https://lib.rs/crates/mockito/rev: **567** crates (560 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/mockito/badge.svg: ![\n\u27e85\u27e9 https://img.shields.io/crates/v/mockito.svg: ![\n\u27e86\u27e9 https://img.shields.io/crates/d/mockito: ![\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/lipanski/mockito/actions/workflows/tests.yml/badge.svg?branch=master: ![\n\u27e88\u27e9 https://github.com/lipanski/mockito/releases: changelog\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png: colored-diff.png\n\u27e810\u27e9 https://github.com/rust-lang/rustfmt: rustfmt\n\u27e811\u27e9 https://github.com/rust-lang/rust-clippy: clippy\n\u27e812\u27e9 https://lib.rs/crates/assert-json-diff: 2.0 - assert-json-diff\n\u27e813\u27e9 https://lib.rs/crates/bytes: 1 - bytes\n\u27e814\u27e9 https://lib.rs/crates/mockito/features#feature-color: default feature - color\n\u27e815\u27e9 https://lib.rs/crates/colored: >=2.0, <=3 - colored\n\u27e816\u27e9 https://lib.rs/crates/futures-util: 0.3 - futures-util\n\u27e817\u27e9 https://lib.rs/crates/http: new - http\n\u27e818\u27e9 https://lib.rs/crates/http-body: new - http-body\n\u27e819\u27e9 https://lib.rs/crates/http-body-util: 0.1 - http-body-util\n\u27e820\u27e9 https://lib.rs/crates/hyper: new - hyper\n\u27e821\u27e9 https://lib.rs/crates/hyper-util: 0.1 - hyper-util\n\u27e822\u27e9 https://lib.rs/crates/hyper-util/features#feature-server-auto: +server-auto\n\u27e823\u27e9 https://lib.rs/crates/hyper-util/features#feature-tokio: +tokio\n\u27e824\u27e9 https://lib.rs/crates/log: 0.4 - log\n\u27e825\u27e9 https://lib.rs/crates/rand: new - rand\n\u27e826\u27e9 https://lib.rs/crates/regex: 1.7 - regex\n\u27e827\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e828\u27e9 https://lib.rs/crates/serde_urlencoded: 0.7 - serde_urlencoded\n\u27e829\u27e9 https://lib.rs/crates/similar: 2.2 - similar\n\u27e830\u27e9 https://lib.rs/crates/tokio: 1.25 - tokio\n\u27e831\u27e9 https://lib.rs/crates/tokio/features#feature-net: +net\n\u27e832\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e833\u27e9 https://lib.rs/crates/tokio/features#feature-sync: +sync\n\u27e834\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e835\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e836\u27e9 https://lib.rs/crates/futures/features#feature-alloc: +alloc\n\u27e837\u27e9 https://lib.rs/crates/futures/features#feature-async-await: +async-await\n\u27e838\u27e9 https://lib.rs/crates/reqwest: new - reqwest\n\u27e839\u27e9 https://lib.rs/crates/reqwest/features#feature-http2: +http2\n\u27e840\u27e9 https://lib.rs/crates/testing_logger: 0.1 - testing_logger\n\u27e841\u27e9 https://lib.rs/crates/mockito/features: Other feature\n\u27e842\u27e9 https://lib.rs/crates/mockito/features#feature-parking_lot: parking_lot\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9547,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112028.4667359"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpin_project_lite-4dd5ab2ce21e5adf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "scopeguard",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libscopeguard-b3036dac4c63d524.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libitoa-2b4f224e85766f32.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libequivalent-1ddcc1c34f146777.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const_generics",
                "const_new"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsmallvec-a5e663bcba0fc4dc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-9bebb3e3f19c72a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-9bebb3e3f19c72a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libonce_cell-ac0a519ea1a3af5e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d5c5d8464ce9ae9b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d5c5d8464ce9ae9b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-e8eac007df3a6e24\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-e8eac007df3a6e24\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-5b13388063092b47\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-5b13388063092b47\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-03bf3ee88a3ba8a7\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-78fc9cd4a3c1b103\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-78fc9cd4a3c1b103\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_sink-d59be8a6d7156360.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-8d80ee837e47c1a2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-8d80ee837e47c1a2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-6b8f76506c86e015\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-cfe20e089096aeab\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-cfe20e089096aeab\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d7c2e27661a92962\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-4108150d15af3a80\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-4108150d15af3a80\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-61bebbb3989fde64\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.5.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libbytes-0c9a341ee58c240b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-ae461c4407b3a2a6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-ae461c4407b3a2a6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-4cf14f5845d7a750\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-1fd4ff78575b87cc\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-1fd4ff78575b87cc\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-ddab7bef78fa2bc5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_core-4ae4a6c8eeaec390.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-a298aa333779b6ba\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtracing_core-8e2be4125c3341ff.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_x86_64_msvc-0ea20938a44bbe52.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-7c78cb354d873bcb\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_x86_64_msvc-d98557204546c3c7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-d0aa9f758d0c79f3\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_task-4127e06f33455eef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "httparse_simd"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-06dc8a2502dd8024\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "atomic_usize",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-c00659de313746b7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-c00659de313746b7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-ca8088bfebbed5b0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.48.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_targets-190fe36ef27a1046.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libatomic_waker-51a570a3292c2eef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_targets-f7a43448bc9437d9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhashbrown-48982c59adb56e95.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libryu-0f6bb4241d9e5976.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_const_fn_trait_bound"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-9727c8dcd870e60b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtracing-cb30b200e8819b51.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-df3332623c063270\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-df3332623c063270\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttparse-d755b9be217e699e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_channel-6d980304881de4d5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpercent_encoding-cab74a3e2b4b729a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "limb_width_64"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-ef047635a056cc63\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httpdate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttpdate-77358cb654aeba2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libgetrandom-33b86b45079064a5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking_lot_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libparking_lot_core-8e7a1f6c3d55aab1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libform_urlencoded-13dd6c3f9aa1dc73.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lock_api",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "atomic_usize",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblock_api-5712fd87ef75578d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.6.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.6.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.6.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmemchr-5f0c063f36850f0f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.20\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblog-8cf7092aa24f72c2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp-0cebca6500a16eb6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking_lot",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libparking_lot-ffa9bc7225660d31.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libppv_lite86-59bfe049a7a32fed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp_body-3e50a11637733c26.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.2.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libindexmap-ff7c9b232e4458c0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#similar@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\similar-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "similar",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\similar-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "text"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsimilar-2aeb928c522c103b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libzerocopy-4b0b24539bb7a292.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aho_corasick",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "perf-literal",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libaho_corasick-5a9047a04641cf02.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_util-37f0a720b2602008.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand_core-d0873a00ba65816c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand_chacha-8fb33cdafd72c2ac.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp_body_util-7f1682e26203db3c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.48.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_System_IO",
                "Win32_System_Pipes",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_sys-cc042e629c951687.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "is_terminal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libis_terminal-87eaeda3ac209d37.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde-0c1168983920e9aa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex_syntax-f345950dc6e4b3b3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "socket2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "all"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsocket2-b60198e0905e011b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#colored@2.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\colored-2.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\colored-2.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libcolored-f73be2931db3a2fe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde_urlencoded-c64cf9723d4e307d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mio@0.8.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-0.8.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-0.8.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "net",
                "os-ext",
                "os-poll"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmio-c38bff36eeeb7609.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "os_rng",
                "small_rng",
                "std",
                "std_rng",
                "thread_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand-1a31995b98980409.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde_json-bee54e8c028acfa3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#assert-json-diff@2.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\assert-json-diff-2.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "assert_json_diff",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\assert-json-diff-2.0.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libassert_json_diff-42a08965ee4381fa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "dfa-onepass",
                "hybrid",
                "meta",
                "nfa-backtrack",
                "nfa-pikevm",
                "nfa-thompson",
                "perf-inline",
                "perf-literal",
                "perf-literal-multisubstring",
                "perf-literal-substring",
                "std",
                "syntax",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment",
                "unicode-word-boundary"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex_automata-2cb4c1861f2fa037.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@1.10.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "perf",
                "perf-backtrack",
                "perf-cache",
                "perf-dfa",
                "perf-inline",
                "perf-literal",
                "perf-onepass",
                "std",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex-6cdfc443ae286112.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.34.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bytes",
                "default",
                "io-util",
                "libc",
                "mio",
                "net",
                "parking_lot",
                "rt",
                "socket2",
                "sync",
                "time",
                "windows-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtokio-32d8c7df36f3f415.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "codec",
                "default",
                "io",
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtokio_util-a50901cad0c02e4f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#h2@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\h2-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "h2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\h2-0.4.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libh2-e8c5bb884df0e8af.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "http2",
                "server"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhyper-b7a8ce6cd5d4f0c7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "http2",
                "server",
                "server-auto",
                "tokio"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhyper_util-ec3f3f3942150546.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "color",
                "colored",
                "default",
                "parking_lot"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmockito-d82456b0bc3db41d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-c891fe87d5045004\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-6b8f76506c86e015\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-9bebb3e3f19c72a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-9bebb3e3f19c72a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libitoa-2b4f224e85766f32.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-5b13388063092b47\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-5b13388063092b47\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.5.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libbytes-0c9a341ee58c240b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpin_project_lite-4dd5ab2ce21e5adf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "scopeguard",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libscopeguard-b3036dac4c63d524.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const_generics",
                "const_new"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsmallvec-a5e663bcba0fc4dc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-e8eac007df3a6e24\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-e8eac007df3a6e24\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d5c5d8464ce9ae9b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d5c5d8464ce9ae9b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libonce_cell-ac0a519ea1a3af5e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-8d80ee837e47c1a2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-8d80ee837e47c1a2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-78fc9cd4a3c1b103\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-78fc9cd4a3c1b103\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_x86_64_msvc-0ea20938a44bbe52.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "atomic_usize",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-c00659de313746b7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-c00659de313746b7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-core-03bf3ee88a3ba8a7\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\parking_lot_core-4cf14f5845d7a750\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\windows_x86_64_msvc-61bebbb3989fde64\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-task-d7c2e27661a92962\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtracing_core-8e2be4125c3341ff.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp-0cebca6500a16eb6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-cfe20e089096aeab\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-cfe20e089096aeab\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-1fd4ff78575b87cc\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-1fd4ff78575b87cc\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-util-a298aa333779b6ba\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\getrandom-ddab7bef78fa2bc5\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhashbrown-48982c59adb56e95.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-ae461c4407b3a2a6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-ae461c4407b3a2a6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libequivalent-1ddcc1c34f146777.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.48.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.48.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.48.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_targets-190fe36ef27a1046.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "has_const_fn_trait_bound"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\lock_api-9727c8dcd870e60b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_core-4ae4a6c8eeaec390.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_x86_64_msvc-d98557204546c3c7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_task-4127e06f33455eef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde-7c78cb354d873bcb\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtracing-cb30b200e8819b51.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\zerocopy-ca8088bfebbed5b0\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-4108150d15af3a80\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-4108150d15af3a80\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_sink-d59be8a6d7156360.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.2.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.2.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.2.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libindexmap-ff7c9b232e4458c0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp_body-3e50a11637733c26.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\futures-channel-d0aa9f758d0c79f3\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.6.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.6.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.6.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmemchr-5f0c063f36850f0f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.48.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_System_IO",
                "Win32_System_Pipes",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_sys-cc042e629c951687.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking_lot_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot_core-0.9.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libparking_lot_core-8e7a1f6c3d55aab1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lock_api",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.4.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "atomic_usize",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblock_api-5712fd87ef75578d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libwindows_targets-f7a43448bc9437d9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_util-37f0a720b2602008.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.17\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libzerocopy-4b0b24539bb7a292.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "httparse_simd"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\httparse-06dc8a2502dd8024\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.192",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.192\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde-0c1168983920e9aa.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libatomic_waker-51a570a3292c2eef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libryu-0f6bb4241d9e5976.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-df3332623c063270\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-df3332623c063270\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libfutures_channel-6d980304881de4d5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "aho_corasick",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aho-corasick-1.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "perf-literal",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libaho_corasick-5a9047a04641cf02.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libppv_lite86-59bfe049a7a32fed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex_syntax-f345950dc6e4b3b3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mio@0.8.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-0.8.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-0.8.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "net",
                "os-ext",
                "os-poll"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmio-c38bff36eeeb7609.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "socket2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "all"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsocket2-b60198e0905e011b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking_lot",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking_lot-0.12.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libparking_lot-ffa9bc7225660d31.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libgetrandom-33b86b45079064a5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "limb_width_64"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\build\\serde_json-ef047635a056cc63\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttparse-d755b9be217e699e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httpdate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttpdate-77358cb654aeba2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libpercent_encoding-cab74a3e2b4b729a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "dfa-onepass",
                "hybrid",
                "meta",
                "nfa-backtrack",
                "nfa-pikevm",
                "nfa-thompson",
                "perf-inline",
                "perf-literal",
                "perf-literal-multisubstring",
                "perf-literal-substring",
                "std",
                "syntax",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment",
                "unicode-word-boundary"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex_automata-2cb4c1861f2fa037.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "is_terminal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\is-terminal-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libis_terminal-87eaeda3ac209d37.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhttp_body_util-7f1682e26203db3c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#similar@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\similar-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "similar",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\similar-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "text"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libsimilar-2aeb928c522c103b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.20\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\liblog-8cf7092aa24f72c2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.34.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "bytes",
                "default",
                "io-util",
                "libc",
                "mio",
                "net",
                "parking_lot",
                "rt",
                "socket2",
                "sync",
                "time",
                "windows-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtokio-32d8c7df36f3f415.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand_core-d0873a00ba65816c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libform_urlencoded-13dd6c3f9aa1dc73.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.108",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.108\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde_json-bee54e8c028acfa3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#colored@2.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\colored-2.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\colored-2.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libcolored-f73be2931db3a2fe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@1.10.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "perf",
                "perf-backtrack",
                "perf-cache",
                "perf-dfa",
                "perf-inline",
                "perf-literal",
                "perf-onepass",
                "std",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libregex-6cdfc443ae286112.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "codec",
                "default",
                "io",
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libtokio_util-a50901cad0c02e4f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand_chacha-8fb33cdafd72c2ac.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libserde_urlencoded-c64cf9723d4e307d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#assert-json-diff@2.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\assert-json-diff-2.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "assert_json_diff",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\assert-json-diff-2.0.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libassert_json_diff-42a08965ee4381fa.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#h2@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\h2-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "h2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\h2-0.4.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libh2-e8c5bb884df0e8af.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "os_rng",
                "small_rng",
                "std",
                "std_rng",
                "thread_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\librand-1a31995b98980409.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "http2",
                "server"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhyper-b7a8ce6cd5d4f0c7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "http2",
                "server",
                "server-auto",
                "tokio"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libhyper_util-ec3f3f3942150546.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: needless `fn main` in doctest\n   --> src\\lib.rs:128:5\n    |\n128 |   //! fn main() {\n    |  _____^\n129 | | //!     let opts = mockito::ServerOpts {\n130 | | //!         host: \"0.0.0.0\",\n131 | | //!         port: 1234,\n...   |\n138 | | //!     // loop {}\n139 | | //! }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n    = note: `#[warn(clippy::needless_doctest_main)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_doctest_main)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::needless_doctest_main",
                  "explanation": null
                },
                "level": "warning",
                "message": "needless `fn main` in doctest",
                "spans": [
                  {
                    "byte_end": 4283,
                    "byte_start": 3962,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 139,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 5,
                        "text": "//! fn main() {"
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "//!     let opts = mockito::ServerOpts {"
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "//!         host: \"0.0.0.0\","
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "//!         port: 1234,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "//!         ..Default::default()"
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "//!     };"
                      },
                      {
                        "highlight_end": 63,
                        "highlight_start": 1,
                        "text": "//!     let mut server = mockito::Server::new_with_opts(opts);"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 76,
                        "highlight_start": 1,
                        "text": "//!     let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "//!     // loop {}"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unit tests in doctest are not executed\n   --> src\\lib.rs:718:5\n    |\n718 |   //! #[test]\n    |  _____^\n719 | | //! fn example_test() {\n    | |___________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#test_attr_in_doctest\n    = note: `#[warn(clippy::test_attr_in_doctest)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#test_attr_in_doctest",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::test_attr_in_doctest)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::test_attr_in_doctest",
                  "explanation": null
                },
                "level": "warning",
                "message": "unit tests in doctest are not executed",
                "spans": [
                  {
                    "byte_end": 21824,
                    "byte_start": 21797,
                    "column_end": 20,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 719,
                    "line_start": 718,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "//! #[test]"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "//! fn example_test() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n  --> src\\matcher.rs:50:6\n   |\n50 | impl<'a> From<&'a str> for Matcher {\n   |      ^^        ^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n   = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n   |\n50 - impl<'a> From<&'a str> for Matcher {\n50 + impl From<&str> for Matcher {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1819,
                        "byte_start": 1815,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "impl<'a> From<&'a str> for Matcher {"
                          }
                        ]
                      },
                      {
                        "byte_end": 1829,
                        "byte_start": 1826,
                        "column_end": 19,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 16,
                            "text": "impl<'a> From<&'a str> for Matcher {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 1818,
                    "byte_start": 1816,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> From<&'a str> for Matcher {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1828,
                    "byte_start": 1826,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "impl<'a> From<&'a str> for Matcher {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:86:25\n   |\n86 |                         format!(\"{}, {}\", acc, matcher)\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n86 -                         format!(\"{}, {}\", acc, matcher)\n86 +                         format!(\"{acc}, {matcher}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2863,
                        "byte_start": 2863,
                        "column_end": 35,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": "acc",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 35,
                            "text": "                        format!(\"{}, {}\", acc, matcher)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2867,
                        "byte_start": 2867,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": "matcher",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "                        format!(\"{}, {}\", acc, matcher)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2874,
                        "byte_start": 2869,
                        "column_end": 46,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 41,
                            "text": "                        format!(\"{}, {}\", acc, matcher)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2883,
                        "byte_start": 2874,
                        "column_end": 55,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 86,
                        "line_start": 86,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 46,
                            "text": "                        format!(\"{}, {}\", acc, matcher)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2884,
                    "byte_start": 2853,
                    "column_end": 56,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 25,
                        "text": "                        format!(\"{}, {}\", acc, matcher)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:93:42\n   |\n93 |             Matcher::Binary(ref file) => format!(\"{} (binary)\", file),\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n93 -             Matcher::Binary(ref file) => format!(\"{} (binary)\", file),\n93 +             Matcher::Binary(ref file) => format!(\"{file} (binary)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3083,
                        "byte_start": 3083,
                        "column_end": 52,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 93,
                        "line_start": 93,
                        "suggested_replacement": "file",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 52,
                            "text": "            Matcher::Binary(ref file) => format!(\"{} (binary)\", file),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3100,
                        "byte_start": 3094,
                        "column_end": 69,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 93,
                        "line_start": 93,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 63,
                            "text": "            Matcher::Binary(ref file) => format!(\"{} (binary)\", file),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3101,
                    "byte_start": 3073,
                    "column_end": 70,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 42,
                        "text": "            Matcher::Binary(ref file) => format!(\"{} (binary)\", file),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:94:42\n   |\n94 |             Matcher::Regex(ref value) => format!(\"{} (regex)\", value),\n   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n94 -             Matcher::Regex(ref value) => format!(\"{} (regex)\", value),\n94 +             Matcher::Regex(ref value) => format!(\"{value} (regex)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3154,
                        "byte_start": 3154,
                        "column_end": 52,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 94,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 52,
                            "text": "            Matcher::Regex(ref value) => format!(\"{} (regex)\", value),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3171,
                        "byte_start": 3164,
                        "column_end": 69,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 94,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 62,
                            "text": "            Matcher::Regex(ref value) => format!(\"{} (regex)\", value),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3172,
                    "byte_start": 3144,
                    "column_end": 70,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 42,
                        "text": "            Matcher::Regex(ref value) => format!(\"{} (regex)\", value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:95:44\n   |\n95 |             Matcher::Json(ref json_obj) => format!(\"{} (json)\", json_obj),\n   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n95 -             Matcher::Json(ref json_obj) => format!(\"{} (json)\", json_obj),\n95 +             Matcher::Json(ref json_obj) => format!(\"{json_obj} (json)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3227,
                        "byte_start": 3227,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 95,
                        "line_start": 95,
                        "suggested_replacement": "json_obj",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "            Matcher::Json(ref json_obj) => format!(\"{} (json)\", json_obj),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3246,
                        "byte_start": 3236,
                        "column_end": 73,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 95,
                        "line_start": 95,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 63,
                            "text": "            Matcher::Json(ref json_obj) => format!(\"{} (json)\", json_obj),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3247,
                    "byte_start": 3217,
                    "column_end": 74,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 74,
                        "highlight_start": 44,
                        "text": "            Matcher::Json(ref json_obj) => format!(\"{} (json)\", json_obj),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:96:47\n   |\n96 |             Matcher::JsonString(ref value) => format!(\"{} (json)\", value),\n   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n96 -             Matcher::JsonString(ref value) => format!(\"{} (json)\", value),\n96 +             Matcher::JsonString(ref value) => format!(\"{value} (json)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3305,
                        "byte_start": 3305,
                        "column_end": 57,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 57,
                            "text": "            Matcher::JsonString(ref value) => format!(\"{} (json)\", value),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3321,
                        "byte_start": 3314,
                        "column_end": 73,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 66,
                            "text": "            Matcher::JsonString(ref value) => format!(\"{} (json)\", value),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3322,
                    "byte_start": 3295,
                    "column_end": 74,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 74,
                        "highlight_start": 47,
                        "text": "            Matcher::JsonString(ref value) => format!(\"{} (json)\", value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:97:51\n   |\n97 |             Matcher::PartialJson(ref json_obj) => format!(\"{} (partial json)\", json_obj),\n   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n97 -             Matcher::PartialJson(ref json_obj) => format!(\"{} (partial json)\", json_obj),\n97 +             Matcher::PartialJson(ref json_obj) => format!(\"{json_obj} (partial json)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3384,
                        "byte_start": 3384,
                        "column_end": 61,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "json_obj",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 61,
                            "text": "            Matcher::PartialJson(ref json_obj) => format!(\"{} (partial json)\", json_obj),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3411,
                        "byte_start": 3401,
                        "column_end": 88,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 78,
                            "text": "            Matcher::PartialJson(ref json_obj) => format!(\"{} (partial json)\", json_obj),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3412,
                    "byte_start": 3374,
                    "column_end": 89,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 51,
                        "text": "            Matcher::PartialJson(ref json_obj) => format!(\"{} (partial json)\", json_obj),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\matcher.rs:98:54\n   |\n98 |             Matcher::PartialJsonString(ref value) => format!(\"{} (partial json)\", value),\n   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n98 -             Matcher::PartialJsonString(ref value) => format!(\"{} (partial json)\", value),\n98 +             Matcher::PartialJsonString(ref value) => format!(\"{value} (partial json)\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3477,
                        "byte_start": 3477,
                        "column_end": 64,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 98,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 64,
                            "text": "            Matcher::PartialJsonString(ref value) => format!(\"{} (partial json)\", value),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3501,
                        "byte_start": 3494,
                        "column_end": 88,
                        "column_start": 81,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 98,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 81,
                            "text": "            Matcher::PartialJsonString(ref value) => format!(\"{} (partial json)\", value),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3502,
                    "byte_start": 3467,
                    "column_end": 89,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 54,
                        "text": "            Matcher::PartialJsonString(ref value) => format!(\"{} (partial json)\", value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\matcher.rs:100:17\n    |\n100 |                 format!(\"{}={} (urlencoded)\", field, value)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n100 -                 format!(\"{}={} (urlencoded)\", field, value)\n100 +                 format!(\"{field}={value} (urlencoded)\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3589,
                        "byte_start": 3589,
                        "column_end": 27,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": "field",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 27,
                            "text": "                format!(\"{}={} (urlencoded)\", field, value)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3592,
                        "byte_start": 3592,
                        "column_end": 30,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 30,
                            "text": "                format!(\"{}={} (urlencoded)\", field, value)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3614,
                        "byte_start": 3607,
                        "column_end": 52,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 45,
                            "text": "                format!(\"{}={} (urlencoded)\", field, value)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3621,
                        "byte_start": 3614,
                        "column_end": 59,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 52,
                            "text": "                format!(\"{}={} (urlencoded)\", field, value)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3622,
                    "byte_start": 3579,
                    "column_end": 60,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 17,
                        "text": "                format!(\"{}={} (urlencoded)\", field, value)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\matcher.rs:107:9\n    |\n107 |         write!(f, \"{}\", result)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n107 -         write!(f, \"{}\", result)\n107 +         write!(f, \"{result}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3926,
                        "byte_start": 3926,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 107,
                        "line_start": 107,
                        "suggested_replacement": "result",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{}\", result)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3936,
                        "byte_start": 3928,
                        "column_end": 31,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 107,
                        "line_start": 107,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 23,
                            "text": "        write!(f, \"{}\", result)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3937,
                    "byte_start": 3914,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{}\", result)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\matcher.rs:276:13\n    |\n276 |             write!(f, \"filepath: {}\", filepath)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n276 -             write!(f, \"filepath: {}\", filepath)\n276 +             write!(f, \"filepath: {filepath}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10104,
                        "byte_start": 10104,
                        "column_end": 35,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 276,
                        "line_start": 276,
                        "suggested_replacement": "filepath",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 35,
                            "text": "            write!(f, \"filepath: {}\", filepath)"
                          }
                        ]
                      },
                      {
                        "byte_end": 10116,
                        "byte_start": 10106,
                        "column_end": 47,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 276,
                        "line_start": 276,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 37,
                            "text": "            write!(f, \"filepath: {}\", filepath)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10117,
                    "byte_start": 10082,
                    "column_end": 48,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 276,
                    "line_start": 276,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 13,
                        "text": "            write!(f, \"filepath: {}\", filepath)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\matcher.rs:280:13\n    |\n280 |             write!(f, \"filecontent: {:?}\", first_bytes)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n280 -             write!(f, \"filecontent: {:?}\", first_bytes)\n280 +             write!(f, \"filecontent: {first_bytes:?}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10328,
                        "byte_start": 10328,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 280,
                        "line_start": 280,
                        "suggested_replacement": "first_bytes",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "            write!(f, \"filecontent: {:?}\", first_bytes)"
                          }
                        ]
                      },
                      {
                        "byte_end": 10345,
                        "byte_start": 10332,
                        "column_end": 55,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\matcher.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 280,
                        "line_start": 280,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 42,
                            "text": "            write!(f, \"filecontent: {:?}\", first_bytes)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10346,
                    "byte_start": 10303,
                    "column_end": 56,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\matcher.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 280,
                    "line_start": 280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 13,
                        "text": "            write!(f, \"filecontent: {:?}\", first_bytes)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:701:53\n    |\n701 |               (Some(min), Some(max)) if min == max => format!(\n    |  _____________________________________________________^\n702 | |                 \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\",\n703 | |                 min, self, hits\n704 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21800,
                        "byte_start": 21800,
                        "column_end": 32,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 702,
                        "line_start": 702,
                        "suggested_replacement": "min",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 32,
                            "text": "                \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21819,
                        "byte_start": 21819,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 702,
                        "line_start": 702,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "                \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21839,
                        "byte_start": 21839,
                        "column_end": 71,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 702,
                        "line_start": 702,
                        "suggested_replacement": "hits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 71,
                            "text": "                \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21866,
                        "byte_start": 21845,
                        "column_end": 20,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 703,
                        "line_start": 702,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 77,
                            "text": "                \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                min, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 21872,
                        "byte_start": 21866,
                        "column_end": 26,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 703,
                        "line_start": 703,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 20,
                            "text": "                min, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 21878,
                        "byte_start": 21872,
                        "column_end": 32,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 703,
                        "line_start": 703,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 26,
                            "text": "                min, self, hits"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21892,
                    "byte_start": 21760,
                    "column_end": 14,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 704,
                    "line_start": 701,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 53,
                        "text": "            (Some(min), Some(max)) if min == max => format!("
                      },
                      {
                        "highlight_end": 78,
                        "highlight_start": 1,
                        "text": "                \"\\n> Expected {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "                min, self, hits"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:705:39\n    |\n705 |               (Some(min), Some(max)) => format!(\n    |  _______________________________________^\n706 | |                 \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\",\n707 | |                 min, max, self, hits\n708 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21980,
                        "byte_start": 21980,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 706,
                        "line_start": 706,
                        "suggested_replacement": "min",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21987,
                        "byte_start": 21987,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 706,
                        "line_start": 706,
                        "suggested_replacement": "max",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22006,
                        "byte_start": 22006,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 706,
                        "line_start": 706,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22026,
                        "byte_start": 22026,
                        "column_end": 86,
                        "column_start": 86,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 706,
                        "line_start": 706,
                        "suggested_replacement": "hits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 86,
                            "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22053,
                        "byte_start": 22032,
                        "column_end": 20,
                        "column_start": 92,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 707,
                        "line_start": 706,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 93,
                            "highlight_start": 92,
                            "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                min, max, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22058,
                        "byte_start": 22053,
                        "column_end": 25,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 707,
                        "line_start": 707,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 20,
                            "text": "                min, max, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22064,
                        "byte_start": 22058,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 707,
                        "line_start": 707,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "                min, max, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22070,
                        "byte_start": 22064,
                        "column_end": 37,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 707,
                        "line_start": 707,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 31,
                            "text": "                min, max, self, hits"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22084,
                    "byte_start": 21932,
                    "column_end": 14,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 708,
                    "line_start": 705,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 39,
                        "text": "            (Some(min), Some(max)) => format!("
                      },
                      {
                        "highlight_end": 93,
                        "highlight_start": 1,
                        "text": "                \"\\n> Expected between {} and {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                      },
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "                min, max, self, hits"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:709:34\n    |\n709 |               (Some(min), None) => format!(\n    |  __________________________________^\n710 | |                 \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\",\n711 | |                 min, self, hits\n712 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22168,
                        "byte_start": 22168,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 710,
                        "line_start": 710,
                        "suggested_replacement": "min",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "                \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22187,
                        "byte_start": 22187,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 710,
                        "line_start": 710,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "                \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22207,
                        "byte_start": 22207,
                        "column_end": 80,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 710,
                        "line_start": 710,
                        "suggested_replacement": "hits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 80,
                            "text": "                \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22234,
                        "byte_start": 22213,
                        "column_end": 20,
                        "column_start": 86,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 711,
                        "line_start": 710,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 86,
                            "text": "                \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                min, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22240,
                        "byte_start": 22234,
                        "column_end": 26,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 711,
                        "line_start": 711,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 20,
                            "text": "                min, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22246,
                        "byte_start": 22240,
                        "column_end": 32,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 711,
                        "line_start": 711,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 26,
                            "text": "                min, self, hits"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22260,
                    "byte_start": 22119,
                    "column_end": 14,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 712,
                    "line_start": 709,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 34,
                        "text": "            (Some(min), None) => format!("
                      },
                      {
                        "highlight_end": 87,
                        "highlight_start": 1,
                        "text": "                \"\\n> Expected at least {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "                min, self, hits"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:713:34\n    |\n713 |               (None, Some(max)) => format!(\n    |  __________________________________^\n714 | |                 \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\",\n715 | |                 max, self, hits\n716 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22343,
                        "byte_start": 22343,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 714,
                        "line_start": 714,
                        "suggested_replacement": "max",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22362,
                        "byte_start": 22362,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 714,
                        "line_start": 714,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "                \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22382,
                        "byte_start": 22382,
                        "column_end": 79,
                        "column_start": 79,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 714,
                        "line_start": 714,
                        "suggested_replacement": "hits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 79,
                            "text": "                \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22409,
                        "byte_start": 22388,
                        "column_end": 20,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 715,
                        "line_start": 714,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 85,
                            "text": "                \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                max, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22415,
                        "byte_start": 22409,
                        "column_end": 26,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 715,
                        "line_start": 715,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 20,
                            "text": "                max, self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22421,
                        "byte_start": 22415,
                        "column_end": 32,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 715,
                        "line_start": 715,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 26,
                            "text": "                max, self, hits"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22435,
                    "byte_start": 22295,
                    "column_end": 14,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 716,
                    "line_start": 713,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 34,
                        "text": "            (None, Some(max)) => format!("
                      },
                      {
                        "highlight_end": 86,
                        "highlight_start": 1,
                        "text": "                \"\\n> Expected at most {} request(s) to:\\n{}\\n...but received {}\\n\\n\","
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "                max, self, hits"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:717:29\n    |\n717 |               (None, None) => format!(\n    |  _____________________________^\n718 | |                 \"\\n> Expected 1 request(s) to:\\n{}\\n...but received {}\\n\\n\",\n719 | |                 self, hits\n720 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22523,
                        "byte_start": 22523,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 718,
                        "line_start": 718,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "                \"\\n> Expected 1 request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22543,
                        "byte_start": 22543,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 718,
                        "line_start": 718,
                        "suggested_replacement": "hits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "                \"\\n> Expected 1 request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22571,
                        "byte_start": 22549,
                        "column_end": 21,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 719,
                        "line_start": 718,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 76,
                            "text": "                \"\\n> Expected 1 request(s) to:\\n{}\\n...but received {}\\n\\n\","
                          },
                          {
                            "highlight_end": 21,
                            "highlight_start": 1,
                            "text": "                self, hits"
                          }
                        ]
                      },
                      {
                        "byte_end": 22577,
                        "byte_start": 22571,
                        "column_end": 27,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 719,
                        "line_start": 719,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 21,
                            "text": "                self, hits"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22591,
                    "byte_start": 22465,
                    "column_end": 14,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 720,
                    "line_start": 717,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 29,
                        "text": "            (None, None) => format!("
                      },
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "                \"\\n> Expected 1 request(s) to:\\n{}\\n...but received {}\\n\\n\","
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "                self, hits"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:724:31\n    |\n724 |               message.push_str(&format!(\n    |  _______________________________^\n725 | |                 \"> The last unmatched request was:\\n{}\\n\",\n726 | |                 last_request\n727 | |             ));\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22748,
                        "byte_start": 22748,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 725,
                        "line_start": 725,
                        "suggested_replacement": "last_request",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "                \"> The last unmatched request was:\\n{}\\n\","
                          }
                        ]
                      },
                      {
                        "byte_end": 22782,
                        "byte_start": 22752,
                        "column_end": 29,
                        "column_start": 58,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 726,
                        "line_start": 725,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 58,
                            "text": "                \"> The last unmatched request was:\\n{}\\n\","
                          },
                          {
                            "highlight_end": 29,
                            "highlight_start": 1,
                            "text": "                last_request"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22796,
                    "byte_start": 22686,
                    "column_end": 14,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 727,
                    "line_start": 724,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 31,
                        "text": "            message.push_str(&format!("
                      },
                      {
                        "highlight_end": 59,
                        "highlight_start": 1,
                        "text": "                \"> The last unmatched request was:\\n{}\\n\","
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "                last_request"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\mock.rs:730:31\n    |\n730 |             message.push_str(&format!(\"> Difference:\\n{}\\n\", difference));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n730 -             message.push_str(&format!(\"> Difference:\\n{}\\n\", difference));\n730 +             message.push_str(&format!(\"> Difference:\\n{difference}\\n\"));\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22933,
                        "byte_start": 22933,
                        "column_end": 56,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 730,
                        "line_start": 730,
                        "suggested_replacement": "difference",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 56,
                            "text": "            message.push_str(&format!(\"> Difference:\\n{}\\n\", difference));"
                          }
                        ]
                      },
                      {
                        "byte_end": 22949,
                        "byte_start": 22937,
                        "column_end": 72,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\mock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 730,
                        "line_start": 730,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 72,
                            "highlight_start": 60,
                            "text": "            message.push_str(&format!(\"> Difference:\\n{}\\n\", difference));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22950,
                    "byte_start": 22908,
                    "column_end": 73,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\mock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 730,
                    "line_start": 730,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 73,
                        "highlight_start": 31,
                        "text": "            message.push_str(&format!(\"> Difference:\\n{}\\n\", difference));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\response.rs:125:19\n    |\n125 |             .name(format!(\"mockito::body_fn_{:p}\", body_fn))\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n125 -             .name(format!(\"mockito::body_fn_{:p}\", body_fn))\n125 +             .name(format!(\"mockito::body_fn_{body_fn:p}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3657,
                        "byte_start": 3657,
                        "column_end": 46,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\response.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": "body_fn",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "            .name(format!(\"mockito::body_fn_{:p}\", body_fn))"
                          }
                        ]
                      },
                      {
                        "byte_end": 3670,
                        "byte_start": 3661,
                        "column_end": 59,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\response.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 125,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 50,
                            "text": "            .name(format!(\"mockito::body_fn_{:p}\", body_fn))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3671,
                    "byte_start": 3630,
                    "column_end": 60,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\response.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 19,
                        "text": "            .name(format!(\"mockito::body_fn_{:p}\", body_fn))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpcbib8dx0/mockito-1.7.0#mockito@1.7.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mockito",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "color",
                "colored",
                "default",
                "parking_lot"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpcbib8dx0\\mockito-1.7.0\\target\\debug\\deps\\libmockito-85385e53a5ba51f3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 159
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 3,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.4.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c",
                    "dependencies": [
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.22",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0019",
                    "package": "mio",
                    "title": "Tokens for named pipes may be delivered after deregistration",
                    "description": "## Impact\n\nWhen using named pipes on Windows, mio will under some circumstances return invalid tokens that correspond to named pipes that have already been deregistered from the mio registry. The impact of this vulnerability depends on how mio is used. For some applications, invalid tokens may be ignored or cause a warning or a crash. On the other hand, for applications that store pointers in the tokens, this vulnerability may result in a use-after-free.\n\nFor users of Tokio, this vulnerability is serious and can result in a use-after-free in Tokio.\n\nThe vulnerability is Windows-specific, and can only happen if you are using named pipes. Other IO resources are not affected.\n\n## Affected versions\n\nThis vulnerability has been fixed in mio v0.8.11.\n\nAll versions of mio between v0.7.2 and v0.8.10 are vulnerable.\n\nTokio is vulnerable when you are using a vulnerable version of mio AND you are using at least Tokio v1.30.0. Versions of Tokio prior to v1.30.0 will ignore invalid tokens, so they are not vulnerable.\n\n## Workarounds\n\nVulnerable libraries that use mio can work around this issue by detecting and ignoring invalid tokens.\n\n## Technical details\n\nWhen an IO resource registered with mio has a readiness event, mio delivers that readiness event to the user using a user-specified token. Mio guarantees that when an IO resource is [deregistered](https://docs.rs/mio/latest/mio/struct.Registry.html#method.deregister), then it will never return the token for that IO resource again. However, for named pipes on windows, mio may sometimes deliver the token for a named pipe even though the named pipe has been previously deregistered.\n\nThis vulnerability was originally reported in the Tokio issue tracker: [tokio-rs/tokio#6369](https://github.com/tokio-rs/tokio/issues/6369)  \nThis vulnerability was fixed in: [tokio-rs/mio#1760](https://github.com/tokio-rs/mio/pull/1760)\n\nThank you to [@rofoun](https://github.com/rofoun) and [@radekvit](https://github.com/radekvit) for discovering and reporting this issue.",
                    "date": "2024-03-04",
                    "aliases": [
                      "CVE-2024-27308",
                      "GHSA-r8w9-5wcg-vfj7"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/mio/security/advisories/GHSA-r8w9-5wcg-vfj7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.11"
                    ],
                    "unaffected": [
                      "<0.7.2"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {
                      "mio::windows::NamedPipe::new": [
                        ">=0.7.2, <=0.8.10"
                      ]
                    }
                  },
                  "package": {
                    "name": "mio",
                    "version": "0.8.9",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3dce281c5e46beae905d4de1870d8b1509a9142b62eedf18b443b011ca8343d0",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasi",
                        "version": "0.11.0+wasi-snapshot-preview1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.48.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0009",
                    "package": "ring",
                    "title": "Some AES functions may panic when overflow checking is enabled.",
                    "description": "`ring::aead::quic::HeaderProtectionKey::new_mask()` may panic when overflow\nchecking is enabled. In the QUIC protocol, an attacker can induce this panic by\nsending a specially-crafted packet. Even unintentionally it is likely to occur\nin 1 out of every 2**32 packets sent and/or received.\n\nOn 64-bit targets operations using `ring::aead::{AES_128_GCM, AES_256_GCM}` may\npanic when overflow checking is enabled, when encrypting/decrypting approximately\n68,719,476,700 bytes (about 64 gigabytes) of data in a single chunk. Protocols\nlike TLS and SSH are not affected by this because those protocols break large\namounts of data into small chunks. Similarly, most applications will not\nattempt to encrypt/decrypt 64GB of data in one chunk.\n\nOverflow checking is not enabled in release mode by default, but\n`RUSTFLAGS=\"-C overflow-checks\"` or `overflow-checks = true` in the Cargo.toml\nprofile can override this. Overflow checking is usually enabled by default in\ndebug mode.",
                    "date": "2025-03-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.17.12"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "ring",
                    "version": "0.17.8",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.0.83",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "getrandom",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.9.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.34.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d0c014766411e834f7af5b8f4cf46257aab4036ca95e9d2c144a10f59ad6f5b9",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.69",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "0.8.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.16.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "parking_lot",
                        "version": "0.12.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "socket2",
                        "version": "0.5.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.48.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.29",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "a19526d624e703a3179b3d322efec918b6246ea0fa51d41124525f00f1cc8104",
                    "dependencies": [
                      {
                        "name": "futures-core",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-macro",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.29",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "wasm-bindgen",
                    "version": "0.2.88",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7daec296f25a1bae309c0cd5c29c4b260e510e6d813c286b19eaadf409d40fce",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasm-bindgen-macro",
                        "version": "0.2.88",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "mockito",
          "version": "1.7.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\n[Settings](https://docs.rs/mockito/latest/settings.html)\n[Help](https://docs.rs/mockito/latest/help.html)\nSummary[Source](https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746)\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#features)Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#getting-started)Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#lifetime)Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\").\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#async)Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * [`Server::new_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async \"associated function mockito::Server::new_async\")\n  * [`Server::new_with_opts_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async \"associated function mockito::Server::new_with_opts_async\")\n  * [`Mock::create_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async \"method mockito::Mock::create_async\")\n  * [`Mock::assert_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async \"method mockito::Mock::assert_async\")\n  * [`Mock::matched_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async \"method mockito::Mock::matched_async\")\n  * [`Mock::remove_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async \"method mockito::Mock::remove_async\")\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#configuring-the-server)Configuring the server\nWhen calling [`Server::new()`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new \"associated function mockito::Server::new\"), a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use [`Server::new_with_opts`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts \"associated function mockito::Server::new_with_opts\"). The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call [`Mock::assert()`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matchers)Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") documentation for all the rest.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query)Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example)Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-1)Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-2)Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-query)Matching by query\nYou can match the query part by using the [`Mock::match_query`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query \"method mockito::Mock::match_query\") function together with the various matchers, most notably [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\"):\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-3)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\") should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a [`mock`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock \"method mockito::Server::mock\") call, in which case an exact match will be performed:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-4)Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-5)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-header)Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-6)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the [`Matcher::Regex`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex \"variant mockito::Matcher::Regex\") matcher:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-7)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-8)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Missing`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing \"variant mockito::Matcher::Missing\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-9)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-body)Matching by body\nYou can match a request by its body by using the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method. By default, the request body is ignored, similar to passing the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") argument to the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method.\nYou can match a body by an exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-10)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-11)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-12)Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use [`Matcher::JsonString`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString \"variant mockito::Matcher::JsonString\") the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-anyof-matcher)The `AnyOf` matcher\nThe [`Matcher::AnyOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf \"variant mockito::Matcher::AnyOf\") construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-13)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-allof-matcher)The `AllOf` matcher\nThe [`Matcher::AllOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf \"variant mockito::Matcher::AllOf\") construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-14)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#custom-matchers)Custom matchers\nIf you need a more custom matcher, you can use the [`Mock::match_request`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request \"method mockito::Mock::match_request\") function, which takes a closure and exposes the [`Request`](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\") object as an argument. The closure should return a boolean value.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-15)Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#asserts)Asserts\nYou can use the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-16)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-17)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the [`Mock::expect`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect \"method mockito::Mock::expect\") method to specify the exact amount of requests:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-18)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the [`Mock::expect_at_least`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least \"method mockito::Mock::expect_at_least\") and [`Mock::expect_at_most`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most \"method mockito::Mock::expect_at_most\") methods:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-19)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the [`Mock::matched`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched \"method mockito::Mock::matched\") method to return a boolean for whether the mock was called the correct number of times without panicking\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-20)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#non-matching-calls)Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#cleaning-up)Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call [`Server::reset`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset \"method mockito::Server::reset\") to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\") to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#debug)Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the [env_logger](https://crates.rs/crates/env_logger) crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs[\u00a7](https://docs.rs/mockito/latest/mockito/#structs)\n\n[Error](https://docs.rs/mockito/latest/mockito/struct.Error.html \"struct mockito::Error\")\n    Contains information about an error occurence\n\n[Mock](https://docs.rs/mockito/latest/mockito/struct.Mock.html \"struct mockito::Mock\")\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\n[Request](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\")\n    Stores a HTTP request\n\n[Server](https://docs.rs/mockito/latest/mockito/struct.Server.html \"struct mockito::Server\")\n    One instance of the mock server.\n\n[ServerGuard](https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html \"struct mockito::ServerGuard\")\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\n[ServerOpts](https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html \"struct mockito::ServerOpts\")\n    Options to configure a mock server. Provides a default implementation.\n## Enums[\u00a7](https://docs.rs/mockito/latest/mockito/#enums)\n\n[ErrorKind](https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html \"enum mockito::ErrorKind\")\n    The type of an error\n\n[Matcher](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\")\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits[\u00a7](https://docs.rs/mockito/latest/mockito/#traits)\n\n[IntoHeaderName](https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html \"trait mockito::IntoHeaderName\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## \u00a7\u27e84\u27e9Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## \u00a7\u27e85\u27e9Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf `Mock::assert`\u27e86\u27e9 fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png\u27e87\u27e9]\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## \u00a7\u27e88\u27e9Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling `Mock::remove`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * `Server::new_async`\u27e811\u27e9\n  * `Server::new_with_opts_async`\u27e812\u27e9\n  * `Mock::create_async`\u27e813\u27e9\n  * `Mock::assert_async`\u27e814\u27e9\n  * `Mock::matched_async`\u27e815\u27e9\n  * `Mock::remove_async`\u27e816\u27e9\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## \u00a7\u27e817\u27e9Configuring the server\nWhen calling `Server::new()`\u27e818\u27e9, a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use `Server::new_with_opts`\u27e819\u27e9. The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call `Mock::assert()`\u27e86\u27e9 before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## \u00a7\u27e820\u27e9Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the `Matcher`\u27e821\u27e9 type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the `Matcher`\u27e821\u27e9 documentation for all the rest.\n## \u00a7\u27e822\u27e9Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### \u00a7\u27e823\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### \u00a7\u27e824\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e826\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e827\u27e9Matching by query\nYou can match the query part by using the `Mock::match_query`\u27e828\u27e9 function together with the various matchers, most notably `Matcher::UrlEncoded`\u27e829\u27e9:\n### \u00a7\u27e830\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for `Matcher::UrlEncoded`\u27e829\u27e9 should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a `mock`\u27e831\u27e9 call, in which case an exact match will be performed:\n### \u00a7\u27e832\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e833\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e834\u27e9Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### \u00a7\u27e835\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the `Matcher::Regex`\u27e836\u27e9 matcher:\n### \u00a7\u27e837\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Any`\u27e825\u27e9.\n### \u00a7\u27e839\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Missing`\u27e840\u27e9.\n### \u00a7\u27e841\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## \u00a7\u27e842\u27e9Matching by body\nYou can match a request by its body by using the `Mock::match_body`\u27e843\u27e9 method. By default, the request body is ignored, similar to passing the `Matcher::Any`\u27e825\u27e9 argument to the `Mock::match_body`\u27e843\u27e9 method.\nYou can match a body by an exact value:\n### \u00a7\u27e844\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### \u00a7\u27e845\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### \u00a7\u27e846\u27e9Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use `Matcher::JsonString`\u27e847\u27e9 the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## \u00a7\u27e848\u27e9The `AnyOf` matcher\nThe `Matcher::AnyOf`\u27e849\u27e9 construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### \u00a7\u27e850\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e851\u27e9The `AllOf` matcher\nThe `Matcher::AllOf`\u27e852\u27e9 construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### \u00a7\u27e853\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e854\u27e9Custom matchers\nIf you need a more custom matcher, you can use the `Mock::match_request`\u27e855\u27e9 function, which takes a closure and exposes the `Request`\u27e856\u27e9 object as an argument. The closure should return a boolean value.\n### \u00a7\u27e857\u27e9Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## \u00a7\u27e858\u27e9Asserts\nYou can use the `Mock::assert`\u27e86\u27e9 method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### \u00a7\u27e859\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### \u00a7\u27e860\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the `Mock::expect`\u27e861\u27e9 method to specify the exact amount of requests:\n### \u00a7\u27e862\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the `Mock::expect_at_least`\u27e863\u27e9 and `Mock::expect_at_most`\u27e864\u27e9 methods:\n### \u00a7\u27e865\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the `Mock::assert`\u27e86\u27e9 method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png\u27e87\u27e9]\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a `Mock::assert`\u27e86\u27e9 error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the `Mock::matched`\u27e866\u27e9 method to return a boolean for whether the mock was called the correct number of times without panicking\n### \u00a7\u27e867\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## \u00a7\u27e868\u27e9Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## \u00a7\u27e869\u27e9Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call `Server::reset`\u27e870\u27e9 to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call `Mock::remove`\u27e89\u27e9 to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## \u00a7\u27e871\u27e9Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the env_logger\u27e872\u27e9 crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs\u00a7\u27e873\u27e9\n\nError\u27e874\u27e9\n    Contains information about an error occurence\n\nMock\u27e875\u27e9\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\nRequest\u27e856\u27e9\n    Stores a HTTP request\n\nServer\u27e876\u27e9\n    One instance of the mock server.\n\nServerGuard\u27e877\u27e9\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\nServerOpts\u27e878\u27e9\n    Options to configure a mock server. Provides a default implementation.\n## Enums\u00a7\u27e879\u27e9\n\nErrorKind\u27e880\u27e9\n    The type of an error\n\nMatcher\u27e821\u27e9\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits\u00a7\u27e881\u27e9\n\nIntoHeaderName\u27e882\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mockito/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mockito/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746: Source\n\u27e84\u27e9 https://docs.rs/mockito/latest/mockito/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/mockito/latest/mockito/#getting-started: \u00a7\n\u27e86\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert: method mockito::Mock::assert - `Mock::assert`\n\u27e87\u27e9 https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png: colored-diff.png\n\u27e88\u27e9 https://docs.rs/mockito/latest/mockito/#lifetime: \u00a7\n\u27e89\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove: method mockito::Mock::remove - `Mock::remove`\n\u27e810\u27e9 https://docs.rs/mockito/latest/mockito/#async: \u00a7\n\u27e811\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async: associated function mockito::Server::new_async - `Server::new_async`\n\u27e812\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async: associated function mockito::Server::new_with_opts_async - `Server::new_with_opts_async`\n\u27e813\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async: method mockito::Mock::create_async - `Mock::create_async`\n\u27e814\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async: method mockito::Mock::assert_async - `Mock::assert_async`\n\u27e815\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async: method mockito::Mock::matched_async - `Mock::matched_async`\n\u27e816\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async: method mockito::Mock::remove_async - `Mock::remove_async`\n\u27e817\u27e9 https://docs.rs/mockito/latest/mockito/#configuring-the-server: \u00a7\n\u27e818\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new: associated function mockito::Server::new - `Server::new()`\n\u27e819\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts: associated function mockito::Server::new_with_opts - `Server::new_with_opts`\n\u27e820\u27e9 https://docs.rs/mockito/latest/mockito/#matchers: \u00a7\n\u27e821\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html: enum mockito::Matcher - `Matcher`\n\u27e822\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query: \u00a7\n\u27e823\u27e9 https://docs.rs/mockito/latest/mockito/#example: \u00a7\n\u27e824\u27e9 https://docs.rs/mockito/latest/mockito/#example-1: \u00a7\n\u27e825\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any: variant mockito::Matcher::Any - `Matcher::Any`\n\u27e826\u27e9 https://docs.rs/mockito/latest/mockito/#example-2: \u00a7\n\u27e827\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-query: \u00a7\n\u27e828\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query: method mockito::Mock::match_query - `Mock::match_query`\n\u27e829\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded: variant mockito::Matcher::UrlEncoded - `Matcher::UrlEncoded`\n\u27e830\u27e9 https://docs.rs/mockito/latest/mockito/#example-3: \u00a7\n\u27e831\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock: method mockito::Server::mock - `mock`\n\u27e832\u27e9 https://docs.rs/mockito/latest/mockito/#example-4: \u00a7\n\u27e833\u27e9 https://docs.rs/mockito/latest/mockito/#example-5: \u00a7\n\u27e834\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-header: \u00a7\n\u27e835\u27e9 https://docs.rs/mockito/latest/mockito/#example-6: \u00a7\n\u27e836\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex: variant mockito::Matcher::Regex - `Matcher::Regex`\n\u27e837\u27e9 https://docs.rs/mockito/latest/mockito/#example-7: \u00a7\n\u27e838\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header: method mockito::Mock::match_header - `Mock::match_header`\n\u27e839\u27e9 https://docs.rs/mockito/latest/mockito/#example-8: \u00a7\n\u27e840\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing: variant mockito::Matcher::Missing - `Matcher::Missing`\n\u27e841\u27e9 https://docs.rs/mockito/latest/mockito/#example-9: \u00a7\n\u27e842\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-body: \u00a7\n\u27e843\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body: method mockito::Mock::match_body - `Mock::match_body`\n\u27e844\u27e9 https://docs.rs/mockito/latest/mockito/#example-10: \u00a7\n\u27e845\u27e9 https://docs.rs/mockito/latest/mockito/#example-11: \u00a7\n\u27e846\u27e9 https://docs.rs/mockito/latest/mockito/#example-12: \u00a7\n\u27e847\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString: variant mockito::Matcher::JsonString - `Matcher::JsonString`\n\u27e848\u27e9 https://docs.rs/mockito/latest/mockito/#the-anyof-matcher: \u00a7\n\u27e849\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf: variant mockito::Matcher::AnyOf - `Matcher::AnyOf`\n\u27e850\u27e9 https://docs.rs/mockito/latest/mockito/#example-13: \u00a7\n\u27e851\u27e9 https://docs.rs/mockito/latest/mockito/#the-allof-matcher: \u00a7\n\u27e852\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf: variant mockito::Matcher::AllOf - `Matcher::AllOf`\n\u27e853\u27e9 https://docs.rs/mockito/latest/mockito/#example-14: \u00a7\n\u27e854\u27e9 https://docs.rs/mockito/latest/mockito/#custom-matchers: \u00a7\n\u27e855\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request: method mockito::Mock::match_request - `Mock::match_request`\n\u27e856\u27e9 https://docs.rs/mockito/latest/mockito/struct.Request.html: struct mockito::Request - `Request`\n\u27e857\u27e9 https://docs.rs/mockito/latest/mockito/#example-15: \u00a7\n\u27e858\u27e9 https://docs.rs/mockito/latest/mockito/#asserts: \u00a7\n\u27e859\u27e9 https://docs.rs/mockito/latest/mockito/#example-16: \u00a7\n\u27e860\u27e9 https://docs.rs/mockito/latest/mockito/#example-17: \u00a7\n\u27e861\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect: method mockito::Mock::expect - `Mock::expect`\n\u27e862\u27e9 https://docs.rs/mockito/latest/mockito/#example-18: \u00a7\n\u27e863\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least: method mockito::Mock::expect_at_least - `Mock::expect_at_least`\n\u27e864\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most: method mockito::Mock::expect_at_most - `Mock::expect_at_most`\n\u27e865\u27e9 https://docs.rs/mockito/latest/mockito/#example-19: \u00a7\n\u27e866\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched: method mockito::Mock::matched - `Mock::matched`\n\u27e867\u27e9 https://docs.rs/mockito/latest/mockito/#example-20: \u00a7\n\u27e868\u27e9 https://docs.rs/mockito/latest/mockito/#non-matching-calls: \u00a7\n\u27e869\u27e9 https://docs.rs/mockito/latest/mockito/#cleaning-up: \u00a7\n\u27e870\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset: method mockito::Server::reset - `Server::reset`\n\u27e871\u27e9 https://docs.rs/mockito/latest/mockito/#debug: \u00a7\n\u27e872\u27e9 https://crates.rs/crates/env_logger: env_logger\n\u27e873\u27e9 https://docs.rs/mockito/latest/mockito/#structs: \u00a7\n\u27e874\u27e9 https://docs.rs/mockito/latest/mockito/struct.Error.html: struct mockito::Error - Error\n\u27e875\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html: struct mockito::Mock - Mock\n\u27e876\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html: struct mockito::Server - Server\n\u27e877\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html: struct mockito::ServerGuard - ServerGuard\n\u27e878\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html: struct mockito::ServerOpts - ServerOpts\n\u27e879\u27e9 https://docs.rs/mockito/latest/mockito/#enums: \u00a7\n\u27e880\u27e9 https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html: enum mockito::ErrorKind - ErrorKind\n\u27e881\u27e9 https://docs.rs/mockito/latest/mockito/#traits: \u00a7\n\u27e882\u27e9 https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html: trait mockito::IntoHeaderName - IntoHeaderName\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "mockito",
          "version": "1.7.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\n[Settings](https://docs.rs/mockito/latest/settings.html)\n[Help](https://docs.rs/mockito/latest/help.html)\nSummary[Source](https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746)\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#features)Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#getting-started)Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#lifetime)Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\").\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#async)Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * [`Server::new_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async \"associated function mockito::Server::new_async\")\n  * [`Server::new_with_opts_async`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async \"associated function mockito::Server::new_with_opts_async\")\n  * [`Mock::create_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async \"method mockito::Mock::create_async\")\n  * [`Mock::assert_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async \"method mockito::Mock::assert_async\")\n  * [`Mock::matched_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async \"method mockito::Mock::matched_async\")\n  * [`Mock::remove_async`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async \"method mockito::Mock::remove_async\")\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#configuring-the-server)Configuring the server\nWhen calling [`Server::new()`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new \"associated function mockito::Server::new\"), a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use [`Server::new_with_opts`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts \"associated function mockito::Server::new_with_opts\"). The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call [`Mock::assert()`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matchers)Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the [`Matcher`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\") documentation for all the rest.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query)Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example)Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-1)Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-2)Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-query)Matching by query\nYou can match the query part by using the [`Mock::match_query`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query \"method mockito::Mock::match_query\") function together with the various matchers, most notably [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\"):\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-3)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for [`Matcher::UrlEncoded`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded \"variant mockito::Matcher::UrlEncoded\") should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a [`mock`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock \"method mockito::Server::mock\") call, in which case an exact match will be performed:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-4)Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") variant:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-5)Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-header)Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-6)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the [`Matcher::Regex`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex \"variant mockito::Matcher::Regex\") matcher:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-7)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-8)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the [`Mock::match_header`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header \"method mockito::Mock::match_header\") value to [`Matcher::Missing`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing \"variant mockito::Matcher::Missing\").\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-9)Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#matching-by-body)Matching by body\nYou can match a request by its body by using the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method. By default, the request body is ignored, similar to passing the [`Matcher::Any`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any \"variant mockito::Matcher::Any\") argument to the [`Mock::match_body`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body \"method mockito::Mock::match_body\") method.\nYou can match a body by an exact value:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-10)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-11)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-12)Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use [`Matcher::JsonString`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString \"variant mockito::Matcher::JsonString\") the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-anyof-matcher)The `AnyOf` matcher\nThe [`Matcher::AnyOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf \"variant mockito::Matcher::AnyOf\") construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-13)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#the-allof-matcher)The `AllOf` matcher\nThe [`Matcher::AllOf`](https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf \"variant mockito::Matcher::AllOf\") construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-14)Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#custom-matchers)Custom matchers\nIf you need a more custom matcher, you can use the [`Mock::match_request`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request \"method mockito::Mock::match_request\") function, which takes a closure and exposes the [`Request`](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\") object as an argument. The closure should return a boolean value.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-15)Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#asserts)Asserts\nYou can use the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-16)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-17)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the [`Mock::expect`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect \"method mockito::Mock::expect\") method to specify the exact amount of requests:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-18)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the [`Mock::expect_at_least`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least \"method mockito::Mock::expect_at_least\") and [`Mock::expect_at_most`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most \"method mockito::Mock::expect_at_most\") methods:\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-19)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png](https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png)\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a [`Mock::assert`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert \"method mockito::Mock::assert\") error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the [`Mock::matched`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched \"method mockito::Mock::matched\") method to return a boolean for whether the mock was called the correct number of times without panicking\n### [\u00a7](https://docs.rs/mockito/latest/mockito/#example-20)Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#non-matching-calls)Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#cleaning-up)Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call [`Server::reset`](https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset \"method mockito::Server::reset\") to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call [`Mock::remove`](https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove \"method mockito::Mock::remove\") to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## [\u00a7](https://docs.rs/mockito/latest/mockito/#debug)Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the [env_logger](https://crates.rs/crates/env_logger) crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs[\u00a7](https://docs.rs/mockito/latest/mockito/#structs)\n\n[Error](https://docs.rs/mockito/latest/mockito/struct.Error.html \"struct mockito::Error\")\n    Contains information about an error occurence\n\n[Mock](https://docs.rs/mockito/latest/mockito/struct.Mock.html \"struct mockito::Mock\")\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\n[Request](https://docs.rs/mockito/latest/mockito/struct.Request.html \"struct mockito::Request\")\n    Stores a HTTP request\n\n[Server](https://docs.rs/mockito/latest/mockito/struct.Server.html \"struct mockito::Server\")\n    One instance of the mock server.\n\n[ServerGuard](https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html \"struct mockito::ServerGuard\")\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\n[ServerOpts](https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html \"struct mockito::ServerOpts\")\n    Options to configure a mock server. Provides a default implementation.\n## Enums[\u00a7](https://docs.rs/mockito/latest/mockito/#enums)\n\n[ErrorKind](https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html \"enum mockito::ErrorKind\")\n    The type of an error\n\n[Matcher](https://docs.rs/mockito/latest/mockito/enum.Matcher.html \"enum mockito::Matcher\")\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits[\u00a7](https://docs.rs/mockito/latest/mockito/#traits)\n\n[IntoHeaderName](https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html \"trait mockito::IntoHeaderName\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/mockito/latest/mockito/all.html \"show sidebar\")\n# Crate mockitoCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMockito is a library for **generating and delivering HTTP mocks** in Rust. You can use it for integration testing or offline work. Mockito runs a local pool of HTTP servers which create, deliver and remove the mocks.\n## \u00a7\u27e84\u27e9Features\n  * Supports HTTP1/2\n  * Runs your tests in parallel\n  * Comes with a wide range of request matchers (Regex, JSON, query parameters etc.)\n  * Checks that a mock was called (spy)\n  * Mocks multiple hosts at the same time\n  * Exposes sync and async interfaces\n  * Prints out a colored diff of the last unmatched request in case of errors\n  * Simple, intuitive API\n  * An awesome logo\n\n\n## \u00a7\u27e85\u27e9Getting Started\nAdd `mockito` to your `Cargo.toml` and start mocking:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  // Request a new server from the pool\n  let mut server = mockito::Server::new();\n  // Use one of these addresses to configure your client\n  let host = server.host_with_port();\n  let url = server.url();\n  // Create a mock\n  let mock = server.mock(\"GET\", \"/hello\")\n   .with_status(201)\n   .with_header(\"content-type\", \"text/plain\")\n   .with_header(\"x-api-key\", \"1234\")\n   .with_body(\"world\")\n   .create();\n  // Any calls to GET /hello beyond this line will respond with 201, the\n  // `content-type: text/plain` header and the body \"world\".\n  // You can use `Mock::assert` to verify that your mock was called\n  // mock.assert();\n }\n}\n```\n\nIf `Mock::assert`\u27e86\u27e9 fails, a colored diff of the last unmatched request is displayed:\n![colored-diff.png\u27e87\u27e9]\nUse **matchers** to handle requests to the same endpoint in a different way:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut server = mockito::Server::new();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/json\")\n   .match_body(mockito::Matcher::PartialJsonString(\n     \"{\\\"greeting\\\": \\\"hello\\\"}\".to_string(),\n   ))\n   .with_body(\"hello json\")\n   .create();\n  server.mock(\"GET\", \"/greetings\")\n   .match_header(\"content-type\", \"application/text\")\n   .match_body(mockito::Matcher::Regex(\"greeting=hello\".to_string()))\n   .with_body(\"hello text\")\n   .create();\n }\n}\n```\n\nStart **multiple servers** to simulate requests to different hosts:\n```\n#[cfg(test)]\nmod tests {\n #[test]\n fn test_something() {\n  let mut twitter = mockito::Server::new();\n  let mut github = mockito::Server::new();\n  // These mocks will be available at `twitter.url()`\n  let twitter_mock = twitter.mock(\"GET\", \"/api\").create();\n  // These mocks will be available at `github.url()`\n  let github_mock = github.mock(\"GET\", \"/api\").create();\n }\n}\n```\n\nWrite **async** tests (make sure to use the `_async` methods!):\n```\n#[cfg(test)]\nmod tests {\n #[tokio::test]\n async fn test_something() {\n  let mut server = Server::new_async().await;\n  let m1 = server.mock(\"GET\", \"/a\").with_body(\"aaa\").create_async().await;\n  let m2 = server.mock(\"GET\", \"/b\").with_body(\"bbb\").create_async().await;\n  let (m1, m2) = futures::join!(m1, m2);\n  // You can use `Mock::assert_async` to verify that your mock was called\n  // m1.assert_async().await;\n  // m2.assert_async().await;\n }\n}\n```\n\nStart a **stand-alone server** on a dedicated port:\n```\nfn main() {\n  let opts = mockito::ServerOpts {\n    host: \"0.0.0.0\",\n    port: 1234,\n    ..Default::default()\n  };\n  let mut server = mockito::Server::new_with_opts(opts);\n  let _m = server.mock(\"GET\", \"/\").with_body(\"hello world\").create();\n  // loop {}\n}\n```\n\n## \u00a7\u27e88\u27e9Lifetime\nA mock is available only throughout the lifetime of the server. Once the server goes out of scope, all mocks defined on that server are removed:\n```\nlet address;\n{\n  let mut s = mockito::Server::new();\n  address = s.host_with_port();\n  s.mock(\"GET\", \"/\").with_body(\"hi\").create();\n  // Requests to `address` will be responded with \"hi\" til here\n}\n// Requests to `address` will fail as of this point\n```\n\nYou can remove individual mocks earlier by calling `Mock::remove`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Async\nMockito comes with both a sync and an async interface.\nIn order to write async tests, you\u2019ll need to use the `*_async` methods:\n  * `Server::new_async`\u27e811\u27e9\n  * `Server::new_with_opts_async`\u27e812\u27e9\n  * `Mock::create_async`\u27e813\u27e9\n  * `Mock::assert_async`\u27e814\u27e9\n  * `Mock::matched_async`\u27e815\u27e9\n  * `Mock::remove_async`\u27e816\u27e9\n\n\n\u2026otherwise your tests will not compile, and you\u2019ll see the following error:\n```\nCannot block the current thread from within a runtime.\nThis happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.\n```\n\n## \u00a7\u27e817\u27e9Configuring the server\nWhen calling `Server::new()`\u27e818\u27e9, a mock server with default options is returned from the server pool. This should suffice for most use cases.\nIf you\u2019d like to bypass the server pool or configure the server in a different way, you can use `Server::new_with_opts`\u27e819\u27e9. The following **options** are available:\n  * `host`: allows setting the host (defaults to `127.0.0.1`)\n  * `port`: allows setting the port (defaults to a randomly assigned free port)\n  * `assert_on_drop`: automatically call `Mock::assert()`\u27e86\u27e9 before dropping a mock (defaults to `false`)\n\n\n```\nlet opts = mockito::ServerOpts { assert_on_drop: true, ..Default::default() };\nlet server = mockito::Server::new_with_opts(opts);\n```\n\n## \u00a7\u27e820\u27e9Matchers\nMockito can match your request by method, path, query, headers or body.\nVarious matchers are provided by the `Matcher`\u27e821\u27e9 type: exact (string, binary, JSON), partial (regular expressions, JSON), any or missing. The following guide will walk you through the most common matchers. Check the `Matcher`\u27e821\u27e9 documentation for all the rest.\n## \u00a7\u27e822\u27e9Matching by path and query\nBy default, the request path and query is compared by its exact value:\n### \u00a7\u27e823\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Matches only calls to GET /hello\ns.mock(\"GET\", \"/hello\").create();\n// Matches only calls to GET /hello?world=1\ns.mock(\"GET\", \"/hello?world=1\").create();\n```\n\nYou can also match the path partially, by using a regular expression:\n### \u00a7\u27e824\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match calls to GET /hello/1 and GET /hello/2\ns.mock(\"GET\",\n  mockito::Matcher::Regex(r\"^/hello/(1|2)$\".to_string())\n ).create();\n```\n\nOr you can catch all requests, by using the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e826\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match any GET request\ns.mock(\"GET\", mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e827\u27e9Matching by query\nYou can match the query part by using the `Mock::match_query`\u27e828\u27e9 function together with the various matchers, most notably `Matcher::UrlEncoded`\u27e829\u27e9:\n### \u00a7\u27e830\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests containing the URL-encoded\n// query parameter `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into()))\n .create();\n// This will match requests containing the URL-encoded\n// query parameters `hello=world` and `greeting=good%20day`\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::AllOf(vec![\n  mockito::Matcher::UrlEncoded(\"hello\".into(), \"world\".into()),\n  mockito::Matcher::UrlEncoded(\"greeting\".into(), \"good day\".into())\n ]))\n .create();\n// You can achieve similar results with the regex matcher\ns.mock(\"GET\", \"/test\")\n .match_query(mockito::Matcher::Regex(\"hello=world\".into()))\n .create();\n```\n\nNote that the key/value arguments for `Matcher::UrlEncoded`\u27e829\u27e9 should be left in plain (unencoded) format.\nYou can also specify the query as part of the path argument in a `mock`\u27e831\u27e9 call, in which case an exact match will be performed:\n### \u00a7\u27e832\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will perform a full match against the query part\ns.mock(\"GET\", \"/test?hello=world\").create();\n```\n\nIf you\u2019d like to ignore the query entirely, use the `Matcher::Any`\u27e825\u27e9 variant:\n### \u00a7\u27e833\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// This will match requests to GET /test with any query\ns.mock(\"GET\", \"/test\").match_query(mockito::Matcher::Any).create();\n```\n\n## \u00a7\u27e834\u27e9Matching by header\nBy default, headers are compared by their exact value. The header name letter case is ignored though.\n### \u00a7\u27e835\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"application/json\")\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", \"text/plain\")\n .with_body(\"world\")\n .create();\n// JSON requests to GET /hello will respond with JSON, while plain requests\n// will respond with text.\n```\n\nYou can also match a header value with a _regular expressions_ , by using the `Matcher::Regex`\u27e836\u27e9 matcher:\n### \u00a7\u27e837\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Regex(r\".*json.*\".to_string()))\n .with_body(r#\"{\"hello\": \"world\"}\"#)\n .create();\n```\n\nOr you can match a header _only by its field name_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Any`\u27e825\u27e9.\n### \u00a7\u27e839\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"content-type\", mockito::Matcher::Any)\n .with_body(\"something\")\n .create();\n// Requests containing any content-type header value will be mocked.\n// Requests not containing this header will return `501 Not Implemented`.\n```\n\nYou can mock requests that should be _missing a particular header field_ , by setting the `Mock::match_header`\u27e838\u27e9 value to `Matcher::Missing`\u27e840\u27e9.\n### \u00a7\u27e841\u27e9Example\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/hello\")\n .match_header(\"authorization\", mockito::Matcher::Missing)\n .with_body(\"no authorization header\")\n .create();\n// Requests without the authorization header will be matched.\n// Requests containing the authorization header will return `501 Mock Not Found`.\n```\n\n## \u00a7\u27e842\u27e9Matching by body\nYou can match a request by its body by using the `Mock::match_body`\u27e843\u27e9 method. By default, the request body is ignored, similar to passing the `Matcher::Any`\u27e825\u27e9 argument to the `Mock::match_body`\u27e843\u27e9 method.\nYou can match a body by an exact value:\n### \u00a7\u27e844\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is \"hello\"\ns.mock(\"POST\", \"/\").match_body(\"hello\").create();\n```\n\nOr you can match the body by using a regular expression:\n### \u00a7\u27e845\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body *contains* the word \"hello\" (e.g. \"hello world\")\ns.mock(\"POST\", \"/\").match_body(\n  mockito::Matcher::Regex(\"hello\".to_string())\n ).create();\n```\n\nOr you can match the body using a JSON object:\n### \u00a7\u27e846\u27e9Example\n```\n#[macro_use]\nextern crate serde_json;\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\").match_body(mockito::Matcher::Json(json!({\"hello\": \"world\"}))).create();\n```\n\nIf `serde_json::json!` is not exposed, you can use `Matcher::JsonString`\u27e847\u27e9 the same way, but by passing a `String` to the matcher:\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body matches the json object\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string())\n  )\n  .create();\n```\n\n## \u00a7\u27e848\u27e9The `AnyOf` matcher\nThe `Matcher::AnyOf`\u27e849\u27e9 construct takes a vector of matchers as arguments and will be enabled if at least one of the provided matchers matches the request.\n### \u00a7\u27e850\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body is either `hello=world` or `{\"hello\":\"world\"}`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AnyOf(vec![\n      mockito::Matcher::Exact(\"hello=world\".to_string()),\n      mockito::Matcher::JsonString(r#\"{\"hello\": \"world\"}\"#.to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e851\u27e9The `AllOf` matcher\nThe `Matcher::AllOf`\u27e852\u27e9 construct takes a vector of matchers as arguments and will be enabled if all the provided matchers match the request.\n### \u00a7\u27e853\u27e9Example\n```\nlet mut s = mockito::Server::new();\n// Will match requests to POST / whenever the request body contains both `hello` and `world`\ns.mock(\"POST\", \"/\")\n  .match_body(\n    mockito::Matcher::AllOf(vec![\n      mockito::Matcher::Regex(\"hello\".to_string()),\n      mockito::Matcher::Regex(\"world\".to_string()),\n    ])\n   )\n  .create();\n```\n\n## \u00a7\u27e854\u27e9Custom matchers\nIf you need a more custom matcher, you can use the `Mock::match_request`\u27e855\u27e9 function, which takes a closure and exposes the `Request`\u27e856\u27e9 object as an argument. The closure should return a boolean value.\n### \u00a7\u27e857\u27e9Example\n```\nuse mockito::Matcher;\nlet mut s = mockito::Server::new();\n// This will match requests that have the x-test header set\n// and contain the word \"hello\" inside the body\ns.mock(\"GET\", \"/\")\n  .match_request(|request| {\n    request.has_header(\"x-test\") &&\n      request.utf8_lossy_body().unwrap().contains(\"hello\")\n  })\n  .create();\n```\n\n## \u00a7\u27e858\u27e9Asserts\nYou can use the `Mock::assert`\u27e86\u27e9 method to **assert that a mock was called**. In other words, `Mock#assert` can validate that your code performed the expected HTTP request.\nBy default, the method expects only **one** request to your mock.\n### \u00a7\u27e859\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").create();\n{\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nWhen several mocks can match a request, Mockito applies the first one that still expects requests. You can use this behaviour to provide **different responses for subsequent requests to the same endpoint**.\n### \u00a7\u27e860\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet english_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"good bye\").create();\nlet french_hello_mock = s.mock(\"GET\", \"/hello\").with_body(\"au revoir\").create();\n{\n  // Place a request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nenglish_hello_mock.assert();\n{\n  // Place another request to GET /hello\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nfrench_hello_mock.assert();\n```\n\nIf you\u2019re expecting more than 1 request, you can use the `Mock::expect`\u27e861\u27e9 method to specify the exact amount of requests:\n### \u00a7\u27e862\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect(3).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nYou can also work with ranges, by using the `Mock::expect_at_least`\u27e863\u27e9 and `Mock::expect_at_most`\u27e864\u27e9 methods:\n### \u00a7\u27e865\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/hello\").expect_at_least(2).expect_at_most(4).create();\nfor _ in 0..3 {\n  // Place a request\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET /hello HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nmock.assert();\n```\n\nThe errors produced by the `Mock::assert`\u27e86\u27e9 method contain information about the tested mock, but also about the **last unmatched request** , which can be very useful to track down an error in your implementation or a missing or incomplete mock. A colored diff is also displayed:\n![colored-diff.png\u27e87\u27e9]\nColor output is enabled by default, but can be toggled with the `color` feature flag.\nHere\u2019s an example of how a `Mock::assert`\u27e86\u27e9 error looks like:\n```\n> Expected 1 request(s) to:\nPOST /users?number=one\nbob\n...but received 0\n> The last unmatched request was:\nPOST /users?number=two\ncontent-length: 5\nalice\n> Difference:\n# A colored diff\n\n```\n\nYou can also use the `Mock::matched`\u27e866\u27e9 method to return a boolean for whether the mock was called the correct number of times without panicking\n### \u00a7\u27e867\u27e9Example\n```\nuse std::net::TcpStream;\nuse std::io::{Read, Write};\nlet mut s = mockito::Server::new();\nlet mock = s.mock(\"GET\", \"/\").create();\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(mock.matched());\n{\n  let mut stream = TcpStream::connect(s.host_with_port()).unwrap();\n  stream.write_all(\"GET / HTTP/1.1\\r\\n\\r\\n\".as_bytes()).unwrap();\n  let mut response = String::new();\n  stream.read_to_string(&mut response).unwrap();\n  stream.flush().unwrap();\n}\nassert!(!mock.matched());\n```\n\n## \u00a7\u27e868\u27e9Non-matching calls\nAny calls to the Mockito server that are not matched will return _501 Not Implemented_.\nNote that **mocks are matched in reverse order** - the most recent one wins.\n## \u00a7\u27e869\u27e9Cleaning up\nAs mentioned earlier, mocks are cleaned up whenever the server goes out of scope. If you need to remove them earlier, you can call `Server::reset`\u27e870\u27e9 to remove all mocks registered so far:\n```\nlet mut s = mockito::Server::new();\ns.mock(\"GET\", \"/1\").create();\ns.mock(\"GET\", \"/2\").create();\ns.mock(\"GET\", \"/3\").create();\ns.reset();\n// Nothing is mocked at this point\n```\n\n\u2026or you can call `Mock::remove`\u27e89\u27e9 to remove a single mock:\n```\nlet mut s = mockito::Server::new();\nlet m1 = s.mock(\"GET\", \"/1\").create();\nlet m2 = s.mock(\"GET\", \"/2\").create();\nm1.remove();\n// Only m2 is available at this point\n```\n\n## \u00a7\u27e871\u27e9Debug\nMockito uses the `env_logger` crate under the hood to provide useful debugging information.\nIf you\u2019d like to activate the debug output, introduce the env_logger\u27e872\u27e9 crate to your project and initialize it before each test that needs debugging:\n```\n#[test]\nfn example_test() {\n  let _ = env_logger::try_init();\n  // ...\n}\n```\n\nRun your tests with:\n```\nRUST_LOG=mockito=debug cargo test\n```\n\n## Structs\u00a7\u27e873\u27e9\n\nError\u27e874\u27e9\n    Contains information about an error occurence\n\nMock\u27e875\u27e9\n    Stores information about a mocked request. Should be initialized via `Server::mock()`.\n\nRequest\u27e856\u27e9\n    Stores a HTTP request\n\nServer\u27e876\u27e9\n    One instance of the mock server.\n\nServerGuard\u27e877\u27e9\n    A handle around a pooled `Server` object which dereferences to `Server`.\n\nServerOpts\u27e878\u27e9\n    Options to configure a mock server. Provides a default implementation.\n## Enums\u00a7\u27e879\u27e9\n\nErrorKind\u27e880\u27e9\n    The type of an error\n\nMatcher\u27e821\u27e9\n    Allows matching the request path, headers or body in multiple ways: by the exact value, by any value (as long as it is present), by regular expression or by checking that a particular header is missing.\n## Traits\u00a7\u27e881\u27e9\n\nIntoHeaderName\u27e882\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mockito/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mockito/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mockito/latest/src/mockito/lib.rs.html#1-746: Source\n\u27e84\u27e9 https://docs.rs/mockito/latest/mockito/#features: \u00a7\n\u27e85\u27e9 https://docs.rs/mockito/latest/mockito/#getting-started: \u00a7\n\u27e86\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert: method mockito::Mock::assert - `Mock::assert`\n\u27e87\u27e9 https://raw.githubusercontent.com/lipanski/mockito/master/docs/colored-diff.png: colored-diff.png\n\u27e88\u27e9 https://docs.rs/mockito/latest/mockito/#lifetime: \u00a7\n\u27e89\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove: method mockito::Mock::remove - `Mock::remove`\n\u27e810\u27e9 https://docs.rs/mockito/latest/mockito/#async: \u00a7\n\u27e811\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_async: associated function mockito::Server::new_async - `Server::new_async`\n\u27e812\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts_async: associated function mockito::Server::new_with_opts_async - `Server::new_with_opts_async`\n\u27e813\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.create_async: method mockito::Mock::create_async - `Mock::create_async`\n\u27e814\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.assert_async: method mockito::Mock::assert_async - `Mock::assert_async`\n\u27e815\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched_async: method mockito::Mock::matched_async - `Mock::matched_async`\n\u27e816\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.remove_async: method mockito::Mock::remove_async - `Mock::remove_async`\n\u27e817\u27e9 https://docs.rs/mockito/latest/mockito/#configuring-the-server: \u00a7\n\u27e818\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new: associated function mockito::Server::new - `Server::new()`\n\u27e819\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.new_with_opts: associated function mockito::Server::new_with_opts - `Server::new_with_opts`\n\u27e820\u27e9 https://docs.rs/mockito/latest/mockito/#matchers: \u00a7\n\u27e821\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html: enum mockito::Matcher - `Matcher`\n\u27e822\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-path-and-query: \u00a7\n\u27e823\u27e9 https://docs.rs/mockito/latest/mockito/#example: \u00a7\n\u27e824\u27e9 https://docs.rs/mockito/latest/mockito/#example-1: \u00a7\n\u27e825\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Any: variant mockito::Matcher::Any - `Matcher::Any`\n\u27e826\u27e9 https://docs.rs/mockito/latest/mockito/#example-2: \u00a7\n\u27e827\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-query: \u00a7\n\u27e828\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_query: method mockito::Mock::match_query - `Mock::match_query`\n\u27e829\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.UrlEncoded: variant mockito::Matcher::UrlEncoded - `Matcher::UrlEncoded`\n\u27e830\u27e9 https://docs.rs/mockito/latest/mockito/#example-3: \u00a7\n\u27e831\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.mock: method mockito::Server::mock - `mock`\n\u27e832\u27e9 https://docs.rs/mockito/latest/mockito/#example-4: \u00a7\n\u27e833\u27e9 https://docs.rs/mockito/latest/mockito/#example-5: \u00a7\n\u27e834\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-header: \u00a7\n\u27e835\u27e9 https://docs.rs/mockito/latest/mockito/#example-6: \u00a7\n\u27e836\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Regex: variant mockito::Matcher::Regex - `Matcher::Regex`\n\u27e837\u27e9 https://docs.rs/mockito/latest/mockito/#example-7: \u00a7\n\u27e838\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_header: method mockito::Mock::match_header - `Mock::match_header`\n\u27e839\u27e9 https://docs.rs/mockito/latest/mockito/#example-8: \u00a7\n\u27e840\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.Missing: variant mockito::Matcher::Missing - `Matcher::Missing`\n\u27e841\u27e9 https://docs.rs/mockito/latest/mockito/#example-9: \u00a7\n\u27e842\u27e9 https://docs.rs/mockito/latest/mockito/#matching-by-body: \u00a7\n\u27e843\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_body: method mockito::Mock::match_body - `Mock::match_body`\n\u27e844\u27e9 https://docs.rs/mockito/latest/mockito/#example-10: \u00a7\n\u27e845\u27e9 https://docs.rs/mockito/latest/mockito/#example-11: \u00a7\n\u27e846\u27e9 https://docs.rs/mockito/latest/mockito/#example-12: \u00a7\n\u27e847\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.JsonString: variant mockito::Matcher::JsonString - `Matcher::JsonString`\n\u27e848\u27e9 https://docs.rs/mockito/latest/mockito/#the-anyof-matcher: \u00a7\n\u27e849\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AnyOf: variant mockito::Matcher::AnyOf - `Matcher::AnyOf`\n\u27e850\u27e9 https://docs.rs/mockito/latest/mockito/#example-13: \u00a7\n\u27e851\u27e9 https://docs.rs/mockito/latest/mockito/#the-allof-matcher: \u00a7\n\u27e852\u27e9 https://docs.rs/mockito/latest/mockito/enum.Matcher.html#variant.AllOf: variant mockito::Matcher::AllOf - `Matcher::AllOf`\n\u27e853\u27e9 https://docs.rs/mockito/latest/mockito/#example-14: \u00a7\n\u27e854\u27e9 https://docs.rs/mockito/latest/mockito/#custom-matchers: \u00a7\n\u27e855\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.match_request: method mockito::Mock::match_request - `Mock::match_request`\n\u27e856\u27e9 https://docs.rs/mockito/latest/mockito/struct.Request.html: struct mockito::Request - `Request`\n\u27e857\u27e9 https://docs.rs/mockito/latest/mockito/#example-15: \u00a7\n\u27e858\u27e9 https://docs.rs/mockito/latest/mockito/#asserts: \u00a7\n\u27e859\u27e9 https://docs.rs/mockito/latest/mockito/#example-16: \u00a7\n\u27e860\u27e9 https://docs.rs/mockito/latest/mockito/#example-17: \u00a7\n\u27e861\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect: method mockito::Mock::expect - `Mock::expect`\n\u27e862\u27e9 https://docs.rs/mockito/latest/mockito/#example-18: \u00a7\n\u27e863\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_least: method mockito::Mock::expect_at_least - `Mock::expect_at_least`\n\u27e864\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.expect_at_most: method mockito::Mock::expect_at_most - `Mock::expect_at_most`\n\u27e865\u27e9 https://docs.rs/mockito/latest/mockito/#example-19: \u00a7\n\u27e866\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html#method.matched: method mockito::Mock::matched - `Mock::matched`\n\u27e867\u27e9 https://docs.rs/mockito/latest/mockito/#example-20: \u00a7\n\u27e868\u27e9 https://docs.rs/mockito/latest/mockito/#non-matching-calls: \u00a7\n\u27e869\u27e9 https://docs.rs/mockito/latest/mockito/#cleaning-up: \u00a7\n\u27e870\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html#method.reset: method mockito::Server::reset - `Server::reset`\n\u27e871\u27e9 https://docs.rs/mockito/latest/mockito/#debug: \u00a7\n\u27e872\u27e9 https://crates.rs/crates/env_logger: env_logger\n\u27e873\u27e9 https://docs.rs/mockito/latest/mockito/#structs: \u00a7\n\u27e874\u27e9 https://docs.rs/mockito/latest/mockito/struct.Error.html: struct mockito::Error - Error\n\u27e875\u27e9 https://docs.rs/mockito/latest/mockito/struct.Mock.html: struct mockito::Mock - Mock\n\u27e876\u27e9 https://docs.rs/mockito/latest/mockito/struct.Server.html: struct mockito::Server - Server\n\u27e877\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerGuard.html: struct mockito::ServerGuard - ServerGuard\n\u27e878\u27e9 https://docs.rs/mockito/latest/mockito/struct.ServerOpts.html: struct mockito::ServerOpts - ServerOpts\n\u27e879\u27e9 https://docs.rs/mockito/latest/mockito/#enums: \u00a7\n\u27e880\u27e9 https://docs.rs/mockito/latest/mockito/enum.ErrorKind.html: enum mockito::ErrorKind - ErrorKind\n\u27e881\u27e9 https://docs.rs/mockito/latest/mockito/#traits: \u00a7\n\u27e882\u27e9 https://docs.rs/mockito/latest/mockito/trait.IntoHeaderName.html: trait mockito::IntoHeaderName - IntoHeaderName\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `mockito` crate enables HTTP mocking for testing in Rust by creating mock servers that simulate specific request-response behavior. It supports features like customizable request matching (via headers, body, query parameters, or regex), async testing, multiple servers for different hosts, and standalone server setups. Additionally, it provides tools for verifying mock usage and displaying detailed diffs for unmatched requests.",
          "feature_summary": null,
          "use_case": "DevTools",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Mocking HTTP Requests  \n\u2705 Factual: The `mockito` crate allows developers to mock HTTP requests by specifying the method, path, headers, and body, enabling tests to simulate server responses without relying on external APIs.  \n\u274c Counterfactual: The `mockito` crate automatically generates mock responses based on the structure of the request without requiring developers to define specific mocks.  \n\n---\n\n### Pair 2: Multiple Server Instances  \n\u2705 Factual: The `mockito` crate supports creating multiple server instances simultaneously, allowing developers to simulate interactions with different hosts in the same test suite.  \n\u274c Counterfactual: The `mockito` crate restricts developers to a single server instance per test, making it unsuitable for testing multi-host interactions.  \n\n---\n\n### Pair 3: Async Support  \n\u2705 Factual: The `mockito` crate provides asynchronous methods like `Server::new_async` and `Mock::create_async`, enabling developers to write non-blocking tests for async code.  \n\u274c Counterfactual: The `mockito` crate does not support asynchronous testing, requiring developers to use blocking methods even in async test environments.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-fa2d26cb-96418432-1751258237",
      "timestamp": "2025-06-30T04:37:17.418436+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]