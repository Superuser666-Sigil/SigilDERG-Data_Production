[
  {
    "execution_id": "exec-4cbeb514-b26a6c60-1751260993",
    "timestamp": "2025-06-30T05:23:13.238195+00:00",
    "sacred_chain": {
      "input_data": "siphasher",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'siphasher' -> 'siphasher'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "siphasher",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/siphasher",
            "title": "siphasher v1.0.1",
            "content": {
              "raw_markdown": "#  siphasher v1.0.1\nSipHash-2-4, SipHash-1-3 and 128-bit variants in pure Rust \n  * [ #siphash ](https://crates.io/keywords/siphash)\n  * [ #crypto ](https://crates.io/keywords/crypto)\n  * [ #hash ](https://crates.io/keywords/hash)\n\n\n  * [ Readme ](https://crates.io/crates/siphasher)\n  * [ 22 Versions ](https://crates.io/crates/siphasher/versions)\n  * [ Dependencies ](https://crates.io/crates/siphasher/dependencies)\n  * [ Dependents ](https://crates.io/crates/siphasher/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n10.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add siphasher\nOr add the following line to your Cargo.toml:\nsiphasher = \"1.0.1\"\n## Homepage\n[ docs.rs/siphasher ](https://docs.rs/siphasher)\n## Documentation\n[ docs.rs/siphasher ](https://docs.rs/siphasher)\n## Repository\n[ github.com/jedisct1/rust-siphash ](https://github.com/jedisct1/rust-siphash)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=siphasher&inquire=crate-violation)\n### Stats Overview\n176,106,560 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  siphasher v1.0.1\nSipHash-2-4, SipHash-1-3 and 128-bit variants in pure Rust \n  *  #siphash \u27e81\u27e9\n  *  #crypto \u27e82\u27e9\n  *  #hash \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  22 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nover 1 year ago \n2018 edition \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n10.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add siphasher\nOr add the following line to your Cargo.toml:\nsiphasher = \"1.0.1\"\n## Homepage\n docs.rs/siphasher \u27e810\u27e9\n## Documentation\n docs.rs/siphasher \u27e810\u27e9\n## Repository\n github.com/jedisct1/rust-siphash \u27e811\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e812\u27e9\n  * Cryptography\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n176,106,560 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/siphash:  #siphash \n\u27e82\u27e9 https://crates.io/keywords/crypto:  #crypto \n\u27e83\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e84\u27e9 https://crates.io/crates/siphasher:  Readme \n\u27e85\u27e9 https://crates.io/crates/siphasher/versions:  22 Versions \n\u27e86\u27e9 https://crates.io/crates/siphasher/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/siphasher/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://docs.rs/siphasher:  docs.rs/siphasher \n\u27e811\u27e9 https://github.com/jedisct1/rust-siphash:  github.com/jedisct1/rust-siphash \n\u27e812\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e813\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e814\u27e9 https://crates.io/support?crate=siphasher&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1440,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114782.0580147"
          },
          "docs_rs": {
            "url": "https://docs.rs/siphasher",
            "title": "Crate siphasherCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\n[Settings](https://docs.rs/siphasher/latest/settings.html)\n[Help](https://docs.rs/siphasher/latest/help.html)\nSummary[Source](https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30)\nExpand description\n## [\u00a7](https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust)SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#usage)Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want [serde](https://github.com/serde-rs/serde) support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#api-documentation)[API documentation](https://docs.rs/siphasher/)\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#note)Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules[\u00a7](https://docs.rs/siphasher/latest/siphasher/#modules)\n\n[prelude](https://docs.rs/siphasher/latest/siphasher/prelude/index.html \"mod siphasher::prelude\")\n\n\n[sip](https://docs.rs/siphasher/latest/siphasher/sip/index.html \"mod siphasher::sip\")\n    An implementation of SipHash.\n\n[sip128](https://docs.rs/siphasher/latest/siphasher/sip128/index.html \"mod siphasher::sip128\")\n    An implementation of SipHash with a 128-bit output.\n",
              "markdown_with_citations": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### \u00a7\u27e85\u27e9Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want serde\u27e86\u27e9 support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### \u00a7\u27e87\u27e9API documentation\u27e88\u27e9\n### \u00a7\u27e89\u27e9Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules\u00a7\u27e810\u27e9\n\nprelude\u27e811\u27e9\n\n\nsip\u27e812\u27e9\n    An implementation of SipHash.\n\nsip128\u27e813\u27e9\n    An implementation of SipHash with a 128-bit output.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/siphasher/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/siphasher/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30: Source\n\u27e84\u27e9 https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust: \u00a7\n\u27e85\u27e9 https://docs.rs/siphasher/latest/siphasher/#usage: \u00a7\n\u27e86\u27e9 https://github.com/serde-rs/serde: serde\n\u27e87\u27e9 https://docs.rs/siphasher/latest/siphasher/#api-documentation: \u00a7\n\u27e88\u27e9 https://docs.rs/siphasher/: API documentation\n\u27e89\u27e9 https://docs.rs/siphasher/latest/siphasher/#note: \u00a7\n\u27e810\u27e9 https://docs.rs/siphasher/latest/siphasher/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/siphasher/latest/siphasher/prelude/index.html: mod siphasher::prelude - prelude\n\u27e812\u27e9 https://docs.rs/siphasher/latest/siphasher/sip/index.html: mod siphasher::sip - sip\n\u27e813\u27e9 https://docs.rs/siphasher/latest/siphasher/sip128/index.html: mod siphasher::sip128 - sip128\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3260,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114783.008523"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/siphasher",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [22 releases](https://lib.rs/crates/siphasher/versions) (2 stable)\n1.0.1 |  Mar 17, 2024   \n---|---  \n1.0.0 |  Aug 23, 2023   \n0.3.11 |  Aug 23, 2023   \n0.3.10 |  Mar 6, 2022   \n0.1.3 |  Nov 29, 2016   \n#**9** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 1821388/week @ 2025-01-28 2028521/week @ 2025-02-04 2016660/week @ 2025-02-11 2064370/week @ 2025-02-18 2084730/week @ 2025-02-25 2570394/week @ 2025-03-04 2546791/week @ 2025-03-11 2929797/week @ 2025-03-18 2675678/week @ 2025-03-25 2355987/week @ 2025-04-01 2442924/week @ 2025-04-08 2106292/week @ 2025-04-15 2231211/week @ 2025-04-22 2041947/week @ 2025-04-29 2189550/week @ 2025-05-06 1863808/week @ 2025-05-13\n**8,635,565** downloads per month Used in [**9,900** crates (163 directly)](https://lib.rs/crates/siphasher/rev)\n**MIT/Apache**\n57KB  1.5K  SLoC\n# SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe ``sip`` module implements the standard 64-bit mode, whereas the ``sip128`` module implements the 128-bit mode.\n## Usage\nIn ``Cargo.toml``:\n```\n```[``dependencies``]`\n`siphasher ``=` ``\"`1`\"``\n``\n```\n\nIf you want [serde](https://github.com/serde-rs/serde) support, include the feature like this:\n```\n```[``dependencies``]`\n`siphasher = { version = \"1\", features ``=` ``[```\"`serde`\"```]`` }\n``\n```\n\n64-bit mode:\n```\n``use` `siphasher`::```sip`::````{`SipHasher`,` SipHasher13`,` SipHasher24```}```;`\n``//` one-shot:`\n`let` array`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\n`let` h `=` hasher`.``hash``(`array`)``;`\n``//` incremental:`\n`use` `core`::```hash`::``Hasher`;`\n`let` array1`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` array2`:` `&``[``u8``]` `=` `&``[``4``,` `5``,` `6``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` `mut` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\nhasher`.``write``(`array1`)``;`\nhasher`.``write``(`array2`)``;`\n`let` h `=` hasher`.``finish``(``)``;`\n`\n```\n\n128-bit mode:\n```\n``use` `siphasher`::```sip128`::````{`Hasher128`,` SipHasher`,` SipHasher13`,` SipHasher24```}```;`\n``//` one-shot:`\n`let` array`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\n`let` h `=` hasher`.``hash``(`array`)``.``as_bytes``(``)``;`\n``//` incremental:`\n`use` `core`::```hash`::``Hasher`;`\n`let` array1`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` array2`:` `&``[``u8``]` `=` `&``[``4``,` `5``,` `6``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` `mut` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\nhasher`.``write``(`array1`)``;`\nhasher`.``write``(`array2`)``;`\n`let` h `=` hasher`.``finish128``(``)``.``as_bytes``(``)``;`\n`\n```\n\n## [API documentation](https://docs.rs/siphasher/)\n## Note\nDue to a confusing and not well documented API, methods from the ``Hasher`` trait of the standard library (```std`::```hash`::``Hasher``, ```core`::```hash`::``Hasher``) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are ```write``(``)``` and ```finish``(``)```.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n#### Dependencies\n~0\u2013280KB \n  * [serde_no_std?](https://lib.rs/crates/siphasher/features#feature-serde_no_std \"optional feature\") [serde_std?](https://lib.rs/crates/siphasher/features#feature-serde_std \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [ optional ](https://lib.rs/crates/siphasher/features#feature-serde_json \"serde_json is optional feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n\n\n#### [Other feature](https://lib.rs/crates/siphasher/features)\n  * [std](https://lib.rs/crates/siphasher/features#feature-std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  22 releases\u27e81\u27e9 (2 stable)\n1.0.1 |  Mar 17, 2024   \n---|---  \n1.0.0 |  Aug 23, 2023   \n0.3.11 |  Aug 23, 2023   \n0.3.10 |  Mar 6, 2022   \n0.1.3 |  Nov 29, 2016   \n#**9** in Algorithms\u27e82\u27e9\nDownload history 1821388/week @ 2025-01-28 2028521/week @ 2025-02-04 2016660/week @ 2025-02-11 2064370/week @ 2025-02-18 2084730/week @ 2025-02-25 2570394/week @ 2025-03-04 2546791/week @ 2025-03-11 2929797/week @ 2025-03-18 2675678/week @ 2025-03-25 2355987/week @ 2025-04-01 2442924/week @ 2025-04-08 2106292/week @ 2025-04-15 2231211/week @ 2025-04-22 2041947/week @ 2025-04-29 2189550/week @ 2025-05-06 1863808/week @ 2025-05-13\n**8,635,565** downloads per month Used in **9,900** crates (163 directly)\u27e83\u27e9\n**MIT/Apache**\n57KB  1.5K  SLoC\n# SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe ``sip`` module implements the standard 64-bit mode, whereas the ``sip128`` module implements the 128-bit mode.\n## Usage\nIn ``Cargo.toml``:\n```\n```[``dependencies``]`\n`siphasher ``=` ``\"`1`\"``\n``\n```\n\nIf you want serde\u27e84\u27e9 support, include the feature like this:\n```\n```[``dependencies``]`\n`siphasher = { version = \"1\", features ``=` ``[```\"`serde`\"```]`` }\n``\n```\n\n64-bit mode:\n```\n``use` `siphasher`::```sip`::````{`SipHasher`,` SipHasher13`,` SipHasher24```}```;`\n``//` one-shot:`\n`let` array`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\n`let` h `=` hasher`.``hash``(`array`)``;`\n``//` incremental:`\n`use` `core`::```hash`::``Hasher`;`\n`let` array1`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` array2`:` `&``[``u8``]` `=` `&``[``4``,` `5``,` `6``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` `mut` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\nhasher`.``write``(`array1`)``;`\nhasher`.``write``(`array2`)``;`\n`let` h `=` hasher`.``finish``(``)``;`\n`\n```\n\n128-bit mode:\n```\n``use` `siphasher`::```sip128`::````{`Hasher128`,` SipHasher`,` SipHasher13`,` SipHasher24```}```;`\n``//` one-shot:`\n`let` array`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\n`let` h `=` hasher`.``hash``(`array`)``.``as_bytes``(``)``;`\n``//` incremental:`\n`use` `core`::```hash`::``Hasher`;`\n`let` array1`:` `&``[``u8``]` `=` `&``[``1``,` `2``,` `3``]``;`\n`let` array2`:` `&``[``u8``]` `=` `&``[``4``,` `5``,` `6``]``;`\n`let` key`:` `&``[``u8``;` `16``]` `=` `&``[``1``,` `2``,` `3``,` `4``,` `5``,` `6``,` `7``,` `8``,` `9``,` `10``,` `11``,` `12``,` `13``,` `14``,` `15``,` `16``]``;`\n`let` `mut` hasher `=` `SipHasher13`::``new_with_key`(`key`)``;`\nhasher`.``write``(`array1`)``;`\nhasher`.``write``(`array2`)``;`\n`let` h `=` hasher`.``finish128``(``)``.``as_bytes``(``)``;`\n`\n```\n\n## API documentation\u27e85\u27e9\n## Note\nDue to a confusing and not well documented API, methods from the ``Hasher`` trait of the standard library (```std`::```hash`::``Hasher``, ```core`::```hash`::``Hasher``) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are ```write``(``)``` and ```finish``(``)```.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n#### Dependencies\n~0\u2013280KB \n  * serde_no_std?\u27e86\u27e9 serde_std?\u27e87\u27e9 serde\u27e88\u27e9+derive\u27e89\u27e9\n  *  optional \u27e810\u27e9 serde_json\u27e811\u27e9\n\n\n#### Other feature\u27e812\u27e9\n  * std\u27e813\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/siphasher/versions: 22 releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/siphasher/rev: **9,900** crates (163 directly)\n\u27e84\u27e9 https://github.com/serde-rs/serde: serde\n\u27e85\u27e9 https://docs.rs/siphasher/: API documentation\n\u27e86\u27e9 https://lib.rs/crates/siphasher/features#feature-serde_no_std: optional feature - serde_no_std?\n\u27e87\u27e9 https://lib.rs/crates/siphasher/features#feature-serde_std: optional feature - serde_std?\n\u27e88\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e89\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e810\u27e9 https://lib.rs/crates/siphasher/features#feature-serde_json: serde_json is optional feature -  optional \n\u27e811\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e812\u27e9 https://lib.rs/crates/siphasher/features: Other feature\n\u27e813\u27e9 https://lib.rs/crates/siphasher/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4746,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114784.3174153"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf76bxdm0/siphasher-1.0.1#siphasher@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\target\\debug\\deps\\libsiphasher-fa4f246054f0829b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf76bxdm0/siphasher-1.0.1#siphasher@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n  --> src\\sip.rs:19:5\n   |\n19 | use core::u64;\n   |     ^^^^^^^^^\n   |\n   = help: remove this import\n   = note: then `u64::<CONST>` will resolve to the respective associated constant\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `u64::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 641,
                    "byte_start": 632,
                    "column_end": 14,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\sip.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 19,
                    "line_start": 19,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "use core::u64;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf76bxdm0/siphasher-1.0.1#siphasher@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n  --> src\\sip128.rs:19:5\n   |\n19 | use core::u64;\n   |     ^^^^^^^^^\n   |\n   = help: remove this import\n   = note: then `u64::<CONST>` will resolve to the respective associated constant\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `u64::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 663,
                    "byte_start": 654,
                    "column_end": 14,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\sip128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 19,
                    "line_start": 19,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "use core::u64;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf76bxdm0/siphasher-1.0.1#siphasher@1.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf76bxdm0\\siphasher-1.0.1\\target\\debug\\deps\\libsiphasher-6824e8c9deb2c1b8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 11
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "siphasher",
          "version": "1.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\n[Settings](https://docs.rs/siphasher/latest/settings.html)\n[Help](https://docs.rs/siphasher/latest/help.html)\nSummary[Source](https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30)\nExpand description\n## [\u00a7](https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust)SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#usage)Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want [serde](https://github.com/serde-rs/serde) support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#api-documentation)[API documentation](https://docs.rs/siphasher/)\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#note)Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules[\u00a7](https://docs.rs/siphasher/latest/siphasher/#modules)\n\n[prelude](https://docs.rs/siphasher/latest/siphasher/prelude/index.html \"mod siphasher::prelude\")\n\n\n[sip](https://docs.rs/siphasher/latest/siphasher/sip/index.html \"mod siphasher::sip\")\n    An implementation of SipHash.\n\n[sip128](https://docs.rs/siphasher/latest/siphasher/sip128/index.html \"mod siphasher::sip128\")\n    An implementation of SipHash with a 128-bit output.\n",
            "markdown_with_citations": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### \u00a7\u27e85\u27e9Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want serde\u27e86\u27e9 support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### \u00a7\u27e87\u27e9API documentation\u27e88\u27e9\n### \u00a7\u27e89\u27e9Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules\u00a7\u27e810\u27e9\n\nprelude\u27e811\u27e9\n\n\nsip\u27e812\u27e9\n    An implementation of SipHash.\n\nsip128\u27e813\u27e9\n    An implementation of SipHash with a 128-bit output.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/siphasher/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/siphasher/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30: Source\n\u27e84\u27e9 https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust: \u00a7\n\u27e85\u27e9 https://docs.rs/siphasher/latest/siphasher/#usage: \u00a7\n\u27e86\u27e9 https://github.com/serde-rs/serde: serde\n\u27e87\u27e9 https://docs.rs/siphasher/latest/siphasher/#api-documentation: \u00a7\n\u27e88\u27e9 https://docs.rs/siphasher/: API documentation\n\u27e89\u27e9 https://docs.rs/siphasher/latest/siphasher/#note: \u00a7\n\u27e810\u27e9 https://docs.rs/siphasher/latest/siphasher/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/siphasher/latest/siphasher/prelude/index.html: mod siphasher::prelude - prelude\n\u27e812\u27e9 https://docs.rs/siphasher/latest/siphasher/sip/index.html: mod siphasher::sip - sip\n\u27e813\u27e9 https://docs.rs/siphasher/latest/siphasher/sip128/index.html: mod siphasher::sip128 - sip128\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "siphasher",
          "version": "1.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\n[Settings](https://docs.rs/siphasher/latest/settings.html)\n[Help](https://docs.rs/siphasher/latest/help.html)\nSummary[Source](https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30)\nExpand description\n## [\u00a7](https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust)SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#usage)Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want [serde](https://github.com/serde-rs/serde) support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#api-documentation)[API documentation](https://docs.rs/siphasher/)\n### [\u00a7](https://docs.rs/siphasher/latest/siphasher/#note)Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules[\u00a7](https://docs.rs/siphasher/latest/siphasher/#modules)\n\n[prelude](https://docs.rs/siphasher/latest/siphasher/prelude/index.html \"mod siphasher::prelude\")\n\n\n[sip](https://docs.rs/siphasher/latest/siphasher/sip/index.html \"mod siphasher::sip\")\n    An implementation of SipHash.\n\n[sip128](https://docs.rs/siphasher/latest/siphasher/sip128/index.html \"mod siphasher::sip128\")\n    An implementation of SipHash with a 128-bit output.\n",
            "markdown_with_citations": "[](https://docs.rs/siphasher/latest/siphasher/all.html \"show sidebar\")\n# Crate siphasherCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SipHash implementation for Rust\nThis crates implements SipHash-2-4 and SipHash-1-3 in Rust.\nIt is based on the original implementation from rust-core and exposes the same API.\nIt also implements SipHash variants returning 128-bit tags.\nThe `sip` module implements the standard 64-bit mode, whereas the `sip128` module implements the 128-bit mode.\n### \u00a7\u27e85\u27e9Usage\nIn `Cargo.toml`:\n```\n[dependencies]\nsiphasher = \"1\"\n```\n\nIf you want serde\u27e86\u27e9 support, include the feature like this:\n```\n[dependencies]\nsiphasher = { version = \"1\", features = [\"serde\"] }\n```\n\n64-bit mode:\n```\nuse siphasher::sip::{SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array);\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish();\n```\n\n128-bit mode:\n```\nuse siphasher::sip128::{Hasher128, SipHasher, SipHasher13, SipHasher24};\n// one-shot:\nlet array: &[u8] = &[1, 2, 3];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet hasher = SipHasher13::new_with_key(key);\nlet h = hasher.hash(array).as_bytes();\n// incremental:\nuse core::hash::Hasher;\nlet array1: &[u8] = &[1, 2, 3];\nlet array2: &[u8] = &[4, 5, 6];\nlet key: &[u8; 16] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet mut hasher = SipHasher13::new_with_key(key);\nhasher.write(array1);\nhasher.write(array2);\nlet h = hasher.finish128().as_bytes();\n```\n\n### \u00a7\u27e87\u27e9API documentation\u27e88\u27e9\n### \u00a7\u27e89\u27e9Note\nDue to a confusing and not well documented API, methods from the `Hasher` trait of the standard library (`std::hash::Hasher`, `core::hash::Hasher`) produce non-portable results.\nThis is not specific to SipHash, and affects all hash functions.\nThe only safe methods in that trait are `write()` and `finish()`.\nIt is thus recommended to use SipHash (and all other hash functions, actually) as documented above.\n## Modules\u00a7\u27e810\u27e9\n\nprelude\u27e811\u27e9\n\n\nsip\u27e812\u27e9\n    An implementation of SipHash.\n\nsip128\u27e813\u27e9\n    An implementation of SipHash with a 128-bit output.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/siphasher/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/siphasher/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/siphasher/latest/src/siphasher/lib.rs.html#1-30: Source\n\u27e84\u27e9 https://docs.rs/siphasher/latest/siphasher/#siphash-implementation-for-rust: \u00a7\n\u27e85\u27e9 https://docs.rs/siphasher/latest/siphasher/#usage: \u00a7\n\u27e86\u27e9 https://github.com/serde-rs/serde: serde\n\u27e87\u27e9 https://docs.rs/siphasher/latest/siphasher/#api-documentation: \u00a7\n\u27e88\u27e9 https://docs.rs/siphasher/: API documentation\n\u27e89\u27e9 https://docs.rs/siphasher/latest/siphasher/#note: \u00a7\n\u27e810\u27e9 https://docs.rs/siphasher/latest/siphasher/#modules: \u00a7\n\u27e811\u27e9 https://docs.rs/siphasher/latest/siphasher/prelude/index.html: mod siphasher::prelude - prelude\n\u27e812\u27e9 https://docs.rs/siphasher/latest/siphasher/sip/index.html: mod siphasher::sip - sip\n\u27e813\u27e9 https://docs.rs/siphasher/latest/siphasher/sip128/index.html: mod siphasher::sip128 - sip128\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `siphasher` crate provides a Rust implementation of SipHash, a fast and secure cryptographic hash function, supporting both 64-bit (SipHash-2-4 and SipHash-1-3) and 128-bit output variants. It offers one-shot and incremental hashing APIs, with optional `serde` support for serialization. The crate emphasizes safe usage of the `Hasher` trait to avoid non-portable results.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: SipHash Modes\n\u2705 Factual: The `siphasher` crate implements both SipHash-2-4 and SipHash-1-3, providing 64-bit and 128-bit hash modes via the `sip` and `sip128` modules, respectively.  \n\u274c Counterfactual: The `siphasher` crate only supports SipHash-2-4 in 64-bit mode and does not provide any 128-bit hashing capabilities.  \n\n---\n\n### Pair 2: Serde Support\n\u2705 Factual: The `siphasher` crate includes optional support for `serde`, allowing serialization and deserialization of hashers when the `serde` feature is enabled in the `Cargo.toml`.  \n\u274c Counterfactual: The `siphasher` crate does not support `serde` integration, making it impossible to serialize or deserialize hashers.  \n\n---\n\n### Pair 3: Hashing API\n\u2705 Factual: The `siphasher` crate provides incremental hashing functionality, allowing data to be hashed in chunks using the `write()` method from the `Hasher` trait.  \n\u274c Counterfactual: The `siphasher` crate only supports one-shot hashing and does not allow incremental hashing of data.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-4cbeb514-b26a6c60-1751260993",
      "timestamp": "2025-06-30T05:23:13.238195+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]