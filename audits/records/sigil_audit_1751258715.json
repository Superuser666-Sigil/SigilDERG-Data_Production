[
  {
    "execution_id": "exec-f1ce8bee-3f845f75-1751258702",
    "timestamp": "2025-06-30T04:45:02.609412+00:00",
    "sacred_chain": {
      "input_data": "async-recursion",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-recursion' -> 'async-recursion'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-recursion",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-recursion",
            "title": "async-recursion v1.1.1",
            "content": {
              "raw_markdown": "#  async-recursion v1.1.1\nRecursion for async functions \n  * [ Readme ](https://crates.io/crates/async-recursion)\n  * [ 15 Versions ](https://crates.io/crates/async-recursion/versions)\n  * [ Dependencies ](https://crates.io/crates/async-recursion/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-recursion/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n14.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-recursion\nOr add the following line to your Cargo.toml:\nasync-recursion = \"1.1.1\"\n## Documentation\n[ docs.rs/async-recursion ](https://docs.rs/async-recursion)\n## Repository\n[ github.com/dcchut/async-recursion ](https://github.com/dcchut/async-recursion)\n## Owners\n[ Report crate ](https://crates.io/support?crate=async-recursion&inquire=crate-violation)\n### Stats Overview\n57,585,205 Downloads all time\n15 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async-recursion v1.1.1\nRecursion for async functions \n  *  Readme \u27e81\u27e9\n  *  15 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n14.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-recursion\nOr add the following line to your Cargo.toml:\nasync-recursion = \"1.1.1\"\n## Documentation\n docs.rs/async-recursion \u27e87\u27e9\n## Repository\n github.com/dcchut/async-recursion \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n57,585,205 Downloads all time\n15 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/async-recursion:  Readme \n\u27e82\u27e9 https://crates.io/crates/async-recursion/versions:  15 Versions \n\u27e83\u27e9 https://crates.io/crates/async-recursion/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/async-recursion/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/async-recursion:  docs.rs/async-recursion \n\u27e88\u27e9 https://github.com/dcchut/async-recursion:  github.com/dcchut/async-recursion \n\u27e89\u27e9 https://crates.io/support?crate=async-recursion&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1123,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112492.4284058"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-recursion",
            "title": "Crate async_recursionCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\n[Settings](https://docs.rs/async-recursion/latest/settings.html)\n[Help](https://docs.rs/async-recursion/latest/help.html)\nSummary[Source](https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115)\nExpand description\n## [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro)async-recursion macro\n[![Latest version](https://img.shields.io/crates/v/async-recursion)](https://crates.io/crates/async-recursion) [![crates.io downloads](https://img.shields.io/crates/d/async_recursion)](https://crates.io/crates/async-recursion) [![Build Status](https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master)](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License](https://img.shields.io/crates/l/async-recursion)\nProcedural macro for recursive async functions.\n  * [Documentation](https://docs.rs/async-recursion/)\n  * Cargo package: [async-recursion](https://crates.io/crates/async-recursion)\n\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#motivation)Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n[\u24d8](https://docs.rs/async-recursion/latest/async_recursion/ \"This example deliberately fails to compile\")```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed [`Future`](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\").\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#example)Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#send-option)?Send option\nThe returned [`Future`] has a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#sync-option)Sync option\nThe returned [`Future`] doesn\u2019t have a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as it is usually not required. You can include a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") and [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bounds.\n\n\n#### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros[\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#attributes)\n\n[async_recursion](https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html \"attr async_recursion::async_recursion\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9async-recursion macro\n![Latest version\u27e85\u27e9](https://crates.io/crates/async-recursion) ![crates.io downloads\u27e86\u27e9](https://crates.io/crates/async-recursion) ![Build Status\u27e87\u27e9](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License\u27e88\u27e9]\nProcedural macro for recursive async functions.\n  * Documentation\u27e89\u27e9\n  * Cargo package: async-recursion\u27e810\u27e9\n\n\n### \u00a7\u27e811\u27e9Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n\u24d8\u27e812\u27e9```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed `Future`\u27e813\u27e9.\n### \u00a7\u27e814\u27e9Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### \u00a7\u27e815\u27e9?Send option\nThe returned [`Future`] has a `Send`\u27e816\u27e9 bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### \u00a7\u27e817\u27e9Sync option\nThe returned [`Future`] doesn\u2019t have a `Sync`\u27e818\u27e9 bound as it is usually not required. You can include a `Sync`\u27e818\u27e9 bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with `Send`\u27e816\u27e9 and `Sync`\u27e818\u27e9 bounds.\n\n\n#### \u00a7\u27e819\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros\u00a7\u27e820\u27e9\n\nasync_recursion\u27e821\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-recursion/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-recursion/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115: Source\n\u27e84\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/async-recursion: ![Latest version\n\u27e86\u27e9 https://img.shields.io/crates/d/async_recursion: ![crates.io downloads\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master: ![Build Status\n\u27e88\u27e9 https://img.shields.io/crates/l/async-recursion: Apache/MIT2.0 License\n\u27e89\u27e9 https://docs.rs/async-recursion/: Documentation\n\u27e810\u27e9 https://crates.io/crates/async-recursion: async-recursion\n\u27e811\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#motivation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-recursion/latest/async_recursion/: This example deliberately fails to compile - \u24d8\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html: trait core::future::future::Future - `Future`\n\u27e814\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#example: \u00a7\n\u27e815\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#send-option: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e817\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#sync-option: \u00a7\n\u27e818\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e819\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#license: \u00a7\n\u27e820\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#attributes: \u00a7\n\u27e821\u27e9 https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html: attr async_recursion::async_recursion - async_recursion\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4477,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112493.1446006"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-recursion",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [15 releases](https://lib.rs/crates/async-recursion/versions) (8 stable)\n1.1.1 |  Apr 25, 2024   \n---|---  \n1.1.0 |  Mar 17, 2024   \n1.0.5 |  Sep 2, 2023   \n1.0.4 |  Mar 18, 2023   \n0.1.2 |  Oct 4, 2019   \n#**161** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 580430/week @ 2025-02-03 685618/week @ 2025-02-10 640986/week @ 2025-02-17 755260/week @ 2025-02-24 744722/week @ 2025-03-03 885980/week @ 2025-03-10 1327555/week @ 2025-03-17 1472791/week @ 2025-03-24 941620/week @ 2025-03-31 966065/week @ 2025-04-07 788848/week @ 2025-04-14 757614/week @ 2025-04-21 715769/week @ 2025-04-28 761355/week @ 2025-05-05 750730/week @ 2025-05-12 715919/week @ 2025-05-19\n**2,983,885** downloads per month Used in [**1,890** crates (533 directly)](https://lib.rs/crates/async-recursion/rev)\n**MIT/Apache**\n18KB  243 lines\n# async-recursion macro\n[![Latest version](https://img.shields.io/crates/v/async-recursion)](https://crates.io/crates/async-recursion) [![crates.io downloads](https://img.shields.io/crates/d/async_recursion)](https://crates.io/crates/async-recursion) [![Build Status](https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master)](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License](https://img.shields.io/crates/l/async-recursion)\nProcedural macro for recursive async functions.\n  * [Documentation](https://docs.rs/async-recursion/)\n  * Cargo package: [async-recursion](https://crates.io/crates/async-recursion)\n\n\n## Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n```\n`async ``fn` `fib`````(``n` `:` `u32````)```` ``->` `u32`` ````{`\n  `match` n `{`\n    `0` `|` `1` `=>` `1``,`\n    `_` `=>` `fib``(`n`-``1``)``.`await `+` `fib``(`n`-``2``)``.`await\n  `}`\n```}```\n`\n```\n\nThe compiler helpfully tells us that:\n```\n```error[E0733]:``` recursion in an `````async`` fn``` requires boxing`\n ``--````>` src/main.rs:1:26\n` `|`\n``1`` `|` ``async``` fn fib(n : u32`) ``-````>` u32 `{`\n |             ^^^ recursive `````async`` fn```\n |\n = note: a recursive `````async`` fn``` must be rewritten to return a boxed `````dyn`` Future```\n = note: consider using the `````async_recursion````` crate: https://crates.io/crates/async_recursion\n``\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed ``Future``.\n## Example\n```\n``use` `async_recursion`::``async_recursion`;`\n``#``[``async_recursion``]``\nasync ``fn` `fib`````(``n` `:` `u32````)```` ``->` `u32`` ````{`\n  `match` n `{`\n   `0` `|` `1` `=>` `1``,`\n   `_` `=>` `fib``(`n`-``1``)``.`await `+` `fib``(`n`-``2``)``.`await\n  `}`\n```}```\n`\n```\n\n## ?Send option\nThe returned ``Future`` has a ```Send``` bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n```#``[``async_recursion```(```?Send```)```]``\nasync ``fn` `returned_future_is_not_send`````(````)``````{`\n  ``//` ...`\n```}```\n`\n```\n\n## Sync option\nThe returned ``Future`` doesn't have a ```Sync``` bound as it is usually not required. You can include a ```Sync``` bound as follows:\n```\n```#``[``async_recursion```(```Sync```)```]``\nasync ``fn` `returned_future_is_sync`````(````)``````{`\n  ``//` ...`\n```}```\n`\n```\n\nIn detail:\n  * ````#``[``async_recursion``]```` modifies your function to return a boxed ``Future`` with a ```Send``` bound.\n  * ````#``[``async_recursion```(```?Send```)```]```` modifies your function to return a boxed ``Future`` _without_ a ```Send``` bound.\n  * ````#``[``async_recursion```(```Sync```)```]```` modifies your function to return a boxed ``Future`` with a ```Send``` and ```Sync``` bound.\n\n\n### License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/dcchut/async-recursion/blob/HEAD/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/dcchut/async-recursion/blob/HEAD/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Dependencies\n~195\u2013620KB  ~15K SLoC\n  * [proc-macro2](https://lib.rs/crates/proc-macro2 \"1.0\")\n  * [quote](https://lib.rs/crates/quote \"1.0\")\n  * [syn](https://lib.rs/crates/syn \"2.0\")[+full](https://lib.rs/crates/syn/features#feature-full)[+visit-mut](https://lib.rs/crates/syn/features#feature-visit-mut)[+parsing](https://lib.rs/crates/syn/features#feature-parsing)[+printing](https://lib.rs/crates/syn/features#feature-printing)[+proc-macro](https://lib.rs/crates/syn/features#feature-proc-macro)[+clone-impls](https://lib.rs/crates/syn/features#feature-clone-impls)\n\n\n  * dev  [futures-executor](https://lib.rs/crates/futures-executor \"0.3\")\n  * dev  [macrotest](https://lib.rs/crates/macrotest \"1.0\")\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  15 releases\u27e81\u27e9 (8 stable)\n1.1.1 |  Apr 25, 2024   \n---|---  \n1.1.0 |  Mar 17, 2024   \n1.0.5 |  Sep 2, 2023   \n1.0.4 |  Mar 18, 2023   \n0.1.2 |  Oct 4, 2019   \n#**161** in Asynchronous\u27e82\u27e9\nDownload history 580430/week @ 2025-02-03 685618/week @ 2025-02-10 640986/week @ 2025-02-17 755260/week @ 2025-02-24 744722/week @ 2025-03-03 885980/week @ 2025-03-10 1327555/week @ 2025-03-17 1472791/week @ 2025-03-24 941620/week @ 2025-03-31 966065/week @ 2025-04-07 788848/week @ 2025-04-14 757614/week @ 2025-04-21 715769/week @ 2025-04-28 761355/week @ 2025-05-05 750730/week @ 2025-05-12 715919/week @ 2025-05-19\n**2,983,885** downloads per month Used in **1,890** crates (533 directly)\u27e83\u27e9\n**MIT/Apache**\n18KB  243 lines\n# async-recursion macro\n![Latest version\u27e84\u27e9](https://crates.io/crates/async-recursion) ![crates.io downloads\u27e85\u27e9](https://crates.io/crates/async-recursion) ![Build Status\u27e86\u27e9](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License\u27e87\u27e9]\nProcedural macro for recursive async functions.\n  * Documentation\u27e88\u27e9\n  * Cargo package: async-recursion\u27e89\u27e9\n\n\n## Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n```\n`async ``fn` `fib`````(``n` `:` `u32````)```` ``->` `u32`` ````{`\n  `match` n `{`\n    `0` `|` `1` `=>` `1``,`\n    `_` `=>` `fib``(`n`-``1``)``.`await `+` `fib``(`n`-``2``)``.`await\n  `}`\n```}```\n`\n```\n\nThe compiler helpfully tells us that:\n```\n```error[E0733]:``` recursion in an `````async`` fn``` requires boxing`\n ``--````>` src/main.rs:1:26\n` `|`\n``1`` `|` ``async``` fn fib(n : u32`) ``-````>` u32 `{`\n |             ^^^ recursive `````async`` fn```\n |\n = note: a recursive `````async`` fn``` must be rewritten to return a boxed `````dyn`` Future```\n = note: consider using the `````async_recursion````` crate: https://crates.io/crates/async_recursion\n``\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed ``Future``.\n## Example\n```\n``use` `async_recursion`::``async_recursion`;`\n``#``[``async_recursion``]``\nasync ``fn` `fib`````(``n` `:` `u32````)```` ``->` `u32`` ````{`\n  `match` n `{`\n   `0` `|` `1` `=>` `1``,`\n   `_` `=>` `fib``(`n`-``1``)``.`await `+` `fib``(`n`-``2``)``.`await\n  `}`\n```}```\n`\n```\n\n## ?Send option\nThe returned ``Future`` has a ```Send``` bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n```#``[``async_recursion```(```?Send```)```]``\nasync ``fn` `returned_future_is_not_send`````(````)``````{`\n  ``//` ...`\n```}```\n`\n```\n\n## Sync option\nThe returned ``Future`` doesn't have a ```Sync``` bound as it is usually not required. You can include a ```Sync``` bound as follows:\n```\n```#``[``async_recursion```(```Sync```)```]``\nasync ``fn` `returned_future_is_sync`````(````)``````{`\n  ``//` ...`\n```}```\n`\n```\n\nIn detail:\n  * ````#``[``async_recursion``]```` modifies your function to return a boxed ``Future`` with a ```Send``` bound.\n  * ````#``[``async_recursion```(```?Send```)```]```` modifies your function to return a boxed ``Future`` _without_ a ```Send``` bound.\n  * ````#``[``async_recursion```(```Sync```)```]```` modifies your function to return a boxed ``Future`` with a ```Send``` and ```Sync``` bound.\n\n\n### License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e810\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e811\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Dependencies\n~195\u2013620KB  ~15K SLoC\n  * proc-macro2\u27e812\u27e9\n  * quote\u27e813\u27e9\n  * syn\u27e814\u27e9+full\u27e815\u27e9+visit-mut\u27e816\u27e9+parsing\u27e817\u27e9+printing\u27e818\u27e9+proc-macro\u27e819\u27e9+clone-impls\u27e820\u27e9\n\n\n  * dev  futures-executor\u27e821\u27e9\n  * dev  macrotest\u27e822\u27e9\n  * dev  trybuild\u27e823\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/async-recursion/versions: 15 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/async-recursion/rev: **1,890** crates (533 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/async-recursion: ![Latest version\n\u27e85\u27e9 https://img.shields.io/crates/d/async_recursion: ![crates.io downloads\n\u27e86\u27e9 https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master: ![Build Status\n\u27e87\u27e9 https://img.shields.io/crates/l/async-recursion: Apache/MIT2.0 License\n\u27e88\u27e9 https://docs.rs/async-recursion/: Documentation\n\u27e89\u27e9 https://crates.io/crates/async-recursion: async-recursion\n\u27e810\u27e9 https://github.com/dcchut/async-recursion/blob/HEAD/LICENSE-APACHE: LICENSE-APACHE\n\u27e811\u27e9 https://github.com/dcchut/async-recursion/blob/HEAD/LICENSE-MIT: LICENSE-MIT\n\u27e812\u27e9 https://lib.rs/crates/proc-macro2: 1.0 - proc-macro2\n\u27e813\u27e9 https://lib.rs/crates/quote: 1.0 - quote\n\u27e814\u27e9 https://lib.rs/crates/syn: 2.0 - syn\n\u27e815\u27e9 https://lib.rs/crates/syn/features#feature-full: +full\n\u27e816\u27e9 https://lib.rs/crates/syn/features#feature-visit-mut: +visit-mut\n\u27e817\u27e9 https://lib.rs/crates/syn/features#feature-parsing: +parsing\n\u27e818\u27e9 https://lib.rs/crates/syn/features#feature-printing: +printing\n\u27e819\u27e9 https://lib.rs/crates/syn/features#feature-proc-macro: +proc-macro\n\u27e820\u27e9 https://lib.rs/crates/syn/features#feature-clone-impls: +clone-impls\n\u27e821\u27e9 https://lib.rs/crates/futures-executor: 0.3 - futures-executor\n\u27e822\u27e9 https://lib.rs/crates/macrotest: 1.0 - macrotest\n\u27e823\u27e9 https://lib.rs/crates/trybuild: 1.0 - trybuild\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5010,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112493.6634921"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libproc_macro2-7a02ad397d447d45.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libquote-430ba35ded6e1110.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libsyn-d33959adf032d9a5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvaec4bzz/async-recursion-1.1.1#async-recursion@1.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_recursion",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libasync_recursion-79de76d77d4331e7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libproc_macro2-7a02ad397d447d45.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libquote-430ba35ded6e1110.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libsyn-d33959adf032d9a5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvaec4bzz/async-recursion-1.1.1#async-recursion@1.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_recursion",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvaec4bzz\\async-recursion-1.1.1\\target\\debug\\deps\\libasync_recursion-2287473ac2501193.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 46
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "async-recursion",
          "version": "1.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\n[Settings](https://docs.rs/async-recursion/latest/settings.html)\n[Help](https://docs.rs/async-recursion/latest/help.html)\nSummary[Source](https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115)\nExpand description\n## [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro)async-recursion macro\n[![Latest version](https://img.shields.io/crates/v/async-recursion)](https://crates.io/crates/async-recursion) [![crates.io downloads](https://img.shields.io/crates/d/async_recursion)](https://crates.io/crates/async-recursion) [![Build Status](https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master)](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License](https://img.shields.io/crates/l/async-recursion)\nProcedural macro for recursive async functions.\n  * [Documentation](https://docs.rs/async-recursion/)\n  * Cargo package: [async-recursion](https://crates.io/crates/async-recursion)\n\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#motivation)Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n[\u24d8](https://docs.rs/async-recursion/latest/async_recursion/ \"This example deliberately fails to compile\")```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed [`Future`](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\").\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#example)Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#send-option)?Send option\nThe returned [`Future`] has a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#sync-option)Sync option\nThe returned [`Future`] doesn\u2019t have a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as it is usually not required. You can include a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") and [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bounds.\n\n\n#### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros[\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#attributes)\n\n[async_recursion](https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html \"attr async_recursion::async_recursion\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9async-recursion macro\n![Latest version\u27e85\u27e9](https://crates.io/crates/async-recursion) ![crates.io downloads\u27e86\u27e9](https://crates.io/crates/async-recursion) ![Build Status\u27e87\u27e9](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License\u27e88\u27e9]\nProcedural macro for recursive async functions.\n  * Documentation\u27e89\u27e9\n  * Cargo package: async-recursion\u27e810\u27e9\n\n\n### \u00a7\u27e811\u27e9Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n\u24d8\u27e812\u27e9```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed `Future`\u27e813\u27e9.\n### \u00a7\u27e814\u27e9Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### \u00a7\u27e815\u27e9?Send option\nThe returned [`Future`] has a `Send`\u27e816\u27e9 bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### \u00a7\u27e817\u27e9Sync option\nThe returned [`Future`] doesn\u2019t have a `Sync`\u27e818\u27e9 bound as it is usually not required. You can include a `Sync`\u27e818\u27e9 bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with `Send`\u27e816\u27e9 and `Sync`\u27e818\u27e9 bounds.\n\n\n#### \u00a7\u27e819\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros\u00a7\u27e820\u27e9\n\nasync_recursion\u27e821\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-recursion/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-recursion/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115: Source\n\u27e84\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/async-recursion: ![Latest version\n\u27e86\u27e9 https://img.shields.io/crates/d/async_recursion: ![crates.io downloads\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master: ![Build Status\n\u27e88\u27e9 https://img.shields.io/crates/l/async-recursion: Apache/MIT2.0 License\n\u27e89\u27e9 https://docs.rs/async-recursion/: Documentation\n\u27e810\u27e9 https://crates.io/crates/async-recursion: async-recursion\n\u27e811\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#motivation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-recursion/latest/async_recursion/: This example deliberately fails to compile - \u24d8\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html: trait core::future::future::Future - `Future`\n\u27e814\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#example: \u00a7\n\u27e815\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#send-option: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e817\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#sync-option: \u00a7\n\u27e818\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e819\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#license: \u00a7\n\u27e820\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#attributes: \u00a7\n\u27e821\u27e9 https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html: attr async_recursion::async_recursion - async_recursion\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-recursion",
          "version": "1.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\n[Settings](https://docs.rs/async-recursion/latest/settings.html)\n[Help](https://docs.rs/async-recursion/latest/help.html)\nSummary[Source](https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115)\nExpand description\n## [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro)async-recursion macro\n[![Latest version](https://img.shields.io/crates/v/async-recursion)](https://crates.io/crates/async-recursion) [![crates.io downloads](https://img.shields.io/crates/d/async_recursion)](https://crates.io/crates/async-recursion) [![Build Status](https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master)](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License](https://img.shields.io/crates/l/async-recursion)\nProcedural macro for recursive async functions.\n  * [Documentation](https://docs.rs/async-recursion/)\n  * Cargo package: [async-recursion](https://crates.io/crates/async-recursion)\n\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#motivation)Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n[\u24d8](https://docs.rs/async-recursion/latest/async_recursion/ \"This example deliberately fails to compile\")```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed [`Future`](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\").\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#example)Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#send-option)?Send option\nThe returned [`Future`] has a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#sync-option)Sync option\nThe returned [`Future`] doesn\u2019t have a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as it is usually not required. You can include a [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") and [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") bounds.\n\n\n#### [\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#license)License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros[\u00a7](https://docs.rs/async-recursion/latest/async_recursion/#attributes)\n\n[async_recursion](https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html \"attr async_recursion::async_recursion\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async-recursion/latest/async_recursion/all.html \"show sidebar\")\n# Crate async_recursionCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9async-recursion macro\n![Latest version\u27e85\u27e9](https://crates.io/crates/async-recursion) ![crates.io downloads\u27e86\u27e9](https://crates.io/crates/async-recursion) ![Build Status\u27e87\u27e9](https://github.com/dcchut/async-recursion/actions) ![Apache/MIT2.0 License\u27e88\u27e9]\nProcedural macro for recursive async functions.\n  * Documentation\u27e89\u27e9\n  * Cargo package: async-recursion\u27e810\u27e9\n\n\n### \u00a7\u27e811\u27e9Motivation\nConsider the following recursive implementation of the fibonacci numbers:\n\u24d8\u27e812\u27e9```\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\nThe compiler helpfully tells us that:\n```\nerror[E0733]: recursion in an `async fn` requires boxing\n--> src/main.rs:1:26\n |\n1 | async fn fib(n : u32) -> u32 {\n |             ^^^ recursive `async fn`\n |\n = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n```\n\nThis crate provides an attribute macro to automatically convert an async function to one returning a boxed `Future`\u27e813\u27e9.\n### \u00a7\u27e814\u27e9Example\n```\nuse async_recursion::async_recursion;\n#[async_recursion]\nasync fn fib(n : u32) -> u32 {\n  match n {\n    0 | 1 => 1,\n    _ => fib(n-1).await + fib(n-2).await\n  }\n}\n```\n\n### \u00a7\u27e815\u27e9?Send option\nThe returned [`Future`] has a `Send`\u27e816\u27e9 bound to make sure it can be sent between threads. If this is undesirable you can mark that the bound should be left out like so:\n```\n\n#[async_recursion(?Send)]\nasync fn returned_future_is_not_send() {\n  // ...\n}\n```\n\n### \u00a7\u27e817\u27e9Sync option\nThe returned [`Future`] doesn\u2019t have a `Sync`\u27e818\u27e9 bound as it is usually not required. You can include a `Sync`\u27e818\u27e9 bound as follows:\n```\n\n#[async_recursion(Sync)]\nasync fn returned_future_is_send_and_sync() {\n  // ...\n}\n```\n\nIn detail:\n  * `#[async_recursion]` modifies your function to return a boxed [`Future`] with a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(?Send)]` modifies your function to return a boxed [`Future`] _without_ a `Send`\u27e816\u27e9 bound.\n  * `#[async_recursion(Sync)]` modifies your function to return a boxed [`Future`] with `Send`\u27e816\u27e9 and `Sync`\u27e818\u27e9 bounds.\n\n\n#### \u00a7\u27e819\u27e9License\nLicensed under either of\n  * Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (<http://opensource.org/licenses/MIT>)\n\n\nat your option.\n## Attribute Macros\u00a7\u27e820\u27e9\n\nasync_recursion\u27e821\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-recursion/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-recursion/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-recursion/latest/src/async_recursion/lib.rs.html#1-115: Source\n\u27e84\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#async-recursion-macro: \u00a7\n\u27e85\u27e9 https://img.shields.io/crates/v/async-recursion: ![Latest version\n\u27e86\u27e9 https://img.shields.io/crates/d/async_recursion: ![crates.io downloads\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dcchut/async-recursion/ci.yml?branch=master: ![Build Status\n\u27e88\u27e9 https://img.shields.io/crates/l/async-recursion: Apache/MIT2.0 License\n\u27e89\u27e9 https://docs.rs/async-recursion/: Documentation\n\u27e810\u27e9 https://crates.io/crates/async-recursion: async-recursion\n\u27e811\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#motivation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-recursion/latest/async_recursion/: This example deliberately fails to compile - \u24d8\n\u27e813\u27e9 https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html: trait core::future::future::Future - `Future`\n\u27e814\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#example: \u00a7\n\u27e815\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#send-option: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e817\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#sync-option: \u00a7\n\u27e818\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e819\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#license: \u00a7\n\u27e820\u27e9 https://docs.rs/async-recursion/latest/async_recursion/#attributes: \u00a7\n\u27e821\u27e9 https://docs.rs/async-recursion/latest/async_recursion/attr.async_recursion.html: attr async_recursion::async_recursion - async_recursion\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-recursion` crate provides a procedural macro for enabling recursive `async` functions in Rust, which would otherwise require manual boxing of the returned `Future`. By using the `#[async_recursion]` attribute, the function automatically returns a boxed `Future`, with options to customize its `Send` and `Sync` bounds. This simplifies writing recursive asynchronous code while maintaining thread-safety flexibility.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Recursive Async Functions  \n\u2705 Factual: The `async-recursion` crate provides an attribute macro (`#[async_recursion]`) that allows recursive `async fn` implementations by automatically boxing the returned `Future`.  \n\u274c Counterfactual: The `async-recursion` crate eliminates the need for boxing a `Future` in recursive `async fn` implementations, allowing direct recursion without any additional overhead.  \n\n---\n\n### Pair 2: Thread Safety Options  \n\u2705 Factual: The `#[async_recursion(?Send)]` attribute allows the returned `Future` to exclude the `Send` bound, making it unsuitable for sending across threads.  \n\u274c Counterfactual: The `#[async_recursion(?Send)]` attribute ensures that the returned `Future` is always thread-safe, even when the `Send` bound is excluded.  \n\n---\n\n### Pair 3: Sync Compatibility  \n\u2705 Factual: The `#[async_recursion(Sync)]` attribute adds a `Sync` bound to the returned `Future`, enabling compatibility with contexts requiring both `Send` and `Sync`.  \n\u274c Counterfactual: The `#[async_recursion(Sync)]` attribute is the default behavior of the crate, and all recursive `async fn` functions automatically include a `Sync` bound unless explicitly disabled.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-f1ce8bee-3f845f75-1751258702",
      "timestamp": "2025-06-30T04:45:02.609412+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]