[
  {
    "execution_id": "exec-af7119dc-f6e25139-1751257716",
    "timestamp": "2025-06-30T04:28:36.165014+00:00",
    "sacred_chain": {
      "input_data": "axum",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'axum' -> 'axum'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "axum",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/axum",
            "title": "axum v0.8.4",
            "content": {
              "raw_markdown": "#  axum v0.8.4\nWeb framework that focuses on ergonomics and modularity \n  * [ #framework ](https://crates.io/keywords/framework)\n  * [ #http ](https://crates.io/keywords/http)\n  * [ #web ](https://crates.io/keywords/web)\n\n\n  * [ Readme ](https://crates.io/crates/axum)\n  * [ 89 Versions ](https://crates.io/crates/axum/versions)\n  * [ Dependencies ](https://crates.io/crates/axum/dependencies)\n  * [ Dependents ](https://crates.io/crates/axum/reverse_dependencies)\n\n\n## Metadata\n2 months ago \nv1.75.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n171 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add axum\nOr add the following line to your Cargo.toml:\naxum = \"0.8.4\"\n## Repository\n[ github.com/tokio-rs/axum ](https://github.com/tokio-rs/axum)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [HTTP server](https://crates.io/categories/web-programming::http-server)\n\n\n[ Report crate ](https://crates.io/support?crate=axum&inquire=crate-violation)\n### Stats Overview\n136,589,044 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  axum v0.8.4\nWeb framework that focuses on ergonomics and modularity \n  *  #framework \u27e81\u27e9\n  *  #http \u27e82\u27e9\n  *  #web \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  89 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n2 months ago \nv1.75.0 \n MIT \u27e88\u27e9\n171 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add axum\nOr add the following line to your Cargo.toml:\naxum = \"0.8.4\"\n## Repository\n github.com/tokio-rs/axum \u27e89\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e810\u27e9\n  * Network programming\u27e811\u27e9\n  * HTTP server\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n136,589,044 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/framework:  #framework \n\u27e82\u27e9 https://crates.io/keywords/http:  #http \n\u27e83\u27e9 https://crates.io/keywords/web:  #web \n\u27e84\u27e9 https://crates.io/crates/axum:  Readme \n\u27e85\u27e9 https://crates.io/crates/axum/versions:  89 Versions \n\u27e86\u27e9 https://crates.io/crates/axum/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/axum/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://github.com/tokio-rs/axum:  github.com/tokio-rs/axum \n\u27e810\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e811\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e812\u27e9 https://crates.io/categories/web-programming::http-server: HTTP server\n\u27e813\u27e9 https://crates.io/support?crate=axum&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1272,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111506.0142184"
          },
          "docs_rs": {
            "url": "https://docs.rs/axum",
            "title": "Crate axumCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\n[Settings](https://docs.rs/axum/latest/settings.html)\n[Help](https://docs.rs/axum/latest/help.html)\nSummary[Source](https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488)\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## [\u00a7](https://docs.rs/axum/latest/axum/#high-level-features)High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the [`tower`](https://crates.io/crates/tower) and [`tower-http`](https://crates.io/crates/tower-http) ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses [`tower::Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\"). This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using [`hyper`](http://crates.io/crates/hyper) or [`tonic`](http://crates.io/crates/tonic).\n## [\u00a7](https://docs.rs/axum/latest/axum/#compatibility)Compatibility\naxum is designed to work with [tokio](https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html \"mod tokio\") and [hyper](https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html \"mod hyper\"). Runtime and transport layer independence is not a goal, at least for the time being.\n## [\u00a7](https://docs.rs/axum/latest/axum/#example)Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## [\u00a7](https://docs.rs/axum/latest/axum/#routing)Routing\n[`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee [`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") for more details on routing.\n## [\u00a7](https://docs.rs/axum/latest/axum/#handlers)Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more [\u201cextractors\u201d](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") as arguments and returns something that can be converted [into a response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\").\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee [`handler`](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\") for more details on handlers.\n## [\u00a7](https://docs.rs/axum/latest/axum/#extractors)Extractors\nAn extractor is a type that implements [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\") or [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"). Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee [`extract`](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") for more details on extractors.\n## [\u00a7](https://docs.rs/axum/latest/axum/#responses)Responses\nAnything that implements [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee [`response`](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\") for more details on building responses.\n## [\u00a7](https://docs.rs/axum/latest/axum/#error-handling)Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee [`error_handling`](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\") for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## [\u00a7](https://docs.rs/axum/latest/axum/#middleware)Middleware\nThere are several different ways to write middleware for axum. See [`middleware`](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\") for more details.\n## [\u00a7](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers)Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-the-state-extractor)Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") for more details about accessing state.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-request-extensions)Using request extensions\nAnother way to share state with handlers is using [`Extension`](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\") as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-closure-captures)Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-task-local-variables)Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses [tokio\u2019s `task_local` macro](https://docs.rs/tokio/1/tokio/macro.task_local.html). smol does not yet offer equivalent functionality at the time of writing (see [this GitHub issue](https://github.com/smol-rs/async-executor/issues/139)).\n## [\u00a7](https://docs.rs/axum/latest/axum/#building-integrations-for-axum)Building integrations for axum\nLibraries authors that want to provide [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\"), [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"), or [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") implementations should depend on the [`axum-core`](http://crates.io/crates/axum-core) crate, instead of `axum` if possible. [`axum-core`](http://crates.io/crates/axum-core) contains core types and traits and is less likely to receive breaking changes.\n## [\u00a7](https://docs.rs/axum/latest/axum/#required-dependencies)Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## [\u00a7](https://docs.rs/axum/latest/axum/#examples)Examples\nThe axum repo contains [a number of examples](https://github.com/tokio-rs/axum/tree/main/examples) that show how to put all the pieces together.\n## [\u00a7](https://docs.rs/axum/latest/axum/#feature-flags)Feature flags\naxum uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/features.html#the-features-section) to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the [`Json`](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\") type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the [`MatchedPath`](https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html \"struct axum::extract::MatchedPath\") extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with [`Multipart`](https://docs.rs/axum/latest/axum/extract/struct.Multipart.html \"struct axum::extract::Multipart\")| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the [`OriginalUri`](https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html \"struct axum::extract::OriginalUri\") extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via [`extract::ws`](https://docs.rs/axum/latest/axum/extract/ws/index.html \"mod axum::extract::ws\")| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports[\u00a7](https://docs.rs/axum/latest/axum/#reexports)\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/axum/latest/axum/#modules)\n\n[body](https://docs.rs/axum/latest/axum/body/index.html \"mod axum::body\")\n    HTTP body utilities.\n\n[error_handling](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\")\n    Error handling model and utilities\n\n[extract](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\")\n    Types and traits for extracting data from requests.\n\n[handler](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\")\n    Async functions that can be used to handle requests.\n\n[middleware](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\")\n    Utilities for writing middleware\n\n[response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\")\n    Types and traits for generating responses.\n\n[routing](https://docs.rs/axum/latest/axum/routing/index.html \"mod axum::routing\")\n    Routing between [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\")s and handlers.\n\n[serve](https://docs.rs/axum/latest/axum/serve/index.html \"mod axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve services.\n\n[test_helpers](https://docs.rs/axum/latest/axum/test_helpers/index.html \"mod axum::test_helpers\")`__private`\n\n## Structs[\u00a7](https://docs.rs/axum/latest/axum/#structs)\n\n[Error](https://docs.rs/axum/latest/axum/struct.Error.html \"struct axum::Error\")\n    Errors that can happen when using axum.\n\n[Extension](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\")\n    Extractor and response for extensions.\n\n[Form](https://docs.rs/axum/latest/axum/struct.Form.html \"struct axum::Form\")`form`\n    URL encoded extractor and response.\n\n[Json](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\")`json`\n    JSON Extractor / Response.\n\n[Router](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\")\n    The router type for composing handlers and services.\n## Traits[\u00a7](https://docs.rs/axum/latest/axum/#traits)\n\n[RequestExt](https://docs.rs/axum/latest/axum/trait.RequestExt.html \"trait axum::RequestExt\")\n    Extension trait that adds additional methods to [`Request`](https://docs.rs/axum/latest/axum/extract/type.Request.html \"type axum::extract::Request\").\n\n[RequestPartsExt](https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html \"trait axum::RequestPartsExt\")\n    Extension trait that adds additional methods to [`Parts`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html \"struct http::request::Parts\").\n\n[ServiceExt](https://docs.rs/axum/latest/axum/trait.ServiceExt.html \"trait axum::ServiceExt\")\n    Extension trait that adds additional methods to any [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\").\n## Functions[\u00a7](https://docs.rs/axum/latest/axum/#functions)\n\n[serve](https://docs.rs/axum/latest/axum/fn.serve.html \"fn axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases[\u00a7](https://docs.rs/axum/latest/axum/#types)\n\n[BoxError](https://docs.rs/axum/latest/axum/type.BoxError.html \"type axum::BoxError\")\n    Alias for a type-erased error type.\n## Attribute Macros[\u00a7](https://docs.rs/axum/latest/axum/#attributes)\n\n[debug_handler](https://docs.rs/axum/latest/axum/attr.debug_handler.html \"attr axum::debug_handler\")`macros`\n    Generates better error messages when applied to handler functions.\n\n[debug_middleware](https://docs.rs/axum/latest/axum/attr.debug_middleware.html \"attr axum::debug_middleware\")`macros`\n    Generates better error messages when applied to middleware functions.\n",
              "markdown_with_citations": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## \u00a7\u27e84\u27e9High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the `tower`\u27e85\u27e9 and `tower-http`\u27e86\u27e9 ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses `tower::Service`\u27e87\u27e9. This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using `hyper`\u27e88\u27e9 or `tonic`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Compatibility\naxum is designed to work with tokio\u27e811\u27e9 and hyper\u27e812\u27e9. Runtime and transport layer independence is not a goal, at least for the time being.\n## \u00a7\u27e813\u27e9Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## \u00a7\u27e814\u27e9Routing\n`Router`\u27e815\u27e9 is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee `Router`\u27e815\u27e9 for more details on routing.\n## \u00a7\u27e816\u27e9Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more \u201cextractors\u201d\u27e817\u27e9 as arguments and returns something that can be converted into a response\u27e818\u27e9.\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee `handler`\u27e819\u27e9 for more details on handlers.\n## \u00a7\u27e820\u27e9Extractors\nAn extractor is a type that implements `FromRequest`\u27e821\u27e9 or `FromRequestParts`\u27e822\u27e9. Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee `extract`\u27e817\u27e9 for more details on extractors.\n## \u00a7\u27e823\u27e9Responses\nAnything that implements `IntoResponse`\u27e824\u27e9 can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee `response`\u27e818\u27e9 for more details on building responses.\n## \u00a7\u27e825\u27e9Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee `error_handling`\u27e826\u27e9 for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## \u00a7\u27e827\u27e9Middleware\nThere are several different ways to write middleware for axum. See `middleware`\u27e828\u27e9 for more details.\n## \u00a7\u27e829\u27e9Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the `State`\u27e830\u27e9 extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### \u00a7\u27e831\u27e9Using the `State`\u27e830\u27e9 extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using `State`\u27e830\u27e9 if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee `State`\u27e830\u27e9 for more details about accessing state.\n### \u00a7\u27e832\u27e9Using request extensions\nAnother way to share state with handlers is using `Extension`\u27e833\u27e9 as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### \u00a7\u27e834\u27e9Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### \u00a7\u27e835\u27e9Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses tokio\u2019s `task_local` macro\u27e836\u27e9. smol does not yet offer equivalent functionality at the time of writing (see this GitHub issue\u27e837\u27e9).\n## \u00a7\u27e838\u27e9Building integrations for axum\nLibraries authors that want to provide `FromRequest`\u27e821\u27e9, `FromRequestParts`\u27e822\u27e9, or `IntoResponse`\u27e824\u27e9 implementations should depend on the `axum-core`\u27e839\u27e9 crate, instead of `axum` if possible. `axum-core`\u27e839\u27e9 contains core types and traits and is less likely to receive breaking changes.\n## \u00a7\u27e840\u27e9Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## \u00a7\u27e841\u27e9Examples\nThe axum repo contains a number of examples\u27e842\u27e9 that show how to put all the pieces together.\n## \u00a7\u27e843\u27e9Feature flags\naxum uses a set of feature flags\u27e844\u27e9 to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the `Json`\u27e845\u27e9 type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the `MatchedPath`\u27e846\u27e9 extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with `Multipart`\u27e847\u27e9| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the `OriginalUri`\u27e848\u27e9 extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via `extract::ws`\u27e849\u27e9| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports\u00a7\u27e850\u27e9\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e851\u27e9\n\nbody\u27e852\u27e9\n    HTTP body utilities.\n\nerror_handling\u27e826\u27e9\n    Error handling model and utilities\n\nextract\u27e817\u27e9\n    Types and traits for extracting data from requests.\n\nhandler\u27e819\u27e9\n    Async functions that can be used to handle requests.\n\nmiddleware\u27e828\u27e9\n    Utilities for writing middleware\n\nresponse\u27e818\u27e9\n    Types and traits for generating responses.\n\nrouting\u27e853\u27e9\n    Routing between `Service`\u27e87\u27e9s and handlers.\n\nserve\u27e854\u27e9`tokio` and (`http1` or `http2`)\n    Serve services.\n\ntest_helpers\u27e855\u27e9`__private`\n\n## Structs\u00a7\u27e856\u27e9\n\nError\u27e857\u27e9\n    Errors that can happen when using axum.\n\nExtension\u27e833\u27e9\n    Extractor and response for extensions.\n\nForm\u27e858\u27e9`form`\n    URL encoded extractor and response.\n\nJson\u27e845\u27e9`json`\n    JSON Extractor / Response.\n\nRouter\u27e815\u27e9\n    The router type for composing handlers and services.\n## Traits\u00a7\u27e859\u27e9\n\nRequestExt\u27e860\u27e9\n    Extension trait that adds additional methods to `Request`\u27e861\u27e9.\n\nRequestPartsExt\u27e862\u27e9\n    Extension trait that adds additional methods to `Parts`\u27e863\u27e9.\n\nServiceExt\u27e864\u27e9\n    Extension trait that adds additional methods to any `Service`\u27e87\u27e9.\n## Functions\u00a7\u27e865\u27e9\n\nserve\u27e866\u27e9`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases\u00a7\u27e867\u27e9\n\nBoxError\u27e868\u27e9\n    Alias for a type-erased error type.\n## Attribute Macros\u00a7\u27e869\u27e9\n\ndebug_handler\u27e870\u27e9`macros`\n    Generates better error messages when applied to handler functions.\n\ndebug_middleware\u27e871\u27e9`macros`\n    Generates better error messages when applied to middleware functions.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/axum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/axum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488: Source\n\u27e84\u27e9 https://docs.rs/axum/latest/axum/#high-level-features: \u00a7\n\u27e85\u27e9 https://crates.io/crates/tower: `tower`\n\u27e86\u27e9 https://crates.io/crates/tower-http: `tower-http`\n\u27e87\u27e9 https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html: trait tower_service::Service - `tower::Service`\n\u27e88\u27e9 http://crates.io/crates/hyper: `hyper`\n\u27e89\u27e9 http://crates.io/crates/tonic: `tonic`\n\u27e810\u27e9 https://docs.rs/axum/latest/axum/#compatibility: \u00a7\n\u27e811\u27e9 https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html: mod tokio - tokio\n\u27e812\u27e9 https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html: mod hyper - hyper\n\u27e813\u27e9 https://docs.rs/axum/latest/axum/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/axum/latest/axum/#routing: \u00a7\n\u27e815\u27e9 https://docs.rs/axum/latest/axum/struct.Router.html: struct axum::Router - `Router`\n\u27e816\u27e9 https://docs.rs/axum/latest/axum/#handlers: \u00a7\n\u27e817\u27e9 https://docs.rs/axum/latest/axum/extract/index.html: mod axum::extract - \u201cextractors\u201d\n\u27e818\u27e9 https://docs.rs/axum/latest/axum/response/index.html: mod axum::response - into a response\n\u27e819\u27e9 https://docs.rs/axum/latest/axum/handler/index.html: mod axum::handler - `handler`\n\u27e820\u27e9 https://docs.rs/axum/latest/axum/#extractors: \u00a7\n\u27e821\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html: trait axum::extract::FromRequest - `FromRequest`\n\u27e822\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html: trait axum::extract::FromRequestParts - `FromRequestParts`\n\u27e823\u27e9 https://docs.rs/axum/latest/axum/#responses: \u00a7\n\u27e824\u27e9 https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html: trait axum::response::IntoResponse - `IntoResponse`\n\u27e825\u27e9 https://docs.rs/axum/latest/axum/#error-handling: \u00a7\n\u27e826\u27e9 https://docs.rs/axum/latest/axum/error_handling/index.html: mod axum::error_handling - `error_handling`\n\u27e827\u27e9 https://docs.rs/axum/latest/axum/#middleware: \u00a7\n\u27e828\u27e9 https://docs.rs/axum/latest/axum/middleware/index.html: mod axum::middleware - `middleware`\n\u27e829\u27e9 https://docs.rs/axum/latest/axum/#sharing-state-with-handlers: \u00a7\n\u27e830\u27e9 https://docs.rs/axum/latest/axum/extract/struct.State.html: struct axum::extract::State - `State`\n\u27e831\u27e9 https://docs.rs/axum/latest/axum/#using-the-state-extractor: \u00a7\n\u27e832\u27e9 https://docs.rs/axum/latest/axum/#using-request-extensions: \u00a7\n\u27e833\u27e9 https://docs.rs/axum/latest/axum/struct.Extension.html: struct axum::Extension - `Extension`\n\u27e834\u27e9 https://docs.rs/axum/latest/axum/#using-closure-captures: \u00a7\n\u27e835\u27e9 https://docs.rs/axum/latest/axum/#using-task-local-variables: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/1/tokio/macro.task_local.html: tokio\u2019s `task_local` macro\n\u27e837\u27e9 https://github.com/smol-rs/async-executor/issues/139: this GitHub issue\n\u27e838\u27e9 https://docs.rs/axum/latest/axum/#building-integrations-for-axum: \u00a7\n\u27e839\u27e9 http://crates.io/crates/axum-core: `axum-core`\n\u27e840\u27e9 https://docs.rs/axum/latest/axum/#required-dependencies: \u00a7\n\u27e841\u27e9 https://docs.rs/axum/latest/axum/#examples: \u00a7\n\u27e842\u27e9 https://github.com/tokio-rs/axum/tree/main/examples: a number of examples\n\u27e843\u27e9 https://docs.rs/axum/latest/axum/#feature-flags: \u00a7\n\u27e844\u27e9 https://doc.rust-lang.org/cargo/reference/features.html#the-features-section: feature flags\n\u27e845\u27e9 https://docs.rs/axum/latest/axum/struct.Json.html: struct axum::Json - `Json`\n\u27e846\u27e9 https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html: struct axum::extract::MatchedPath - `MatchedPath`\n\u27e847\u27e9 https://docs.rs/axum/latest/axum/extract/struct.Multipart.html: struct axum::extract::Multipart - `Multipart`\n\u27e848\u27e9 https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html: struct axum::extract::OriginalUri - `OriginalUri`\n\u27e849\u27e9 https://docs.rs/axum/latest/axum/extract/ws/index.html: mod axum::extract::ws - `extract::ws`\n\u27e850\u27e9 https://docs.rs/axum/latest/axum/#reexports: \u00a7\n\u27e851\u27e9 https://docs.rs/axum/latest/axum/#modules: \u00a7\n\u27e852\u27e9 https://docs.rs/axum/latest/axum/body/index.html: mod axum::body - body\n\u27e853\u27e9 https://docs.rs/axum/latest/axum/routing/index.html: mod axum::routing - routing\n\u27e854\u27e9 https://docs.rs/axum/latest/axum/serve/index.html: mod axum::serve - serve\n\u27e855\u27e9 https://docs.rs/axum/latest/axum/test_helpers/index.html: mod axum::test_helpers - test_helpers\n\u27e856\u27e9 https://docs.rs/axum/latest/axum/#structs: \u00a7\n\u27e857\u27e9 https://docs.rs/axum/latest/axum/struct.Error.html: struct axum::Error - Error\n\u27e858\u27e9 https://docs.rs/axum/latest/axum/struct.Form.html: struct axum::Form - Form\n\u27e859\u27e9 https://docs.rs/axum/latest/axum/#traits: \u00a7\n\u27e860\u27e9 https://docs.rs/axum/latest/axum/trait.RequestExt.html: trait axum::RequestExt - RequestExt\n\u27e861\u27e9 https://docs.rs/axum/latest/axum/extract/type.Request.html: type axum::extract::Request - `Request`\n\u27e862\u27e9 https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html: trait axum::RequestPartsExt - RequestPartsExt\n\u27e863\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html: struct http::request::Parts - `Parts`\n\u27e864\u27e9 https://docs.rs/axum/latest/axum/trait.ServiceExt.html: trait axum::ServiceExt - ServiceExt\n\u27e865\u27e9 https://docs.rs/axum/latest/axum/#functions: \u00a7\n\u27e866\u27e9 https://docs.rs/axum/latest/axum/fn.serve.html: fn axum::serve - serve\n\u27e867\u27e9 https://docs.rs/axum/latest/axum/#types: \u00a7\n\u27e868\u27e9 https://docs.rs/axum/latest/axum/type.BoxError.html: type axum::BoxError - BoxError\n\u27e869\u27e9 https://docs.rs/axum/latest/axum/#attributes: \u00a7\n\u27e870\u27e9 https://docs.rs/axum/latest/axum/attr.debug_handler.html: attr axum::debug_handler - debug_handler\n\u27e871\u27e9 https://docs.rs/axum/latest/axum/attr.debug_middleware.html: attr axum::debug_middleware - debug_middleware\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 18550,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111506.5890705"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/axum",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [84 releases](https://lib.rs/crates/axum/versions)\n0.8.4 |  Apr 30, 2025   \n---|---  \n0.8.3 |  Mar 28, 2025   \n0.8.2 |  ~~Jan 21, 2025~~  \n0.8.0-rc.1 |  Dec 17, 2024   \n0.1.1 |  Jul 30, 2021   \n#**2** in [HTTP server](https://lib.rs/web-programming/http-server \"Crates to serve data over HTTP.\")\nDownload history 2524324/week @ 2025-03-10 2665864/week @ 2025-03-17 2773423/week @ 2025-03-24 2249121/week @ 2025-03-31 2370889/week @ 2025-04-07 2046562/week @ 2025-04-14 2071775/week @ 2025-04-21 1876359/week @ 2025-04-28 2018966/week @ 2025-05-05 2056712/week @ 2025-05-12 2104758/week @ 2025-05-19 1834928/week @ 2025-05-26 2123215/week @ 2025-06-02 2069602/week @ 2025-06-09 2098170/week @ 2025-06-16 2306157/week @ 2025-06-23\n**8,671,766** downloads per month Used in [**2,558** crates (1,946 directly)](https://lib.rs/crates/axum/rev)\n**MIT** license \n680KB  15K  SLoC\n# axum\n``axum`` is a web application framework that focuses on ergonomics and modularity.\n[![Build status](https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/tokio-rs/axum/actions/workflows/CI.yml) [![Crates.io](https://img.shields.io/crates/v/axum)](https://crates.io/crates/axum) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/axum/badge.svg)](https://docs.rs/axum)\nMore information about this crate can be found in the [crate documentation](https://docs.rs/axum).\n## High level features\n  * Route requests to handlers with a macro free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the [``tower``](https://lib.rs/crates/tower) and [``tower-http``](https://lib.rs/crates/tower-http) ecosystem of middleware, services, and utilities.\n\n\nIn particular the last point is what sets ``axum`` apart from other frameworks. ``axum`` doesn't have its own middleware system but instead uses [```tower`::``Service``](https://docs.rs/tower/latest/tower/trait.Service.html). This means ``axum`` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using [``hyper``](https://lib.rs/crates/hyper) or [``tonic``](https://lib.rs/crates/tonic).\n## Usage example\n```\n``use` `axum`::````{`\n  `routing`::```{`get`,` post`}``,`\n  `http`::``StatusCode`,`\n  Json`,` Router`,`\n```}```;`\n`use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)``````{`\n  ``//` initialize tracing`\n  `tracing_subscriber`::```fmt`::``init`(``)``;`\n  ``//` build our application with a route`\n  `let` app `=` `Router`::``new`(``)`\n    ``//` `GET /` goes to `root``\n    `.``route``(```\"`/`\"```,` `get``(`root`)``)`\n    ``//` `POST /users` goes to `create_user``\n    `.``route``(```\"`/users`\"```,` `post``(`create_user`)``)``;`\n  ``//` run our app with hyper, listening globally on port 3000`\n  `let` listener `=` `tokio`::```net`::```TcpListener`::``bind`(```\"`0.0.0.0:3000`\"```)``.`await`.``unwrap``(``)``;`\n  `axum`::``serve`(`listener`,` app`)``.`await`.``unwrap``(``)``;`\n```}```\n``//` basic handler that responds with a static string`\nasync ``fn` `root`````(````)```` ``->` `&``'static` `str`` ````{`\n  ``\"`Hello, World!`\"``\n```}```\nasync ``fn` `create_user`````(`\n  ``//` this argument tells axum to parse the request body`\n  ``//` as JSON into a `CreateUser` type`\n  Json`(``payload``)`: `Json`<`CreateUser`>``,\n```)```` ``->` `(`StatusCode, `Json`<`User`>```)`` ````{`\n  ``//` insert your application logic here`\n  `let` user `=` User `{`\n    id`:` `1337``,`\n    username`:` payload`.`username`,`\n  `}``;`\n  ``//` this will be converted into a JSON response`\n  ``//` with a status code of `201 Created``\n  `(``StatusCode`::```CREATED``,` Json`(`user`)``)`\n```}```\n``//` the input to our `create_user` handler`\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```CreateUser` ````{`\n  `username``:` String,\n```}```\n``//` the output to our `create_user` handler`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```User` ````{`\n  `id``:` `u64`,\n  `username``:` String,\n```}```\n`\n```\n\nYou can find this [example](https://github.com/tokio-rs/axum/tree/main/examples/readme) as well as other example projects in the [example directory](https://github.com/tokio-rs/axum/tree/main/examples).\nSee the [crate documentation](https://docs.rs/axum) for way more examples.\n## Performance\n``axum`` is a relatively thin layer on top of [``hyper``](https://lib.rs/crates/hyper) and adds very little overhead. So ``axum``'s performance is comparable to [``hyper``](https://lib.rs/crates/hyper). You can find benchmarks [here](https://github.com/programatik29/rust-web-benchmarks) and [here](https://web-frameworks-benchmark.netlify.app/result?l=rust).\n## Safety\nThis crate uses ````#!``[``forbid```(```unsafe_code```)```]```` to ensure everything is implemented in 100% safe Rust.\n## Minimum supported Rust version\naxum's MSRV is 1.75.\n## Examples\nThe [examples](https://github.com/tokio-rs/axum/tree/main/examples) folder contains various examples of how to use ``axum``. The [docs](https://docs.rs/axum) also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained [showcases](https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#project-showcase) or [tutorials](https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#tutorials).\n## Getting Help\nIn the ``axum``'s repo we also have a [number of examples](https://github.com/tokio-rs/axum/tree/main/examples) showing how to put everything together. Community-maintained [showcases](https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#project-showcase) and [tutorials](https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#tutorials) also demonstrate how to use ``axum`` for real-world applications. You're also welcome to ask in the [Discord channel](https://discord.gg/tokio) or open a [discussion](https://github.com/tokio-rs/axum/discussions/new?category=q-a) with your question.\n## Community projects\nSee [here](https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md) for a list of community maintained crates and projects built with ``axum``.\n## Contributing\n\ud83c\udf88 Thanks for your help improving the project! We are so happy to have you! We have a [contributing guide](https://github.com/tokio-rs/axum/blob/main/CONTRIBUTING.md) to help you get involved in the ``axum`` project.\n## License\nThis project is licensed under the [MIT license](https://github.com/tokio-rs/axum/blob/main/axum/LICENSE).\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in ``axum`` by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~4\u201317MB  ~253K SLoC\n  * [axum-core](https://lib.rs/crates/axum-core \"new\") 0.5.2\n  * [ws?](https://lib.rs/crates/axum/features#feature-ws \"optional feature\") [base64](https://lib.rs/crates/base64 \"new\") 0.22.1\n  * [http1](https://lib.rs/crates/axum/features#feature-http1 \"default feature\") [http2?](https://lib.rs/crates/axum/features#feature-http2 \"optional feature\") [ws?](https://lib.rs/crates/axum/features#feature-ws \"optional feature\") [hyper](https://lib.rs/crates/hyper \"new\") 1.1\n  * [ws?](https://lib.rs/crates/axum/features#feature-ws \"optional feature\") [sha1](https://lib.rs/crates/sha1 \"0.10\")\n  * [ws?](https://lib.rs/crates/axum/features#feature-ws \"optional feature\") [tokio-tungstenite](https://lib.rs/crates/tokio-tungstenite \"obsolete\") 0.26\n  * [bytes](https://lib.rs/crates/bytes \"1.0\")\n  * [form](https://lib.rs/crates/axum/features#feature-form \"default feature\") [query](https://lib.rs/crates/axum/features#feature-query \"default feature\") [form_urlencoded](https://lib.rs/crates/form_urlencoded \"1.1.0\")\n  * [form](https://lib.rs/crates/axum/features#feature-form \"default feature\") [json](https://lib.rs/crates/axum/features#feature-json \"default feature\") [query](https://lib.rs/crates/axum/features#feature-query \"default feature\") [serde_path_to_error](https://lib.rs/crates/serde_path_to_error \"0.1.8\")\n  * [form](https://lib.rs/crates/axum/features#feature-form \"default feature\") [query](https://lib.rs/crates/axum/features#feature-query \"default feature\") [serde_urlencoded](https://lib.rs/crates/serde_urlencoded \"0.7\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3\")[+alloc](https://lib.rs/crates/futures-util/features#feature-alloc)\n  * [http](https://lib.rs/crates/http \"new\") 1.0\n  * [http-body](https://lib.rs/crates/http-body \"new\") 1.0\n  * [http-body-util](https://lib.rs/crates/http-body-util \"0.1.0\")\n  * [http1](https://lib.rs/crates/axum/features#feature-http1 \"default feature\") [http2?](https://lib.rs/crates/axum/features#feature-http2 \"optional feature\") [tokio](https://lib.rs/crates/axum/features#feature-tokio \"default feature\") [hyper-util](https://lib.rs/crates/hyper-util \"0.1.3\")[+tokio](https://lib.rs/crates/hyper-util/features#feature-tokio)[+server](https://lib.rs/crates/hyper-util/features#feature-server)[+service](https://lib.rs/crates/hyper-util/features#feature-service)\n  * [tokio](https://lib.rs/crates/axum/features#feature-tokio \"default feature\") [tokio](https://lib.rs/crates/tokio \"1.44\")[+time](https://lib.rs/crates/tokio/features#feature-time)\n  * [itoa](https://lib.rs/crates/itoa \"1.0.5\")\n  * [matchit](https://lib.rs/crates/matchit \"outdated\") =0.8.4\n  * [memchr](https://lib.rs/crates/memchr \"2.4.1\")\n  * [mime](https://lib.rs/crates/mime \"0.3.16\")\n  * [percent-encoding](https://lib.rs/crates/percent-encoding \"2.1\")\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.7\")\n  * [rustversion](https://lib.rs/crates/rustversion \"1.0.9\")\n  * [serde](https://lib.rs/crates/serde \"1.0\")\n  * [json](https://lib.rs/crates/axum/features#feature-json \"default feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0\")[+raw_value](https://lib.rs/crates/serde_json/features#feature-raw_value)\n  * [sync_wrapper](https://lib.rs/crates/sync_wrapper \"new\") 1.0\n  * [tower](https://lib.rs/crates/tower \"0.5.2\")[+util](https://lib.rs/crates/tower/features#feature-util)\n  * [tower-layer](https://lib.rs/crates/tower-layer \"0.3.2\")\n  * [tower-service](https://lib.rs/crates/tower-service \"0.3\")\n  * [ default ](https://lib.rs/crates/axum/features#feature-tracing \"tracing enabled by default feature\") [tracing](https://lib.rs/crates/tracing \"0.1\")\n  * [macros?](https://lib.rs/crates/axum/features#feature-macros \"optional feature\") [axum-macros](https://lib.rs/crates/axum-macros \"new\") 0.5\n  * [multipart?](https://lib.rs/crates/axum/features#feature-multipart \"optional feature\") [multer](https://lib.rs/crates/multer \"new\") 3.0\n  * [ optional ](https://lib.rs/crates/axum/features#feature-reqwest \"reqwest is optional feature\") [reqwest](https://lib.rs/crates/reqwest \"new\") 0.12[+json](https://lib.rs/crates/reqwest/features#feature-json)[+stream](https://lib.rs/crates/reqwest/features#feature-stream)[+multipart](https://lib.rs/crates/reqwest/features#feature-multipart)\n  * [ optional ](https://lib.rs/crates/axum/features#feature-tower-http \"tower-http is optional feature\") [tower-http](https://lib.rs/crates/tower-http \"0.6.0\")[+add-extension](https://lib.rs/crates/tower-http/features#feature-add-extension)[+auth](https://lib.rs/crates/tower-http/features#feature-auth)[+catch-panic](https://lib.rs/crates/tower-http/features#feature-catch-panic)[+compression-br](https://lib.rs/crates/tower-http/features#feature-compression-br)[+compression-deflate](https://lib.rs/crates/tower-http/features#feature-compression-deflate)[+compression-gzip](https://lib.rs/crates/tower-http/features#feature-compression-gzip)[+cors](https://lib.rs/crates/tower-http/features#feature-cors)[+decompression-br](https://lib.rs/crates/tower-http/features#feature-decompression-br)[+decompression-deflate](https://lib.rs/crates/tower-http/features#feature-decompression-deflate)[+decompression-gzip](https://lib.rs/crates/tower-http/features#feature-decompression-gzip)\u2026 \n\n\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0\")\n  * dev  [quickcheck](https://lib.rs/crates/quickcheck \"new\") 1.0\n  * dev  [quickcheck_macros](https://lib.rs/crates/quickcheck_macros \"new\") 1.0\n  * dev  [time](https://lib.rs/crates/time \"0.3\")[+serde-human-readable](https://lib.rs/crates/time/features#feature-serde-human-readable)\n  * dev  [tokio-stream](https://lib.rs/crates/tokio-stream \"0.1\")\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+json](https://lib.rs/crates/tracing-subscriber/features#feature-json)\n  * dev  [uuid](https://lib.rs/crates/uuid \"1.0\")[+serde](https://lib.rs/crates/uuid/features#feature-serde)[+v4](https://lib.rs/crates/uuid/features#feature-v4)\n\n\n#### [Other features](https://lib.rs/crates/axum/features)\n  * [matched-path](https://lib.rs/crates/axum/features#feature-matched-path)\n  * [original-uri](https://lib.rs/crates/axum/features#feature-original-uri)\n  * [tower-log](https://lib.rs/crates/axum/features#feature-tower-log)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  84 releases\u27e81\u27e9\n0.8.4 |  Apr 30, 2025   \n---|---  \n0.8.3 |  Mar 28, 2025   \n0.8.2 |  ~~Jan 21, 2025~~  \n0.8.0-rc.1 |  Dec 17, 2024   \n0.1.1 |  Jul 30, 2021   \n#**2** in HTTP server\u27e82\u27e9\nDownload history 2524324/week @ 2025-03-10 2665864/week @ 2025-03-17 2773423/week @ 2025-03-24 2249121/week @ 2025-03-31 2370889/week @ 2025-04-07 2046562/week @ 2025-04-14 2071775/week @ 2025-04-21 1876359/week @ 2025-04-28 2018966/week @ 2025-05-05 2056712/week @ 2025-05-12 2104758/week @ 2025-05-19 1834928/week @ 2025-05-26 2123215/week @ 2025-06-02 2069602/week @ 2025-06-09 2098170/week @ 2025-06-16 2306157/week @ 2025-06-23\n**8,671,766** downloads per month Used in **2,558** crates (1,946 directly)\u27e83\u27e9\n**MIT** license \n680KB  15K  SLoC\n# axum\n``axum`` is a web application framework that focuses on ergonomics and modularity.\n![Build status\u27e84\u27e9](https://github.com/tokio-rs/axum/actions/workflows/CI.yml) ![Crates.io\u27e85\u27e9](https://crates.io/crates/axum) ![Documentation\u27e86\u27e9](https://docs.rs/axum)\nMore information about this crate can be found in the crate documentation\u27e87\u27e9.\n## High level features\n  * Route requests to handlers with a macro free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the ``tower``\u27e88\u27e9 and ``tower-http``\u27e89\u27e9 ecosystem of middleware, services, and utilities.\n\n\nIn particular the last point is what sets ``axum`` apart from other frameworks. ``axum`` doesn't have its own middleware system but instead uses ```tower`::``Service``\u27e810\u27e9. This means ``axum`` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using ``hyper``\u27e811\u27e9 or ``tonic``\u27e812\u27e9.\n## Usage example\n```\n``use` `axum`::````{`\n  `routing`::```{`get`,` post`}``,`\n  `http`::``StatusCode`,`\n  Json`,` Router`,`\n```}```;`\n`use` `serde`::````{`Deserialize`,` Serialize```}```;`\n``#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)``````{`\n  ``//` initialize tracing`\n  `tracing_subscriber`::```fmt`::``init`(``)``;`\n  ``//` build our application with a route`\n  `let` app `=` `Router`::``new`(``)`\n    ``//` `GET /` goes to `root``\n    `.``route``(```\"`/`\"```,` `get``(`root`)``)`\n    ``//` `POST /users` goes to `create_user``\n    `.``route``(```\"`/users`\"```,` `post``(`create_user`)``)``;`\n  ``//` run our app with hyper, listening globally on port 3000`\n  `let` listener `=` `tokio`::```net`::```TcpListener`::``bind`(```\"`0.0.0.0:3000`\"```)``.`await`.``unwrap``(``)``;`\n  `axum`::``serve`(`listener`,` app`)``.`await`.``unwrap``(``)``;`\n```}```\n``//` basic handler that responds with a static string`\nasync ``fn` `root`````(````)```` ``->` `&``'static` `str`` ````{`\n  ``\"`Hello, World!`\"``\n```}```\nasync ``fn` `create_user`````(`\n  ``//` this argument tells axum to parse the request body`\n  ``//` as JSON into a `CreateUser` type`\n  Json`(``payload``)`: `Json`<`CreateUser`>``,\n```)```` ``->` `(`StatusCode, `Json`<`User`>```)`` ````{`\n  ``//` insert your application logic here`\n  `let` user `=` User `{`\n    id`:` `1337``,`\n    username`:` payload`.`username`,`\n  `}``;`\n  ``//` this will be converted into a JSON response`\n  ``//` with a status code of `201 Created``\n  `(``StatusCode`::```CREATED``,` Json`(`user`)``)`\n```}```\n``//` the input to our `create_user` handler`\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```CreateUser` ````{`\n  `username``:` String,\n```}```\n``//` the output to our `create_user` handler`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```User` ````{`\n  `id``:` `u64`,\n  `username``:` String,\n```}```\n`\n```\n\nYou can find this example\u27e813\u27e9 as well as other example projects in the example directory\u27e814\u27e9.\nSee the crate documentation\u27e87\u27e9 for way more examples.\n## Performance\n``axum`` is a relatively thin layer on top of ``hyper``\u27e811\u27e9 and adds very little overhead. So ``axum``'s performance is comparable to ``hyper``\u27e811\u27e9. You can find benchmarks here\u27e815\u27e9 and here\u27e816\u27e9.\n## Safety\nThis crate uses ````#!``[``forbid```(```unsafe_code```)```]```` to ensure everything is implemented in 100% safe Rust.\n## Minimum supported Rust version\naxum's MSRV is 1.75.\n## Examples\nThe examples\u27e814\u27e9 folder contains various examples of how to use ``axum``. The docs\u27e87\u27e9 also provide lots of code snippets and examples. For full-fledged examples, check out community-maintained showcases\u27e817\u27e9 or tutorials\u27e818\u27e9.\n## Getting Help\nIn the ``axum``'s repo we also have a number of examples\u27e814\u27e9 showing how to put everything together. Community-maintained showcases\u27e817\u27e9 and tutorials\u27e818\u27e9 also demonstrate how to use ``axum`` for real-world applications. You're also welcome to ask in the Discord channel\u27e819\u27e9 or open a discussion\u27e820\u27e9 with your question.\n## Community projects\nSee here\u27e821\u27e9 for a list of community maintained crates and projects built with ``axum``.\n## Contributing\n\ud83c\udf88 Thanks for your help improving the project! We are so happy to have you! We have a contributing guide\u27e822\u27e9 to help you get involved in the ``axum`` project.\n## License\nThis project is licensed under the MIT license\u27e823\u27e9.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in ``axum`` by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~4\u201317MB  ~253K SLoC\n  * axum-core\u27e824\u27e9 0.5.2\n  * ws?\u27e825\u27e9 base64\u27e826\u27e9 0.22.1\n  * http1\u27e827\u27e9 http2?\u27e828\u27e9 ws?\u27e825\u27e9 hyper\u27e811\u27e9 1.1\n  * ws?\u27e825\u27e9 sha1\u27e829\u27e9\n  * ws?\u27e825\u27e9 tokio-tungstenite\u27e830\u27e9 0.26\n  * bytes\u27e831\u27e9\n  * form\u27e832\u27e9 query\u27e833\u27e9 form_urlencoded\u27e834\u27e9\n  * form\u27e832\u27e9 json\u27e835\u27e9 query\u27e833\u27e9 serde_path_to_error\u27e836\u27e9\n  * form\u27e832\u27e9 query\u27e833\u27e9 serde_urlencoded\u27e837\u27e9\n  * futures-util\u27e838\u27e9+alloc\u27e839\u27e9\n  * http\u27e840\u27e9 1.0\n  * http-body\u27e841\u27e9 1.0\n  * http-body-util\u27e842\u27e9\n  * http1\u27e827\u27e9 http2?\u27e828\u27e9 tokio\u27e843\u27e9 hyper-util\u27e844\u27e9+tokio\u27e845\u27e9+server\u27e846\u27e9+service\u27e847\u27e9\n  * tokio\u27e843\u27e9 tokio\u27e848\u27e9+time\u27e849\u27e9\n  * itoa\u27e850\u27e9\n  * matchit\u27e851\u27e9 =0.8.4\n  * memchr\u27e852\u27e9\n  * mime\u27e853\u27e9\n  * percent-encoding\u27e854\u27e9\n  * pin-project-lite\u27e855\u27e9\n  * rustversion\u27e856\u27e9\n  * serde\u27e857\u27e9\n  * json\u27e835\u27e9 serde_json\u27e858\u27e9+raw_value\u27e859\u27e9\n  * sync_wrapper\u27e860\u27e9 1.0\n  * tower\u27e88\u27e9+util\u27e861\u27e9\n  * tower-layer\u27e862\u27e9\n  * tower-service\u27e863\u27e9\n  *  default \u27e864\u27e9 tracing\u27e865\u27e9\n  * macros?\u27e866\u27e9 axum-macros\u27e867\u27e9 0.5\n  * multipart?\u27e868\u27e9 multer\u27e869\u27e9 3.0\n  *  optional \u27e870\u27e9 reqwest\u27e871\u27e9 0.12+json\u27e872\u27e9+stream\u27e873\u27e9+multipart\u27e874\u27e9\n  *  optional \u27e875\u27e9 tower-http\u27e89\u27e9+add-extension\u27e876\u27e9+auth\u27e877\u27e9+catch-panic\u27e878\u27e9+compression-br\u27e879\u27e9+compression-deflate\u27e880\u27e9+compression-gzip\u27e881\u27e9+cors\u27e882\u27e9+decompression-br\u27e883\u27e9+decompression-deflate\u27e884\u27e9+decompression-gzip\u27e885\u27e9\u2026 \n\n\n  * dev  anyhow\u27e886\u27e9\n  * dev  quickcheck\u27e887\u27e9 1.0\n  * dev  quickcheck_macros\u27e888\u27e9 1.0\n  * dev  time\u27e889\u27e9+serde-human-readable\u27e890\u27e9\n  * dev  tokio-stream\u27e891\u27e9\n  * dev  tracing-subscriber\u27e892\u27e9+json\u27e893\u27e9\n  * dev  uuid\u27e894\u27e9+serde\u27e895\u27e9+v4\u27e896\u27e9\n\n\n#### Other features\u27e897\u27e9\n  * matched-path\u27e898\u27e9\n  * original-uri\u27e899\u27e9\n  * tower-log\u27e8100\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/axum/versions: 84 releases\n\u27e82\u27e9 https://lib.rs/web-programming/http-server: Crates to serve data over HTTP. - HTTP server\n\u27e83\u27e9 https://lib.rs/crates/axum/rev: **2,558** crates (1,946 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/axum/actions/workflows/CI.yml/badge.svg?branch=main: ![Build status\n\u27e85\u27e9 https://img.shields.io/crates/v/axum: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/axum/badge.svg: ![Documentation\n\u27e87\u27e9 https://docs.rs/axum: crate documentation\n\u27e88\u27e9 https://lib.rs/crates/tower: ``tower``\n\u27e89\u27e9 https://lib.rs/crates/tower-http: ``tower-http``\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: ```tower`::``Service``\n\u27e811\u27e9 https://lib.rs/crates/hyper: ``hyper``\n\u27e812\u27e9 https://lib.rs/crates/tonic: ``tonic``\n\u27e813\u27e9 https://github.com/tokio-rs/axum/tree/main/examples/readme: example\n\u27e814\u27e9 https://github.com/tokio-rs/axum/tree/main/examples: example directory\n\u27e815\u27e9 https://github.com/programatik29/rust-web-benchmarks: here\n\u27e816\u27e9 https://web-frameworks-benchmark.netlify.app/result?l=rust: here\n\u27e817\u27e9 https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#project-showcase: showcases\n\u27e818\u27e9 https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md#tutorials: tutorials\n\u27e819\u27e9 https://discord.gg/tokio: Discord channel\n\u27e820\u27e9 https://github.com/tokio-rs/axum/discussions/new?category=q-a: discussion\n\u27e821\u27e9 https://github.com/tokio-rs/axum/blob/main/ECOSYSTEM.md: here\n\u27e822\u27e9 https://github.com/tokio-rs/axum/blob/main/CONTRIBUTING.md: contributing guide\n\u27e823\u27e9 https://github.com/tokio-rs/axum/blob/main/axum/LICENSE: MIT license\n\u27e824\u27e9 https://lib.rs/crates/axum-core: new - axum-core\n\u27e825\u27e9 https://lib.rs/crates/axum/features#feature-ws: optional feature - ws?\n\u27e826\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e827\u27e9 https://lib.rs/crates/axum/features#feature-http1: default feature - http1\n\u27e828\u27e9 https://lib.rs/crates/axum/features#feature-http2: optional feature - http2?\n\u27e829\u27e9 https://lib.rs/crates/sha1: 0.10 - sha1\n\u27e830\u27e9 https://lib.rs/crates/tokio-tungstenite: obsolete - tokio-tungstenite\n\u27e831\u27e9 https://lib.rs/crates/bytes: 1.0 - bytes\n\u27e832\u27e9 https://lib.rs/crates/axum/features#feature-form: default feature - form\n\u27e833\u27e9 https://lib.rs/crates/axum/features#feature-query: default feature - query\n\u27e834\u27e9 https://lib.rs/crates/form_urlencoded: 1.1.0 - form_urlencoded\n\u27e835\u27e9 https://lib.rs/crates/axum/features#feature-json: default feature - json\n\u27e836\u27e9 https://lib.rs/crates/serde_path_to_error: 0.1.8 - serde_path_to_error\n\u27e837\u27e9 https://lib.rs/crates/serde_urlencoded: 0.7 - serde_urlencoded\n\u27e838\u27e9 https://lib.rs/crates/futures-util: 0.3 - futures-util\n\u27e839\u27e9 https://lib.rs/crates/futures-util/features#feature-alloc: +alloc\n\u27e840\u27e9 https://lib.rs/crates/http: new - http\n\u27e841\u27e9 https://lib.rs/crates/http-body: new - http-body\n\u27e842\u27e9 https://lib.rs/crates/http-body-util: 0.1.0 - http-body-util\n\u27e843\u27e9 https://lib.rs/crates/axum/features#feature-tokio: default feature - tokio\n\u27e844\u27e9 https://lib.rs/crates/hyper-util: 0.1.3 - hyper-util\n\u27e845\u27e9 https://lib.rs/crates/hyper-util/features#feature-tokio: +tokio\n\u27e846\u27e9 https://lib.rs/crates/hyper-util/features#feature-server: +server\n\u27e847\u27e9 https://lib.rs/crates/hyper-util/features#feature-service: +service\n\u27e848\u27e9 https://lib.rs/crates/tokio: 1.44 - tokio\n\u27e849\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e850\u27e9 https://lib.rs/crates/itoa: 1.0.5 - itoa\n\u27e851\u27e9 https://lib.rs/crates/matchit: outdated - matchit\n\u27e852\u27e9 https://lib.rs/crates/memchr: 2.4.1 - memchr\n\u27e853\u27e9 https://lib.rs/crates/mime: 0.3.16 - mime\n\u27e854\u27e9 https://lib.rs/crates/percent-encoding: 2.1 - percent-encoding\n\u27e855\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.7 - pin-project-lite\n\u27e856\u27e9 https://lib.rs/crates/rustversion: 1.0.9 - rustversion\n\u27e857\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e858\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e859\u27e9 https://lib.rs/crates/serde_json/features#feature-raw_value: +raw_value\n\u27e860\u27e9 https://lib.rs/crates/sync_wrapper: new - sync_wrapper\n\u27e861\u27e9 https://lib.rs/crates/tower/features#feature-util: +util\n\u27e862\u27e9 https://lib.rs/crates/tower-layer: 0.3.2 - tower-layer\n\u27e863\u27e9 https://lib.rs/crates/tower-service: 0.3 - tower-service\n\u27e864\u27e9 https://lib.rs/crates/axum/features#feature-tracing: tracing enabled by default feature -  default \n\u27e865\u27e9 https://lib.rs/crates/tracing: 0.1 - tracing\n\u27e866\u27e9 https://lib.rs/crates/axum/features#feature-macros: optional feature - macros?\n\u27e867\u27e9 https://lib.rs/crates/axum-macros: new - axum-macros\n\u27e868\u27e9 https://lib.rs/crates/axum/features#feature-multipart: optional feature - multipart?\n\u27e869\u27e9 https://lib.rs/crates/multer: new - multer\n\u27e870\u27e9 https://lib.rs/crates/axum/features#feature-reqwest: reqwest is optional feature -  optional \n\u27e871\u27e9 https://lib.rs/crates/reqwest: new - reqwest\n\u27e872\u27e9 https://lib.rs/crates/reqwest/features#feature-json: +json\n\u27e873\u27e9 https://lib.rs/crates/reqwest/features#feature-stream: +stream\n\u27e874\u27e9 https://lib.rs/crates/reqwest/features#feature-multipart: +multipart\n\u27e875\u27e9 https://lib.rs/crates/axum/features#feature-tower-http: tower-http is optional feature -  optional \n\u27e876\u27e9 https://lib.rs/crates/tower-http/features#feature-add-extension: +add-extension\n\u27e877\u27e9 https://lib.rs/crates/tower-http/features#feature-auth: +auth\n\u27e878\u27e9 https://lib.rs/crates/tower-http/features#feature-catch-panic: +catch-panic\n\u27e879\u27e9 https://lib.rs/crates/tower-http/features#feature-compression-br: +compression-br\n\u27e880\u27e9 https://lib.rs/crates/tower-http/features#feature-compression-deflate: +compression-deflate\n\u27e881\u27e9 https://lib.rs/crates/tower-http/features#feature-compression-gzip: +compression-gzip\n\u27e882\u27e9 https://lib.rs/crates/tower-http/features#feature-cors: +cors\n\u27e883\u27e9 https://lib.rs/crates/tower-http/features#feature-decompression-br: +decompression-br\n\u27e884\u27e9 https://lib.rs/crates/tower-http/features#feature-decompression-deflate: +decompression-deflate\n\u27e885\u27e9 https://lib.rs/crates/tower-http/features#feature-decompression-gzip: +decompression-gzip\n\u27e886\u27e9 https://lib.rs/crates/anyhow: 1.0 - anyhow\n\u27e887\u27e9 https://lib.rs/crates/quickcheck: new - quickcheck\n\u27e888\u27e9 https://lib.rs/crates/quickcheck_macros: new - quickcheck_macros\n\u27e889\u27e9 https://lib.rs/crates/time: 0.3 - time\n\u27e890\u27e9 https://lib.rs/crates/time/features#feature-serde-human-readable: +serde-human-readable\n\u27e891\u27e9 https://lib.rs/crates/tokio-stream: 0.1 - tokio-stream\n\u27e892\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e893\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-json: +json\n\u27e894\u27e9 https://lib.rs/crates/uuid: 1.0 - uuid\n\u27e895\u27e9 https://lib.rs/crates/uuid/features#feature-serde: +serde\n\u27e896\u27e9 https://lib.rs/crates/uuid/features#feature-v4: +v4\n\u27e897\u27e9 https://lib.rs/crates/axum/features: Other features\n\u27e898\u27e9 https://lib.rs/crates/axum/features#feature-matched-path: matched-path\n\u27e899\u27e9 https://lib.rs/crates/axum/features#feature-original-uri: original-uri\n\u27e8100\u27e9 https://lib.rs/crates/axum/features#feature-tower-log: tower-log\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13138,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111507.2076629"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_service",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower_service-6f9ee9668c63aaeb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libitoa-af991b26e9b1ce36.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libunicode_ident-6d74e9fad9aef6d6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libunicode_ident-6d74e9fad9aef6d6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_task-fca6e7fc144838cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sync_wrapper-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sync_wrapper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sync_wrapper-1.0.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsync_wrapper-a82ed70061a64475.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httpdate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttpdate-77358cb654aeba2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libonce_cell-aee3b9768c8bcaf5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-5670cf5d95f89e1a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-5670cf5d95f89e1a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_layer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower_layer-e58cade3501e20e0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_channel-1664bbe1dae9f701.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const_generics",
                "const_new"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsmallvec-a5e663bcba0fc4dc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-8c9ab50c3af1cc80\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-8c9ab50c3af1cc80\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mime-0.3.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mime-0.3.17\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmime-d7c0949541c6c582.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "raw_value",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-52576eb59512d8ba\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-52576eb59512d8ba\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-5233984f98c1eeb7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-5233984f98c1eeb7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-cb12369e2a099dff\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\build\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-24eca823f481cbe5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-24eca823f481cbe5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libform_urlencoded-9704b762345f949f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-0db26522ffcb4a91\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-d4cbd6b92c18c9b0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libbytes-3349875314fc735b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "httparse_simd_neon_intrinsics",
                "httparse_simd"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-fb8df6f6887778a1\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matchit@0.8.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchit-0.8.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matchit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchit-0.8.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmatchit-9992a767c1593e25.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtracing_core-c50b9dbba68fa614.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "host_os=\"windows\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-5a5cd5f60c7053b3\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "log",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtracing-dfa32b3b8a22a097.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttparse-775706677f7443c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "rustversion",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libproc_macro2-d5fd467c52aaa1fd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libproc_macro2-d5fd467c52aaa1fd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libquote-78373907426ec2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libquote-78373907426ec2ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp-e103293f10ff02d0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp_body-8e7dfd9560c2ca08.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_util-55b6405607247f82.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp_body_util-758e9a55fd391b68.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Wdk_System",
                "Wdk_System_IO",
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_IO",
                "Win32_System_Pipes",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_sys-57f3f00a0d5fa83e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "socket2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "all"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsocket2-e8957009044418b4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mio@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "net",
                "os-ext",
                "os-poll"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmio-f1320216a75abe91.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde-0dabdece95c6b05f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_urlencoded-2e4fa9b1b8d615ea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_path_to_error-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_path_to_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_path_to_error-0.1.16\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_path_to_error-a127ee1c11a2457d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#axum-core@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-core-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "axum_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-core-0.5.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libaxum_core-e518d8d4ac8b4e47.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "raw_value",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_json-7ee6cf98391c00c5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsyn-790c06da4206aeda.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsyn-790c06da4206aeda.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tokio_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.44.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.44.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.44.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "io-std",
                "libc",
                "macros",
                "mio",
                "net",
                "rt",
                "socket2",
                "sync",
                "time",
                "tokio-macros",
                "windows-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtokio-98325757cdddafcc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-0.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "__common",
                "futures-core",
                "futures-util",
                "log",
                "make",
                "pin-project-lite",
                "sync_wrapper",
                "tokio",
                "tracing",
                "util"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower-5aef99de70c444b8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper@1.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.5.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "server"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhyper-d7fe49062f65f476.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "server",
                "service",
                "tokio"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhyper_util-b71cfbfa568a9c07.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp6xoe45zg/axum-0.8.4#axum@0.8.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "axum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "form",
                "http1",
                "json",
                "matched-path",
                "original-uri",
                "query",
                "tokio",
                "tower-log",
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libaxum-8c00ea8742ec7fde.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libitoa-af991b26e9b1ce36.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-8c9ab50c3af1cc80\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-8c9ab50c3af1cc80\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libunicode_ident-6d74e9fad9aef6d6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libunicode_ident-6d74e9fad9aef6d6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libbytes-3349875314fc735b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-5670cf5d95f89e1a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-5670cf5d95f89e1a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libonce_cell-aee3b9768c8bcaf5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_task-fca6e7fc144838cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-5233984f98c1eeb7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-5233984f98c1eeb7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\build\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-24eca823f481cbe5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-24eca823f481cbe5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_service",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower_service-6f9ee9668c63aaeb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\proc-macro2-d4cbd6b92c18c9b0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp-e103293f10ff02d0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde-cb12369e2a099dff\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtracing_core-c50b9dbba68fa614.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "httparse_simd_neon_intrinsics",
                "httparse_simd"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\httparse-fb8df6f6887778a1\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_util-55b6405607247f82.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libfutures_channel-1664bbe1dae9f701.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "host_os=\"windows\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\rustversion-5a5cd5f60c7053b3\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sync_wrapper-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sync_wrapper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sync_wrapper-1.0.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsync_wrapper-a82ed70061a64475.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const_generics",
                "const_new"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsmallvec-a5e663bcba0fc4dc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_layer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower_layer-e58cade3501e20e0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "raw_value",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-52576eb59512d8ba\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-52576eb59512d8ba\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httpdate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httpdate-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttpdate-77358cb654aeba2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.92",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.92\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libproc_macro2-d5fd467c52aaa1fd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libproc_macro2-d5fd467c52aaa1fd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp_body-8e7dfd9560c2ca08.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.217\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde-0dabdece95c6b05f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "log",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtracing-dfa32b3b8a22a097.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "httparse",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.9.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttparse-775706677f7443c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "rustversion",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustversion-1.0.19\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\rustversion-f8c46aca1d04654a.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\build\\serde_json-0db26522ffcb4a91\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "form_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\form_urlencoded-1.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libform_urlencoded-9704b762345f949f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mime-0.3.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mime-0.3.17\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmime-d7c0949541c6c582.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matchit@0.8.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchit-0.8.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matchit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchit-0.8.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmatchit-9992a767c1593e25.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Wdk_System",
                "Wdk_System_IO",
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_IO",
                "Win32_System_Pipes",
                "Win32_System_SystemServices",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libwindows_sys-57f3f00a0d5fa83e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libquote-78373907426ec2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libquote-78373907426ec2ca.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-util-0.1.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhttp_body_util-758e9a55fd391b68.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_urlencoded",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_urlencoded-0.7.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_urlencoded-2e4fa9b1b8d615ea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_path_to_error-0.1.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_path_to_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_path_to_error-0.1.16\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_path_to_error-a127ee1c11a2457d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.134",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.134\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "raw_value",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libserde_json-7ee6cf98391c00c5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsyn-790c06da4206aeda.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsyn-790c06da4206aeda.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "socket2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\socket2-0.5.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "all"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libsocket2-e8957009044418b4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#mio@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\mio-1.0.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "net",
                "os-ext",
                "os-poll"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libmio-f1320216a75abe91.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#axum-core@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-core-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "axum_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\axum-core-0.5.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libaxum_core-e518d8d4ac8b4e47.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tokio_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\tokio_macros-8acc97fcae0b4f68.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.44.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.44.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.44.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "io-std",
                "libc",
                "macros",
                "mio",
                "net",
                "rt",
                "socket2",
                "sync",
                "time",
                "tokio-macros",
                "windows-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtokio-98325757cdddafcc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper@1.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-1.5.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "server"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhyper-d7fe49062f65f476.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-0.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "__common",
                "futures-core",
                "futures-util",
                "log",
                "make",
                "pin-project-lite",
                "sync_wrapper",
                "tokio",
                "tracing",
                "util"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libtower-5aef99de70c444b8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hyper-util-0.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "http1",
                "server",
                "service",
                "tokio"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libhyper_util-b71cfbfa568a9c07.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp6xoe45zg/axum-0.8.4#axum@0.8.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "axum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: lint `clippy::match_on_vec_items` has been removed: `clippy::indexing_slicing` covers indexing and slicing on `Vec<_>`\n  |\n  = note: requested on the command line with `-W clippy::match_on_vec_items`\n  = note: `#[warn(renamed_and_removed_lints)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "requested on the command line with `-W clippy::match_on_vec_items`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(renamed_and_removed_lints)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "renamed_and_removed_lints",
                  "explanation": null
                },
                "level": "warning",
                "message": "lint `clippy::match_on_vec_items` has been removed: `clippy::indexing_slicing` covers indexing and slicing on `Vec<_>`",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp6xoe45zg/axum-0.8.4#axum@0.8.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "axum",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "form",
                "http1",
                "json",
                "matched-path",
                "original-uri",
                "query",
                "tokio",
                "tower-log",
                "tracing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp6xoe45zg\\axum-0.8.4\\target\\debug\\deps\\libaxum-7fd8fd673cf753a9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 195
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "axum",
          "version": "0.8.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\n[Settings](https://docs.rs/axum/latest/settings.html)\n[Help](https://docs.rs/axum/latest/help.html)\nSummary[Source](https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488)\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## [\u00a7](https://docs.rs/axum/latest/axum/#high-level-features)High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the [`tower`](https://crates.io/crates/tower) and [`tower-http`](https://crates.io/crates/tower-http) ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses [`tower::Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\"). This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using [`hyper`](http://crates.io/crates/hyper) or [`tonic`](http://crates.io/crates/tonic).\n## [\u00a7](https://docs.rs/axum/latest/axum/#compatibility)Compatibility\naxum is designed to work with [tokio](https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html \"mod tokio\") and [hyper](https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html \"mod hyper\"). Runtime and transport layer independence is not a goal, at least for the time being.\n## [\u00a7](https://docs.rs/axum/latest/axum/#example)Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## [\u00a7](https://docs.rs/axum/latest/axum/#routing)Routing\n[`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee [`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") for more details on routing.\n## [\u00a7](https://docs.rs/axum/latest/axum/#handlers)Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more [\u201cextractors\u201d](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") as arguments and returns something that can be converted [into a response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\").\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee [`handler`](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\") for more details on handlers.\n## [\u00a7](https://docs.rs/axum/latest/axum/#extractors)Extractors\nAn extractor is a type that implements [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\") or [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"). Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee [`extract`](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") for more details on extractors.\n## [\u00a7](https://docs.rs/axum/latest/axum/#responses)Responses\nAnything that implements [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee [`response`](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\") for more details on building responses.\n## [\u00a7](https://docs.rs/axum/latest/axum/#error-handling)Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee [`error_handling`](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\") for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## [\u00a7](https://docs.rs/axum/latest/axum/#middleware)Middleware\nThere are several different ways to write middleware for axum. See [`middleware`](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\") for more details.\n## [\u00a7](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers)Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-the-state-extractor)Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") for more details about accessing state.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-request-extensions)Using request extensions\nAnother way to share state with handlers is using [`Extension`](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\") as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-closure-captures)Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-task-local-variables)Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses [tokio\u2019s `task_local` macro](https://docs.rs/tokio/1/tokio/macro.task_local.html). smol does not yet offer equivalent functionality at the time of writing (see [this GitHub issue](https://github.com/smol-rs/async-executor/issues/139)).\n## [\u00a7](https://docs.rs/axum/latest/axum/#building-integrations-for-axum)Building integrations for axum\nLibraries authors that want to provide [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\"), [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"), or [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") implementations should depend on the [`axum-core`](http://crates.io/crates/axum-core) crate, instead of `axum` if possible. [`axum-core`](http://crates.io/crates/axum-core) contains core types and traits and is less likely to receive breaking changes.\n## [\u00a7](https://docs.rs/axum/latest/axum/#required-dependencies)Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## [\u00a7](https://docs.rs/axum/latest/axum/#examples)Examples\nThe axum repo contains [a number of examples](https://github.com/tokio-rs/axum/tree/main/examples) that show how to put all the pieces together.\n## [\u00a7](https://docs.rs/axum/latest/axum/#feature-flags)Feature flags\naxum uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/features.html#the-features-section) to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the [`Json`](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\") type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the [`MatchedPath`](https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html \"struct axum::extract::MatchedPath\") extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with [`Multipart`](https://docs.rs/axum/latest/axum/extract/struct.Multipart.html \"struct axum::extract::Multipart\")| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the [`OriginalUri`](https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html \"struct axum::extract::OriginalUri\") extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via [`extract::ws`](https://docs.rs/axum/latest/axum/extract/ws/index.html \"mod axum::extract::ws\")| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports[\u00a7](https://docs.rs/axum/latest/axum/#reexports)\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/axum/latest/axum/#modules)\n\n[body](https://docs.rs/axum/latest/axum/body/index.html \"mod axum::body\")\n    HTTP body utilities.\n\n[error_handling](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\")\n    Error handling model and utilities\n\n[extract](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\")\n    Types and traits for extracting data from requests.\n\n[handler](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\")\n    Async functions that can be used to handle requests.\n\n[middleware](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\")\n    Utilities for writing middleware\n\n[response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\")\n    Types and traits for generating responses.\n\n[routing](https://docs.rs/axum/latest/axum/routing/index.html \"mod axum::routing\")\n    Routing between [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\")s and handlers.\n\n[serve](https://docs.rs/axum/latest/axum/serve/index.html \"mod axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve services.\n\n[test_helpers](https://docs.rs/axum/latest/axum/test_helpers/index.html \"mod axum::test_helpers\")`__private`\n\n## Structs[\u00a7](https://docs.rs/axum/latest/axum/#structs)\n\n[Error](https://docs.rs/axum/latest/axum/struct.Error.html \"struct axum::Error\")\n    Errors that can happen when using axum.\n\n[Extension](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\")\n    Extractor and response for extensions.\n\n[Form](https://docs.rs/axum/latest/axum/struct.Form.html \"struct axum::Form\")`form`\n    URL encoded extractor and response.\n\n[Json](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\")`json`\n    JSON Extractor / Response.\n\n[Router](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\")\n    The router type for composing handlers and services.\n## Traits[\u00a7](https://docs.rs/axum/latest/axum/#traits)\n\n[RequestExt](https://docs.rs/axum/latest/axum/trait.RequestExt.html \"trait axum::RequestExt\")\n    Extension trait that adds additional methods to [`Request`](https://docs.rs/axum/latest/axum/extract/type.Request.html \"type axum::extract::Request\").\n\n[RequestPartsExt](https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html \"trait axum::RequestPartsExt\")\n    Extension trait that adds additional methods to [`Parts`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html \"struct http::request::Parts\").\n\n[ServiceExt](https://docs.rs/axum/latest/axum/trait.ServiceExt.html \"trait axum::ServiceExt\")\n    Extension trait that adds additional methods to any [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\").\n## Functions[\u00a7](https://docs.rs/axum/latest/axum/#functions)\n\n[serve](https://docs.rs/axum/latest/axum/fn.serve.html \"fn axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases[\u00a7](https://docs.rs/axum/latest/axum/#types)\n\n[BoxError](https://docs.rs/axum/latest/axum/type.BoxError.html \"type axum::BoxError\")\n    Alias for a type-erased error type.\n## Attribute Macros[\u00a7](https://docs.rs/axum/latest/axum/#attributes)\n\n[debug_handler](https://docs.rs/axum/latest/axum/attr.debug_handler.html \"attr axum::debug_handler\")`macros`\n    Generates better error messages when applied to handler functions.\n\n[debug_middleware](https://docs.rs/axum/latest/axum/attr.debug_middleware.html \"attr axum::debug_middleware\")`macros`\n    Generates better error messages when applied to middleware functions.\n",
            "markdown_with_citations": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## \u00a7\u27e84\u27e9High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the `tower`\u27e85\u27e9 and `tower-http`\u27e86\u27e9 ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses `tower::Service`\u27e87\u27e9. This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using `hyper`\u27e88\u27e9 or `tonic`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Compatibility\naxum is designed to work with tokio\u27e811\u27e9 and hyper\u27e812\u27e9. Runtime and transport layer independence is not a goal, at least for the time being.\n## \u00a7\u27e813\u27e9Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## \u00a7\u27e814\u27e9Routing\n`Router`\u27e815\u27e9 is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee `Router`\u27e815\u27e9 for more details on routing.\n## \u00a7\u27e816\u27e9Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more \u201cextractors\u201d\u27e817\u27e9 as arguments and returns something that can be converted into a response\u27e818\u27e9.\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee `handler`\u27e819\u27e9 for more details on handlers.\n## \u00a7\u27e820\u27e9Extractors\nAn extractor is a type that implements `FromRequest`\u27e821\u27e9 or `FromRequestParts`\u27e822\u27e9. Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee `extract`\u27e817\u27e9 for more details on extractors.\n## \u00a7\u27e823\u27e9Responses\nAnything that implements `IntoResponse`\u27e824\u27e9 can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee `response`\u27e818\u27e9 for more details on building responses.\n## \u00a7\u27e825\u27e9Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee `error_handling`\u27e826\u27e9 for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## \u00a7\u27e827\u27e9Middleware\nThere are several different ways to write middleware for axum. See `middleware`\u27e828\u27e9 for more details.\n## \u00a7\u27e829\u27e9Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the `State`\u27e830\u27e9 extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### \u00a7\u27e831\u27e9Using the `State`\u27e830\u27e9 extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using `State`\u27e830\u27e9 if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee `State`\u27e830\u27e9 for more details about accessing state.\n### \u00a7\u27e832\u27e9Using request extensions\nAnother way to share state with handlers is using `Extension`\u27e833\u27e9 as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### \u00a7\u27e834\u27e9Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### \u00a7\u27e835\u27e9Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses tokio\u2019s `task_local` macro\u27e836\u27e9. smol does not yet offer equivalent functionality at the time of writing (see this GitHub issue\u27e837\u27e9).\n## \u00a7\u27e838\u27e9Building integrations for axum\nLibraries authors that want to provide `FromRequest`\u27e821\u27e9, `FromRequestParts`\u27e822\u27e9, or `IntoResponse`\u27e824\u27e9 implementations should depend on the `axum-core`\u27e839\u27e9 crate, instead of `axum` if possible. `axum-core`\u27e839\u27e9 contains core types and traits and is less likely to receive breaking changes.\n## \u00a7\u27e840\u27e9Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## \u00a7\u27e841\u27e9Examples\nThe axum repo contains a number of examples\u27e842\u27e9 that show how to put all the pieces together.\n## \u00a7\u27e843\u27e9Feature flags\naxum uses a set of feature flags\u27e844\u27e9 to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the `Json`\u27e845\u27e9 type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the `MatchedPath`\u27e846\u27e9 extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with `Multipart`\u27e847\u27e9| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the `OriginalUri`\u27e848\u27e9 extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via `extract::ws`\u27e849\u27e9| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports\u00a7\u27e850\u27e9\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e851\u27e9\n\nbody\u27e852\u27e9\n    HTTP body utilities.\n\nerror_handling\u27e826\u27e9\n    Error handling model and utilities\n\nextract\u27e817\u27e9\n    Types and traits for extracting data from requests.\n\nhandler\u27e819\u27e9\n    Async functions that can be used to handle requests.\n\nmiddleware\u27e828\u27e9\n    Utilities for writing middleware\n\nresponse\u27e818\u27e9\n    Types and traits for generating responses.\n\nrouting\u27e853\u27e9\n    Routing between `Service`\u27e87\u27e9s and handlers.\n\nserve\u27e854\u27e9`tokio` and (`http1` or `http2`)\n    Serve services.\n\ntest_helpers\u27e855\u27e9`__private`\n\n## Structs\u00a7\u27e856\u27e9\n\nError\u27e857\u27e9\n    Errors that can happen when using axum.\n\nExtension\u27e833\u27e9\n    Extractor and response for extensions.\n\nForm\u27e858\u27e9`form`\n    URL encoded extractor and response.\n\nJson\u27e845\u27e9`json`\n    JSON Extractor / Response.\n\nRouter\u27e815\u27e9\n    The router type for composing handlers and services.\n## Traits\u00a7\u27e859\u27e9\n\nRequestExt\u27e860\u27e9\n    Extension trait that adds additional methods to `Request`\u27e861\u27e9.\n\nRequestPartsExt\u27e862\u27e9\n    Extension trait that adds additional methods to `Parts`\u27e863\u27e9.\n\nServiceExt\u27e864\u27e9\n    Extension trait that adds additional methods to any `Service`\u27e87\u27e9.\n## Functions\u00a7\u27e865\u27e9\n\nserve\u27e866\u27e9`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases\u00a7\u27e867\u27e9\n\nBoxError\u27e868\u27e9\n    Alias for a type-erased error type.\n## Attribute Macros\u00a7\u27e869\u27e9\n\ndebug_handler\u27e870\u27e9`macros`\n    Generates better error messages when applied to handler functions.\n\ndebug_middleware\u27e871\u27e9`macros`\n    Generates better error messages when applied to middleware functions.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/axum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/axum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488: Source\n\u27e84\u27e9 https://docs.rs/axum/latest/axum/#high-level-features: \u00a7\n\u27e85\u27e9 https://crates.io/crates/tower: `tower`\n\u27e86\u27e9 https://crates.io/crates/tower-http: `tower-http`\n\u27e87\u27e9 https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html: trait tower_service::Service - `tower::Service`\n\u27e88\u27e9 http://crates.io/crates/hyper: `hyper`\n\u27e89\u27e9 http://crates.io/crates/tonic: `tonic`\n\u27e810\u27e9 https://docs.rs/axum/latest/axum/#compatibility: \u00a7\n\u27e811\u27e9 https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html: mod tokio - tokio\n\u27e812\u27e9 https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html: mod hyper - hyper\n\u27e813\u27e9 https://docs.rs/axum/latest/axum/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/axum/latest/axum/#routing: \u00a7\n\u27e815\u27e9 https://docs.rs/axum/latest/axum/struct.Router.html: struct axum::Router - `Router`\n\u27e816\u27e9 https://docs.rs/axum/latest/axum/#handlers: \u00a7\n\u27e817\u27e9 https://docs.rs/axum/latest/axum/extract/index.html: mod axum::extract - \u201cextractors\u201d\n\u27e818\u27e9 https://docs.rs/axum/latest/axum/response/index.html: mod axum::response - into a response\n\u27e819\u27e9 https://docs.rs/axum/latest/axum/handler/index.html: mod axum::handler - `handler`\n\u27e820\u27e9 https://docs.rs/axum/latest/axum/#extractors: \u00a7\n\u27e821\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html: trait axum::extract::FromRequest - `FromRequest`\n\u27e822\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html: trait axum::extract::FromRequestParts - `FromRequestParts`\n\u27e823\u27e9 https://docs.rs/axum/latest/axum/#responses: \u00a7\n\u27e824\u27e9 https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html: trait axum::response::IntoResponse - `IntoResponse`\n\u27e825\u27e9 https://docs.rs/axum/latest/axum/#error-handling: \u00a7\n\u27e826\u27e9 https://docs.rs/axum/latest/axum/error_handling/index.html: mod axum::error_handling - `error_handling`\n\u27e827\u27e9 https://docs.rs/axum/latest/axum/#middleware: \u00a7\n\u27e828\u27e9 https://docs.rs/axum/latest/axum/middleware/index.html: mod axum::middleware - `middleware`\n\u27e829\u27e9 https://docs.rs/axum/latest/axum/#sharing-state-with-handlers: \u00a7\n\u27e830\u27e9 https://docs.rs/axum/latest/axum/extract/struct.State.html: struct axum::extract::State - `State`\n\u27e831\u27e9 https://docs.rs/axum/latest/axum/#using-the-state-extractor: \u00a7\n\u27e832\u27e9 https://docs.rs/axum/latest/axum/#using-request-extensions: \u00a7\n\u27e833\u27e9 https://docs.rs/axum/latest/axum/struct.Extension.html: struct axum::Extension - `Extension`\n\u27e834\u27e9 https://docs.rs/axum/latest/axum/#using-closure-captures: \u00a7\n\u27e835\u27e9 https://docs.rs/axum/latest/axum/#using-task-local-variables: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/1/tokio/macro.task_local.html: tokio\u2019s `task_local` macro\n\u27e837\u27e9 https://github.com/smol-rs/async-executor/issues/139: this GitHub issue\n\u27e838\u27e9 https://docs.rs/axum/latest/axum/#building-integrations-for-axum: \u00a7\n\u27e839\u27e9 http://crates.io/crates/axum-core: `axum-core`\n\u27e840\u27e9 https://docs.rs/axum/latest/axum/#required-dependencies: \u00a7\n\u27e841\u27e9 https://docs.rs/axum/latest/axum/#examples: \u00a7\n\u27e842\u27e9 https://github.com/tokio-rs/axum/tree/main/examples: a number of examples\n\u27e843\u27e9 https://docs.rs/axum/latest/axum/#feature-flags: \u00a7\n\u27e844\u27e9 https://doc.rust-lang.org/cargo/reference/features.html#the-features-section: feature flags\n\u27e845\u27e9 https://docs.rs/axum/latest/axum/struct.Json.html: struct axum::Json - `Json`\n\u27e846\u27e9 https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html: struct axum::extract::MatchedPath - `MatchedPath`\n\u27e847\u27e9 https://docs.rs/axum/latest/axum/extract/struct.Multipart.html: struct axum::extract::Multipart - `Multipart`\n\u27e848\u27e9 https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html: struct axum::extract::OriginalUri - `OriginalUri`\n\u27e849\u27e9 https://docs.rs/axum/latest/axum/extract/ws/index.html: mod axum::extract::ws - `extract::ws`\n\u27e850\u27e9 https://docs.rs/axum/latest/axum/#reexports: \u00a7\n\u27e851\u27e9 https://docs.rs/axum/latest/axum/#modules: \u00a7\n\u27e852\u27e9 https://docs.rs/axum/latest/axum/body/index.html: mod axum::body - body\n\u27e853\u27e9 https://docs.rs/axum/latest/axum/routing/index.html: mod axum::routing - routing\n\u27e854\u27e9 https://docs.rs/axum/latest/axum/serve/index.html: mod axum::serve - serve\n\u27e855\u27e9 https://docs.rs/axum/latest/axum/test_helpers/index.html: mod axum::test_helpers - test_helpers\n\u27e856\u27e9 https://docs.rs/axum/latest/axum/#structs: \u00a7\n\u27e857\u27e9 https://docs.rs/axum/latest/axum/struct.Error.html: struct axum::Error - Error\n\u27e858\u27e9 https://docs.rs/axum/latest/axum/struct.Form.html: struct axum::Form - Form\n\u27e859\u27e9 https://docs.rs/axum/latest/axum/#traits: \u00a7\n\u27e860\u27e9 https://docs.rs/axum/latest/axum/trait.RequestExt.html: trait axum::RequestExt - RequestExt\n\u27e861\u27e9 https://docs.rs/axum/latest/axum/extract/type.Request.html: type axum::extract::Request - `Request`\n\u27e862\u27e9 https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html: trait axum::RequestPartsExt - RequestPartsExt\n\u27e863\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html: struct http::request::Parts - `Parts`\n\u27e864\u27e9 https://docs.rs/axum/latest/axum/trait.ServiceExt.html: trait axum::ServiceExt - ServiceExt\n\u27e865\u27e9 https://docs.rs/axum/latest/axum/#functions: \u00a7\n\u27e866\u27e9 https://docs.rs/axum/latest/axum/fn.serve.html: fn axum::serve - serve\n\u27e867\u27e9 https://docs.rs/axum/latest/axum/#types: \u00a7\n\u27e868\u27e9 https://docs.rs/axum/latest/axum/type.BoxError.html: type axum::BoxError - BoxError\n\u27e869\u27e9 https://docs.rs/axum/latest/axum/#attributes: \u00a7\n\u27e870\u27e9 https://docs.rs/axum/latest/axum/attr.debug_handler.html: attr axum::debug_handler - debug_handler\n\u27e871\u27e9 https://docs.rs/axum/latest/axum/attr.debug_middleware.html: attr axum::debug_middleware - debug_middleware\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "axum",
          "version": "0.8.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\n[Settings](https://docs.rs/axum/latest/settings.html)\n[Help](https://docs.rs/axum/latest/help.html)\nSummary[Source](https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488)\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## [\u00a7](https://docs.rs/axum/latest/axum/#high-level-features)High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the [`tower`](https://crates.io/crates/tower) and [`tower-http`](https://crates.io/crates/tower-http) ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses [`tower::Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\"). This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using [`hyper`](http://crates.io/crates/hyper) or [`tonic`](http://crates.io/crates/tonic).\n## [\u00a7](https://docs.rs/axum/latest/axum/#compatibility)Compatibility\naxum is designed to work with [tokio](https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html \"mod tokio\") and [hyper](https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html \"mod hyper\"). Runtime and transport layer independence is not a goal, at least for the time being.\n## [\u00a7](https://docs.rs/axum/latest/axum/#example)Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## [\u00a7](https://docs.rs/axum/latest/axum/#routing)Routing\n[`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee [`Router`](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\") for more details on routing.\n## [\u00a7](https://docs.rs/axum/latest/axum/#handlers)Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more [\u201cextractors\u201d](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") as arguments and returns something that can be converted [into a response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\").\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee [`handler`](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\") for more details on handlers.\n## [\u00a7](https://docs.rs/axum/latest/axum/#extractors)Extractors\nAn extractor is a type that implements [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\") or [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"). Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee [`extract`](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\") for more details on extractors.\n## [\u00a7](https://docs.rs/axum/latest/axum/#responses)Responses\nAnything that implements [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee [`response`](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\") for more details on building responses.\n## [\u00a7](https://docs.rs/axum/latest/axum/#error-handling)Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee [`error_handling`](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\") for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## [\u00a7](https://docs.rs/axum/latest/axum/#middleware)Middleware\nThere are several different ways to write middleware for axum. See [`middleware`](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\") for more details.\n## [\u00a7](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers)Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-the-state-extractor)Using the [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee [`State`](https://docs.rs/axum/latest/axum/extract/struct.State.html \"struct axum::extract::State\") for more details about accessing state.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-request-extensions)Using request extensions\nAnother way to share state with handlers is using [`Extension`](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\") as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-closure-captures)Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### [\u00a7](https://docs.rs/axum/latest/axum/#using-task-local-variables)Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses [tokio\u2019s `task_local` macro](https://docs.rs/tokio/1/tokio/macro.task_local.html). smol does not yet offer equivalent functionality at the time of writing (see [this GitHub issue](https://github.com/smol-rs/async-executor/issues/139)).\n## [\u00a7](https://docs.rs/axum/latest/axum/#building-integrations-for-axum)Building integrations for axum\nLibraries authors that want to provide [`FromRequest`](https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html \"trait axum::extract::FromRequest\"), [`FromRequestParts`](https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html \"trait axum::extract::FromRequestParts\"), or [`IntoResponse`](https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html \"trait axum::response::IntoResponse\") implementations should depend on the [`axum-core`](http://crates.io/crates/axum-core) crate, instead of `axum` if possible. [`axum-core`](http://crates.io/crates/axum-core) contains core types and traits and is less likely to receive breaking changes.\n## [\u00a7](https://docs.rs/axum/latest/axum/#required-dependencies)Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## [\u00a7](https://docs.rs/axum/latest/axum/#examples)Examples\nThe axum repo contains [a number of examples](https://github.com/tokio-rs/axum/tree/main/examples) that show how to put all the pieces together.\n## [\u00a7](https://docs.rs/axum/latest/axum/#feature-flags)Feature flags\naxum uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/features.html#the-features-section) to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the [`Json`](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\") type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the [`MatchedPath`](https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html \"struct axum::extract::MatchedPath\") extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with [`Multipart`](https://docs.rs/axum/latest/axum/extract/struct.Multipart.html \"struct axum::extract::Multipart\")| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the [`OriginalUri`](https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html \"struct axum::extract::OriginalUri\") extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via [`extract::ws`](https://docs.rs/axum/latest/axum/extract/ws/index.html \"mod axum::extract::ws\")| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports[\u00a7](https://docs.rs/axum/latest/axum/#reexports)\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules[\u00a7](https://docs.rs/axum/latest/axum/#modules)\n\n[body](https://docs.rs/axum/latest/axum/body/index.html \"mod axum::body\")\n    HTTP body utilities.\n\n[error_handling](https://docs.rs/axum/latest/axum/error_handling/index.html \"mod axum::error_handling\")\n    Error handling model and utilities\n\n[extract](https://docs.rs/axum/latest/axum/extract/index.html \"mod axum::extract\")\n    Types and traits for extracting data from requests.\n\n[handler](https://docs.rs/axum/latest/axum/handler/index.html \"mod axum::handler\")\n    Async functions that can be used to handle requests.\n\n[middleware](https://docs.rs/axum/latest/axum/middleware/index.html \"mod axum::middleware\")\n    Utilities for writing middleware\n\n[response](https://docs.rs/axum/latest/axum/response/index.html \"mod axum::response\")\n    Types and traits for generating responses.\n\n[routing](https://docs.rs/axum/latest/axum/routing/index.html \"mod axum::routing\")\n    Routing between [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\")s and handlers.\n\n[serve](https://docs.rs/axum/latest/axum/serve/index.html \"mod axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve services.\n\n[test_helpers](https://docs.rs/axum/latest/axum/test_helpers/index.html \"mod axum::test_helpers\")`__private`\n\n## Structs[\u00a7](https://docs.rs/axum/latest/axum/#structs)\n\n[Error](https://docs.rs/axum/latest/axum/struct.Error.html \"struct axum::Error\")\n    Errors that can happen when using axum.\n\n[Extension](https://docs.rs/axum/latest/axum/struct.Extension.html \"struct axum::Extension\")\n    Extractor and response for extensions.\n\n[Form](https://docs.rs/axum/latest/axum/struct.Form.html \"struct axum::Form\")`form`\n    URL encoded extractor and response.\n\n[Json](https://docs.rs/axum/latest/axum/struct.Json.html \"struct axum::Json\")`json`\n    JSON Extractor / Response.\n\n[Router](https://docs.rs/axum/latest/axum/struct.Router.html \"struct axum::Router\")\n    The router type for composing handlers and services.\n## Traits[\u00a7](https://docs.rs/axum/latest/axum/#traits)\n\n[RequestExt](https://docs.rs/axum/latest/axum/trait.RequestExt.html \"trait axum::RequestExt\")\n    Extension trait that adds additional methods to [`Request`](https://docs.rs/axum/latest/axum/extract/type.Request.html \"type axum::extract::Request\").\n\n[RequestPartsExt](https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html \"trait axum::RequestPartsExt\")\n    Extension trait that adds additional methods to [`Parts`](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html \"struct http::request::Parts\").\n\n[ServiceExt](https://docs.rs/axum/latest/axum/trait.ServiceExt.html \"trait axum::ServiceExt\")\n    Extension trait that adds additional methods to any [`Service`](https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html \"trait tower_service::Service\").\n## Functions[\u00a7](https://docs.rs/axum/latest/axum/#functions)\n\n[serve](https://docs.rs/axum/latest/axum/fn.serve.html \"fn axum::serve\")`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases[\u00a7](https://docs.rs/axum/latest/axum/#types)\n\n[BoxError](https://docs.rs/axum/latest/axum/type.BoxError.html \"type axum::BoxError\")\n    Alias for a type-erased error type.\n## Attribute Macros[\u00a7](https://docs.rs/axum/latest/axum/#attributes)\n\n[debug_handler](https://docs.rs/axum/latest/axum/attr.debug_handler.html \"attr axum::debug_handler\")`macros`\n    Generates better error messages when applied to handler functions.\n\n[debug_middleware](https://docs.rs/axum/latest/axum/attr.debug_middleware.html \"attr axum::debug_middleware\")`macros`\n    Generates better error messages when applied to middleware functions.\n",
            "markdown_with_citations": "[](https://docs.rs/axum/latest/axum/all.html \"show sidebar\")\n# Crate axumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\naxum is a web application framework that focuses on ergonomics and modularity.\n## \u00a7\u27e84\u27e9High-level features\n  * Route requests to handlers with a macro-free API.\n  * Declaratively parse requests using extractors.\n  * Simple and predictable error handling model.\n  * Generate responses with minimal boilerplate.\n  * Take full advantage of the `tower`\u27e85\u27e9 and `tower-http`\u27e86\u27e9 ecosystem of middleware, services, and utilities.\n\n\nIn particular, the last point is what sets `axum` apart from other frameworks. `axum` doesn\u2019t have its own middleware system but instead uses `tower::Service`\u27e87\u27e9. This means `axum` gets timeouts, tracing, compression, authorization, and more, for free. It also enables you to share middleware with applications written using `hyper`\u27e88\u27e9 or `tonic`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Compatibility\naxum is designed to work with tokio\u27e811\u27e9 and hyper\u27e812\u27e9. Runtime and transport layer independence is not a goal, at least for the time being.\n## \u00a7\u27e813\u27e9Example\nThe \u201cHello, World!\u201d of axum is:\n```\nuse axum::{\n  routing::get,\n  Router,\n};\n#[tokio::main]\nasync fn main() {\n  // build our application with a single route\n  let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n  // run our app with hyper, listening globally on port 3000\n  let listener = tokio::net::TcpListener::bind(\"0.0.0.0:3000\").await.unwrap();\n  axum::serve(listener, app).await.unwrap();\n}\n```\n\nNote using `#[tokio::main]` requires you enable tokio\u2019s `macros` and `rt-multi-thread` features or just `full` to enable all features (`cargo add tokio --features macros,rt-multi-thread`).\n## \u00a7\u27e814\u27e9Routing\n`Router`\u27e815\u27e9 is used to set up which paths go to which services:\n```\nuse axum::{Router, routing::get};\n// our router\nlet app = Router::new()\n  .route(\"/\", get(root))\n  .route(\"/foo\", get(get_foo).post(post_foo))\n  .route(\"/foo/bar\", get(foo_bar));\n// which calls one of these handlers\nasync fn root() {}\nasync fn get_foo() {}\nasync fn post_foo() {}\nasync fn foo_bar() {}\n```\n\nSee `Router`\u27e815\u27e9 for more details on routing.\n## \u00a7\u27e816\u27e9Handlers\nIn axum a \u201chandler\u201d is an async function that accepts zero or more \u201cextractors\u201d\u27e817\u27e9 as arguments and returns something that can be converted into a response\u27e818\u27e9.\nHandlers are where your application logic lives and axum applications are built by routing between handlers.\nSee `handler`\u27e819\u27e9 for more details on handlers.\n## \u00a7\u27e820\u27e9Extractors\nAn extractor is a type that implements `FromRequest`\u27e821\u27e9 or `FromRequestParts`\u27e822\u27e9. Extractors are how you pick apart the incoming request to get the parts your handler needs.\n```\nuse axum::extract::{Path, Query, Json};\nuse std::collections::HashMap;\n// `Path` gives you the path parameters and deserializes them.\nasync fn path(Path(user_id): Path<u32>) {}\n// `Query` gives you the query parameters and deserializes them.\nasync fn query(Query(params): Query<HashMap<String, String>>) {}\n// Buffer the request body and deserialize it as JSON into a\n// `serde_json::Value`. `Json` supports any type that implements\n// `serde::Deserialize`.\nasync fn json(Json(payload): Json<serde_json::Value>) {}\n```\n\nSee `extract`\u27e817\u27e9 for more details on extractors.\n## \u00a7\u27e823\u27e9Responses\nAnything that implements `IntoResponse`\u27e824\u27e9 can be returned from handlers.\n```\nuse axum::{\n  body::Body,\n  routing::get,\n  response::Json,\n  Router,\n};\nuse serde_json::{Value, json};\n// `&'static str` becomes a `200 OK` with `content-type: text/plain; charset=utf-8`\nasync fn plain_text() -> &'static str {\n  \"foo\"\n}\n// `Json` gives a content-type of `application/json` and works with any type\n// that implements `serde::Serialize`\nasync fn json() -> Json<Value> {\n  Json(json!({ \"data\": 42 }))\n}\nlet app = Router::new()\n  .route(\"/plain_text\", get(plain_text))\n  .route(\"/json\", get(json));\n```\n\nSee `response`\u27e818\u27e9 for more details on building responses.\n## \u00a7\u27e825\u27e9Error handling\naxum aims to have a simple and predictable error handling model. That means it is simple to convert errors into responses and you are guaranteed that all errors are handled.\nSee `error_handling`\u27e826\u27e9 for more details on axum\u2019s error handling model and how to handle errors gracefully.\n## \u00a7\u27e827\u27e9Middleware\nThere are several different ways to write middleware for axum. See `middleware`\u27e828\u27e9 for more details.\n## \u00a7\u27e829\u27e9Sharing state with handlers\nIt is common to share some state between handlers. For example, a pool of database connections or clients to other services may need to be shared.\nThe four most common ways of doing that are:\n  * Using the `State`\u27e830\u27e9 extractor\n  * Using request extensions\n  * Using closure captures\n  * Using task-local variables\n\n\n### \u00a7\u27e831\u27e9Using the `State`\u27e830\u27e9 extractor\n```\nuse axum::{\n  extract::State,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .with_state(shared_state);\nasync fn handler(\n  State(state): State<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nYou should prefer using `State`\u27e830\u27e9 if possible since it\u2019s more type safe. The downside is that it\u2019s less dynamic than task-local variables and request extensions.\nSee `State`\u27e830\u27e9 for more details about accessing state.\n### \u00a7\u27e832\u27e9Using request extensions\nAnother way to share state with handlers is using `Extension`\u27e833\u27e9 as layer and extractor:\n```\nuse axum::{\n  extract::Extension,\n  routing::get,\n  Router,\n};\nuse std::sync::Arc;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\"/\", get(handler))\n  .layer(Extension(shared_state));\nasync fn handler(\n  Extension(state): Extension<Arc<AppState>>,\n) {\n  // ...\n}\n```\n\nThe downside to this approach is that you\u2019ll get runtime errors (specifically a `500 Internal Server Error` response) if you try and extract an extension that doesn\u2019t exist, perhaps because you forgot to add the middleware or because you\u2019re extracting the wrong type.\n### \u00a7\u27e834\u27e9Using closure captures\nState can also be passed directly to handlers using closure captures:\n```\nuse axum::{\n  Json,\n  extract::{Extension, Path},\n  routing::{get, post},\n  Router,\n};\nuse std::sync::Arc;\nuse serde::Deserialize;\nstruct AppState {\n  // ...\n}\nlet shared_state = Arc::new(AppState { /* ... */ });\nlet app = Router::new()\n  .route(\n    \"/users\",\n    post({\n      let shared_state = Arc::clone(&shared_state);\n      move |body| create_user(body, shared_state)\n    }),\n  )\n  .route(\n    \"/users/{id}\",\n    get({\n      let shared_state = Arc::clone(&shared_state);\n      move |path| get_user(path, shared_state)\n    }),\n  );\nasync fn get_user(Path(user_id): Path<String>, state: Arc<AppState>) {\n  // ...\n}\nasync fn create_user(Json(payload): Json<CreateUserPayload>, state: Arc<AppState>) {\n  // ...\n}\n#[derive(Deserialize)]\nstruct CreateUserPayload {\n  // ...\n}\n```\n\nThe downside to this approach is that it\u2019s a the most verbose approach.\n### \u00a7\u27e835\u27e9Using task-local variables\nThis also allows to share state with `IntoResponse` implementations:\n```\nuse axum::{\n  extract::Request,\n  http::{header, StatusCode},\n  middleware::{self, Next},\n  response::{IntoResponse, Response},\n  routing::get,\n  Router,\n};\nuse tokio::task_local;\n#[derive(Clone)]\nstruct CurrentUser {\n  name: String,\n}\ntask_local! {\n  pub static USER: CurrentUser;\n}\nasync fn auth(req: Request, next: Next) -> Result<Response, StatusCode> {\n  let auth_header = req\n    .headers()\n    .get(header::AUTHORIZATION)\n    .and_then(|header| header.to_str().ok())\n    .ok_or(StatusCode::UNAUTHORIZED)?;\n  if let Some(current_user) = authorize_current_user(auth_header).await {\n    // State is setup here in the middleware\n    Ok(USER.scope(current_user, next.run(req)).await)\n  } else {\n    Err(StatusCode::UNAUTHORIZED)\n  }\n}\nasync fn authorize_current_user(auth_token: &str) -> Option<CurrentUser> {\n  Some(CurrentUser {\n    name: auth_token.to_string(),\n  })\n}\nstruct UserResponse;\nimpl IntoResponse for UserResponse {\n  fn into_response(self) -> Response {\n    // State is accessed here in the IntoResponse implementation\n    let current_user = USER.with(|u| u.clone());\n    (StatusCode::OK, current_user.name).into_response()\n  }\n}\nasync fn handler() -> UserResponse {\n  UserResponse\n}\nlet app: Router = Router::new()\n  .route(\"/\", get(handler))\n  .route_layer(middleware::from_fn(auth));\n```\n\nThe main downside to this approach is that it only works when the async executor being used has the concept of task-local variables. The example above uses tokio\u2019s `task_local` macro\u27e836\u27e9. smol does not yet offer equivalent functionality at the time of writing (see this GitHub issue\u27e837\u27e9).\n## \u00a7\u27e838\u27e9Building integrations for axum\nLibraries authors that want to provide `FromRequest`\u27e821\u27e9, `FromRequestParts`\u27e822\u27e9, or `IntoResponse`\u27e824\u27e9 implementations should depend on the `axum-core`\u27e839\u27e9 crate, instead of `axum` if possible. `axum-core`\u27e839\u27e9 contains core types and traits and is less likely to receive breaking changes.\n## \u00a7\u27e840\u27e9Required dependencies\nTo use axum there are a few dependencies you have to pull in as well:\n```\n[dependencies]\naxum = \"<latest-version>\"\ntokio = { version = \"<latest-version>\", features = [\"full\"] }\ntower = \"<latest-version>\"\n```\n\nThe `\"full\"` feature for tokio isn\u2019t necessary but it\u2019s the easiest way to get started.\nTower isn\u2019t strictly necessary either but helpful for testing. See the testing example in the repo to learn more about testing axum apps.\n## \u00a7\u27e841\u27e9Examples\nThe axum repo contains a number of examples\u27e842\u27e9 that show how to put all the pieces together.\n## \u00a7\u27e843\u27e9Feature flags\naxum uses a set of feature flags\u27e844\u27e9 to reduce the amount of compiled and optional dependencies.\nThe following optional features are available:\nName| Description| Default?  \n---|---|---  \n`http1`| Enables hyper\u2019s `http1` feature| Yes  \n`http2`| Enables hyper\u2019s `http2` feature| No  \n`json`| Enables the `Json`\u27e845\u27e9 type and some similar convenience functionality| Yes  \n`macros`| Enables optional utility macros| No  \n`matched-path`| Enables capturing of every request\u2019s router path and the `MatchedPath`\u27e846\u27e9 extractor| Yes  \n`multipart`| Enables parsing `multipart/form-data` requests with `Multipart`\u27e847\u27e9| No  \n`original-uri`| Enables capturing of every request\u2019s original URI and the `OriginalUri`\u27e848\u27e9 extractor| Yes  \n`tokio`| Enables `tokio` as a dependency and `axum::serve`, `SSE` and `extract::connect_info` types.| Yes  \n`tower-log`| Enables `tower`\u2019s `log` feature| Yes  \n`tracing`| Log rejections from built-in extractors| Yes  \n`ws`| Enables WebSockets support via `extract::ws`\u27e849\u27e9| No  \n`form`| Enables the `Form` extractor| Yes  \n`query`| Enables the `Query` extractor| Yes  \n## Re-exports\u00a7\u27e850\u27e9\n\n`pub use http[](https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/index.html \"mod http\");`\n\n## Modules\u00a7\u27e851\u27e9\n\nbody\u27e852\u27e9\n    HTTP body utilities.\n\nerror_handling\u27e826\u27e9\n    Error handling model and utilities\n\nextract\u27e817\u27e9\n    Types and traits for extracting data from requests.\n\nhandler\u27e819\u27e9\n    Async functions that can be used to handle requests.\n\nmiddleware\u27e828\u27e9\n    Utilities for writing middleware\n\nresponse\u27e818\u27e9\n    Types and traits for generating responses.\n\nrouting\u27e853\u27e9\n    Routing between `Service`\u27e87\u27e9s and handlers.\n\nserve\u27e854\u27e9`tokio` and (`http1` or `http2`)\n    Serve services.\n\ntest_helpers\u27e855\u27e9`__private`\n\n## Structs\u00a7\u27e856\u27e9\n\nError\u27e857\u27e9\n    Errors that can happen when using axum.\n\nExtension\u27e833\u27e9\n    Extractor and response for extensions.\n\nForm\u27e858\u27e9`form`\n    URL encoded extractor and response.\n\nJson\u27e845\u27e9`json`\n    JSON Extractor / Response.\n\nRouter\u27e815\u27e9\n    The router type for composing handlers and services.\n## Traits\u00a7\u27e859\u27e9\n\nRequestExt\u27e860\u27e9\n    Extension trait that adds additional methods to `Request`\u27e861\u27e9.\n\nRequestPartsExt\u27e862\u27e9\n    Extension trait that adds additional methods to `Parts`\u27e863\u27e9.\n\nServiceExt\u27e864\u27e9\n    Extension trait that adds additional methods to any `Service`\u27e87\u27e9.\n## Functions\u00a7\u27e865\u27e9\n\nserve\u27e866\u27e9`tokio` and (`http1` or `http2`)\n    Serve the service with the supplied listener.\n## Type Aliases\u00a7\u27e867\u27e9\n\nBoxError\u27e868\u27e9\n    Alias for a type-erased error type.\n## Attribute Macros\u00a7\u27e869\u27e9\n\ndebug_handler\u27e870\u27e9`macros`\n    Generates better error messages when applied to handler functions.\n\ndebug_middleware\u27e871\u27e9`macros`\n    Generates better error messages when applied to middleware functions.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/axum/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/axum/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/axum/latest/src/axum/lib.rs.html#1-488: Source\n\u27e84\u27e9 https://docs.rs/axum/latest/axum/#high-level-features: \u00a7\n\u27e85\u27e9 https://crates.io/crates/tower: `tower`\n\u27e86\u27e9 https://crates.io/crates/tower-http: `tower-http`\n\u27e87\u27e9 https://docs.rs/tower-service/0.3.3/x86_64-unknown-linux-gnu/tower_service/trait.Service.html: trait tower_service::Service - `tower::Service`\n\u27e88\u27e9 http://crates.io/crates/hyper: `hyper`\n\u27e89\u27e9 http://crates.io/crates/tonic: `tonic`\n\u27e810\u27e9 https://docs.rs/axum/latest/axum/#compatibility: \u00a7\n\u27e811\u27e9 https://docs.rs/tokio/1.45.1/x86_64-unknown-linux-gnu/tokio/index.html: mod tokio - tokio\n\u27e812\u27e9 https://docs.rs/hyper/1.6.0/x86_64-unknown-linux-gnu/hyper/index.html: mod hyper - hyper\n\u27e813\u27e9 https://docs.rs/axum/latest/axum/#example: \u00a7\n\u27e814\u27e9 https://docs.rs/axum/latest/axum/#routing: \u00a7\n\u27e815\u27e9 https://docs.rs/axum/latest/axum/struct.Router.html: struct axum::Router - `Router`\n\u27e816\u27e9 https://docs.rs/axum/latest/axum/#handlers: \u00a7\n\u27e817\u27e9 https://docs.rs/axum/latest/axum/extract/index.html: mod axum::extract - \u201cextractors\u201d\n\u27e818\u27e9 https://docs.rs/axum/latest/axum/response/index.html: mod axum::response - into a response\n\u27e819\u27e9 https://docs.rs/axum/latest/axum/handler/index.html: mod axum::handler - `handler`\n\u27e820\u27e9 https://docs.rs/axum/latest/axum/#extractors: \u00a7\n\u27e821\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequest.html: trait axum::extract::FromRequest - `FromRequest`\n\u27e822\u27e9 https://docs.rs/axum/latest/axum/extract/trait.FromRequestParts.html: trait axum::extract::FromRequestParts - `FromRequestParts`\n\u27e823\u27e9 https://docs.rs/axum/latest/axum/#responses: \u00a7\n\u27e824\u27e9 https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html: trait axum::response::IntoResponse - `IntoResponse`\n\u27e825\u27e9 https://docs.rs/axum/latest/axum/#error-handling: \u00a7\n\u27e826\u27e9 https://docs.rs/axum/latest/axum/error_handling/index.html: mod axum::error_handling - `error_handling`\n\u27e827\u27e9 https://docs.rs/axum/latest/axum/#middleware: \u00a7\n\u27e828\u27e9 https://docs.rs/axum/latest/axum/middleware/index.html: mod axum::middleware - `middleware`\n\u27e829\u27e9 https://docs.rs/axum/latest/axum/#sharing-state-with-handlers: \u00a7\n\u27e830\u27e9 https://docs.rs/axum/latest/axum/extract/struct.State.html: struct axum::extract::State - `State`\n\u27e831\u27e9 https://docs.rs/axum/latest/axum/#using-the-state-extractor: \u00a7\n\u27e832\u27e9 https://docs.rs/axum/latest/axum/#using-request-extensions: \u00a7\n\u27e833\u27e9 https://docs.rs/axum/latest/axum/struct.Extension.html: struct axum::Extension - `Extension`\n\u27e834\u27e9 https://docs.rs/axum/latest/axum/#using-closure-captures: \u00a7\n\u27e835\u27e9 https://docs.rs/axum/latest/axum/#using-task-local-variables: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/1/tokio/macro.task_local.html: tokio\u2019s `task_local` macro\n\u27e837\u27e9 https://github.com/smol-rs/async-executor/issues/139: this GitHub issue\n\u27e838\u27e9 https://docs.rs/axum/latest/axum/#building-integrations-for-axum: \u00a7\n\u27e839\u27e9 http://crates.io/crates/axum-core: `axum-core`\n\u27e840\u27e9 https://docs.rs/axum/latest/axum/#required-dependencies: \u00a7\n\u27e841\u27e9 https://docs.rs/axum/latest/axum/#examples: \u00a7\n\u27e842\u27e9 https://github.com/tokio-rs/axum/tree/main/examples: a number of examples\n\u27e843\u27e9 https://docs.rs/axum/latest/axum/#feature-flags: \u00a7\n\u27e844\u27e9 https://doc.rust-lang.org/cargo/reference/features.html#the-features-section: feature flags\n\u27e845\u27e9 https://docs.rs/axum/latest/axum/struct.Json.html: struct axum::Json - `Json`\n\u27e846\u27e9 https://docs.rs/axum/latest/axum/extract/struct.MatchedPath.html: struct axum::extract::MatchedPath - `MatchedPath`\n\u27e847\u27e9 https://docs.rs/axum/latest/axum/extract/struct.Multipart.html: struct axum::extract::Multipart - `Multipart`\n\u27e848\u27e9 https://docs.rs/axum/latest/axum/extract/struct.OriginalUri.html: struct axum::extract::OriginalUri - `OriginalUri`\n\u27e849\u27e9 https://docs.rs/axum/latest/axum/extract/ws/index.html: mod axum::extract::ws - `extract::ws`\n\u27e850\u27e9 https://docs.rs/axum/latest/axum/#reexports: \u00a7\n\u27e851\u27e9 https://docs.rs/axum/latest/axum/#modules: \u00a7\n\u27e852\u27e9 https://docs.rs/axum/latest/axum/body/index.html: mod axum::body - body\n\u27e853\u27e9 https://docs.rs/axum/latest/axum/routing/index.html: mod axum::routing - routing\n\u27e854\u27e9 https://docs.rs/axum/latest/axum/serve/index.html: mod axum::serve - serve\n\u27e855\u27e9 https://docs.rs/axum/latest/axum/test_helpers/index.html: mod axum::test_helpers - test_helpers\n\u27e856\u27e9 https://docs.rs/axum/latest/axum/#structs: \u00a7\n\u27e857\u27e9 https://docs.rs/axum/latest/axum/struct.Error.html: struct axum::Error - Error\n\u27e858\u27e9 https://docs.rs/axum/latest/axum/struct.Form.html: struct axum::Form - Form\n\u27e859\u27e9 https://docs.rs/axum/latest/axum/#traits: \u00a7\n\u27e860\u27e9 https://docs.rs/axum/latest/axum/trait.RequestExt.html: trait axum::RequestExt - RequestExt\n\u27e861\u27e9 https://docs.rs/axum/latest/axum/extract/type.Request.html: type axum::extract::Request - `Request`\n\u27e862\u27e9 https://docs.rs/axum/latest/axum/trait.RequestPartsExt.html: trait axum::RequestPartsExt - RequestPartsExt\n\u27e863\u27e9 https://docs.rs/http/1.3.1/x86_64-unknown-linux-gnu/http/request/struct.Parts.html: struct http::request::Parts - `Parts`\n\u27e864\u27e9 https://docs.rs/axum/latest/axum/trait.ServiceExt.html: trait axum::ServiceExt - ServiceExt\n\u27e865\u27e9 https://docs.rs/axum/latest/axum/#functions: \u00a7\n\u27e866\u27e9 https://docs.rs/axum/latest/axum/fn.serve.html: fn axum::serve - serve\n\u27e867\u27e9 https://docs.rs/axum/latest/axum/#types: \u00a7\n\u27e868\u27e9 https://docs.rs/axum/latest/axum/type.BoxError.html: type axum::BoxError - BoxError\n\u27e869\u27e9 https://docs.rs/axum/latest/axum/#attributes: \u00a7\n\u27e870\u27e9 https://docs.rs/axum/latest/axum/attr.debug_handler.html: attr axum::debug_handler - debug_handler\n\u27e871\u27e9 https://docs.rs/axum/latest/axum/attr.debug_middleware.html: attr axum::debug_middleware - debug_middleware\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `axum` crate is a modular and ergonomic web framework for building asynchronous applications in Rust, leveraging the `tower` ecosystem for middleware and services. It features a macro-free API for routing, declarative request parsing via extractors, simple error handling, and flexible response generation. Key capabilities include support for WebSockets, JSON handling, multipart forms, and seamless integration with `tokio` and `hyper`.",
          "feature_summary": null,
          "use_case": "Web Framework",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Routing and Middleware\n\u2705 Factual: `axum` uses `tower::Service` for middleware, enabling features like timeouts, tracing, compression, and authorization without requiring a custom middleware system.  \n\u274c Counterfactual: `axum` has its own proprietary middleware system that is incompatible with the `tower` ecosystem, requiring developers to rewrite middleware for `axum` applications.  \n\n---\n\n### Pair 2: Feature Flags\n\u2705 Factual: The `http1` and `json` features are enabled by default in `axum`, allowing seamless use of HTTP/1 and JSON functionality without additional configuration.  \n\u274c Counterfactual: The `http2` and `multipart` features are enabled by default in `axum`, making it suitable for advanced HTTP/2 and multipart form handling out of the box.  \n\n---\n\n### Pair 3: Compatibility with Tokio\n\u2705 Factual: `axum` is designed to work specifically with the `tokio` runtime, leveraging its asynchronous capabilities for handling web requests efficiently.  \n\u274c Counterfactual: `axum` is runtime-agnostic and can be used interchangeably with any asynchronous runtime, such as `async-std` or `smol`, without additional configuration.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-af7119dc-f6e25139-1751257716",
      "timestamp": "2025-06-30T04:28:36.165014+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]