[
  {
    "execution_id": "exec-ce2c8921-06bdd147-1751258835",
    "timestamp": "2025-06-30T04:47:15.122988+00:00",
    "sacred_chain": {
      "input_data": "pin-project",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'pin-project' -> 'pin-project'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "pin-project",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/pin-project",
            "title": "pin-project v1.1.10",
            "content": {
              "raw_markdown": "#  pin-project v1.1.10\nA crate for safe and ergonomic pin-projection. \n  * [ #attribute ](https://crates.io/keywords/attribute)\n  * [ #macros ](https://crates.io/keywords/macros)\n  * [ #pin ](https://crates.io/keywords/pin)\n\n\n  * [ Readme ](https://crates.io/crates/pin-project)\n  * [ 86 Versions ](https://crates.io/crates/pin-project/versions)\n  * [ Dependencies ](https://crates.io/crates/pin-project/dependencies)\n  * [ Dependents ](https://crates.io/crates/pin-project/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.56.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n55 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pin-project\nOr add the following line to your Cargo.toml:\npin-project = \"1.1.10\"\n## Repository\n[ github.com/taiki-e/pin-project ](https://github.com/taiki-e/pin-project)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n\n\n[ Report crate ](https://crates.io/support?crate=pin-project&inquire=crate-violation)\n### Stats Overview\n236,706,130 Downloads all time\n86 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  pin-project v1.1.10\nA crate for safe and ergonomic pin-projection. \n  *  #attribute \u27e81\u27e9\n  *  #macros \u27e82\u27e9\n  *  #pin \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  86 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n4 months ago \nv1.56.0 \n Apache-2.0 \u27e88\u27e9 OR  MIT \u27e89\u27e9\n55 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pin-project\nOr add the following line to your Cargo.toml:\npin-project = \"1.1.10\"\n## Repository\n github.com/taiki-e/pin-project \u27e810\u27e9\n## Owners\n## Categories\n  * No standard library\u27e811\u27e9\n  * No dynamic allocation\u27e812\u27e9\n  * Rust patterns\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n236,706,130 Downloads all time\n86 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/attribute:  #attribute \n\u27e82\u27e9 https://crates.io/keywords/macros:  #macros \n\u27e83\u27e9 https://crates.io/keywords/pin:  #pin \n\u27e84\u27e9 https://crates.io/crates/pin-project:  Readme \n\u27e85\u27e9 https://crates.io/crates/pin-project/versions:  86 Versions \n\u27e86\u27e9 https://crates.io/crates/pin-project/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/pin-project/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://github.com/taiki-e/pin-project:  github.com/taiki-e/pin-project \n\u27e811\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e812\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e813\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e814\u27e9 https://crates.io/support?crate=pin-project&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1389,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112624.7494386"
          },
          "docs_rs": {
            "url": "https://docs.rs/pin-project",
            "title": "Crate pin_projectCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\n[Settings](https://docs.rs/pin-project/latest/settings.html)\n[Help](https://docs.rs/pin-project/latest/help.html)\nSummary[Source](https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350)\nExpand description\nA crate for safe and ergonomic [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning).\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#examples)Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs)\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs)\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see [examples](https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md) directory for more examples and generated code.\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#related-projects)Related Projects\n  * [pin-project-lite](https://github.com/taiki-e/pin-project-lite): A lightweight version of pin-project written with declarative macros.\n\n\n## Traits[\u00a7](https://docs.rs/pin-project/latest/pin_project/#traits)\n\n[UnsafeUnpin](https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html \"trait pin_project::UnsafeUnpin\")\n    A trait used for custom implementations of [`Unpin`](https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html \"trait core::marker::Unpin\").\n## Attribute Macros[\u00a7](https://docs.rs/pin-project/latest/pin_project/#attributes)\n\n[pin_project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\")\n    An attribute that creates projection types covering all the fields of struct or enum.\n\n[pinned_drop](https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html \"attr pin_project::pinned_drop\")\n    An attribute used for custom implementations of [`Drop`].\n",
              "markdown_with_citations": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA crate for safe and ergonomic pin-projection\u27e84\u27e9.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n_code like this will be generated_\u27e87\u27e9\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n_code like this will be generated_\u27e88\u27e9\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see examples\u27e89\u27e9 directory for more examples and generated code.\n### \u00a7\u27e810\u27e9Related Projects\n  * pin-project-lite\u27e811\u27e9: A lightweight version of pin-project written with declarative macros.\n\n\n## Traits\u00a7\u27e812\u27e9\n\nUnsafeUnpin\u27e813\u27e9\n    A trait used for custom implementations of `Unpin`\u27e814\u27e9.\n## Attribute Macros\u00a7\u27e815\u27e9\n\npin_project\u27e816\u27e9\n    An attribute that creates projection types covering all the fields of struct or enum.\n\npinned_drop\u27e817\u27e9\n    An attribute used for custom implementations of [`Drop`].\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning: pin-projection\n\u27e85\u27e9 https://docs.rs/pin-project/latest/pin_project/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project/latest/pin_project/#examples: \u00a7\n\u27e87\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs: _code like this will be generated_\n\u27e88\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs: _code like this will be generated_\n\u27e89\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md: examples\n\u27e810\u27e9 https://docs.rs/pin-project/latest/pin_project/#related-projects: \u00a7\n\u27e811\u27e9 https://github.com/taiki-e/pin-project-lite: pin-project-lite\n\u27e812\u27e9 https://docs.rs/pin-project/latest/pin_project/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html: trait pin_project::UnsafeUnpin - UnsafeUnpin\n\u27e814\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html: trait core::marker::Unpin - `Unpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/#attributes: \u00a7\n\u27e816\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html: attr pin_project::pin_project - pin_project\n\u27e817\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html: attr pin_project::pinned_drop - pinned_drop\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3298,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112625.4868019"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/pin-project",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [53 releases](https://lib.rs/crates/pin-project/versions) (22 stable)\n1.1.10 |  Mar 3, 2025   \n---|---  \n1.1.8 |  Jan 6, 2025   \n1.1.7 |  Oct 24, 2024   \n1.1.5 |  Mar 5, 2024   \n0.3.2 |  Mar 30, 2019   \n#**36** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 2761775/week @ 2025-03-06 2718326/week @ 2025-03-13 3378916/week @ 2025-03-20 2486771/week @ 2025-03-27 2691672/week @ 2025-04-03 2524429/week @ 2025-04-10 2272223/week @ 2025-04-17 2322870/week @ 2025-04-24 2192422/week @ 2025-05-01 2306346/week @ 2025-05-08 2338510/week @ 2025-05-15 2190403/week @ 2025-05-22 2274132/week @ 2025-05-29 2300650/week @ 2025-06-05 2594167/week @ 2025-06-12 2460141/week @ 2025-06-19\n**10,086,642** downloads per month Used in [**14,160** crates (1,035 directly)](https://lib.rs/crates/pin-project/rev)\n**Apache-2.0 OR MIT**\n66KB  241 lines\n# pin-project\n[![crates.io](https://img.shields.io/crates/v/pin-project?style=flat-square&logo=rust)](https://crates.io/crates/pin-project) [![docs.rs](https://img.shields.io/badge/docs.rs-pin--project-blue?style=flat-square&logo=docs.rs)](https://docs.rs/pin-project) [![license](https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue?style=flat-square)](https://lib.rs/crates/pin-project#readme-license) [![msrv](https://img.shields.io/badge/msrv-1.56-blue?style=flat-square&logo=rust)](https://www.rust-lang.org) [![github actions](https://img.shields.io/github/actions/workflow/status/taiki-e/pin-project/ci.yml?branch=main&style=flat-square&logo=github)](https://github.com/taiki-e/pin-project/actions)\nA crate for safe and ergonomic [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning).\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pin-project ``=` ``\"`1`\"``\n``\n```\n\n## Examples\n[````#``[``pin_project``]````](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html) attribute creates projection types covering all the fields of struct or enum.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project`::``pin_project`;`\n``#``[``pin_project``]``\n``struct` ````Struct``<`T, U`>``````{`\n  ``#``[``pin``]``\n  `pinned``:` T,\n  `unpinned``:` U,\n```}```\n``impl`````<`T, U`>```` `Struct```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `let` this `=` `self``.``project``(``)``;`\n    `let` `_``:` `Pin`<``&``mut` T`>`` `=` this`.`pinned`;` ``//` Pinned reference to the field`\n    `let` `_``:` `&``mut` U `=` this`.`unpinned`;` ``//` Normal reference to the field`\n  `}``\n```}```\n`\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs)\nTo use ````#``[``pin_project``]```` on enums, you need to name the projection type returned from the method.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project`::``pin_project`;`\n``#``[``pin_project```(```project `=` EnumProj```)```]``\n``enum` `Enum`<T, U> ``{`\n  Pinned`(```#``[``pin``]`` T`)``,`\n  Unpinned`(`U`)``,`\n```}```\n``impl`````<`T, U`>```` `Enum```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `match` `self``.``project``(``)` `{`\n      `EnumProj`::``Pinned`(`x`)` `=>` `{`\n        `let` `_``:` `Pin`<``&``mut` T`>`` `=` x`;`\n      `}`\n      `EnumProj`::``Unpinned`(`y`)` `=>` `{`\n        `let` `_``:` `&``mut` U `=` y`;`\n      `}`\n    `}`\n  `}``\n```}```\n`\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs)\nSee [````#``[``pin_project``]````](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html) attribute for more details, and see [examples](https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md) directory for more examples and generated code.\n## Related Projects\n  * [pin-project-lite](https://github.com/taiki-e/pin-project-lite): A lightweight version of pin-project written with declarative macros.\n\n\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/taiki-e/pin-project/blob/b0757d15ac0fac49dee9250ad8cb7a76e9a9c227/LICENSE-APACHE) or [MIT license](https://github.com/taiki-e/pin-project/blob/b0757d15ac0fac49dee9250ad8cb7a76e9a9c227/LICENSE-MIT) at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * [pin-project-internal](https://lib.rs/crates/pin-project-internal \"=1.1.10\")\n\n\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1\")\n  * dev  [static_assertions](https://lib.rs/crates/static_assertions \"1\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  53 releases\u27e81\u27e9 (22 stable)\n1.1.10 |  Mar 3, 2025   \n---|---  \n1.1.8 |  Jan 6, 2025   \n1.1.7 |  Oct 24, 2024   \n1.1.5 |  Mar 5, 2024   \n0.3.2 |  Mar 30, 2019   \n#**36** in Rust patterns\u27e82\u27e9\nDownload history 2761775/week @ 2025-03-06 2718326/week @ 2025-03-13 3378916/week @ 2025-03-20 2486771/week @ 2025-03-27 2691672/week @ 2025-04-03 2524429/week @ 2025-04-10 2272223/week @ 2025-04-17 2322870/week @ 2025-04-24 2192422/week @ 2025-05-01 2306346/week @ 2025-05-08 2338510/week @ 2025-05-15 2190403/week @ 2025-05-22 2274132/week @ 2025-05-29 2300650/week @ 2025-06-05 2594167/week @ 2025-06-12 2460141/week @ 2025-06-19\n**10,086,642** downloads per month Used in **14,160** crates (1,035 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n66KB  241 lines\n# pin-project\n![crates.io\u27e84\u27e9](https://crates.io/crates/pin-project) ![docs.rs\u27e85\u27e9](https://docs.rs/pin-project) ![license\u27e86\u27e9](https://lib.rs/crates/pin-project#readme-license) ![msrv\u27e87\u27e9](https://www.rust-lang.org) ![github actions\u27e88\u27e9](https://github.com/taiki-e/pin-project/actions)\nA crate for safe and ergonomic pin-projection\u27e89\u27e9.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pin-project ``=` ``\"`1`\"``\n``\n```\n\n## Examples\n[````#``[``pin_project``]````](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html) attribute creates projection types covering all the fields of struct or enum.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project`::``pin_project`;`\n``#``[``pin_project``]``\n``struct` ````Struct``<`T, U`>``````{`\n  ``#``[``pin``]``\n  `pinned``:` T,\n  `unpinned``:` U,\n```}```\n``impl`````<`T, U`>```` `Struct```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `let` this `=` `self``.``project``(``)``;`\n    `let` `_``:` `Pin`<``&``mut` T`>`` `=` this`.`pinned`;` ``//` Pinned reference to the field`\n    `let` `_``:` `&``mut` U `=` this`.`unpinned`;` ``//` Normal reference to the field`\n  `}``\n```}```\n`\n```\n\n_code like this will be generated_\u27e810\u27e9\nTo use ````#``[``pin_project``]```` on enums, you need to name the projection type returned from the method.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project`::``pin_project`;`\n``#``[``pin_project```(```project `=` EnumProj```)```]``\n``enum` `Enum`<T, U> ``{`\n  Pinned`(```#``[``pin``]`` T`)``,`\n  Unpinned`(`U`)``,`\n```}```\n``impl`````<`T, U`>```` `Enum```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `match` `self``.``project``(``)` `{`\n      `EnumProj`::``Pinned`(`x`)` `=>` `{`\n        `let` `_``:` `Pin`<``&``mut` T`>`` `=` x`;`\n      `}`\n      `EnumProj`::``Unpinned`(`y`)` `=>` `{`\n        `let` `_``:` `&``mut` U `=` y`;`\n      `}`\n    `}`\n  `}``\n```}```\n`\n```\n\n_code like this will be generated_\u27e811\u27e9\nSee [````#``[``pin_project``]````](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html) attribute for more details, and see examples\u27e812\u27e9 directory for more examples and generated code.\n## Related Projects\n  * pin-project-lite\u27e813\u27e9: A lightweight version of pin-project written with declarative macros.\n\n\n## License\nLicensed under either of Apache License, Version 2.0\u27e814\u27e9 or MIT license\u27e815\u27e9 at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * pin-project-internal\u27e816\u27e9\n\n\n  * dev  rustversion\u27e817\u27e9\n  * dev  static_assertions\u27e818\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/pin-project/versions: 53 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/pin-project/rev: **14,160** crates (1,035 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/pin-project?style=flat-square&logo=rust: ![crates.io\n\u27e85\u27e9 https://img.shields.io/badge/docs.rs-pin--project-blue?style=flat-square&logo=docs.rs: ![docs.rs\n\u27e86\u27e9 https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue?style=flat-square: ![license\n\u27e87\u27e9 https://img.shields.io/badge/msrv-1.56-blue?style=flat-square&logo=rust: ![msrv\n\u27e88\u27e9 https://img.shields.io/github/actions/workflow/status/taiki-e/pin-project/ci.yml?branch=main&style=flat-square&logo=github: ![github actions\n\u27e89\u27e9 https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning: pin-projection\n\u27e810\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs: _code like this will be generated_\n\u27e811\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs: _code like this will be generated_\n\u27e812\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md: examples\n\u27e813\u27e9 https://github.com/taiki-e/pin-project-lite: pin-project-lite\n\u27e814\u27e9 https://github.com/taiki-e/pin-project/blob/b0757d15ac0fac49dee9250ad8cb7a76e9a9c227/LICENSE-APACHE: Apache License, Version 2.0\n\u27e815\u27e9 https://github.com/taiki-e/pin-project/blob/b0757d15ac0fac49dee9250ad8cb7a76e9a9c227/LICENSE-MIT: MIT license\n\u27e816\u27e9 https://lib.rs/crates/pin-project-internal: =1.1.10 - pin-project-internal\n\u27e817\u27e9 https://lib.rs/crates/rustversion: 1 - rustversion\n\u27e818\u27e9 https://lib.rs/crates/static_assertions: 1 - static_assertions\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4875,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112626.178666"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libproc_macro2-82ee41bed00d23d8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libproc_macro2-82ee41bed00d23d8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.39\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.39\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libquote-860de812e16d5042.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libquote-860de812e16d5042.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.99",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.99\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.99\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libsyn-a93846a23c70e113.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libsyn-a93846a23c70e113.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp36bhrkhf/pin-project-1.1.10#pin-project@1.1.10",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libpin_project-7815418d8368abb4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libproc_macro2-82ee41bed00d23d8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libproc_macro2-82ee41bed00d23d8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.39",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.39\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.39\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libquote-860de812e16d5042.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libquote-860de812e16d5042.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.99",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.99\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.99\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libsyn-a93846a23c70e113.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libsyn-a93846a23c70e113.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\pin_project_internal-e574984c3edc09f4.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp36bhrkhf/pin-project-1.1.10#pin-project@1.1.10",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp36bhrkhf\\pin-project-1.1.10\\target\\debug\\deps\\libpin_project-4595f4f0b03b2b12.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 8
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "pin-project",
          "version": "1.1.10",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\n[Settings](https://docs.rs/pin-project/latest/settings.html)\n[Help](https://docs.rs/pin-project/latest/help.html)\nSummary[Source](https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350)\nExpand description\nA crate for safe and ergonomic [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning).\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#examples)Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs)\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs)\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see [examples](https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md) directory for more examples and generated code.\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#related-projects)Related Projects\n  * [pin-project-lite](https://github.com/taiki-e/pin-project-lite): A lightweight version of pin-project written with declarative macros.\n\n\n## Traits[\u00a7](https://docs.rs/pin-project/latest/pin_project/#traits)\n\n[UnsafeUnpin](https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html \"trait pin_project::UnsafeUnpin\")\n    A trait used for custom implementations of [`Unpin`](https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html \"trait core::marker::Unpin\").\n## Attribute Macros[\u00a7](https://docs.rs/pin-project/latest/pin_project/#attributes)\n\n[pin_project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\")\n    An attribute that creates projection types covering all the fields of struct or enum.\n\n[pinned_drop](https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html \"attr pin_project::pinned_drop\")\n    An attribute used for custom implementations of [`Drop`].\n",
            "markdown_with_citations": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA crate for safe and ergonomic pin-projection\u27e84\u27e9.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n_code like this will be generated_\u27e87\u27e9\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n_code like this will be generated_\u27e88\u27e9\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see examples\u27e89\u27e9 directory for more examples and generated code.\n### \u00a7\u27e810\u27e9Related Projects\n  * pin-project-lite\u27e811\u27e9: A lightweight version of pin-project written with declarative macros.\n\n\n## Traits\u00a7\u27e812\u27e9\n\nUnsafeUnpin\u27e813\u27e9\n    A trait used for custom implementations of `Unpin`\u27e814\u27e9.\n## Attribute Macros\u00a7\u27e815\u27e9\n\npin_project\u27e816\u27e9\n    An attribute that creates projection types covering all the fields of struct or enum.\n\npinned_drop\u27e817\u27e9\n    An attribute used for custom implementations of [`Drop`].\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning: pin-projection\n\u27e85\u27e9 https://docs.rs/pin-project/latest/pin_project/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project/latest/pin_project/#examples: \u00a7\n\u27e87\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs: _code like this will be generated_\n\u27e88\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs: _code like this will be generated_\n\u27e89\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md: examples\n\u27e810\u27e9 https://docs.rs/pin-project/latest/pin_project/#related-projects: \u00a7\n\u27e811\u27e9 https://github.com/taiki-e/pin-project-lite: pin-project-lite\n\u27e812\u27e9 https://docs.rs/pin-project/latest/pin_project/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html: trait pin_project::UnsafeUnpin - UnsafeUnpin\n\u27e814\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html: trait core::marker::Unpin - `Unpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/#attributes: \u00a7\n\u27e816\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html: attr pin_project::pin_project - pin_project\n\u27e817\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html: attr pin_project::pinned_drop - pinned_drop\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "pin-project",
          "version": "1.1.10",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\n[Settings](https://docs.rs/pin-project/latest/settings.html)\n[Help](https://docs.rs/pin-project/latest/help.html)\nSummary[Source](https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350)\nExpand description\nA crate for safe and ergonomic [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning).\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#examples)Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs)\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n[_code like this will be generated_](https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs)\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see [examples](https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md) directory for more examples and generated code.\n### [\u00a7](https://docs.rs/pin-project/latest/pin_project/#related-projects)Related Projects\n  * [pin-project-lite](https://github.com/taiki-e/pin-project-lite): A lightweight version of pin-project written with declarative macros.\n\n\n## Traits[\u00a7](https://docs.rs/pin-project/latest/pin_project/#traits)\n\n[UnsafeUnpin](https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html \"trait pin_project::UnsafeUnpin\")\n    A trait used for custom implementations of [`Unpin`](https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html \"trait core::marker::Unpin\").\n## Attribute Macros[\u00a7](https://docs.rs/pin-project/latest/pin_project/#attributes)\n\n[pin_project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\")\n    An attribute that creates projection types covering all the fields of struct or enum.\n\n[pinned_drop](https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html \"attr pin_project::pinned_drop\")\n    An attribute used for custom implementations of [`Drop`].\n",
            "markdown_with_citations": "[](https://docs.rs/pin-project/latest/pin_project/all.html \"show sidebar\")\n# Crate pin_projectCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA crate for safe and ergonomic pin-projection\u27e84\u27e9.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project = \"1\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n[`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute creates projection types covering all the fields of struct or enum.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project]\nstruct Struct<T, U> {\n  #[pin]\n  pinned: T,\n  unpinned: U,\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\n_code like this will be generated_\u27e87\u27e9\nTo use `#[pin_project]` on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project::pin_project;\n#[pin_project(project = EnumProj)]\nenum Enum<T, U> {\n  Pinned(#[pin] T),\n  Unpinned(U),\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Pinned(x) => {\n        let _: Pin<&mut T> = x;\n      }\n      EnumProj::Unpinned(y) => {\n        let _: &mut U = y;\n      }\n    }\n  }\n}\n```\n\n_code like this will be generated_\u27e88\u27e9\nSee [`#[pin_project]`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html \"attr pin_project::pin_project\") attribute for more details, and see examples\u27e89\u27e9 directory for more examples and generated code.\n### \u00a7\u27e810\u27e9Related Projects\n  * pin-project-lite\u27e811\u27e9: A lightweight version of pin-project written with declarative macros.\n\n\n## Traits\u00a7\u27e812\u27e9\n\nUnsafeUnpin\u27e813\u27e9\n    A trait used for custom implementations of `Unpin`\u27e814\u27e9.\n## Attribute Macros\u00a7\u27e815\u27e9\n\npin_project\u27e816\u27e9\n    An attribute that creates projection types covering all the fields of struct or enum.\n\npinned_drop\u27e817\u27e9\n    An attribute used for custom implementations of [`Drop`].\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project/latest/src/pin_project/lib.rs.html#3-350: Source\n\u27e84\u27e9 https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning: pin-projection\n\u27e85\u27e9 https://docs.rs/pin-project/latest/pin_project/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project/latest/pin_project/#examples: \u00a7\n\u27e87\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/struct-default-expanded.rs: _code like this will be generated_\n\u27e88\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/enum-default-expanded.rs: _code like this will be generated_\n\u27e89\u27e9 https://github.com/taiki-e/pin-project/blob/HEAD/examples/README.md: examples\n\u27e810\u27e9 https://docs.rs/pin-project/latest/pin_project/#related-projects: \u00a7\n\u27e811\u27e9 https://github.com/taiki-e/pin-project-lite: pin-project-lite\n\u27e812\u27e9 https://docs.rs/pin-project/latest/pin_project/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project/latest/pin_project/trait.UnsafeUnpin.html: trait pin_project::UnsafeUnpin - UnsafeUnpin\n\u27e814\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html: trait core::marker::Unpin - `Unpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/#attributes: \u00a7\n\u27e816\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html: attr pin_project::pin_project - pin_project\n\u27e817\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pinned_drop.html: attr pin_project::pinned_drop - pinned_drop\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `pin-project` crate provides a safe and ergonomic way to work with [pin-projection](https://doc.rust-lang.org/std/pin/index.html#projections-and-structural-pinning) in Rust. It offers the `#[pin_project]` attribute to automatically generate projection types for structs and enums, enabling seamless access to pinned and unpinned fields. Additionally, it supports custom implementations of `Drop` via the `#[pinned_drop]` attribute and custom `Unpin` behavior through the `UnsafeUnpin` trait.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Pinning and Projection  \n\u2705 **Factual**: The `pin-project` crate allows safe and ergonomic pin-projection by generating projection types for structs and enums, enabling access to pinned and unpinned fields.  \n\u274c **Counterfactual**: The `pin-project` crate automatically pins all fields in a struct or enum, regardless of whether they are marked with `#[pin]`.\n\n---\n\n### Pair 2: Enum Projection  \n\u2705 **Factual**: When using `#[pin_project]` on enums, you must explicitly name the projection type, such as `#[pin_project(project = EnumProj)]`, to access the projected fields.  \n\u274c **Counterfactual**: The `#[pin_project]` attribute automatically generates projection types for enums without requiring the user to name the projection type.\n\n---\n\n### Pair 3: Related Projects  \n\u2705 **Factual**: The `pin-project-lite` crate is a lightweight alternative to `pin-project`, implemented using declarative macros for simpler use cases.  \n\u274c **Counterfactual**: The `pin-project-lite` crate provides the same functionality as `pin-project`, including support for custom `Drop` implementations via the `#[pinned_drop]` attribute.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-ce2c8921-06bdd147-1751258835",
      "timestamp": "2025-06-30T04:47:15.122988+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]