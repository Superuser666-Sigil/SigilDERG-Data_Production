[
  {
    "execution_id": "exec-c0e26b2f-0945797d-1751264329",
    "timestamp": "2025-06-30T06:18:49.538416+00:00",
    "sacred_chain": {
      "input_data": "blake2",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'blake2' -> 'blake2'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "blake2",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/blake2",
            "title": "blake2 v0.10.6",
            "content": {
              "raw_markdown": "#  blake2 v0.10.6\nBLAKE2 hash functions \n  * [ #blake2 ](https://crates.io/keywords/blake2)\n  * [ #crypto ](https://crates.io/keywords/crypto)\n  * [ #digest ](https://crates.io/keywords/digest)\n  * [ #hash ](https://crates.io/keywords/hash)\n\n\n  * [ Readme ](https://crates.io/crates/blake2)\n  * [ 29 Versions ](https://crates.io/crates/blake2/versions)\n  * [ Dependencies ](https://crates.io/crates/blake2/dependencies)\n  * [ Dependents ](https://crates.io/crates/blake2/reverse_dependencies)\n\n\n## Metadata\nover 2 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n46.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add blake2\nOr add the following line to your Cargo.toml:\nblake2 = \"0.10.6\"\n## Documentation\n[ docs.rs/blake2 ](https://docs.rs/blake2)\n## Repository\n[ github.com/RustCrypto/hashes ](https://github.com/RustCrypto/hashes)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=blake2&inquire=crate-violation)\n### Stats Overview\n57,287,250 Downloads all time\n29 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  blake2 v0.10.6\nBLAKE2 hash functions \n  *  #blake2 \u27e81\u27e9\n  *  #crypto \u27e82\u27e9\n  *  #digest \u27e83\u27e9\n  *  #hash \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  29 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nover 2 years ago \n2018 edition \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n46.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add blake2\nOr add the following line to your Cargo.toml:\nblake2 = \"0.10.6\"\n## Documentation\n docs.rs/blake2 \u27e811\u27e9\n## Repository\n github.com/RustCrypto/hashes \u27e812\u27e9\n## Owners\n## Categories\n  * No standard library\u27e813\u27e9\n  * Cryptography\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n57,287,250 Downloads all time\n29 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/blake2:  #blake2 \n\u27e82\u27e9 https://crates.io/keywords/crypto:  #crypto \n\u27e83\u27e9 https://crates.io/keywords/digest:  #digest \n\u27e84\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e85\u27e9 https://crates.io/crates/blake2:  Readme \n\u27e86\u27e9 https://crates.io/crates/blake2/versions:  29 Versions \n\u27e87\u27e9 https://crates.io/crates/blake2/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/blake2/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://docs.rs/blake2:  docs.rs/blake2 \n\u27e812\u27e9 https://github.com/RustCrypto/hashes:  github.com/RustCrypto/hashes \n\u27e813\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e814\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e815\u27e9 https://crates.io/support?crate=blake2&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1360,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118119.341082"
          },
          "docs_rs": {
            "url": "https://docs.rs/blake2",
            "title": "Crate blake2Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\n[Settings](https://docs.rs/blake2/latest/settings.html)\n[Help](https://docs.rs/blake2/latest/help.html)\nSummary[Source](https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172)\nExpand description\nAn implementation of the [BLAKE2](https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\)#BLAKE2) hash functions.\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#usage)Usage\n[`Blake2b512`](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\") and [`Blake2s256`](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\") can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n### [\u00a7](https://docs.rs/blake2/latest/blake2/#variable-output-size)Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#acknowledgment)Acknowledgment\nBased on the [blake2-rfc](https://github.com/cesarb/blake2-rfc) crate.\n## Re-exports[\u00a7](https://docs.rs/blake2/latest/blake2/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/blake2/latest/blake2/#structs)\n\n[Blake2bMac](https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html \"struct blake2::Blake2bMac\")\n    Blake2b MAC function\n\n[Blake2bVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html \"struct blake2::Blake2bVarCore\")\n    Blake2b instance with a variable output.\n\n[Blake2sMac](https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html \"struct blake2::Blake2sMac\")\n    Blake2s MAC function\n\n[Blake2sVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html \"struct blake2::Blake2sVarCore\")\n    Blake2s instance with a variable output.\n## Traits[\u00a7](https://docs.rs/blake2/latest/blake2/#traits)\n\n[Digest](https://docs.rs/blake2/latest/blake2/trait.Digest.html \"trait blake2::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases[\u00a7](https://docs.rs/blake2/latest/blake2/#types)\n\n[Blake2b](https://docs.rs/blake2/latest/blake2/type.Blake2b.html \"type blake2::Blake2b\")\n    BLAKE2b generic over output size.\n\n[Blake2b512](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\")\n    BLAKE2b-512 hasher state.\n\n[Blake2bCore](https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html \"type blake2::Blake2bCore\")\n    Core hasher state of BLAKE2b generic over output size.\n\n[Blake2bMac512](https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html \"type blake2::Blake2bMac512\")\n    BLAKE2b-512 MAC state.\n\n[Blake2bVar](https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html \"type blake2::Blake2bVar\")\n    BLAKE2b which allows to choose output size at runtime.\n\n[Blake2s](https://docs.rs/blake2/latest/blake2/type.Blake2s.html \"type blake2::Blake2s\")\n    BLAKE2s generic over output size.\n\n[Blake2s256](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\")\n    BLAKE2s-256 hasher state.\n\n[Blake2sCore](https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html \"type blake2::Blake2sCore\")\n    Core hasher state of BLAKE2s generic over output size.\n\n[Blake2sMac256](https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html \"type blake2::Blake2sMac256\")\n    BLAKE2s-256 MAC state.\n\n[Blake2sVar](https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html \"type blake2::Blake2sVar\")\n    BLAKE2s which allows to choose output size at runtime.\n",
              "markdown_with_citations": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the BLAKE2\u27e84\u27e9#BLAKE2) hash functions.\n## \u00a7\u27e85\u27e9Usage\n`Blake2b512`\u27e86\u27e9 and `Blake2s256`\u27e87\u27e9 can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see RustCrypto/hashes\u27e88\u27e9 readme.\n### \u00a7\u27e89\u27e9Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## \u00a7\u27e810\u27e9Acknowledgment\nBased on the blake2-rfc\u27e811\u27e9 crate.\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nBlake2bMac\u27e814\u27e9\n    Blake2b MAC function\n\nBlake2bVarCore\u27e815\u27e9\n    Blake2b instance with a variable output.\n\nBlake2sMac\u27e816\u27e9\n    Blake2s MAC function\n\nBlake2sVarCore\u27e817\u27e9\n    Blake2s instance with a variable output.\n## Traits\u00a7\u27e818\u27e9\n\nDigest\u27e819\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases\u00a7\u27e820\u27e9\n\nBlake2b\u27e821\u27e9\n    BLAKE2b generic over output size.\n\nBlake2b512\u27e86\u27e9\n    BLAKE2b-512 hasher state.\n\nBlake2bCore\u27e822\u27e9\n    Core hasher state of BLAKE2b generic over output size.\n\nBlake2bMac512\u27e823\u27e9\n    BLAKE2b-512 MAC state.\n\nBlake2bVar\u27e824\u27e9\n    BLAKE2b which allows to choose output size at runtime.\n\nBlake2s\u27e825\u27e9\n    BLAKE2s generic over output size.\n\nBlake2s256\u27e87\u27e9\n    BLAKE2s-256 hasher state.\n\nBlake2sCore\u27e826\u27e9\n    Core hasher state of BLAKE2s generic over output size.\n\nBlake2sMac256\u27e827\u27e9\n    BLAKE2s-256 MAC state.\n\nBlake2sVar\u27e828\u27e9\n    BLAKE2s which allows to choose output size at runtime.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/blake2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/blake2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\: BLAKE2\n\u27e85\u27e9 https://docs.rs/blake2/latest/blake2/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b512.html: type blake2::Blake2b512 - `Blake2b512`\n\u27e87\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s256.html: type blake2::Blake2s256 - `Blake2s256`\n\u27e88\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e89\u27e9 https://docs.rs/blake2/latest/blake2/#variable-output-size: \u00a7\n\u27e810\u27e9 https://docs.rs/blake2/latest/blake2/#acknowledgment: \u00a7\n\u27e811\u27e9 https://github.com/cesarb/blake2-rfc: blake2-rfc\n\u27e812\u27e9 https://docs.rs/blake2/latest/blake2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/blake2/latest/blake2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html: struct blake2::Blake2bMac - Blake2bMac\n\u27e815\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html: struct blake2::Blake2bVarCore - Blake2bVarCore\n\u27e816\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html: struct blake2::Blake2sMac - Blake2sMac\n\u27e817\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html: struct blake2::Blake2sVarCore - Blake2sVarCore\n\u27e818\u27e9 https://docs.rs/blake2/latest/blake2/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/blake2/latest/blake2/trait.Digest.html: trait blake2::Digest - Digest\n\u27e820\u27e9 https://docs.rs/blake2/latest/blake2/#types: \u00a7\n\u27e821\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b.html: type blake2::Blake2b - Blake2b\n\u27e822\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html: type blake2::Blake2bCore - Blake2bCore\n\u27e823\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html: type blake2::Blake2bMac512 - Blake2bMac512\n\u27e824\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html: type blake2::Blake2bVar - Blake2bVar\n\u27e825\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s.html: type blake2::Blake2s - Blake2s\n\u27e826\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html: type blake2::Blake2sCore - Blake2sCore\n\u27e827\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html: type blake2::Blake2sMac256 - Blake2sMac256\n\u27e828\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html: type blake2::Blake2sVar - Blake2sVar\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4922,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118120.0436868"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/blake2",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [22 releases](https://lib.rs/crates/blake2/versions) (11 breaking)\nUses new Rust 2024\n0.11.0-rc.0 |  May 29, 2025   \n---|---  \n0.11.0-pre.5 |  Mar 5, 2025   \n0.11.0-pre.4 |  Jul 27, 2024   \n0.11.0-pre.3 |  Feb 7, 2024   \n0.3.0 |  Nov 17, 2016   \n#**10** in [Cryptography](https://lib.rs/cryptography \"Algorithms intended for securing data.\")\nDownload history 612280/week @ 2025-03-06 609871/week @ 2025-03-13 603770/week @ 2025-03-20 567701/week @ 2025-03-27 607638/week @ 2025-04-03 768400/week @ 2025-04-10 668943/week @ 2025-04-17 704179/week @ 2025-04-24 641862/week @ 2025-05-01 694760/week @ 2025-05-08 732850/week @ 2025-05-15 693996/week @ 2025-05-22 715774/week @ 2025-05-29 715291/week @ 2025-06-05 833358/week @ 2025-06-12 774182/week @ 2025-06-19\n**3,182,117** downloads per month Used in [**3,568** crates (505 directly)](https://lib.rs/crates/blake2/rev)\n**MIT/Apache**\n49KB  1K  SLoC\n# RustCrypto: BLAKE2\n[![crate](https://img.shields.io/crates/v/blake2.svg)](https://crates.io/crates/blake2) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/blake2/badge.svg)](https://docs.rs/blake2/) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/hashes/actions/workflows/blake2.yml/badge.svg?branch=master)](https://github.com/RustCrypto/hashes/actions/workflows/blake2.yml?query=branch:master) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.85+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes)\nPure Rust implementation of the [BLAKE2](https://blake2.net/) hash function family.\n## Examples\n### Fixed output size\n```\n``use` `blake2`::````{`Blake2b512`,` Blake2s256`,` Digest```}```;`\n`use` `hex_literal`::``hex`;`\n``//` create a Blake2b512 object`\n`let` `mut` hasher `=` `Blake2b512`::``new`(``)``;`\n``//` write input message`\nhasher`.``update``(```b``\"`hello world`\"```)``;`\n``//` read hash digest and consume hasher`\n`let` hash `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`hash`,` `hex!``(`\n  ``\"`021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc`\"``\n  ``\"`c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0`\"``\n`)``)``;`\n``//` same example for Blake2s256:`\n`let` `mut` hasher `=` `Blake2s256`::``new`(``)``;`\nhasher`.``update``(```b``\"`hello world`\"```)``;`\n`let` hash `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`hash`,` `hex!``(```\"`9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b`\"```)``)``;`\n``//` Hex-encode hash using https://docs.rs/base16ct`\n`let` hex_hash `=` `base16ct`::```lower`::``encode_string`(``&`hash`)``;`\n`assert_eq!``(`hex_hash`,` ``\"`9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b`\"```)``;`\n`\n```\n\nAlso, see the [examples section](https://github.com/RustCrypto/hashes#Examples) in the RustCrypto/hashes readme.\n### Variable output size\nThis implementation supports run and compile time variable sizes.\nOutput size set at run time:\n```\n``use` `blake2`::``Blake2bVar`;`\n`use` `blake2`::```digest`::````{`Update`,` VariableOutput```}```;`\n`use` `hex_literal`::``hex`;`\n`let` `mut` hasher `=` `Blake2bVar`::``new`(``10``)``.``unwrap``(``)``;`\nhasher`.``update``(```b``\"`my_input`\"```)``;`\n`let` `mut` buf `=` `[``0``u8``;` `10``]``;`\nhasher`.``finalize_variable``(``&``mut` buf`)``.``unwrap``(``)``;`\n`assert_eq!``(`buf`,` `hex!``(```\"`2cc55c84e416924e6400`\"```)``)``;`\n`\n```\n\nOutput size set at compile time:\n```\n``use` `blake2`::````{`Blake2b`,` Digest`,` `digest`::```consts`::```U10````}```;`\n`use` `hex_literal`::``hex`;`\n`type` `Blake2b80` `=` `Blake2b`<`U10`>```;`\n`let` `mut` hasher `=` `Blake2b80`::``new`(``)``;`\nhasher`.``update``(```b``\"`my_input`\"```)``;`\n`let` res `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`res`,` `hex!``(```\"`2cc55c84e416924e6400`\"```)``)``;`\n`\n```\n\n## License\nThe crate is licensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~665KB  ~17K SLoC\n  * [digest](https://lib.rs/crates/digest \"new\") 0.11.0-rc.0[+mac](https://lib.rs/crates/digest/features#feature-mac)\n\n\n  * dev  [base16ct](https://lib.rs/crates/base16ct \"0.2\")[+alloc](https://lib.rs/crates/base16ct/features#feature-alloc)\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"new\") 1.0\n\n\n#### [Other features](https://lib.rs/crates/blake2/features)\n  * [alloc](https://lib.rs/crates/blake2/features#feature-alloc)\n  * [reset](https://lib.rs/crates/blake2/features#feature-reset)\n  * [size_opt](https://lib.rs/crates/blake2/features#feature-size_opt)\n  * [zeroize](https://lib.rs/crates/blake2/features#feature-zeroize)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  22 releases\u27e81\u27e9 (11 breaking)\nUses new Rust 2024\n0.11.0-rc.0 |  May 29, 2025   \n---|---  \n0.11.0-pre.5 |  Mar 5, 2025   \n0.11.0-pre.4 |  Jul 27, 2024   \n0.11.0-pre.3 |  Feb 7, 2024   \n0.3.0 |  Nov 17, 2016   \n#**10** in Cryptography\u27e82\u27e9\nDownload history 612280/week @ 2025-03-06 609871/week @ 2025-03-13 603770/week @ 2025-03-20 567701/week @ 2025-03-27 607638/week @ 2025-04-03 768400/week @ 2025-04-10 668943/week @ 2025-04-17 704179/week @ 2025-04-24 641862/week @ 2025-05-01 694760/week @ 2025-05-08 732850/week @ 2025-05-15 693996/week @ 2025-05-22 715774/week @ 2025-05-29 715291/week @ 2025-06-05 833358/week @ 2025-06-12 774182/week @ 2025-06-19\n**3,182,117** downloads per month Used in **3,568** crates (505 directly)\u27e83\u27e9\n**MIT/Apache**\n49KB  1K  SLoC\n# RustCrypto: BLAKE2\n![crate\u27e84\u27e9](https://crates.io/crates/blake2) ![Docs\u27e85\u27e9](https://docs.rs/blake2/) ![Build Status\u27e86\u27e9](https://github.com/RustCrypto/hashes/actions/workflows/blake2.yml?query=branch:master) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes)\nPure Rust implementation of the BLAKE2\u27e810\u27e9 hash function family.\n## Examples\n### Fixed output size\n```\n``use` `blake2`::````{`Blake2b512`,` Blake2s256`,` Digest```}```;`\n`use` `hex_literal`::``hex`;`\n``//` create a Blake2b512 object`\n`let` `mut` hasher `=` `Blake2b512`::``new`(``)``;`\n``//` write input message`\nhasher`.``update``(```b``\"`hello world`\"```)``;`\n``//` read hash digest and consume hasher`\n`let` hash `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`hash`,` `hex!``(`\n  ``\"`021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc`\"``\n  ``\"`c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0`\"``\n`)``)``;`\n``//` same example for Blake2s256:`\n`let` `mut` hasher `=` `Blake2s256`::``new`(``)``;`\nhasher`.``update``(```b``\"`hello world`\"```)``;`\n`let` hash `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`hash`,` `hex!``(```\"`9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b`\"```)``)``;`\n``//` Hex-encode hash using https://docs.rs/base16ct`\n`let` hex_hash `=` `base16ct`::```lower`::``encode_string`(``&`hash`)``;`\n`assert_eq!``(`hex_hash`,` ``\"`9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b`\"```)``;`\n`\n```\n\nAlso, see the examples section\u27e811\u27e9 in the RustCrypto/hashes readme.\n### Variable output size\nThis implementation supports run and compile time variable sizes.\nOutput size set at run time:\n```\n``use` `blake2`::``Blake2bVar`;`\n`use` `blake2`::```digest`::````{`Update`,` VariableOutput```}```;`\n`use` `hex_literal`::``hex`;`\n`let` `mut` hasher `=` `Blake2bVar`::``new`(``10``)``.``unwrap``(``)``;`\nhasher`.``update``(```b``\"`my_input`\"```)``;`\n`let` `mut` buf `=` `[``0``u8``;` `10``]``;`\nhasher`.``finalize_variable``(``&``mut` buf`)``.``unwrap``(``)``;`\n`assert_eq!``(`buf`,` `hex!``(```\"`2cc55c84e416924e6400`\"```)``)``;`\n`\n```\n\nOutput size set at compile time:\n```\n``use` `blake2`::````{`Blake2b`,` Digest`,` `digest`::```consts`::```U10````}```;`\n`use` `hex_literal`::``hex`;`\n`type` `Blake2b80` `=` `Blake2b`<`U10`>```;`\n`let` `mut` hasher `=` `Blake2b80`::``new`(``)``;`\nhasher`.``update``(```b``\"`my_input`\"```)``;`\n`let` res `=` hasher`.``finalize``(``)``;`\n`assert_eq!``(`res`,` `hex!``(```\"`2cc55c84e416924e6400`\"```)``)``;`\n`\n```\n\n## License\nThe crate is licensed under either of:\n  * Apache License, Version 2.0\u27e812\u27e9\n  * MIT license\u27e813\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~665KB  ~17K SLoC\n  * digest\u27e814\u27e9 0.11.0-rc.0+mac\u27e815\u27e9\n\n\n  * dev  base16ct\u27e816\u27e9+alloc\u27e817\u27e9\n  * dev  hex-literal\u27e818\u27e9 1.0\n\n\n#### Other features\u27e819\u27e9\n  * alloc\u27e820\u27e9\n  * reset\u27e821\u27e9\n  * size_opt\u27e822\u27e9\n  * zeroize\u27e823\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/blake2/versions: 22 releases\n\u27e82\u27e9 https://lib.rs/cryptography: Algorithms intended for securing data. - Cryptography\n\u27e83\u27e9 https://lib.rs/crates/blake2/rev: **3,568** crates (505 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/blake2.svg: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/blake2/badge.svg: ![Docs\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/hashes/actions/workflows/blake2.yml/badge.svg?branch=master: ![Build Status\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.85+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://blake2.net/: BLAKE2\n\u27e811\u27e9 https://github.com/RustCrypto/hashes#Examples: examples section\n\u27e812\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e813\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e814\u27e9 https://lib.rs/crates/digest: new - digest\n\u27e815\u27e9 https://lib.rs/crates/digest/features#feature-mac: +mac\n\u27e816\u27e9 https://lib.rs/crates/base16ct: 0.2 - base16ct\n\u27e817\u27e9 https://lib.rs/crates/base16ct/features#feature-alloc: +alloc\n\u27e818\u27e9 https://lib.rs/crates/hex-literal: new - hex-literal\n\u27e819\u27e9 https://lib.rs/crates/blake2/features: Other features\n\u27e820\u27e9 https://lib.rs/crates/blake2/features#feature-alloc: alloc\n\u27e821\u27e9 https://lib.rs/crates/blake2/features#feature-reset: reset\n\u27e822\u27e9 https://lib.rs/crates/blake2/features#feature-size_opt: size_opt\n\u27e823\u27e9 https://lib.rs/crates/blake2/features#feature-zeroize: zeroize\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5081,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118120.6531745"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libdigest-8ce78f1a0002dc00.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptlzeawhv/blake2-0.11.0-rc.0#blake2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blake2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libblake2-59fe8782972bb41a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libdigest-8ce78f1a0002dc00.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptlzeawhv/blake2-0.11.0-rc.0#blake2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blake2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptlzeawhv\\blake2-0.11.0-rc.0\\target\\debug\\deps\\libblake2-78ab6272fa404e3b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 11
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "blake2",
          "version": "0.11.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\n[Settings](https://docs.rs/blake2/latest/settings.html)\n[Help](https://docs.rs/blake2/latest/help.html)\nSummary[Source](https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172)\nExpand description\nAn implementation of the [BLAKE2](https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\)#BLAKE2) hash functions.\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#usage)Usage\n[`Blake2b512`](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\") and [`Blake2s256`](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\") can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n### [\u00a7](https://docs.rs/blake2/latest/blake2/#variable-output-size)Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#acknowledgment)Acknowledgment\nBased on the [blake2-rfc](https://github.com/cesarb/blake2-rfc) crate.\n## Re-exports[\u00a7](https://docs.rs/blake2/latest/blake2/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/blake2/latest/blake2/#structs)\n\n[Blake2bMac](https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html \"struct blake2::Blake2bMac\")\n    Blake2b MAC function\n\n[Blake2bVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html \"struct blake2::Blake2bVarCore\")\n    Blake2b instance with a variable output.\n\n[Blake2sMac](https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html \"struct blake2::Blake2sMac\")\n    Blake2s MAC function\n\n[Blake2sVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html \"struct blake2::Blake2sVarCore\")\n    Blake2s instance with a variable output.\n## Traits[\u00a7](https://docs.rs/blake2/latest/blake2/#traits)\n\n[Digest](https://docs.rs/blake2/latest/blake2/trait.Digest.html \"trait blake2::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases[\u00a7](https://docs.rs/blake2/latest/blake2/#types)\n\n[Blake2b](https://docs.rs/blake2/latest/blake2/type.Blake2b.html \"type blake2::Blake2b\")\n    BLAKE2b generic over output size.\n\n[Blake2b512](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\")\n    BLAKE2b-512 hasher state.\n\n[Blake2bCore](https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html \"type blake2::Blake2bCore\")\n    Core hasher state of BLAKE2b generic over output size.\n\n[Blake2bMac512](https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html \"type blake2::Blake2bMac512\")\n    BLAKE2b-512 MAC state.\n\n[Blake2bVar](https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html \"type blake2::Blake2bVar\")\n    BLAKE2b which allows to choose output size at runtime.\n\n[Blake2s](https://docs.rs/blake2/latest/blake2/type.Blake2s.html \"type blake2::Blake2s\")\n    BLAKE2s generic over output size.\n\n[Blake2s256](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\")\n    BLAKE2s-256 hasher state.\n\n[Blake2sCore](https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html \"type blake2::Blake2sCore\")\n    Core hasher state of BLAKE2s generic over output size.\n\n[Blake2sMac256](https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html \"type blake2::Blake2sMac256\")\n    BLAKE2s-256 MAC state.\n\n[Blake2sVar](https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html \"type blake2::Blake2sVar\")\n    BLAKE2s which allows to choose output size at runtime.\n",
            "markdown_with_citations": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the BLAKE2\u27e84\u27e9#BLAKE2) hash functions.\n## \u00a7\u27e85\u27e9Usage\n`Blake2b512`\u27e86\u27e9 and `Blake2s256`\u27e87\u27e9 can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see RustCrypto/hashes\u27e88\u27e9 readme.\n### \u00a7\u27e89\u27e9Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## \u00a7\u27e810\u27e9Acknowledgment\nBased on the blake2-rfc\u27e811\u27e9 crate.\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nBlake2bMac\u27e814\u27e9\n    Blake2b MAC function\n\nBlake2bVarCore\u27e815\u27e9\n    Blake2b instance with a variable output.\n\nBlake2sMac\u27e816\u27e9\n    Blake2s MAC function\n\nBlake2sVarCore\u27e817\u27e9\n    Blake2s instance with a variable output.\n## Traits\u00a7\u27e818\u27e9\n\nDigest\u27e819\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases\u00a7\u27e820\u27e9\n\nBlake2b\u27e821\u27e9\n    BLAKE2b generic over output size.\n\nBlake2b512\u27e86\u27e9\n    BLAKE2b-512 hasher state.\n\nBlake2bCore\u27e822\u27e9\n    Core hasher state of BLAKE2b generic over output size.\n\nBlake2bMac512\u27e823\u27e9\n    BLAKE2b-512 MAC state.\n\nBlake2bVar\u27e824\u27e9\n    BLAKE2b which allows to choose output size at runtime.\n\nBlake2s\u27e825\u27e9\n    BLAKE2s generic over output size.\n\nBlake2s256\u27e87\u27e9\n    BLAKE2s-256 hasher state.\n\nBlake2sCore\u27e826\u27e9\n    Core hasher state of BLAKE2s generic over output size.\n\nBlake2sMac256\u27e827\u27e9\n    BLAKE2s-256 MAC state.\n\nBlake2sVar\u27e828\u27e9\n    BLAKE2s which allows to choose output size at runtime.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/blake2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/blake2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\: BLAKE2\n\u27e85\u27e9 https://docs.rs/blake2/latest/blake2/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b512.html: type blake2::Blake2b512 - `Blake2b512`\n\u27e87\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s256.html: type blake2::Blake2s256 - `Blake2s256`\n\u27e88\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e89\u27e9 https://docs.rs/blake2/latest/blake2/#variable-output-size: \u00a7\n\u27e810\u27e9 https://docs.rs/blake2/latest/blake2/#acknowledgment: \u00a7\n\u27e811\u27e9 https://github.com/cesarb/blake2-rfc: blake2-rfc\n\u27e812\u27e9 https://docs.rs/blake2/latest/blake2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/blake2/latest/blake2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html: struct blake2::Blake2bMac - Blake2bMac\n\u27e815\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html: struct blake2::Blake2bVarCore - Blake2bVarCore\n\u27e816\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html: struct blake2::Blake2sMac - Blake2sMac\n\u27e817\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html: struct blake2::Blake2sVarCore - Blake2sVarCore\n\u27e818\u27e9 https://docs.rs/blake2/latest/blake2/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/blake2/latest/blake2/trait.Digest.html: trait blake2::Digest - Digest\n\u27e820\u27e9 https://docs.rs/blake2/latest/blake2/#types: \u00a7\n\u27e821\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b.html: type blake2::Blake2b - Blake2b\n\u27e822\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html: type blake2::Blake2bCore - Blake2bCore\n\u27e823\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html: type blake2::Blake2bMac512 - Blake2bMac512\n\u27e824\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html: type blake2::Blake2bVar - Blake2bVar\n\u27e825\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s.html: type blake2::Blake2s - Blake2s\n\u27e826\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html: type blake2::Blake2sCore - Blake2sCore\n\u27e827\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html: type blake2::Blake2sMac256 - Blake2sMac256\n\u27e828\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html: type blake2::Blake2sVar - Blake2sVar\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "blake2",
          "version": "0.11.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\n[Settings](https://docs.rs/blake2/latest/settings.html)\n[Help](https://docs.rs/blake2/latest/help.html)\nSummary[Source](https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172)\nExpand description\nAn implementation of the [BLAKE2](https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\)#BLAKE2) hash functions.\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#usage)Usage\n[`Blake2b512`](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\") and [`Blake2s256`](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\") can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes](https://github.com/RustCrypto/hashes) readme.\n### [\u00a7](https://docs.rs/blake2/latest/blake2/#variable-output-size)Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## [\u00a7](https://docs.rs/blake2/latest/blake2/#acknowledgment)Acknowledgment\nBased on the [blake2-rfc](https://github.com/cesarb/blake2-rfc) crate.\n## Re-exports[\u00a7](https://docs.rs/blake2/latest/blake2/#reexports)\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs[\u00a7](https://docs.rs/blake2/latest/blake2/#structs)\n\n[Blake2bMac](https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html \"struct blake2::Blake2bMac\")\n    Blake2b MAC function\n\n[Blake2bVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html \"struct blake2::Blake2bVarCore\")\n    Blake2b instance with a variable output.\n\n[Blake2sMac](https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html \"struct blake2::Blake2sMac\")\n    Blake2s MAC function\n\n[Blake2sVarCore](https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html \"struct blake2::Blake2sVarCore\")\n    Blake2s instance with a variable output.\n## Traits[\u00a7](https://docs.rs/blake2/latest/blake2/#traits)\n\n[Digest](https://docs.rs/blake2/latest/blake2/trait.Digest.html \"trait blake2::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases[\u00a7](https://docs.rs/blake2/latest/blake2/#types)\n\n[Blake2b](https://docs.rs/blake2/latest/blake2/type.Blake2b.html \"type blake2::Blake2b\")\n    BLAKE2b generic over output size.\n\n[Blake2b512](https://docs.rs/blake2/latest/blake2/type.Blake2b512.html \"type blake2::Blake2b512\")\n    BLAKE2b-512 hasher state.\n\n[Blake2bCore](https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html \"type blake2::Blake2bCore\")\n    Core hasher state of BLAKE2b generic over output size.\n\n[Blake2bMac512](https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html \"type blake2::Blake2bMac512\")\n    BLAKE2b-512 MAC state.\n\n[Blake2bVar](https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html \"type blake2::Blake2bVar\")\n    BLAKE2b which allows to choose output size at runtime.\n\n[Blake2s](https://docs.rs/blake2/latest/blake2/type.Blake2s.html \"type blake2::Blake2s\")\n    BLAKE2s generic over output size.\n\n[Blake2s256](https://docs.rs/blake2/latest/blake2/type.Blake2s256.html \"type blake2::Blake2s256\")\n    BLAKE2s-256 hasher state.\n\n[Blake2sCore](https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html \"type blake2::Blake2sCore\")\n    Core hasher state of BLAKE2s generic over output size.\n\n[Blake2sMac256](https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html \"type blake2::Blake2sMac256\")\n    BLAKE2s-256 MAC state.\n\n[Blake2sVar](https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html \"type blake2::Blake2sVar\")\n    BLAKE2s which allows to choose output size at runtime.\n",
            "markdown_with_citations": "[](https://docs.rs/blake2/latest/blake2/all.html \"show sidebar\")\n# Crate blake2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn implementation of the BLAKE2\u27e84\u27e9#BLAKE2) hash functions.\n## \u00a7\u27e85\u27e9Usage\n`Blake2b512`\u27e86\u27e9 and `Blake2s256`\u27e87\u27e9 can be used in the following way:\n```\nuse blake2::{Blake2b512, Blake2s256, Digest};\nuse hex_literal::hex;\n// create a Blake2b512 object\nlet mut hasher = Blake2b512::new();\n// write input message\nhasher.update(b\"hello world\");\n// read hash digest and consume hasher\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  021ced8799296ceca557832ab941a50b4a11f83478cf141f51f933f653ab9fbc\n  c05a037cddbed06e309bf334942c4e58cdf1a46e237911ccd7fcf9787cbc7fd0\n\")[..]);\n// same example for Blake2s256:\nlet mut hasher = Blake2s256::new();\nhasher.update(b\"hello world\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"\n  9aec6806794561107e594b1f6a8a6b0c92a0cba9acf5e5e93cca06f781813b0b\n\")[..]);\n```\n\nAlso see RustCrypto/hashes\u27e88\u27e9 readme.\n### \u00a7\u27e89\u27e9Variable output size\nThis implementation supports run and compile time variable sizes.\nRun time variable output example:\n```\nuse blake2::Blake2bVar;\nuse blake2::digest::{Update, VariableOutput};\nuse hex_literal::hex;\nlet mut hasher = Blake2bVar::new(10).unwrap();\nhasher.update(b\"my_input\");\nlet mut buf = [0u8; 10];\nhasher.finalize_variable(&mut buf).unwrap();\nassert_eq!(buf, hex!(\"2cc55c84e416924e6400\"));\n```\n\nCompile time variable output example:\n```\nuse blake2::{Blake2b, Digest, digest::consts::U10};\nuse hex_literal::hex;\ntype Blake2b80 = Blake2b<U10>;\nlet mut hasher = Blake2b80::new();\nhasher.update(b\"my_input\");\nlet res = hasher.finalize();\nassert_eq!(res[..], hex!(\"2cc55c84e416924e6400\")[..]);\n```\n\n## \u00a7\u27e810\u27e9Acknowledgment\nBased on the blake2-rfc\u27e811\u27e9 crate.\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use digest[](https://docs.rs/digest/0.10.7/x86_64-unknown-linux-gnu/digest/index.html \"mod digest\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nBlake2bMac\u27e814\u27e9\n    Blake2b MAC function\n\nBlake2bVarCore\u27e815\u27e9\n    Blake2b instance with a variable output.\n\nBlake2sMac\u27e816\u27e9\n    Blake2s MAC function\n\nBlake2sVarCore\u27e817\u27e9\n    Blake2s instance with a variable output.\n## Traits\u00a7\u27e818\u27e9\n\nDigest\u27e819\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n## Type Aliases\u00a7\u27e820\u27e9\n\nBlake2b\u27e821\u27e9\n    BLAKE2b generic over output size.\n\nBlake2b512\u27e86\u27e9\n    BLAKE2b-512 hasher state.\n\nBlake2bCore\u27e822\u27e9\n    Core hasher state of BLAKE2b generic over output size.\n\nBlake2bMac512\u27e823\u27e9\n    BLAKE2b-512 MAC state.\n\nBlake2bVar\u27e824\u27e9\n    BLAKE2b which allows to choose output size at runtime.\n\nBlake2s\u27e825\u27e9\n    BLAKE2s generic over output size.\n\nBlake2s256\u27e87\u27e9\n    BLAKE2s-256 hasher state.\n\nBlake2sCore\u27e826\u27e9\n    Core hasher state of BLAKE2s generic over output size.\n\nBlake2sMac256\u27e827\u27e9\n    BLAKE2s-256 MAC state.\n\nBlake2sVar\u27e828\u27e9\n    BLAKE2s which allows to choose output size at runtime.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/blake2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/blake2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/blake2/latest/src/blake2/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://en.wikipedia.org/wiki/BLAKE_\\(hash_function\\: BLAKE2\n\u27e85\u27e9 https://docs.rs/blake2/latest/blake2/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b512.html: type blake2::Blake2b512 - `Blake2b512`\n\u27e87\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s256.html: type blake2::Blake2s256 - `Blake2s256`\n\u27e88\u27e9 https://github.com/RustCrypto/hashes: RustCrypto/hashes\n\u27e89\u27e9 https://docs.rs/blake2/latest/blake2/#variable-output-size: \u00a7\n\u27e810\u27e9 https://docs.rs/blake2/latest/blake2/#acknowledgment: \u00a7\n\u27e811\u27e9 https://github.com/cesarb/blake2-rfc: blake2-rfc\n\u27e812\u27e9 https://docs.rs/blake2/latest/blake2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/blake2/latest/blake2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bMac.html: struct blake2::Blake2bMac - Blake2bMac\n\u27e815\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2bVarCore.html: struct blake2::Blake2bVarCore - Blake2bVarCore\n\u27e816\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sMac.html: struct blake2::Blake2sMac - Blake2sMac\n\u27e817\u27e9 https://docs.rs/blake2/latest/blake2/struct.Blake2sVarCore.html: struct blake2::Blake2sVarCore - Blake2sVarCore\n\u27e818\u27e9 https://docs.rs/blake2/latest/blake2/#traits: \u00a7\n\u27e819\u27e9 https://docs.rs/blake2/latest/blake2/trait.Digest.html: trait blake2::Digest - Digest\n\u27e820\u27e9 https://docs.rs/blake2/latest/blake2/#types: \u00a7\n\u27e821\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2b.html: type blake2::Blake2b - Blake2b\n\u27e822\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bCore.html: type blake2::Blake2bCore - Blake2bCore\n\u27e823\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bMac512.html: type blake2::Blake2bMac512 - Blake2bMac512\n\u27e824\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2bVar.html: type blake2::Blake2bVar - Blake2bVar\n\u27e825\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2s.html: type blake2::Blake2s - Blake2s\n\u27e826\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sCore.html: type blake2::Blake2sCore - Blake2sCore\n\u27e827\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sMac256.html: type blake2::Blake2sMac256 - Blake2sMac256\n\u27e828\u27e9 https://docs.rs/blake2/latest/blake2/type.Blake2sVar.html: type blake2::Blake2sVar - Blake2sVar\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `blake2` crate provides an efficient Rust implementation of the BLAKE2 cryptographic hash functions, including BLAKE2b and BLAKE2s variants. It supports fixed and variable output sizes at both compile-time and runtime, and includes functionality for Message Authentication Code (MAC) generation. The crate is highly flexible, offering convenience traits and type aliases for common use cases.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Variable Output Size\n\u2705 Factual: The `blake2` crate supports both compile-time and runtime variable output sizes, allowing developers to customize the hash output length for specific use cases.  \n\u274c Counterfactual: The `blake2` crate only supports fixed output sizes, such as 512 bits for BLAKE2b and 256 bits for BLAKE2s, with no option for customization.\n\n---\n\n### Pair 2: Hashing Algorithm Support\n\u2705 Factual: The `blake2` crate provides implementations for both BLAKE2b and BLAKE2s hashing algorithms, optimized for different use cases such as high-performance cryptographic hashing and lightweight environments.  \n\u274c Counterfactual: The `blake2` crate includes implementations for BLAKE3, the successor to BLAKE2, alongside BLAKE2b and BLAKE2s.\n\n---\n\n### Pair 3: Performance Characteristics\n\u2705 Factual: The `blake2` crate is designed to be highly performant and can process input data efficiently, making it suitable for cryptographic applications like password hashing and data integrity checks.  \n\u274c Counterfactual: The `blake2` crate is primarily designed for general-purpose hashing and does not meet cryptographic standards for secure applications.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-c0e26b2f-0945797d-1751264329",
      "timestamp": "2025-06-30T06:18:49.538416+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]