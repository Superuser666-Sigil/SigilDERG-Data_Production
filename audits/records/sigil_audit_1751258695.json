[
  {
    "execution_id": "exec-44f44fe0-422ea424-1751258691",
    "timestamp": "2025-06-30T04:44:51.716821+00:00",
    "sacred_chain": {
      "input_data": "async-once",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-once' -> 'async-once'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-once",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-once",
            "title": "async_once v0.2.6",
            "content": {
              "raw_markdown": "#  async_once v0.2.6\nasync once tool for lazy_static \n  * [ #lazy_static ](https://crates.io/keywords/lazy_static)\n  * [ #async ](https://crates.io/keywords/async)\n\n\n  * [ Readme ](https://crates.io/crates/async-once)\n  * [ 8 Versions ](https://crates.io/crates/async-once/versions)\n  * [ Dependencies ](https://crates.io/crates/async-once/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-once/reverse_dependencies)\n\n\n## Metadata\nover 3 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n4.57 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async_once\nOr add the following line to your Cargo.toml:\nasync_once = \"0.2.6\"\n## Repository\n[ github.com/hjiayz/async_once ](https://github.com/hjiayz/async_once)\n## Owners\n[ Report crate ](https://crates.io/support?crate=async_once&inquire=crate-violation)\n### Stats Overview\n5,914,952 Downloads all time\n8 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async_once v0.2.6\nasync once tool for lazy_static \n  *  #lazy_static \u27e81\u27e9\n  *  #async \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  8 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\nover 3 years ago \n2018 edition \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n4.57 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async_once\nOr add the following line to your Cargo.toml:\nasync_once = \"0.2.6\"\n## Repository\n github.com/hjiayz/async_once \u27e89\u27e9\n## Owners\n Report crate \u27e810\u27e9\n### Stats Overview\n5,914,952 Downloads all time\n8 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/lazy_static:  #lazy_static \n\u27e82\u27e9 https://crates.io/keywords/async:  #async \n\u27e83\u27e9 https://crates.io/crates/async-once:  Readme \n\u27e84\u27e9 https://crates.io/crates/async-once/versions:  8 Versions \n\u27e85\u27e9 https://crates.io/crates/async-once/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/async-once/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://github.com/hjiayz/async_once:  github.com/hjiayz/async_once \n\u27e810\u27e9 https://crates.io/support?crate=async_once&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1106,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112481.0363359"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-once",
            "title": "Crate async_onceCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\n[Settings](https://docs.rs/async_once/latest/settings.html)\n[Help](https://docs.rs/async_once/latest/help.html)\nSummary[Source](https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212)\nExpand description\n### [\u00a7](https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static)async once tool for lazy_static\n## [\u00a7](https://docs.rs/async_once/latest/async_once/#examples)Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### [\u00a7](https://docs.rs/async_once/latest/async_once/#run-tests)run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs[\u00a7](https://docs.rs/async_once/latest/async_once/#structs)\n\n[AsyncOnce](https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html \"struct async_once::AsyncOnce\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n### \u00a7\u27e84\u27e9async once tool for lazy_static\n## \u00a7\u27e85\u27e9Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### \u00a7\u27e86\u27e9run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nAsyncOnce\u27e88\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async_once/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async_once/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static: \u00a7\n\u27e85\u27e9 https://docs.rs/async_once/latest/async_once/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/async_once/latest/async_once/#run-tests: \u00a7\n\u27e87\u27e9 https://docs.rs/async_once/latest/async_once/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html: struct async_once::AsyncOnce - AsyncOnce\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1156,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112481.7950159"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-once",
            "title": "Untitled",
            "content": {
              "raw_markdown": "Page not found\nThere is no crate named \u201casync-once\u201d on lib.rs. You can also try [searching with DuckDuckGo](https://duckduckgo.com/?q=site%3Alib.rs+async%20once).\n  1. #### [once_cell Single assignment cells and lazy values v1.21.3 22.8**M** ](https://lib.rs/crates/once_cell)\n  2. #### [tokio-tar A Rust implementation of an async TAR file reader and writer. This library does not currently handle compression, but it is abstract over all I/O readers and writers. Additionally, great lengths are taken to ensure that the entire contents are never required to be entirely resident in memory all at once. v0.3.1 501**K** ](https://lib.rs/crates/tokio-tar)\n  3. #### [async-lock Async synchronization primitives v3.4.0 5.8**M** ](https://lib.rs/crates/async-lock)\n  4. #### [async-once-cell Async single assignment cells and lazy values v0.5.4 102**K** ](https://lib.rs/crates/async-once-cell)\n  5. #### [async_once async once tool for lazy_static v0.2.6 98**K** ](https://lib.rs/crates/async_once)\n  6. #### [async-memcached An Tokio-based memcached client for Rust v0.5.0 10**K** ](https://lib.rs/crates/async-memcached)\n  7. #### [batch-channel async channel that reduces overhead by reading and writing many values at once v0.4.3 ](https://lib.rs/crates/batch-channel)\n  8. #### [poly-once A thread-safe cell providing async and sync initialization primitives similar to OnceLock v1.0.0 ](https://lib.rs/crates/poly-once)\n\n\n[See more results](https://lib.rs/search?q=async%20once) or [browse all categories](https://lib.rs/).\n",
              "markdown_with_citations": "Page not found\nThere is no crate named \u201casync-once\u201d on lib.rs. You can also try searching with DuckDuckGo\u27e81\u27e9.\n  1. #### once_cell Single assignment cells and lazy values v1.21.3 22.8**M** \u27e82\u27e9\n  2. #### tokio-tar A Rust implementation of an async TAR file reader and writer. This library does not currently handle compression, but it is abstract over all I/O readers and writers. Additionally, great lengths are taken to ensure that the entire contents are never required to be entirely resident in memory all at once. v0.3.1 501**K** \u27e83\u27e9\n  3. #### async-lock Async synchronization primitives v3.4.0 5.8**M** \u27e84\u27e9\n  4. #### async-once-cell Async single assignment cells and lazy values v0.5.4 102**K** \u27e85\u27e9\n  5. #### async_once async once tool for lazy_static v0.2.6 98**K** \u27e86\u27e9\n  6. #### async-memcached An Tokio-based memcached client for Rust v0.5.0 10**K** \u27e87\u27e9\n  7. #### batch-channel async channel that reduces overhead by reading and writing many values at once v0.4.3 \u27e88\u27e9\n  8. #### poly-once A thread-safe cell providing async and sync initialization primitives similar to OnceLock v1.0.0 \u27e89\u27e9\n\n\nSee more results\u27e810\u27e9 or browse all categories\u27e811\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://duckduckgo.com/?q=site%3Alib.rs+async%20once: searching with DuckDuckGo\n\u27e82\u27e9 https://lib.rs/crates/once_cell: once_cell Single assignment cells and lazy values v1.21.3 22.8**M** \n\u27e83\u27e9 https://lib.rs/crates/tokio-tar: tokio-tar A Rust implementation of an async TAR file reader and writer. This library does not currently handle compression, but it is abstract over all I/O readers and writers. Additionally, great lengths are taken to ensure that the entire contents are never required to be entirely resident in memory all at once. v0.3.1 501**K** \n\u27e84\u27e9 https://lib.rs/crates/async-lock: async-lock Async synchronization primitives v3.4.0 5.8**M** \n\u27e85\u27e9 https://lib.rs/crates/async-once-cell: async-once-cell Async single assignment cells and lazy values v0.5.4 102**K** \n\u27e86\u27e9 https://lib.rs/crates/async_once: async_once async once tool for lazy_static v0.2.6 98**K** \n\u27e87\u27e9 https://lib.rs/crates/async-memcached: async-memcached An Tokio-based memcached client for Rust v0.5.0 10**K** \n\u27e88\u27e9 https://lib.rs/crates/batch-channel: batch-channel async channel that reduces overhead by reading and writing many values at once v0.4.3 \n\u27e89\u27e9 https://lib.rs/crates/poly-once: poly-once A thread-safe cell providing async and sync initialization primitives similar to OnceLock v1.0.0 \n\u27e810\u27e9 https://lib.rs/search?q=async%20once: See more results\n\u27e811\u27e9 https://lib.rs/: browse all categories\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1528,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112482.7708051"
          }
        },
        "crate_analysis": {
          "status": "error",
          "note": "Failed to download or extract crate."
        },
        "crate_metadata": {
          "name": "async-once",
          "version": "0.2.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\n[Settings](https://docs.rs/async_once/latest/settings.html)\n[Help](https://docs.rs/async_once/latest/help.html)\nSummary[Source](https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212)\nExpand description\n### [\u00a7](https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static)async once tool for lazy_static\n## [\u00a7](https://docs.rs/async_once/latest/async_once/#examples)Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### [\u00a7](https://docs.rs/async_once/latest/async_once/#run-tests)run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs[\u00a7](https://docs.rs/async_once/latest/async_once/#structs)\n\n[AsyncOnce](https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html \"struct async_once::AsyncOnce\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n### \u00a7\u27e84\u27e9async once tool for lazy_static\n## \u00a7\u27e85\u27e9Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### \u00a7\u27e86\u27e9run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nAsyncOnce\u27e88\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async_once/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async_once/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static: \u00a7\n\u27e85\u27e9 https://docs.rs/async_once/latest/async_once/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/async_once/latest/async_once/#run-tests: \u00a7\n\u27e87\u27e9 https://docs.rs/async_once/latest/async_once/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html: struct async_once::AsyncOnce - AsyncOnce\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-once",
          "version": "0.2.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\n[Settings](https://docs.rs/async_once/latest/settings.html)\n[Help](https://docs.rs/async_once/latest/help.html)\nSummary[Source](https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212)\nExpand description\n### [\u00a7](https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static)async once tool for lazy_static\n## [\u00a7](https://docs.rs/async_once/latest/async_once/#examples)Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### [\u00a7](https://docs.rs/async_once/latest/async_once/#run-tests)run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs[\u00a7](https://docs.rs/async_once/latest/async_once/#structs)\n\n[AsyncOnce](https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html \"struct async_once::AsyncOnce\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async_once/latest/async_once/all.html \"show sidebar\")\n# Crate async_onceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n### \u00a7\u27e84\u27e9async once tool for lazy_static\n## \u00a7\u27e85\u27e9Examples\n```\n  use lazy_static::lazy_static;\n  use tokio::runtime::Builder;\n  use async_once::AsyncOnce;\n  lazy_static!{\n    static ref FOO : AsyncOnce<u32> = AsyncOnce::new(async{\n      1\n    });\n  }\n  let rt = Builder::new_current_thread().build().unwrap();\n  rt.block_on(async {\n    assert_eq!(FOO.get().await , &1)\n  })\n```\n\n#### \u00a7\u27e86\u27e9run tests\n```\n  cargo test\n  wasm-pack test --headless --chrome --firefox\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nAsyncOnce\u27e88\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async_once/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async_once/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async_once/latest/src/async_once/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/async_once/latest/async_once/#async-once-tool-for-lazy_static: \u00a7\n\u27e85\u27e9 https://docs.rs/async_once/latest/async_once/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/async_once/latest/async_once/#run-tests: \u00a7\n\u27e87\u27e9 https://docs.rs/async_once/latest/async_once/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/async_once/latest/async_once/struct.AsyncOnce.html: struct async_once::AsyncOnce - AsyncOnce\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-once` crate provides an `AsyncOnce` utility for initializing asynchronous values lazily, similar to `lazy_static` but designed for async contexts. It ensures that the async initialization logic runs only once and caches the result for subsequent accesses. This is particularly useful for scenarios requiring shared, lazily-initialized async resources.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 4.0,
          "factual_counterfactual": "### Pair 1: Lazy Initialization and Async Execution  \n\u2705 Factual: The `async-once` crate provides a mechanism for lazy initialization of asynchronous values, ensuring the initialization logic is executed only once, even in concurrent contexts.  \n\u274c Counterfactual: The `async-once` crate allows asynchronous values to be initialized multiple times if accessed concurrently, providing separate results for each access.  \n\n---\n\n### Pair 2: Integration with `lazy_static`  \n\u2705 Factual: The `async-once` crate integrates seamlessly with `lazy_static`, enabling developers to define asynchronous values that are initialized lazily and accessed safely across threads.  \n\u274c Counterfactual: The `async-once` crate is incompatible with `lazy_static` and requires developers to manually implement lazy initialization logic for asynchronous values.  \n\n---\n\n### Pair 3: Testing and Compatibility  \n\u2705 Factual: The `async-once` crate supports testing in both native and WebAssembly environments, including headless browser testing with `wasm-pack`.  \n\u274c Counterfactual: The `async-once` crate only supports testing in native environments and does not work with WebAssembly or browser-based testing frameworks.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-44f44fe0-422ea424-1751258691",
      "timestamp": "2025-06-30T04:44:51.716821+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]