[
  {
    "execution_id": "exec-04e9c0db-a06d270c-1751257898",
    "timestamp": "2025-06-30T04:31:38.192840+00:00",
    "sacred_chain": {
      "input_data": "iron",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'iron' -> 'iron'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "iron",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/iron",
            "title": "iron v0.6.1",
            "content": {
              "raw_markdown": "#  iron v0.6.1\nExtensible, Concurrency Focused Web Development in Rust. \n  * [ Readme ](https://crates.io/crates/iron)\n  * [ 54 Versions ](https://crates.io/crates/iron/versions)\n  * [ Dependencies ](https://crates.io/crates/iron/dependencies)\n  * [ Dependents ](https://crates.io/crates/iron/reverse_dependencies)\n\n\n## Metadata\nalmost 6 years ago \n[ MIT ](https://choosealicense.com/licenses/mit)\n31 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add iron\nOr add the following line to your Cargo.toml:\niron = \"0.6.1\"\n## Repository\n[ github.com/iron/iron ](https://github.com/iron/iron)\n## Owners\n[ Report crate ](https://crates.io/support?crate=iron&inquire=crate-violation)\n### Stats Overview\n1,759,082 Downloads all time\n54 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  iron v0.6.1\nExtensible, Concurrency Focused Web Development in Rust. \n  *  Readme \u27e81\u27e9\n  *  54 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nalmost 6 years ago \n MIT \u27e85\u27e9\n31 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add iron\nOr add the following line to your Cargo.toml:\niron = \"0.6.1\"\n## Repository\n github.com/iron/iron \u27e86\u27e9\n## Owners\n Report crate \u27e87\u27e9\n### Stats Overview\n1,759,082 Downloads all time\n54 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/iron:  Readme \n\u27e82\u27e9 https://crates.io/crates/iron/versions:  54 Versions \n\u27e83\u27e9 https://crates.io/crates/iron/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/iron/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://github.com/iron/iron:  github.com/iron/iron \n\u27e87\u27e9 https://crates.io/support?crate=iron&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 2.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 877,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111688.0131743"
          },
          "docs_rs": {
            "url": "https://docs.rs/iron",
            "title": "Crate ironCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\n[Settings](https://docs.rs/iron/latest/settings.html)\n[Help](https://docs.rs/iron/latest/help.html)\nSummary[Source](https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172)\nExpand description\nThe main crate for Iron.\n### [\u00a7](https://docs.rs/iron/latest/iron/#overview)Overview\nIron is a high level web framework built in and for Rust, built on [hyper](https://github.com/hyperium/hyper). Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### [\u00a7](https://docs.rs/iron/latest/iron/#hello-world)Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### [\u00a7](https://docs.rs/iron/latest/iron/#design-philosophy)Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports[\u00a7](https://docs.rs/iron/latest/iron/#reexports)\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules[\u00a7](https://docs.rs/iron/latest/iron/#modules)\n\n[error](https://docs.rs/iron/latest/iron/error/index.html \"mod iron::error\")\n    Iron\u2019s error type and associated utilities.\n\n[headers](https://docs.rs/iron/latest/iron/headers/index.html \"mod iron::headers\")\n    Headers container, and common header fields.\n\n[method](https://docs.rs/iron/latest/iron/method/index.html \"mod iron::method\")\n    HTTP Methods\n\n[middleware](https://docs.rs/iron/latest/iron/middleware/index.html \"mod iron::middleware\")\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\n[mime](https://docs.rs/iron/latest/iron/mime/index.html \"mod iron::mime\")\n    Re-exporting the mime crate, for convenience.\n\n[modifier](https://docs.rs/iron/latest/iron/modifier/index.html \"mod iron::modifier\")\n    Re-exports from the Modifier crate.\n\n[modifiers](https://docs.rs/iron/latest/iron/modifiers/index.html \"mod iron::modifiers\")\n    This module defines a series of convenience modifiers for changing Responses.\n\n[prelude](https://docs.rs/iron/latest/iron/prelude/index.html \"mod iron::prelude\")\n    A module meant to be glob imported when using Iron.\n\n[request](https://docs.rs/iron/latest/iron/request/index.html \"mod iron::request\")\n    Iron\u2019s HTTP Request representation and associated methods.\n\n[response](https://docs.rs/iron/latest/iron/response/index.html \"mod iron::response\")\n    Iron\u2019s HTTP Response representation and associated methods.\n\n[status](https://docs.rs/iron/latest/iron/status/index.html \"mod iron::status\")\n    Status Codes\n\n[typemap](https://docs.rs/iron/latest/iron/typemap/index.html \"mod iron::typemap\")\n    Re-exports from the `TypeMap` crate.\n\n[url](https://docs.rs/iron/latest/iron/url/index.html \"mod iron::url\")\n    Re-exports from the url crate.\n## Macros[\u00a7](https://docs.rs/iron/latest/iron/#macros)\n\n[headers](https://docs.rs/iron/latest/iron/macro.headers.html \"macro iron::headers\")\n\n\n[iexpect](https://docs.rs/iron/latest/iron/macro.iexpect.html \"macro iron::iexpect\")\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\n[itry](https://docs.rs/iron/latest/iron/macro.itry.html \"macro iron::itry\")\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs[\u00a7](https://docs.rs/iron/latest/iron/#structs)\n\n[Headers](https://docs.rs/iron/latest/iron/struct.Headers.html \"struct iron::Headers\")\n    A map of header fields on requests and responses.\n\n[Iron](https://docs.rs/iron/latest/iron/struct.Iron.html \"struct iron::Iron\")\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\n[Listening](https://docs.rs/iron/latest/iron/struct.Listening.html \"struct iron::Listening\")\n    A listening server, which can later be closed.\n\n[Protocol](https://docs.rs/iron/latest/iron/struct.Protocol.html \"struct iron::Protocol\")\n    Protocol used to serve content.\n\n[Timeouts](https://docs.rs/iron/latest/iron/struct.Timeouts.html \"struct iron::Timeouts\")\n    A settings struct containing a set of timeouts which can be applied to a server.\n\n[TypeMap](https://docs.rs/iron/latest/iron/struct.TypeMap.html \"struct iron::TypeMap\")\n    A map keyed by types.\n## Traits[\u00a7](https://docs.rs/iron/latest/iron/#traits)\n\n[Error](https://docs.rs/iron/latest/iron/trait.Error.html \"trait iron::Error\")\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n\n[Plugin](https://docs.rs/iron/latest/iron/trait.Plugin.html \"trait iron::Plugin\")\n    An interface for plugins that cache values between calls.\n\n[Set](https://docs.rs/iron/latest/iron/trait.Set.html \"trait iron::Set\")\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases[\u00a7](https://docs.rs/iron/latest/iron/#types)\n\n[IronResult](https://docs.rs/iron/latest/iron/type.IronResult.html \"type iron::IronResult\")\n    The Result alias used throughout Iron and in clients of Iron.\n",
              "markdown_with_citations": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe main crate for Iron.\n### \u00a7\u27e84\u27e9Overview\nIron is a high level web framework built in and for Rust, built on hyper\u27e85\u27e9. Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### \u00a7\u27e86\u27e9Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### \u00a7\u27e87\u27e9Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nerror\u27e810\u27e9\n    Iron\u2019s error type and associated utilities.\n\nheaders\u27e811\u27e9\n    Headers container, and common header fields.\n\nmethod\u27e812\u27e9\n    HTTP Methods\n\nmiddleware\u27e813\u27e9\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\nmime\u27e814\u27e9\n    Re-exporting the mime crate, for convenience.\n\nmodifier\u27e815\u27e9\n    Re-exports from the Modifier crate.\n\nmodifiers\u27e816\u27e9\n    This module defines a series of convenience modifiers for changing Responses.\n\nprelude\u27e817\u27e9\n    A module meant to be glob imported when using Iron.\n\nrequest\u27e818\u27e9\n    Iron\u2019s HTTP Request representation and associated methods.\n\nresponse\u27e819\u27e9\n    Iron\u2019s HTTP Response representation and associated methods.\n\nstatus\u27e820\u27e9\n    Status Codes\n\ntypemap\u27e821\u27e9\n    Re-exports from the `TypeMap` crate.\n\nurl\u27e822\u27e9\n    Re-exports from the url crate.\n## Macros\u00a7\u27e823\u27e9\n\nheaders\u27e824\u27e9\n\n\niexpect\u27e825\u27e9\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\nitry\u27e826\u27e9\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs\u00a7\u27e827\u27e9\n\nHeaders\u27e828\u27e9\n    A map of header fields on requests and responses.\n\nIron\u27e829\u27e9\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\nListening\u27e830\u27e9\n    A listening server, which can later be closed.\n\nProtocol\u27e831\u27e9\n    Protocol used to serve content.\n\nTimeouts\u27e832\u27e9\n    A settings struct containing a set of timeouts which can be applied to a server.\n\nTypeMap\u27e833\u27e9\n    A map keyed by types.\n## Traits\u00a7\u27e834\u27e9\n\nError\u27e835\u27e9\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in `Result<T, E>`\u27e836\u27e9.\n\nPlugin\u27e837\u27e9\n    An interface for plugins that cache values between calls.\n\nSet\u27e838\u27e9\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases\u00a7\u27e839\u27e9\n\nIronResult\u27e840\u27e9\n    The Result alias used throughout Iron and in clients of Iron.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/iron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/iron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://docs.rs/iron/latest/iron/#overview: \u00a7\n\u27e85\u27e9 https://github.com/hyperium/hyper: hyper\n\u27e86\u27e9 https://docs.rs/iron/latest/iron/#hello-world: \u00a7\n\u27e87\u27e9 https://docs.rs/iron/latest/iron/#design-philosophy: \u00a7\n\u27e88\u27e9 https://docs.rs/iron/latest/iron/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/iron/latest/iron/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/iron/latest/iron/error/index.html: mod iron::error - error\n\u27e811\u27e9 https://docs.rs/iron/latest/iron/headers/index.html: mod iron::headers - headers\n\u27e812\u27e9 https://docs.rs/iron/latest/iron/method/index.html: mod iron::method - method\n\u27e813\u27e9 https://docs.rs/iron/latest/iron/middleware/index.html: mod iron::middleware - middleware\n\u27e814\u27e9 https://docs.rs/iron/latest/iron/mime/index.html: mod iron::mime - mime\n\u27e815\u27e9 https://docs.rs/iron/latest/iron/modifier/index.html: mod iron::modifier - modifier\n\u27e816\u27e9 https://docs.rs/iron/latest/iron/modifiers/index.html: mod iron::modifiers - modifiers\n\u27e817\u27e9 https://docs.rs/iron/latest/iron/prelude/index.html: mod iron::prelude - prelude\n\u27e818\u27e9 https://docs.rs/iron/latest/iron/request/index.html: mod iron::request - request\n\u27e819\u27e9 https://docs.rs/iron/latest/iron/response/index.html: mod iron::response - response\n\u27e820\u27e9 https://docs.rs/iron/latest/iron/status/index.html: mod iron::status - status\n\u27e821\u27e9 https://docs.rs/iron/latest/iron/typemap/index.html: mod iron::typemap - typemap\n\u27e822\u27e9 https://docs.rs/iron/latest/iron/url/index.html: mod iron::url - url\n\u27e823\u27e9 https://docs.rs/iron/latest/iron/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/iron/latest/iron/macro.headers.html: macro iron::headers - headers\n\u27e825\u27e9 https://docs.rs/iron/latest/iron/macro.iexpect.html: macro iron::iexpect - iexpect\n\u27e826\u27e9 https://docs.rs/iron/latest/iron/macro.itry.html: macro iron::itry - itry\n\u27e827\u27e9 https://docs.rs/iron/latest/iron/#structs: \u00a7\n\u27e828\u27e9 https://docs.rs/iron/latest/iron/struct.Headers.html: struct iron::Headers - Headers\n\u27e829\u27e9 https://docs.rs/iron/latest/iron/struct.Iron.html: struct iron::Iron - Iron\n\u27e830\u27e9 https://docs.rs/iron/latest/iron/struct.Listening.html: struct iron::Listening - Listening\n\u27e831\u27e9 https://docs.rs/iron/latest/iron/struct.Protocol.html: struct iron::Protocol - Protocol\n\u27e832\u27e9 https://docs.rs/iron/latest/iron/struct.Timeouts.html: struct iron::Timeouts - Timeouts\n\u27e833\u27e9 https://docs.rs/iron/latest/iron/struct.TypeMap.html: struct iron::TypeMap - TypeMap\n\u27e834\u27e9 https://docs.rs/iron/latest/iron/#traits: \u00a7\n\u27e835\u27e9 https://docs.rs/iron/latest/iron/trait.Error.html: trait iron::Error - Error\n\u27e836\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result<T, E>`\n\u27e837\u27e9 https://docs.rs/iron/latest/iron/trait.Plugin.html: trait iron::Plugin - Plugin\n\u27e838\u27e9 https://docs.rs/iron/latest/iron/trait.Set.html: trait iron::Set - Set\n\u27e839\u27e9 https://docs.rs/iron/latest/iron/#types: \u00a7\n\u27e840\u27e9 https://docs.rs/iron/latest/iron/type.IronResult.html: type iron::IronResult - IronResult\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8039,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111688.7847696"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/iron",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [54 releases](https://lib.rs/crates/iron/versions)\nUses old Rust 2015\n0.6.1 |  Aug 14, 2019   \n---|---  \n0.6.0 |  Nov 5, 2017   \n0.5.1 |  Jan 13, 2017   \n0.4.0 |  Jul 4, 2016   \n0.0.5 |  Nov 25, 2014   \n#**38** in [#focused](https://lib.rs/keywords/focused)\nDownload history 2260/week @ 2024-11-08 2427/week @ 2024-11-15 3465/week @ 2024-11-22 3392/week @ 2024-11-29 3713/week @ 2024-12-06 4229/week @ 2024-12-13 2180/week @ 2024-12-20 1200/week @ 2024-12-27 2896/week @ 2025-01-03 5137/week @ 2025-01-10 3986/week @ 2025-01-17 3037/week @ 2025-01-24 6197/week @ 2025-01-31 6125/week @ 2025-02-07 2508/week @ 2025-02-14\n**15,417** downloads per month [This crate has lost popularity](https://lib.rs/crates/iron/rev)\n**MIT** license \n72KB  1K  SLoC\n# Iron\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://secure.travis-ci.org/iron/iron.svg?branch=master)](https://travis-ci.org/iron/iron) [](https://crates.io/crates/iron) [![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/iron/iron/master/LICENSE)\n> Extensible, Concurrency Focused Web Development in Rust.\n## Response Timer Example\n```\n``extern` `crate` iron`;`\n`extern` `crate` time`;`\n`use` `iron`::```prelude`::```*``;`\n`use` `iron`::````{`BeforeMiddleware`,` AfterMiddleware`,` typemap```}```;`\n`use` `time`::``precise_time_ns`;`\n``struct` ```ResponseTime```;`\n``impl` ```typemap`::``Key `for``` `ResponseTime` ````{` `type` `Value` `=` `u64``;` ```}```\n``impl` ``BeforeMiddleware `for``` `ResponseTime` ````{`\n  ``fn` `before`````(``&``self`, `req``:` `&``mut` Request```)```` ``->` `IronResult`<``(``)``>``` ```{`\n    req`.`extensions`.``insert`::````<`ResponseTime`>```(``precise_time_ns``(``)``)``;`\n    `Ok``(``(``)``)`\n  `}``\n```}```\n``impl` ``AfterMiddleware `for``` `ResponseTime` ````{`\n  ``fn` `after`````(``&``self`, `req``:` `&``mut` Request, `res``:` Response```)```` ``->` `IronResult`<`Response`>``` ```{`\n    `let` delta `=` `precise_time_ns``(``)` `-` `*`req`.`extensions`.``get`::````<`ResponseTime`>```(``)``.``unwrap``(``)``;`\n    `println!``(```\"`Request took: `{}` ms`\"```,` `(`delta `as` `f64``)` `/` `1000000.``0``)``;`\n    `Ok``(`res`)`\n  `}``\n```}```\n``fn` `hello_world`````(``_`: `&``mut` Request```)```` ``->` `IronResult`<`Response`>``` ````{`\n  `Ok``(``Response`::``with`(``(``iron`::```status`::``Ok`,` ``\"`Hello World`\"```)``)``)`\n```}```\n``fn` `main`````(````)``````{`\n  `let` `mut` chain `=` `Chain`::``new`(`hello_world`)``;`\n  chain`.``link_before``(`ResponseTime`)``;`\n  chain`.``link_after``(`ResponseTime`)``;`\n  `Iron`::``new`(`chain`)``.``http``(```\"`localhost:3000`\"```)``.``unwrap``(``)``;`\n```}```\n`\n```\n\n## Overview\nIron is a high level web framework built in and for Rust, built on [hyper](https://github.com/hyperium/hyper). Iron is designed to take advantage of Rust's greatest features - its excellent type system and its principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\nIron is 100% safe code:\n```\n```$``` rg unsafe src` `|` ``wc``\n    ``0```    0    0`\n`\n```\n\n## Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron's core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Performance\nIron averages [72,000+ requests per second for hello world](https://github.com/iron/iron/wiki/How-to-Benchmark-hello.rs-Example) and is mostly IO-bound, spending over 70% of its time in the kernel send-ing or recv-ing data.*\n* _Numbers from profiling on my OS X machine, your mileage may vary._\n## Core Extensions\nIron aims to fill a void in the Rust web stack - a high level framework that is _extensible_ and makes organizing complex server code easy.\nExtensions are painless to build. Some important ones are:\nMiddleware:\n  * [Routing](https://github.com/iron/router)\n  * [Mounting](https://github.com/iron/mount)\n  * [Static File Serving](https://github.com/iron/staticfile)\n  * [Logging](https://github.com/iron/logger)\n\n\nPlugins:\n  * [JSON Body Parsing](https://github.com/iron/body-parser)\n  * [URL Encoded Data Parsing](https://github.com/iron/urlencoded)\n  * [All-In-One (JSON, URL, & Form Data) Parameter Parsing](https://github.com/iron/params)\n\n\nBoth:\n  * [Shared Memory (also used for Plugin configuration)](https://github.com/iron/persistent)\n  * [Sessions](https://github.com/iron/iron-sessionstorage)\n\n\nThis allows for extremely flexible and powerful setups and allows nearly all of Iron's features to be swappable - you can even change the middleware resolution algorithm by swapping in your own ``Chain``.\n* Due to the rapidly evolving state of the Rust ecosystem, not everything builds all the time. Please be patient and file issues for breaking builds, we're doing our best.\n## Underlying HTTP Implementation\nIron is based on and uses [``hyper``](https://github.com/hyperium/hyper) as its HTTP implementation, and lifts several types from it, including its header representation, status, and other core HTTP types. It is usually unnecessary to use ``hyper`` directly when using Iron, since Iron provides a facade over ``hyper``'s core facilities, but it is sometimes necessary to depend on it as well.\n## Installation\nIf you're using ``Cargo``, just add Iron to your ``Cargo.toml``:\n```\n```[``dependencies.iron``]`\n`version ``=` ``\"`*`\"``\n``\n```\n\n## [Documentation](http://ironframework.io/doc/iron)\nThe documentation is hosted [online](http://ironframework.io/doc/iron) and auto-updated with each successful release. You can also use ````cargo``` doc``` to build a local copy.\n## [Examples](https://github.com/examples)\nCheck out the [examples](https://github.com/examples) directory!\nYou can run an individual example using ````cargo``` run`` --`example` example-name```. Note that for benchmarking you should make sure to use the ``--release`` flag, which will cause cargo to compile the entire toolchain with optimizations. Without ``--release`` you will get truly sad numbers.\n## Getting Help\nFeel free to ask questions as github issues in this or other related repos.\nThe best place to get immediate help is on IRC, on any of these channels on the mozilla network:\n  * ```#`rust`-`webdev``\n  * ```#`iron``\n  * ```#`rust``\n\n\nOne of the maintainers or contributors is usually around and can probably help. We encourage you to stop by and say hi and tell us what you're using Iron for, even if you don't have any questions. It's invaluable to hear feedback from users and always nice to hear if someone is using the framework we've worked on.\n## Maintainers\nJonathan Reem ([reem](https://github.com/reem)) is the core maintainer and author of Iron.\nCommit Distribution (as of ``8e55759``):\n```\n`Jonathan Reem `(``415``)`\nZach Pomerantz `(``123``)`\nMichael Sproul `(``9``)`\nPatrick Tran `(``5``)`\nCorey Richardson `(``4``)`\nBryce Fisher`-`Fleig `(``3``)`\nBarosl Lee `(``2``)`\nChristoph Burgdorf `(``2``)`\nda4c30ff `(``2``)`\narathunku `(``1``)`\nCengiz Can `(``1``)`\nDarayus `(``1``)`\nEduardo Bautista `(``1``)`\nMehdi Avdi `(``1``)`\nMichael Sierks `(``1``)`\nNerijus Arlauskas `(``1``)`\nSuprDewd `(``1``)`\n`\n```\n\n## License\nMIT\n#### Dependencies\n~4\u201314MB  ~207K SLoC\n  * [hyper](https://lib.rs/crates/hyper \"obsolete\") 0.10\n  * [native-tls-example?](https://lib.rs/crates/iron/features#feature-native-tls-example \"optional feature\") [hyper-native-tls](https://lib.rs/crates/hyper-native-tls \"obsolete\") 0.3\n  * [log](https://lib.rs/crates/log \"obsolete\") 0.3\n  * [mime_guess](https://lib.rs/crates/mime_guess \"obsolete\") 1.8\n  * [modifier](https://lib.rs/crates/modifier \"0.1\")\n  * [num_cpus](https://lib.rs/crates/num_cpus \"1.0\")\n  * [plugin](https://lib.rs/crates/plugin \"0.2\")\n  * [typemap](https://lib.rs/crates/typemap \"deprecated\") 0.3\n  * [url](https://lib.rs/crates/url \"obsolete\") 1.1\n\n\n  * dev  [mime](https://lib.rs/crates/mime \"obsolete\") 0.2\n  * dev  [time](https://lib.rs/crates/time \"deprecated\") 0.1\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  54 releases\u27e81\u27e9\nUses old Rust 2015\n0.6.1 |  Aug 14, 2019   \n---|---  \n0.6.0 |  Nov 5, 2017   \n0.5.1 |  Jan 13, 2017   \n0.4.0 |  Jul 4, 2016   \n0.0.5 |  Nov 25, 2014   \n#**38** in #focused\u27e82\u27e9\nDownload history 2260/week @ 2024-11-08 2427/week @ 2024-11-15 3465/week @ 2024-11-22 3392/week @ 2024-11-29 3713/week @ 2024-12-06 4229/week @ 2024-12-13 2180/week @ 2024-12-20 1200/week @ 2024-12-27 2896/week @ 2025-01-03 5137/week @ 2025-01-10 3986/week @ 2025-01-17 3037/week @ 2025-01-24 6197/week @ 2025-01-31 6125/week @ 2025-02-07 2508/week @ 2025-02-14\n**15,417** downloads per month This crate has lost popularity\u27e83\u27e9\n**MIT** license \n72KB  1K  SLoC\n# Iron\n![Build Status\u27e84\u27e9](https://travis-ci.org/iron/iron) [](https://crates.io/crates/iron) ![License\u27e85\u27e9](https://raw.githubusercontent.com/iron/iron/master/LICENSE)\n> Extensible, Concurrency Focused Web Development in Rust.\n## Response Timer Example\n```\n``extern` `crate` iron`;`\n`extern` `crate` time`;`\n`use` `iron`::```prelude`::```*``;`\n`use` `iron`::````{`BeforeMiddleware`,` AfterMiddleware`,` typemap```}```;`\n`use` `time`::``precise_time_ns`;`\n``struct` ```ResponseTime```;`\n``impl` ```typemap`::``Key `for``` `ResponseTime` ````{` `type` `Value` `=` `u64``;` ```}```\n``impl` ``BeforeMiddleware `for``` `ResponseTime` ````{`\n  ``fn` `before`````(``&``self`, `req``:` `&``mut` Request```)```` ``->` `IronResult`<``(``)``>``` ```{`\n    req`.`extensions`.``insert`::````<`ResponseTime`>```(``precise_time_ns``(``)``)``;`\n    `Ok``(``(``)``)`\n  `}``\n```}```\n``impl` ``AfterMiddleware `for``` `ResponseTime` ````{`\n  ``fn` `after`````(``&``self`, `req``:` `&``mut` Request, `res``:` Response```)```` ``->` `IronResult`<`Response`>``` ```{`\n    `let` delta `=` `precise_time_ns``(``)` `-` `*`req`.`extensions`.``get`::````<`ResponseTime`>```(``)``.``unwrap``(``)``;`\n    `println!``(```\"`Request took: `{}` ms`\"```,` `(`delta `as` `f64``)` `/` `1000000.``0``)``;`\n    `Ok``(`res`)`\n  `}``\n```}```\n``fn` `hello_world`````(``_`: `&``mut` Request```)```` ``->` `IronResult`<`Response`>``` ````{`\n  `Ok``(``Response`::``with`(``(``iron`::```status`::``Ok`,` ``\"`Hello World`\"```)``)``)`\n```}```\n``fn` `main`````(````)``````{`\n  `let` `mut` chain `=` `Chain`::``new`(`hello_world`)``;`\n  chain`.``link_before``(`ResponseTime`)``;`\n  chain`.``link_after``(`ResponseTime`)``;`\n  `Iron`::``new`(`chain`)``.``http``(```\"`localhost:3000`\"```)``.``unwrap``(``)``;`\n```}```\n`\n```\n\n## Overview\nIron is a high level web framework built in and for Rust, built on hyper\u27e86\u27e9. Iron is designed to take advantage of Rust's greatest features - its excellent type system and its principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\nIron is 100% safe code:\n```\n```$``` rg unsafe src` `|` ``wc``\n    ``0```    0    0`\n`\n```\n\n## Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron's core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Performance\nIron averages 72,000+ requests per second for hello world\u27e87\u27e9 and is mostly IO-bound, spending over 70% of its time in the kernel send-ing or recv-ing data.*\n* _Numbers from profiling on my OS X machine, your mileage may vary._\n## Core Extensions\nIron aims to fill a void in the Rust web stack - a high level framework that is _extensible_ and makes organizing complex server code easy.\nExtensions are painless to build. Some important ones are:\nMiddleware:\n  * Routing\u27e88\u27e9\n  * Mounting\u27e89\u27e9\n  * Static File Serving\u27e810\u27e9\n  * Logging\u27e811\u27e9\n\n\nPlugins:\n  * JSON Body Parsing\u27e812\u27e9\n  * URL Encoded Data Parsing\u27e813\u27e9\n  * All-In-One (JSON, URL, & Form Data) Parameter Parsing\u27e814\u27e9\n\n\nBoth:\n  * Shared Memory (also used for Plugin configuration)\u27e815\u27e9\n  * Sessions\u27e816\u27e9\n\n\nThis allows for extremely flexible and powerful setups and allows nearly all of Iron's features to be swappable - you can even change the middleware resolution algorithm by swapping in your own ``Chain``.\n* Due to the rapidly evolving state of the Rust ecosystem, not everything builds all the time. Please be patient and file issues for breaking builds, we're doing our best.\n## Underlying HTTP Implementation\nIron is based on and uses ``hyper``\u27e86\u27e9 as its HTTP implementation, and lifts several types from it, including its header representation, status, and other core HTTP types. It is usually unnecessary to use ``hyper`` directly when using Iron, since Iron provides a facade over ``hyper``'s core facilities, but it is sometimes necessary to depend on it as well.\n## Installation\nIf you're using ``Cargo``, just add Iron to your ``Cargo.toml``:\n```\n```[``dependencies.iron``]`\n`version ``=` ``\"`*`\"``\n``\n```\n\n## Documentation\u27e817\u27e9\nThe documentation is hosted online\u27e817\u27e9 and auto-updated with each successful release. You can also use ````cargo``` doc``` to build a local copy.\n## Examples\u27e818\u27e9\nCheck out the examples\u27e818\u27e9 directory!\nYou can run an individual example using ````cargo``` run`` --`example` example-name```. Note that for benchmarking you should make sure to use the ``--release`` flag, which will cause cargo to compile the entire toolchain with optimizations. Without ``--release`` you will get truly sad numbers.\n## Getting Help\nFeel free to ask questions as github issues in this or other related repos.\nThe best place to get immediate help is on IRC, on any of these channels on the mozilla network:\n  * ```#`rust`-`webdev``\n  * ```#`iron``\n  * ```#`rust``\n\n\nOne of the maintainers or contributors is usually around and can probably help. We encourage you to stop by and say hi and tell us what you're using Iron for, even if you don't have any questions. It's invaluable to hear feedback from users and always nice to hear if someone is using the framework we've worked on.\n## Maintainers\nJonathan Reem (reem\u27e819\u27e9) is the core maintainer and author of Iron.\nCommit Distribution (as of ``8e55759``):\n```\n`Jonathan Reem `(``415``)`\nZach Pomerantz `(``123``)`\nMichael Sproul `(``9``)`\nPatrick Tran `(``5``)`\nCorey Richardson `(``4``)`\nBryce Fisher`-`Fleig `(``3``)`\nBarosl Lee `(``2``)`\nChristoph Burgdorf `(``2``)`\nda4c30ff `(``2``)`\narathunku `(``1``)`\nCengiz Can `(``1``)`\nDarayus `(``1``)`\nEduardo Bautista `(``1``)`\nMehdi Avdi `(``1``)`\nMichael Sierks `(``1``)`\nNerijus Arlauskas `(``1``)`\nSuprDewd `(``1``)`\n`\n```\n\n## License\nMIT\n#### Dependencies\n~4\u201314MB  ~207K SLoC\n  * hyper\u27e820\u27e9 0.10\n  * native-tls-example?\u27e821\u27e9 hyper-native-tls\u27e822\u27e9 0.3\n  * log\u27e823\u27e9 0.3\n  * mime_guess\u27e824\u27e9 1.8\n  * modifier\u27e825\u27e9\n  * num_cpus\u27e826\u27e9\n  * plugin\u27e827\u27e9\n  * typemap\u27e828\u27e9 0.3\n  * url\u27e829\u27e9 1.1\n\n\n  * dev  mime\u27e830\u27e9 0.2\n  * dev  time\u27e831\u27e9 0.1\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/iron/versions: 54 releases\n\u27e82\u27e9 https://lib.rs/keywords/focused: #focused\n\u27e83\u27e9 https://lib.rs/crates/iron/rev: This crate has lost popularity\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://secure.travis-ci.org/iron/iron.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![License\n\u27e86\u27e9 https://github.com/hyperium/hyper: hyper\n\u27e87\u27e9 https://github.com/iron/iron/wiki/How-to-Benchmark-hello.rs-Example: 72,000+ requests per second for hello world\n\u27e88\u27e9 https://github.com/iron/router: Routing\n\u27e89\u27e9 https://github.com/iron/mount: Mounting\n\u27e810\u27e9 https://github.com/iron/staticfile: Static File Serving\n\u27e811\u27e9 https://github.com/iron/logger: Logging\n\u27e812\u27e9 https://github.com/iron/body-parser: JSON Body Parsing\n\u27e813\u27e9 https://github.com/iron/urlencoded: URL Encoded Data Parsing\n\u27e814\u27e9 https://github.com/iron/params: All-In-One (JSON, URL, & Form Data) Parameter Parsing\n\u27e815\u27e9 https://github.com/iron/persistent: Shared Memory (also used for Plugin configuration)\n\u27e816\u27e9 https://github.com/iron/iron-sessionstorage: Sessions\n\u27e817\u27e9 http://ironframework.io/doc/iron: Documentation\n\u27e818\u27e9 https://github.com/examples: Examples\n\u27e819\u27e9 https://github.com/reem: reem\n\u27e820\u27e9 https://lib.rs/crates/hyper: obsolete - hyper\n\u27e821\u27e9 https://lib.rs/crates/iron/features#feature-native-tls-example: optional feature - native-tls-example?\n\u27e822\u27e9 https://lib.rs/crates/hyper-native-tls: obsolete - hyper-native-tls\n\u27e823\u27e9 https://lib.rs/crates/log: obsolete - log\n\u27e824\u27e9 https://lib.rs/crates/mime_guess: obsolete - mime_guess\n\u27e825\u27e9 https://lib.rs/crates/modifier: 0.1 - modifier\n\u27e826\u27e9 https://lib.rs/crates/num_cpus: 1.0 - num_cpus\n\u27e827\u27e9 https://lib.rs/crates/plugin: 0.2 - plugin\n\u27e828\u27e9 https://lib.rs/crates/typemap: deprecated - typemap\n\u27e829\u27e9 https://lib.rs/crates/url: obsolete - url\n\u27e830\u27e9 https://lib.rs/crates/mime: obsolete - mime\n\u27e831\u27e9 https://lib.rs/crates/time: deprecated - time\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9353,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111689.2379239"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matches@0.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matches",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.8\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libmatches-4c2183a0250bb666.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:72:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n72 | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4086,
                    "byte_start": 4031,
                    "column_end": 56,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Send + Sync { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:73:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n72 | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n73 | unsafe impl Trait for ::std::marker::Sync + Send { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4139,
                    "byte_start": 4091,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Sync + Send { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:75:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n...\n75 | unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4252,
                    "byte_start": 4197,
                    "column_end": 56,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Sync + Send + Sync { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libcfg_if-cc7a5a4350fdf289.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0119`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0119`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#safemem@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safemem-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "safemem",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safemem-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsafemem-dc9d2e6f270352a7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libpercent_encoding-5f25c374b89ea156.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#siphasher@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-6eea39bf77472521.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#siphasher@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-863478697323d359.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-863478697323d359.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@0.6.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-0.6.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-0.6.10\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsmallvec-8ee45744c4884532.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.8\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\log-b1d84516e59095ac\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\log-b1d84516e59095ac\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#language-tags@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\language-tags-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "language_tags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\language-tags-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\liblanguage_tags-7aaffe168279e992.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-772761d305bc9ba3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-772761d305bc9ba3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libversion_check-f89cc90d459161fe.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libversion_check-f89cc90d459161fe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libautocfg-3bd02be402f77236.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libautocfg-3bd02be402f77236.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.61\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.61\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\libc-301ae033abcf2ac2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\libc-301ae033abcf2ac2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libunicode_bidi-f6556a6fc7e87d12.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.3.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\byteorder-56d177815a5e7336\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\byteorder-56d177815a5e7336\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.3.4\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\httparse-b90bd2c96c951b06\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\httparse-b90bd2c96c951b06\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.7\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.7\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "minwinbase",
                "minwindef",
                "ntdef",
                "ntsecapi",
                "profileapi",
                "std",
                "sysinfoapi",
                "timezoneapi",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\winapi-fadc705752ca8d16\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\winapi-fadc705752ca8d16\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libautocfg-3bd02be402f77236.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libautocfg-3bd02be402f77236.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-772761d305bc9ba3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-772761d305bc9ba3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libversion_check-f89cc90d459161fe.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libversion_check-f89cc90d459161fe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.7\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.7\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "minwinbase",
                "minwindef",
                "ntdef",
                "ntsecapi",
                "profileapi",
                "std",
                "sysinfoapi",
                "timezoneapi",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\winapi-fadc705752ca8d16\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\winapi-fadc705752ca8d16\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#siphasher@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-863478697323d359.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-863478697323d359.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.8\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\log-b1d84516e59095ac\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\log-b1d84516e59095ac\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.61\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.61\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\libc-301ae033abcf2ac2\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\libc-301ae033abcf2ac2\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libcfg_if-cc7a5a4350fdf289.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matches@0.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matches",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matches-0.1.8\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libmatches-4c2183a0250bb666.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@0.6.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-0.6.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-0.6.10\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsmallvec-8ee45744c4884532.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.3.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\byteorder-56d177815a5e7336\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\byteorder-56d177815a5e7336\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#siphasher@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "siphasher",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\siphasher-0.2.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsiphasher-6eea39bf77472521.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\httparse-1.3.4\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\httparse-b90bd2c96c951b06\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\httparse-b90bd2c96c951b06\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-bidi@0.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_bidi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-bidi-0.3.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libunicode_bidi-f6556a6fc7e87d12.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#safemem@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safemem-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "safemem",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\safemem-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libsafemem-dc9d2e6f270352a7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-1.0.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libpercent_encoding-5f25c374b89ea156.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#language-tags@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\language-tags-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "language_tags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\language-tags-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\liblanguage_tags-7aaffe168279e992.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:72:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n72 | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4086,
                    "byte_start": 4031,
                    "column_end": 56,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Send + Sync { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:73:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n72 | unsafe impl Trait for ::std::marker::Send + Send + Sync { }\n73 | unsafe impl Trait for ::std::marker::Sync + Send { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4139,
                    "byte_start": 4091,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Sync + Send { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0119]: conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs:75:1\n   |\n71 | unsafe impl Trait for ::std::marker::Send + Sync { }\n   | ------------------------------------------------ first implementation here\n...\n75 | unsafe impl Trait for ::std::marker::Sync + Send + Sync { }\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Send + Sync + 'static)`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0119",
                  "explanation": "There are conflicting trait implementations for the same type.\n\nErroneous code example:\n\n```compile_fail,E0119\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo {\n    value: usize\n}\n\nimpl MyTrait for Foo { // error: conflicting implementations of trait\n                       //        `MyTrait` for type `Foo`\n    fn get(&self) -> usize { self.value }\n}\n```\n\nWhen looking for the implementation for the trait, the compiler finds\nboth the `impl<T> MyTrait for T` where T is all types and the `impl\nMyTrait for Foo`. Since a trait cannot be implemented multiple times,\nthis is an error. So, when you write:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n```\n\nThis makes the trait implemented on all types in the scope. So if you\ntry to implement it on another one after that, the implementations will\nconflict. Example:\n\n```\ntrait MyTrait {\n    fn get(&self) -> usize;\n}\n\nimpl<T> MyTrait for T {\n    fn get(&self) -> usize { 0 }\n}\n\nstruct Foo;\n\nfn main() {\n    let f = Foo;\n\n    f.get(); // the trait is implemented so we can use it\n}\n```\n"
                },
                "level": "error",
                "message": "conflicting implementations of trait `Trait` for type `(dyn Send + Sync + 'static)`",
                "spans": [
                  {
                    "byte_end": 4026,
                    "byte_start": 3978,
                    "column_end": 49,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": false,
                    "label": "first implementation here",
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Send + Sync { }"
                      }
                    ]
                  },
                  {
                    "byte_end": 4252,
                    "byte_start": 4197,
                    "column_end": 56,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\impls.rs",
                    "is_primary": true,
                    "label": "conflicting implementation for `(dyn Send + Sync + 'static)`",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "unsafe impl Trait for ::std::marker::Sync + Send + Sync { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#traitobject@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "traitobject",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\traitobject-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0119`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0119`.",
                "spans": []
              }
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "atomic_cas"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\log-64f77f72cc8a6a8f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-168298e507192420.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_core-168298e507192420.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.7",
              "linked_libs": [
                "dylib=advapi32",
                "dylib=credui",
                "dylib=kernel32",
                "dylib=secur32"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"vcruntime\"",
                "feature=\"wincred\"",
                "feature=\"basetsd\"",
                "feature=\"excpt\"",
                "feature=\"ktmtypes\"",
                "feature=\"sspi\"",
                "feature=\"ntstatus\"",
                "feature=\"lsalookup\"",
                "feature=\"subauth\"",
                "feature=\"windef\"",
                "feature=\"guiddef\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\winapi-9287daf639a165ab\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.61",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "libc_priv_mod_use",
                "libc_union",
                "libc_const_size_of",
                "libc_align",
                "libc_core_cvoid",
                "libc_packedN"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\libc-a4b09f24f953366a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.1.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand_chacha-8bc3d3fb199eadca\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand_chacha-8bc3d3fb199eadca\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_pcg@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_pcg-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_pcg-0.1.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand_pcg-f0975d6875e98a14\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand_pcg-f0975d6875e98a14\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.6.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.6.5\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "rand_os",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand-a912181e97a4b0cc\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\rand-a912181e97a4b0cc\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.3.2",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "byteorder_i128"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\byteorder-7ccf87e2b4118b8d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicase@1.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicase-1.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicase-1.4.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\unicase-8244a29320dad8b1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\unicase-8244a29320dad8b1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typeable@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typeable-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typeable",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typeable-0.1.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libtypeable-64956d594e695bdb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#httparse@1.3.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "httparse_min_2018",
                "httparse_simd"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\build\\httparse-cfc36293422d797f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#modifier@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\modifier-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "modifier",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\modifier-0.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libmodifier-f0503011a6809db9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_xorshift@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_xorshift-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_xorshift",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_xorshift-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_xorshift-c3efa575312002bc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_xorshift-c3efa575312002bc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_isaac@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_isaac-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_isaac",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_isaac-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_isaac-e3d1697d9ad79d69.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\librand_isaac-e3d1697d9ad79d69.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-normalization@0.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-normalization-0.1.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp476my6ft\\iron-0.6.1\\target\\debug\\deps\\libunicode_normalization-e9b4f803fef90f63.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 81
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 12,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0078",
                    "package": "hyper",
                    "title": "Lenient `hyper` header parsing of `Content-Length` could allow request smuggling",
                    "description": "`hyper`'s HTTP header parser accepted, according to RFC 7230, illegal contents inside `Content-Length` headers.\nDue to this, upstream HTTP proxies that ignore the header may still forward them along if it chooses to ignore the error.\n\nTo be vulnerable, `hyper` must be used as an HTTP/1 server and using an HTTP proxy upstream that ignores the header's contents\nbut still forwards it. Due to all the factors that must line up, an attack exploiting this vulnerability is unlikely.",
                    "date": "2021-07-07",
                    "aliases": [
                      "CVE-2021-32715",
                      "GHSA-f3pg-qwvg-p99c"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "parsing",
                      "http"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/security/advisories/GHSA-f3pg-qwvg-p99c",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.14.10"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.3.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.10.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.42",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0079",
                    "package": "hyper",
                    "title": "Integer overflow in `hyper`'s parsing of the `Transfer-Encoding` header leads to data loss",
                    "description": "When decoding chunk sizes that are too large, `hyper`'s code would encounter an integer overflow. Depending on the situation,\nthis could lead to data loss from an incorrect total size, or in rarer cases, a request smuggling attack.\n\nTo be vulnerable, you must be using `hyper` for any HTTP/1 purpose, including as a client or server, and consumers must send\nrequests or responses that specify a chunk size greater than 18 exabytes. For a possible request smuggling attack to be possible,\nany upstream proxies must accept a chunk size greater than 64 bits.",
                    "date": "2021-07-07",
                    "aliases": [
                      "CVE-2021-32714",
                      "GHSA-5h46-h7hh-c6x9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "http",
                      "parsing",
                      "data loss"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/security/advisories/GHSA-5h46-h7hh-c6x9",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.14.10"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.3.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.10.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.42",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.1.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e",
                    "dependencies": [
                      {
                        "name": "matches",
                        "version": "0.1.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0022",
                    "package": "openssl",
                    "title": "`openssl` `X509NameBuilder::build` returned object is not thread safe",
                    "description": "OpenSSL has a `modified` bit that it can set on on `X509_NAME` objects. If this\nbit is set then the object is not thread-safe even when it appears the code is\nnot modifying the value.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-3gxf-9r58-2ghg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "thread-safety"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509NameBuilder::build": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0023",
                    "package": "openssl",
                    "title": "`openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read",
                    "description": "`SubjectAlternativeName` and `ExtendedKeyUsage` arguments were parsed using the OpenSSL\nfunction `X509V3_EXT_nconf`. This function parses all input using an OpenSSL mini-language\nwhich can perform arbitrary file reads.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-9qwg-crg9-m2vc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "file-disclosure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::extension::ExtendedKeyUsage::other": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::extension::SubjectAlternativeName::new": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0024",
                    "package": "openssl",
                    "title": "`openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference",
                    "description": "These functions would crash when the context argument was None with certain extension types.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-6hcf-g6gr-hhcr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509Extension::new": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::X509Extension::new_nid": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0044",
                    "package": "openssl",
                    "title": "`openssl` `X509VerifyParamRef::set_host` buffer over-read",
                    "description": "When this function was passed an empty string, `openssl` would attempt to call `strlen` on it, reading arbitrary memory until it reached a NUL byte.",
                    "date": "2023-06-20",
                    "aliases": [
                      "GHSA-xcf7-rvmh-g6q4"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/1965",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.55"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::verify::X509VerifyParamRef::set_host": [
                        "<0.10.55, >=0.10.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0357",
                    "package": "openssl",
                    "title": "`MemBio::get_buf` has undefined behavior with empty buffers",
                    "description": "Previously, `MemBio::get_buf` called `slice::from_raw_parts` with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.",
                    "date": "2024-07-21",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2266",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.66"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::bio::MemBio::get_buf": [
                        "<0.10.66, >=0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0004",
                    "package": "openssl",
                    "title": "ssl::select_next_proto use after free",
                    "description": "In `openssl` versions before `0.10.70`, `ssl::select_next_proto` can return a slice pointing into the `server` argument's buffer but with a lifetime bound to the `client` argument. In situations where the `server` buffer's lifetime is shorter than the `client` buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.\n\n`openssl` 0.10.70 fixes the signature of `ssl::select_next_proto` to properly constrain the output buffer's lifetime to that of both input buffers.\n\nIn standard usage of `ssl::select_next_proto` in the callback passed to `SslContextBuilder::set_alpn_select_callback`, code is only affected if the `server` buffer is constructed *within* the callback. For example:\n\nNot vulnerable - the server buffer has a `'static` lifetime:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(b\"\\x02h2\", client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nNot vulnerable - the server buffer outlives the handshake:\n```rust\nlet server_protos = b\"\\x02h2\".to_vec();\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nVulnerable - the server buffer is freed when the callback returns:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    let server_protos = b\"\\x02h2\".to_vec();\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```",
                    "date": "2025-02-02",
                    "aliases": [
                      "GHSA-rpmj-rpgj-qmpm"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "ssl",
                      "tls",
                      "alpn"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/sfackler/rust-openssl/pull/2360"
                    ],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.70"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::ssl::select_next_proto": [
                        ">=0.10.0, <0.10.70"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0018",
                    "package": "remove_dir_all",
                    "title": "Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU)",
                    "description": "The remove_dir_all crate is a Rust library that offers additional features over the Rust\nstandard library fs::remove_dir_all function.\n\nIt was possible to trick a privileged process doing a recursive delete in an\nattacker controlled directory into deleting privileged files, on all operating systems.\n\nFor instance, consider deleting a tree called 'etc' in a parent directory\ncalled 'p'. Between calling `remove_dir_all(\"a\")` and remove_dir_all(\"a\")\nactually starting its work, the attacker can move 'p' to 'p-prime', and\nreplace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'\nwhich is actually /etc, and now your system is broken. There are some\nmitigations for this exact scenario, such as CWD relative file lookup, but\nthey are not guaranteed - any code using absolute paths will not have that\nprotection in place.\n\nThe same attack could be performed at any point in the directory tree being\ndeleted: if 'a' contains a child directory called 'etc', attacking the\ndeletion by replacing 'a' with a link is possible.\n\nThe new code in this release mitigates the attack within the directory tree\nbeing deleted by using file-handle relative operations: to open 'a/etc', the\npath 'etc' relative to 'a' is opened, where 'a' is represented by a file\ndescriptor (Unix) or handle (Windows). With the exception of the entry points\ninto the directory deletion logic, this is robust against manipulation of the\ndirectory hierarchy, and remove_dir_all will only delete files and directories\ncontained in the tree it is deleting.\n\nThe entry path however is a challenge - as described above, there are some\npotential mitigations, but since using them must be done by the calling code,\nit is hard to be confident about the security properties of the path based\ninterface.\n\nThe new extension trait `RemoveDir` provides an interface where it is much\nharder to get it wrong.\n\n`somedir.remove_dir_contents(\"name-of-child\")`.\n\nCallers can then make their own security evaluation about how to securely get\na directory handle. That is still not particularly obvious, and we're going to\nfollow up with a helper of some sort (probably in the `fs_at` crate). Once\nthat is available, the path based entry points will get deprecated.\n\nIn the interim, processes that might run with elevated privileges should\nfigure out how to securely identify the directory they are going to delete, to\navoid the initial race. Pragmatically, other processes should be fine with the\npath based entry points : this is the same interface `std::fs::remove_dir_all`\noffers, and an unprivileged process running in an attacker controlled\ndirectory can't do anything that the attacker can't already do.",
                    "date": "2023-02-24",
                    "aliases": [
                      "GHSA-mc8h-8q98-g5hr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "TOCTOU"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
                    ],
                    "source": null,
                    "url": "https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "remove_dir_all::ensure_empty_dir": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_all": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_contents": [
                        "<0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "remove_dir_all",
                    "version": "0.5.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0003",
                    "package": "smallvec",
                    "title": "Buffer overflow in SmallVec::insert_many",
                    "description": "A bug in the `SmallVec::insert_many` method caused it to allocate a buffer that was smaller than needed.  It then wrote past the end of the buffer, causing a buffer overflow and memory corruption on the heap.\n\nThis bug was only triggered if the iterator passed to `insert_many` yielded more items than the lower bound returned from its `size_hint` method.\n \nThe flaw was corrected in smallvec 0.6.14 and 1.6.1, by ensuring that additional space is always reserved for each item inserted.  The fix also simplified the implementation of `insert_many` to use less unsafe code, so it is easier to verify its correctness.\n\nThank you to Yechan Bae (@Qwaz) and the Rust group at Georgia Tech\u2019s SSLab for finding and reporting this bug.",
                    "date": "2021-01-08",
                    "aliases": [
                      "CVE-2021-25900",
                      "GHSA-43w2-9j62-hq99"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "buffer-overflow",
                      "heap-overflow",
                      "unsound"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/servo/rust-smallvec/issues/252",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.14, <1.0.0",
                      ">=1.6.1"
                    ],
                    "unaffected": [
                      "<0.6.3"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "smallvec::SmallVec::insert_many": [
                        ">=0.6.3, <0.6.14",
                        ">=1.0.0, <1.6.1"
                      ]
                    }
                  },
                  "package": {
                    "name": "smallvec",
                    "version": "0.6.10",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7",
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2020-0071",
                    "package": "time",
                    "title": "Potential segfault in the time crate",
                    "description": "### Impact\n\nThe affected functions set environment variables without synchronization. On Unix-like operating systems, this can crash in multithreaded programs. Programs may segfault due to dereferencing a dangling pointer if an environment variable is read in a different thread than the affected functions. This may occur without the user's knowledge, notably in the Rust standard library or third-party libraries.\n\nThe affected functions from time 0.2.7 through 0.2.22 are:\n\n- `time::UtcOffset::local_offset_at`\n- `time::UtcOffset::try_local_offset_at`\n- `time::UtcOffset::current_local_offset`\n- `time::UtcOffset::try_current_local_offset`\n- `time::OffsetDateTime::now_local`\n- `time::OffsetDateTime::try_now_local`\n\nThe affected functions in time 0.1 (all versions) are:\n\n- `time::at_utc`\n- `time::at`\n- `time::now`\n- `time::tzset`\n\nNon-Unix targets (including Windows and wasm) are unaffected.\n\n### Patches\n\nPending a proper fix, the internal method that determines the local offset has been modified to always return `None` on the affected operating systems. This has the effect of returning an `Err` on the `try_*` methods and `UTC` on the non-`try_*` methods.\n\nUsers and library authors with time in their dependency tree should perform `cargo update`, which will pull in the updated, unaffected code.\n\nUsers of time 0.1 do not have a patch and should upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.\n\n### Workarounds\n\nA possible workaround for crates affected through the transitive dependency in `chrono`, is to avoid using the default `oldtime` feature dependency of the `chrono` crate by disabling its `default-features` and manually specifying the required features instead.\n\n#### Examples:\n\n`Cargo.toml`:  \n\n```toml\nchrono = { version = \"0.4\", default-features = false, features = [\"serde\"] }\n```\n\n```toml\nchrono = { version = \"0.4.22\", default-features = false, features = [\"clock\"] }\n```\n\nCommandline:  \n\n```bash\ncargo add chrono --no-default-features -F clock\n```\n\nSources:  \n - [chronotope/chrono#602 (comment)](https://github.com/chronotope/chrono/issues/602#issuecomment-1242149249)  \n - [vityafx/serde-aux#21](https://github.com/vityafx/serde-aux/issues/21)",
                    "date": "2020-11-18",
                    "aliases": [
                      "CVE-2020-26235",
                      "GHSA-wcg3-cvx6-7396"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "code-execution",
                      "memory-corruption"
                    ],
                    "keywords": [
                      "segfault"
                    ],
                    "cvss": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/time-rs/time/issues/293",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.2.23"
                    ],
                    "unaffected": [
                      "=0.2.0",
                      "=0.2.1",
                      "=0.2.2",
                      "=0.2.3",
                      "=0.2.4",
                      "=0.2.5",
                      "=0.2.6"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "linux",
                      "redox",
                      "solaris",
                      "android",
                      "ios",
                      "macos",
                      "netbsd",
                      "openbsd",
                      "freebsd"
                    ],
                    "functions": {
                      "time::OffsetDateTime::now_local": [
                        "<0.2.23"
                      ],
                      "time::OffsetDateTime::try_now_local": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::current_local_offset": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::local_offset_at": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::try_current_local_offset": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::try_local_offset_at": [
                        "<0.2.23"
                      ],
                      "time::at": [
                        "^0.1"
                      ],
                      "time::at_utc": [
                        "^0.1"
                      ],
                      "time::now": [
                        "^0.1"
                      ]
                    }
                  },
                  "package": {
                    "name": "time",
                    "version": "0.1.42",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "redox_syscall",
                        "version": "0.1.56",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "safemem",
                    "version": "0.3.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e133ccc4f4d1cd4f89cc8a7ff618287d56dc7f638b8e38fc32c5fdcadc339dd5",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0081",
                    "package": "safemem",
                    "title": "safemem is unmaintained",
                    "description": "The latest crates.io release was in 2019. The repository has been archived by the author.\n\n## Migration\n\n- `safemem::copy_over(slice, src_idx, dest_idx, len);` can be replaced with `slice.copy_within(src_idx..src_idx+len, dest_idx);` as of `rust 1.37.0`.\n- `safemem::write_bytes(slice, byte);` can be replaced with `slice.fill(byte);` as of `rust 1.50.0`\n- `safemem::prepend(slice, vec);` can be replaced with\n\n  ```rust\n  let old_len = vec.len();\n  vec.extend_from_slice(slice);\n  vec.rotate_left(old_len);\n  ```\n  \n  as of `rust 1.26.0`",
                    "date": "2023-02-14",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/abonander/safemem",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "traitobject",
                    "version": "0.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "efd1f82c56340fdf16f2a953d7bda4f8fdffba13d93b00844c25572110b26079",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0144",
                    "package": "traitobject",
                    "title": "traitobject is Unmaintained",
                    "description": "Crate `traitobject` has not had a release for over five years.\n\nIn addition there is an existing security advisory that has not been addressed:\n\n - [RUSTSEC-2020-0027](https://rustsec.org/advisories/RUSTSEC-2020-0027)\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [destructure_traitobject]\n\n[destructure_traitobject]: https://crates.io/crates/destructure_traitobject",
                    "date": "2021-10-04",
                    "aliases": [
                      "GHSA-pp8r-vv2j-9j5v"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://rustsec.org/advisories/RUSTSEC-2020-0027"
                    ],
                    "source": null,
                    "url": "https://github.com/reem/rust-traitobject/issues/7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "typemap",
                    "version": "0.3.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "653be63c80a3296da5551e1bfd2cca35227e13cdd08c6668903ae2f4f77aa1f6",
                    "dependencies": [
                      {
                        "name": "unsafe-any",
                        "version": "0.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2019-0039",
                    "package": "typemap",
                    "title": "typemap is Unmaintained",
                    "description": "The maintainer seems unreachable.\n\nThe crate may or may not be usable as-is despite no maintenance and may not work in future versions of Rust.\n\nThe last release seems to have been seven years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ttmap](https://crates.io/crates/ttmap)\n - [typemap_rev](https://crates.io/crates/typemap_rev)\n - [typemap-ors](https://crates.io/crates/typemap-ors)",
                    "date": "2019-04-06",
                    "aliases": [
                      "GHSA-vfv3-9w6v-23jp"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://github.com/rustsec/advisory-db/issues/1088"
                    ],
                    "source": null,
                    "url": "https://github.com/reem/rust-typemap/issues/45",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.3.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.10.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.42",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0022",
                    "package": "hyper",
                    "title": "Parser creates invalid uninitialized value",
                    "description": "Affected versions of this crate called `mem::uninitialized()` in the HTTP1 parser to create values of type `httparse::Header` (from the `httparse` crate).\nThis is unsound, since `Header` contains references and thus must be non-null.\n \nThe flaw was corrected by avoiding the use of `mem::uninitialized()`, using `MaybeUninit` instead.",
                    "date": "2022-05-10",
                    "aliases": [
                      "GHSA-f67m-9j94-qv9j"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/pull/2545",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.14.12"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "openssl",
                    "version": "0.10.24",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.48",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0072",
                    "package": "openssl",
                    "title": "`openssl` `X509StoreRef::objects` is unsound",
                    "description": "This function returned a shared reference into an OpenSSL datastructure but did not account for interior mutability. OpenSSL may modify the data behind this reference, meaning accesses can race and the reference is unsound.\n\nUse of this function should be replaced with `X509StoreRef::all_certificates`.",
                    "date": "2023-11-23",
                    "aliases": [
                      "GHSA-xphf-cx8h-7q9g"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/2096",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::store::X509StoreRef::objects": [
                        "<0.10.60, >=0.10.29"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.60"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "smallvec",
                    "version": "0.6.10",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2018-0018",
                    "package": "smallvec",
                    "title": "smallvec creates uninitialized value of any type",
                    "description": "Affected versions of this crate called `mem::uninitialized()` to create values of a user-supplied type `T`.\nThis is unsound e.g. if `T` is a reference type (which must be non-null and thus may not remain uninitialized).\n \nThe flaw was corrected by avoiding the use of `mem::uninitialized()`, using `MaybeUninit` instead.",
                    "date": "2018-09-25",
                    "aliases": [
                      "CVE-2018-25023",
                      "GHSA-55m5-whcv-c49c",
                      "GHSA-66p5-j55p-32r9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/servo/rust-smallvec/issues/126",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.6.13"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "traitobject",
                    "version": "0.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "efd1f82c56340fdf16f2a953d7bda4f8fdffba13d93b00844c25572110b26079",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0027",
                    "package": "traitobject",
                    "title": "traitobject assumes the layout of fat pointers",
                    "description": "This crate gets the data pointer from fat pointers assuming that the first\nelement in a fat pointer is the data pointer. This is currently true, but\nit may change in a future Rust version, leading to memory corruption.\n\nThis has been fixed in the master branch of the crate, but is has not\nbeen released into crates.io.",
                    "date": "2020-06-01",
                    "aliases": [
                      "CVE-2020-35881",
                      "GHSA-j79j-cx3h-g27h"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/reem/rust-traitobject/issues/7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "traitobject::data": [],
                      "traitobject::data_mut": []
                    }
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "getrandom",
                    "version": "0.1.9",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2512b3191f22e2763a5db387f1c9409379772e2050841722eb4a8c4f497bf096",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasi",
                        "version": "0.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "security-framework",
                    "version": "0.3.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "eee63d0f4a9ec776eeb30e220f0bc1e092c3ad744b2a379e3993070364d3adc2",
                    "dependencies": [
                      {
                        "name": "core-foundation",
                        "version": "0.6.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "core-foundation-sys",
                        "version": "0.6.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "security-framework-sys",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "security-framework-sys",
                    "version": "0.3.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "9636f8989cbf61385ae4824b98c1aaa54c994d7d8b41f11c601ed799f0549a56",
                    "dependencies": [
                      {
                        "name": "core-foundation-sys",
                        "version": "0.6.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "iron",
          "version": "0.6.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\n[Settings](https://docs.rs/iron/latest/settings.html)\n[Help](https://docs.rs/iron/latest/help.html)\nSummary[Source](https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172)\nExpand description\nThe main crate for Iron.\n### [\u00a7](https://docs.rs/iron/latest/iron/#overview)Overview\nIron is a high level web framework built in and for Rust, built on [hyper](https://github.com/hyperium/hyper). Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### [\u00a7](https://docs.rs/iron/latest/iron/#hello-world)Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### [\u00a7](https://docs.rs/iron/latest/iron/#design-philosophy)Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports[\u00a7](https://docs.rs/iron/latest/iron/#reexports)\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules[\u00a7](https://docs.rs/iron/latest/iron/#modules)\n\n[error](https://docs.rs/iron/latest/iron/error/index.html \"mod iron::error\")\n    Iron\u2019s error type and associated utilities.\n\n[headers](https://docs.rs/iron/latest/iron/headers/index.html \"mod iron::headers\")\n    Headers container, and common header fields.\n\n[method](https://docs.rs/iron/latest/iron/method/index.html \"mod iron::method\")\n    HTTP Methods\n\n[middleware](https://docs.rs/iron/latest/iron/middleware/index.html \"mod iron::middleware\")\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\n[mime](https://docs.rs/iron/latest/iron/mime/index.html \"mod iron::mime\")\n    Re-exporting the mime crate, for convenience.\n\n[modifier](https://docs.rs/iron/latest/iron/modifier/index.html \"mod iron::modifier\")\n    Re-exports from the Modifier crate.\n\n[modifiers](https://docs.rs/iron/latest/iron/modifiers/index.html \"mod iron::modifiers\")\n    This module defines a series of convenience modifiers for changing Responses.\n\n[prelude](https://docs.rs/iron/latest/iron/prelude/index.html \"mod iron::prelude\")\n    A module meant to be glob imported when using Iron.\n\n[request](https://docs.rs/iron/latest/iron/request/index.html \"mod iron::request\")\n    Iron\u2019s HTTP Request representation and associated methods.\n\n[response](https://docs.rs/iron/latest/iron/response/index.html \"mod iron::response\")\n    Iron\u2019s HTTP Response representation and associated methods.\n\n[status](https://docs.rs/iron/latest/iron/status/index.html \"mod iron::status\")\n    Status Codes\n\n[typemap](https://docs.rs/iron/latest/iron/typemap/index.html \"mod iron::typemap\")\n    Re-exports from the `TypeMap` crate.\n\n[url](https://docs.rs/iron/latest/iron/url/index.html \"mod iron::url\")\n    Re-exports from the url crate.\n## Macros[\u00a7](https://docs.rs/iron/latest/iron/#macros)\n\n[headers](https://docs.rs/iron/latest/iron/macro.headers.html \"macro iron::headers\")\n\n\n[iexpect](https://docs.rs/iron/latest/iron/macro.iexpect.html \"macro iron::iexpect\")\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\n[itry](https://docs.rs/iron/latest/iron/macro.itry.html \"macro iron::itry\")\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs[\u00a7](https://docs.rs/iron/latest/iron/#structs)\n\n[Headers](https://docs.rs/iron/latest/iron/struct.Headers.html \"struct iron::Headers\")\n    A map of header fields on requests and responses.\n\n[Iron](https://docs.rs/iron/latest/iron/struct.Iron.html \"struct iron::Iron\")\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\n[Listening](https://docs.rs/iron/latest/iron/struct.Listening.html \"struct iron::Listening\")\n    A listening server, which can later be closed.\n\n[Protocol](https://docs.rs/iron/latest/iron/struct.Protocol.html \"struct iron::Protocol\")\n    Protocol used to serve content.\n\n[Timeouts](https://docs.rs/iron/latest/iron/struct.Timeouts.html \"struct iron::Timeouts\")\n    A settings struct containing a set of timeouts which can be applied to a server.\n\n[TypeMap](https://docs.rs/iron/latest/iron/struct.TypeMap.html \"struct iron::TypeMap\")\n    A map keyed by types.\n## Traits[\u00a7](https://docs.rs/iron/latest/iron/#traits)\n\n[Error](https://docs.rs/iron/latest/iron/trait.Error.html \"trait iron::Error\")\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n\n[Plugin](https://docs.rs/iron/latest/iron/trait.Plugin.html \"trait iron::Plugin\")\n    An interface for plugins that cache values between calls.\n\n[Set](https://docs.rs/iron/latest/iron/trait.Set.html \"trait iron::Set\")\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases[\u00a7](https://docs.rs/iron/latest/iron/#types)\n\n[IronResult](https://docs.rs/iron/latest/iron/type.IronResult.html \"type iron::IronResult\")\n    The Result alias used throughout Iron and in clients of Iron.\n",
            "markdown_with_citations": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe main crate for Iron.\n### \u00a7\u27e84\u27e9Overview\nIron is a high level web framework built in and for Rust, built on hyper\u27e85\u27e9. Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### \u00a7\u27e86\u27e9Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### \u00a7\u27e87\u27e9Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nerror\u27e810\u27e9\n    Iron\u2019s error type and associated utilities.\n\nheaders\u27e811\u27e9\n    Headers container, and common header fields.\n\nmethod\u27e812\u27e9\n    HTTP Methods\n\nmiddleware\u27e813\u27e9\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\nmime\u27e814\u27e9\n    Re-exporting the mime crate, for convenience.\n\nmodifier\u27e815\u27e9\n    Re-exports from the Modifier crate.\n\nmodifiers\u27e816\u27e9\n    This module defines a series of convenience modifiers for changing Responses.\n\nprelude\u27e817\u27e9\n    A module meant to be glob imported when using Iron.\n\nrequest\u27e818\u27e9\n    Iron\u2019s HTTP Request representation and associated methods.\n\nresponse\u27e819\u27e9\n    Iron\u2019s HTTP Response representation and associated methods.\n\nstatus\u27e820\u27e9\n    Status Codes\n\ntypemap\u27e821\u27e9\n    Re-exports from the `TypeMap` crate.\n\nurl\u27e822\u27e9\n    Re-exports from the url crate.\n## Macros\u00a7\u27e823\u27e9\n\nheaders\u27e824\u27e9\n\n\niexpect\u27e825\u27e9\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\nitry\u27e826\u27e9\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs\u00a7\u27e827\u27e9\n\nHeaders\u27e828\u27e9\n    A map of header fields on requests and responses.\n\nIron\u27e829\u27e9\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\nListening\u27e830\u27e9\n    A listening server, which can later be closed.\n\nProtocol\u27e831\u27e9\n    Protocol used to serve content.\n\nTimeouts\u27e832\u27e9\n    A settings struct containing a set of timeouts which can be applied to a server.\n\nTypeMap\u27e833\u27e9\n    A map keyed by types.\n## Traits\u00a7\u27e834\u27e9\n\nError\u27e835\u27e9\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in `Result<T, E>`\u27e836\u27e9.\n\nPlugin\u27e837\u27e9\n    An interface for plugins that cache values between calls.\n\nSet\u27e838\u27e9\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases\u00a7\u27e839\u27e9\n\nIronResult\u27e840\u27e9\n    The Result alias used throughout Iron and in clients of Iron.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/iron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/iron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://docs.rs/iron/latest/iron/#overview: \u00a7\n\u27e85\u27e9 https://github.com/hyperium/hyper: hyper\n\u27e86\u27e9 https://docs.rs/iron/latest/iron/#hello-world: \u00a7\n\u27e87\u27e9 https://docs.rs/iron/latest/iron/#design-philosophy: \u00a7\n\u27e88\u27e9 https://docs.rs/iron/latest/iron/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/iron/latest/iron/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/iron/latest/iron/error/index.html: mod iron::error - error\n\u27e811\u27e9 https://docs.rs/iron/latest/iron/headers/index.html: mod iron::headers - headers\n\u27e812\u27e9 https://docs.rs/iron/latest/iron/method/index.html: mod iron::method - method\n\u27e813\u27e9 https://docs.rs/iron/latest/iron/middleware/index.html: mod iron::middleware - middleware\n\u27e814\u27e9 https://docs.rs/iron/latest/iron/mime/index.html: mod iron::mime - mime\n\u27e815\u27e9 https://docs.rs/iron/latest/iron/modifier/index.html: mod iron::modifier - modifier\n\u27e816\u27e9 https://docs.rs/iron/latest/iron/modifiers/index.html: mod iron::modifiers - modifiers\n\u27e817\u27e9 https://docs.rs/iron/latest/iron/prelude/index.html: mod iron::prelude - prelude\n\u27e818\u27e9 https://docs.rs/iron/latest/iron/request/index.html: mod iron::request - request\n\u27e819\u27e9 https://docs.rs/iron/latest/iron/response/index.html: mod iron::response - response\n\u27e820\u27e9 https://docs.rs/iron/latest/iron/status/index.html: mod iron::status - status\n\u27e821\u27e9 https://docs.rs/iron/latest/iron/typemap/index.html: mod iron::typemap - typemap\n\u27e822\u27e9 https://docs.rs/iron/latest/iron/url/index.html: mod iron::url - url\n\u27e823\u27e9 https://docs.rs/iron/latest/iron/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/iron/latest/iron/macro.headers.html: macro iron::headers - headers\n\u27e825\u27e9 https://docs.rs/iron/latest/iron/macro.iexpect.html: macro iron::iexpect - iexpect\n\u27e826\u27e9 https://docs.rs/iron/latest/iron/macro.itry.html: macro iron::itry - itry\n\u27e827\u27e9 https://docs.rs/iron/latest/iron/#structs: \u00a7\n\u27e828\u27e9 https://docs.rs/iron/latest/iron/struct.Headers.html: struct iron::Headers - Headers\n\u27e829\u27e9 https://docs.rs/iron/latest/iron/struct.Iron.html: struct iron::Iron - Iron\n\u27e830\u27e9 https://docs.rs/iron/latest/iron/struct.Listening.html: struct iron::Listening - Listening\n\u27e831\u27e9 https://docs.rs/iron/latest/iron/struct.Protocol.html: struct iron::Protocol - Protocol\n\u27e832\u27e9 https://docs.rs/iron/latest/iron/struct.Timeouts.html: struct iron::Timeouts - Timeouts\n\u27e833\u27e9 https://docs.rs/iron/latest/iron/struct.TypeMap.html: struct iron::TypeMap - TypeMap\n\u27e834\u27e9 https://docs.rs/iron/latest/iron/#traits: \u00a7\n\u27e835\u27e9 https://docs.rs/iron/latest/iron/trait.Error.html: trait iron::Error - Error\n\u27e836\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result<T, E>`\n\u27e837\u27e9 https://docs.rs/iron/latest/iron/trait.Plugin.html: trait iron::Plugin - Plugin\n\u27e838\u27e9 https://docs.rs/iron/latest/iron/trait.Set.html: trait iron::Set - Set\n\u27e839\u27e9 https://docs.rs/iron/latest/iron/#types: \u00a7\n\u27e840\u27e9 https://docs.rs/iron/latest/iron/type.IronResult.html: type iron::IronResult - IronResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "iron",
          "version": "0.6.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\n[Settings](https://docs.rs/iron/latest/settings.html)\n[Help](https://docs.rs/iron/latest/help.html)\nSummary[Source](https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172)\nExpand description\nThe main crate for Iron.\n### [\u00a7](https://docs.rs/iron/latest/iron/#overview)Overview\nIron is a high level web framework built in and for Rust, built on [hyper](https://github.com/hyperium/hyper). Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### [\u00a7](https://docs.rs/iron/latest/iron/#hello-world)Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### [\u00a7](https://docs.rs/iron/latest/iron/#design-philosophy)Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports[\u00a7](https://docs.rs/iron/latest/iron/#reexports)\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules[\u00a7](https://docs.rs/iron/latest/iron/#modules)\n\n[error](https://docs.rs/iron/latest/iron/error/index.html \"mod iron::error\")\n    Iron\u2019s error type and associated utilities.\n\n[headers](https://docs.rs/iron/latest/iron/headers/index.html \"mod iron::headers\")\n    Headers container, and common header fields.\n\n[method](https://docs.rs/iron/latest/iron/method/index.html \"mod iron::method\")\n    HTTP Methods\n\n[middleware](https://docs.rs/iron/latest/iron/middleware/index.html \"mod iron::middleware\")\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\n[mime](https://docs.rs/iron/latest/iron/mime/index.html \"mod iron::mime\")\n    Re-exporting the mime crate, for convenience.\n\n[modifier](https://docs.rs/iron/latest/iron/modifier/index.html \"mod iron::modifier\")\n    Re-exports from the Modifier crate.\n\n[modifiers](https://docs.rs/iron/latest/iron/modifiers/index.html \"mod iron::modifiers\")\n    This module defines a series of convenience modifiers for changing Responses.\n\n[prelude](https://docs.rs/iron/latest/iron/prelude/index.html \"mod iron::prelude\")\n    A module meant to be glob imported when using Iron.\n\n[request](https://docs.rs/iron/latest/iron/request/index.html \"mod iron::request\")\n    Iron\u2019s HTTP Request representation and associated methods.\n\n[response](https://docs.rs/iron/latest/iron/response/index.html \"mod iron::response\")\n    Iron\u2019s HTTP Response representation and associated methods.\n\n[status](https://docs.rs/iron/latest/iron/status/index.html \"mod iron::status\")\n    Status Codes\n\n[typemap](https://docs.rs/iron/latest/iron/typemap/index.html \"mod iron::typemap\")\n    Re-exports from the `TypeMap` crate.\n\n[url](https://docs.rs/iron/latest/iron/url/index.html \"mod iron::url\")\n    Re-exports from the url crate.\n## Macros[\u00a7](https://docs.rs/iron/latest/iron/#macros)\n\n[headers](https://docs.rs/iron/latest/iron/macro.headers.html \"macro iron::headers\")\n\n\n[iexpect](https://docs.rs/iron/latest/iron/macro.iexpect.html \"macro iron::iexpect\")\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\n[itry](https://docs.rs/iron/latest/iron/macro.itry.html \"macro iron::itry\")\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs[\u00a7](https://docs.rs/iron/latest/iron/#structs)\n\n[Headers](https://docs.rs/iron/latest/iron/struct.Headers.html \"struct iron::Headers\")\n    A map of header fields on requests and responses.\n\n[Iron](https://docs.rs/iron/latest/iron/struct.Iron.html \"struct iron::Iron\")\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\n[Listening](https://docs.rs/iron/latest/iron/struct.Listening.html \"struct iron::Listening\")\n    A listening server, which can later be closed.\n\n[Protocol](https://docs.rs/iron/latest/iron/struct.Protocol.html \"struct iron::Protocol\")\n    Protocol used to serve content.\n\n[Timeouts](https://docs.rs/iron/latest/iron/struct.Timeouts.html \"struct iron::Timeouts\")\n    A settings struct containing a set of timeouts which can be applied to a server.\n\n[TypeMap](https://docs.rs/iron/latest/iron/struct.TypeMap.html \"struct iron::TypeMap\")\n    A map keyed by types.\n## Traits[\u00a7](https://docs.rs/iron/latest/iron/#traits)\n\n[Error](https://docs.rs/iron/latest/iron/trait.Error.html \"trait iron::Error\")\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in [`Result<T, E>`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n\n[Plugin](https://docs.rs/iron/latest/iron/trait.Plugin.html \"trait iron::Plugin\")\n    An interface for plugins that cache values between calls.\n\n[Set](https://docs.rs/iron/latest/iron/trait.Set.html \"trait iron::Set\")\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases[\u00a7](https://docs.rs/iron/latest/iron/#types)\n\n[IronResult](https://docs.rs/iron/latest/iron/type.IronResult.html \"type iron::IronResult\")\n    The Result alias used throughout Iron and in clients of Iron.\n",
            "markdown_with_citations": "[](https://docs.rs/iron/latest/iron/all.html \"show sidebar\")\n# Crate ironCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThe main crate for Iron.\n### \u00a7\u27e84\u27e9Overview\nIron is a high level web framework built in and for Rust, built on hyper\u27e85\u27e9. Iron is designed to take advantage of Rust\u2019s greatest features - its excellent type system and principled approach to ownership in both single threaded and multi threaded contexts.\nIron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework.\n### \u00a7\u27e86\u27e9Hello World\n```\nextern crate iron;\nuse iron::prelude::*;\nuse iron::status;\nfn main() {\n  Iron::new(|_: &mut Request| {\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n  }).http(\"localhost:3000\").unwrap();\n}\n```\n\n### \u00a7\u27e87\u27e9Design Philosophy\nIron is meant to be as extensible and pluggable as possible; Iron\u2019s core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers.\nMiddleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems.\nModifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection.\nMiddleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging.\nIron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub use request::Request[](https://docs.rs/iron/latest/iron/request/struct.Request.html \"struct iron::request::Request\");`\n\n\n`pub use request::Url[](https://docs.rs/iron/latest/iron/request/struct.Url.html \"struct iron::request::Url\");`\n\n\n`pub use response::Response[](https://docs.rs/iron/latest/iron/response/struct.Response.html \"struct iron::response::Response\");`\n\n\n`pub use middleware::BeforeMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.BeforeMiddleware.html \"trait iron::middleware::BeforeMiddleware\");`\n\n\n`pub use middleware::AfterMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AfterMiddleware.html \"trait iron::middleware::AfterMiddleware\");`\n\n\n`pub use middleware::AroundMiddleware[](https://docs.rs/iron/latest/iron/middleware/trait.AroundMiddleware.html \"trait iron::middleware::AroundMiddleware\");`\n\n\n`pub use middleware::Handler[](https://docs.rs/iron/latest/iron/middleware/trait.Handler.html \"trait iron::middleware::Handler\");`\n\n\n`pub use middleware::Chain[](https://docs.rs/iron/latest/iron/middleware/struct.Chain.html \"struct iron::middleware::Chain\");`\n\n\n`pub use error::IronError[](https://docs.rs/iron/latest/iron/error/struct.IronError.html \"struct iron::error::IronError\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nerror\u27e810\u27e9\n    Iron\u2019s error type and associated utilities.\n\nheaders\u27e811\u27e9\n    Headers container, and common header fields.\n\nmethod\u27e812\u27e9\n    HTTP Methods\n\nmiddleware\u27e813\u27e9\n    This module contains Iron\u2019s middleware and handler system, the fundamental building blocks for handling HTTP requests and generating responses.\n\nmime\u27e814\u27e9\n    Re-exporting the mime crate, for convenience.\n\nmodifier\u27e815\u27e9\n    Re-exports from the Modifier crate.\n\nmodifiers\u27e816\u27e9\n    This module defines a series of convenience modifiers for changing Responses.\n\nprelude\u27e817\u27e9\n    A module meant to be glob imported when using Iron.\n\nrequest\u27e818\u27e9\n    Iron\u2019s HTTP Request representation and associated methods.\n\nresponse\u27e819\u27e9\n    Iron\u2019s HTTP Response representation and associated methods.\n\nstatus\u27e820\u27e9\n    Status Codes\n\ntypemap\u27e821\u27e9\n    Re-exports from the `TypeMap` crate.\n\nurl\u27e822\u27e9\n    Re-exports from the url crate.\n## Macros\u00a7\u27e823\u27e9\n\nheaders\u27e824\u27e9\n\n\niexpect\u27e825\u27e9\n    Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.\n\nitry\u27e826\u27e9\n    Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.\n## Structs\u00a7\u27e827\u27e9\n\nHeaders\u27e828\u27e9\n    A map of header fields on requests and responses.\n\nIron\u27e829\u27e9\n    The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n\nListening\u27e830\u27e9\n    A listening server, which can later be closed.\n\nProtocol\u27e831\u27e9\n    Protocol used to serve content.\n\nTimeouts\u27e832\u27e9\n    A settings struct containing a set of timeouts which can be applied to a server.\n\nTypeMap\u27e833\u27e9\n    A map keyed by types.\n## Traits\u00a7\u27e834\u27e9\n\nError\u27e835\u27e9\n    `Error` is a trait representing the basic expectations for error values, i.e., values of type `E` in `Result<T, E>`\u27e836\u27e9.\n\nPlugin\u27e837\u27e9\n    An interface for plugins that cache values between calls.\n\nSet\u27e838\u27e9\n    A trait providing the set and set_mut methods for all types.\n## Type Aliases\u00a7\u27e839\u27e9\n\nIronResult\u27e840\u27e9\n    The Result alias used throughout Iron and in clients of Iron.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/iron/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/iron/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/iron/latest/src/iron/lib.rs.html#1-172: Source\n\u27e84\u27e9 https://docs.rs/iron/latest/iron/#overview: \u00a7\n\u27e85\u27e9 https://github.com/hyperium/hyper: hyper\n\u27e86\u27e9 https://docs.rs/iron/latest/iron/#hello-world: \u00a7\n\u27e87\u27e9 https://docs.rs/iron/latest/iron/#design-philosophy: \u00a7\n\u27e88\u27e9 https://docs.rs/iron/latest/iron/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/iron/latest/iron/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/iron/latest/iron/error/index.html: mod iron::error - error\n\u27e811\u27e9 https://docs.rs/iron/latest/iron/headers/index.html: mod iron::headers - headers\n\u27e812\u27e9 https://docs.rs/iron/latest/iron/method/index.html: mod iron::method - method\n\u27e813\u27e9 https://docs.rs/iron/latest/iron/middleware/index.html: mod iron::middleware - middleware\n\u27e814\u27e9 https://docs.rs/iron/latest/iron/mime/index.html: mod iron::mime - mime\n\u27e815\u27e9 https://docs.rs/iron/latest/iron/modifier/index.html: mod iron::modifier - modifier\n\u27e816\u27e9 https://docs.rs/iron/latest/iron/modifiers/index.html: mod iron::modifiers - modifiers\n\u27e817\u27e9 https://docs.rs/iron/latest/iron/prelude/index.html: mod iron::prelude - prelude\n\u27e818\u27e9 https://docs.rs/iron/latest/iron/request/index.html: mod iron::request - request\n\u27e819\u27e9 https://docs.rs/iron/latest/iron/response/index.html: mod iron::response - response\n\u27e820\u27e9 https://docs.rs/iron/latest/iron/status/index.html: mod iron::status - status\n\u27e821\u27e9 https://docs.rs/iron/latest/iron/typemap/index.html: mod iron::typemap - typemap\n\u27e822\u27e9 https://docs.rs/iron/latest/iron/url/index.html: mod iron::url - url\n\u27e823\u27e9 https://docs.rs/iron/latest/iron/#macros: \u00a7\n\u27e824\u27e9 https://docs.rs/iron/latest/iron/macro.headers.html: macro iron::headers - headers\n\u27e825\u27e9 https://docs.rs/iron/latest/iron/macro.iexpect.html: macro iron::iexpect - iexpect\n\u27e826\u27e9 https://docs.rs/iron/latest/iron/macro.itry.html: macro iron::itry - itry\n\u27e827\u27e9 https://docs.rs/iron/latest/iron/#structs: \u00a7\n\u27e828\u27e9 https://docs.rs/iron/latest/iron/struct.Headers.html: struct iron::Headers - Headers\n\u27e829\u27e9 https://docs.rs/iron/latest/iron/struct.Iron.html: struct iron::Iron - Iron\n\u27e830\u27e9 https://docs.rs/iron/latest/iron/struct.Listening.html: struct iron::Listening - Listening\n\u27e831\u27e9 https://docs.rs/iron/latest/iron/struct.Protocol.html: struct iron::Protocol - Protocol\n\u27e832\u27e9 https://docs.rs/iron/latest/iron/struct.Timeouts.html: struct iron::Timeouts - Timeouts\n\u27e833\u27e9 https://docs.rs/iron/latest/iron/struct.TypeMap.html: struct iron::TypeMap - TypeMap\n\u27e834\u27e9 https://docs.rs/iron/latest/iron/#traits: \u00a7\n\u27e835\u27e9 https://docs.rs/iron/latest/iron/trait.Error.html: trait iron::Error - Error\n\u27e836\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result<T, E>`\n\u27e837\u27e9 https://docs.rs/iron/latest/iron/trait.Plugin.html: trait iron::Plugin - Plugin\n\u27e838\u27e9 https://docs.rs/iron/latest/iron/trait.Set.html: trait iron::Set - Set\n\u27e839\u27e9 https://docs.rs/iron/latest/iron/#types: \u00a7\n\u27e840\u27e9 https://docs.rs/iron/latest/iron/type.IronResult.html: type iron::IronResult - IronResult\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `iron` crate is a high-level, extensible web framework for Rust, built on `hyper`. It leverages Rust's type system and ownership model to enable highly concurrent, scalable web applications, avoiding shared writes and locking. Key features include support for middleware, plugins, and modifiers to customize request/response handling, with a focus on modularity and minimal core functionality.",
          "feature_summary": null,
          "use_case": "Web Framework",
          "score": 4.0,
          "factual_counterfactual": "### Pair 1: Concurrency and Scalability  \n\u2705 **Factual:** Iron is designed to be highly concurrent and can scale horizontally by running on multiple machines behind a load balancer or vertically by utilizing more threads on a powerful machine.  \n\u274c **Counterfactual:** Iron relies on shared writes and locking mechanisms in its core framework to ensure thread safety in concurrent environments.  \n\n---\n\n### Pair 2: Extensibility  \n\u2705 **Factual:** Iron achieves extensibility through middleware, plugins, and modifiers, allowing developers to add functionality such as routing, authentication, and logging without modifying the core framework.  \n\u274c **Counterfactual:** Iron comes with built-in middleware for routing, authentication, and logging, eliminating the need for third-party extensions.  \n\n---\n\n### Pair 3: HTTP Request and Response Handling  \n\u2705 **Factual:** Iron provides structured representations for HTTP requests (`Request`) and responses (`Response`), which can be manipulated using modifiers for headers, status codes, and body content.  \n\u274c **Counterfactual:** Iron does not provide any abstractions for handling HTTP requests or responses, requiring developers to directly manipulate raw HTTP data.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-04e9c0db-a06d270c-1751257898",
      "timestamp": "2025-06-30T04:31:38.192840+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]