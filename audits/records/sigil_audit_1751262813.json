[
  {
    "execution_id": "exec-23d40cfc-379f22ac-1751262801",
    "timestamp": "2025-06-30T05:53:21.006609+00:00",
    "sacred_chain": {
      "input_data": "rayon",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rayon' -> 'rayon'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rayon",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rayon",
            "title": "rayon v1.10.0",
            "content": {
              "raw_markdown": "#  rayon v1.10.0\nSimple work-stealing parallelism for Rust \n  * [ #join ](https://crates.io/keywords/join)\n  * [ #concurrency ](https://crates.io/keywords/concurrency)\n  * [ #performance ](https://crates.io/keywords/performance)\n  * [ #parallel ](https://crates.io/keywords/parallel)\n  * [ #thread ](https://crates.io/keywords/thread)\n\n\n  * [ Readme ](https://crates.io/crates/rayon)\n  * [ 38 Versions ](https://crates.io/crates/rayon/versions)\n  * [ Dependencies ](https://crates.io/crates/rayon/dependencies)\n  * [ Dependents ](https://crates.io/crates/rayon/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.63.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n176 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rayon\nOr add the following line to your Cargo.toml:\nrayon = \"1.10.0\"\n## Documentation\n[ docs.rs/rayon ](https://docs.rs/rayon/)\n## Repository\n[ github.com/rayon-rs/rayon ](https://github.com/rayon-rs/rayon)\n## Owners\n## Categories\n  * [Concurrency](https://crates.io/categories/concurrency)\n\n\n[ Report crate ](https://crates.io/support?crate=rayon&inquire=crate-violation)\n### Stats Overview\n214,288,117 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rayon v1.10.0\nSimple work-stealing parallelism for Rust \n  *  #join \u27e81\u27e9\n  *  #concurrency \u27e82\u27e9\n  *  #performance \u27e83\u27e9\n  *  #parallel \u27e84\u27e9\n  *  #thread \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  38 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.63.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n176 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rayon\nOr add the following line to your Cargo.toml:\nrayon = \"1.10.0\"\n## Documentation\n docs.rs/rayon \u27e812\u27e9\n## Repository\n github.com/rayon-rs/rayon \u27e813\u27e9\n## Owners\n## Categories\n  * Concurrency\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n214,288,117 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/join:  #join \n\u27e82\u27e9 https://crates.io/keywords/concurrency:  #concurrency \n\u27e83\u27e9 https://crates.io/keywords/performance:  #performance \n\u27e84\u27e9 https://crates.io/keywords/parallel:  #parallel \n\u27e85\u27e9 https://crates.io/keywords/thread:  #thread \n\u27e86\u27e9 https://crates.io/crates/rayon:  Readme \n\u27e87\u27e9 https://crates.io/crates/rayon/versions:  38 Versions \n\u27e88\u27e9 https://crates.io/crates/rayon/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/rayon/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/rayon/:  docs.rs/rayon \n\u27e813\u27e9 https://github.com/rayon-rs/rayon:  github.com/rayon-rs/rayon \n\u27e814\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e815\u27e9 https://crates.io/support?crate=rayon&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1369,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116591.0581926"
          },
          "docs_rs": {
            "url": "https://docs.rs/rayon",
            "title": "Crate rayonCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\n[Settings](https://docs.rs/rayon/latest/settings.html)\n[Help](https://docs.rs/rayon/latest/help.html)\nSummary[Source](https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160)\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#how-to-use-rayon)How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * [Parallel iterators](https://docs.rs/rayon/latest/rayon/iter/index.html) make it easy to convert a sequential iterator to execute in parallel. \n      * The [`ParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html) trait defines general methods for all parallel iterators.\n      * The [`IndexedParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html) trait adds methods for iterators that support random access.\n    * The [`par_sort`](https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort) method sorts `&mut [T]` slices (or vectors) in parallel.\n    * [`par_extend`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend) can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * [`join`](https://docs.rs/rayon/latest/rayon/fn.join.html) is used to subdivide a task into two pieces.\n    * [`scope`](https://docs.rs/rayon/latest/rayon/fn.scope.html) creates a scope within which you can create any number of parallel tasks.\n    * [`ThreadPoolBuilder`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html) can be used to create your own thread pools or customize the global one.\n\n\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude)Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module [`rayon::prelude`](https://docs.rs/rayon/latest/rayon/prelude/index.html). It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as [`map`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map), [`for_each`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each), [`filter`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter), [`fold`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold), and [more](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods).\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#crate-layout)Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror [`std`](https://doc.rust-lang.org/std/) itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in [the `option` module of `std`](https://doc.rust-lang.org/std/option/index.html). Similarly, the `collections` module in Rayon offers parallel iterator types for [the `collections` from `std`](https://doc.rust-lang.org/std/collections/index.html). You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#targets-without-threading)Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the [`rayon_core`](https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html \"mod rayon_core\") documentation for more information about its global fallback.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#other-questions)Other questions?\nSee [the Rayon FAQ](https://github.com/rayon-rs/rayon/blob/main/FAQ.md).\n## Modules[\u00a7](https://docs.rs/rayon/latest/rayon/#modules)\n\n[array](https://docs.rs/rayon/latest/rayon/array/index.html \"mod rayon::array\")\n    Parallel iterator types for [arrays](https://doc.rust-lang.org/std/primitive.array.html) (`[T; N]`)\n\n[collections](https://docs.rs/rayon/latest/rayon/collections/index.html \"mod rayon::collections\")\n    Parallel iterator types for [standard collections](https://doc.rust-lang.org/stable/std/collections/)\n\n[iter](https://docs.rs/rayon/latest/rayon/iter/index.html \"mod rayon::iter\")\n    Traits for writing parallel programs using an iterator-style interface\n\n[option](https://docs.rs/rayon/latest/rayon/option/index.html \"mod rayon::option\")\n    Parallel iterator types for [options](https://doc.rust-lang.org/stable/std/option/)\n\n[prelude](https://docs.rs/rayon/latest/rayon/prelude/index.html \"mod rayon::prelude\")\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\n[range](https://docs.rs/rayon/latest/rayon/range/index.html \"mod rayon::range\")\n    Parallel iterator types for [ranges](https://doc.rust-lang.org/core/ops/struct.Range.html), the type for values created by `a..b` expressions\n\n[range_inclusive](https://docs.rs/rayon/latest/rayon/range_inclusive/index.html \"mod rayon::range_inclusive\")\n    Parallel iterator types for [inclusive ranges](https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html), the type for values created by `a..=b` expressions\n\n[result](https://docs.rs/rayon/latest/rayon/result/index.html \"mod rayon::result\")\n    Parallel iterator types for [results](https://doc.rust-lang.org/stable/std/result/)\n\n[slice](https://docs.rs/rayon/latest/rayon/slice/index.html \"mod rayon::slice\")\n    Parallel iterator types for [slices](https://doc.rust-lang.org/stable/std/slice/)\n\n[str](https://docs.rs/rayon/latest/rayon/str/index.html \"mod rayon::str\")\n    Parallel iterator types for [strings](https://doc.rust-lang.org/stable/std/str/)\n\n[string](https://docs.rs/rayon/latest/rayon/string/index.html \"mod rayon::string\")\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\n[vec](https://docs.rs/rayon/latest/rayon/vec/index.html \"mod rayon::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/stable/std/vec/) (`Vec<T>`)\n## Structs[\u00a7](https://docs.rs/rayon/latest/rayon/#structs)\n\n[BroadcastContext](https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html \"struct rayon::BroadcastContext\")\n    Provides context to a closure called by `broadcast`.\n\n[FnContext](https://docs.rs/rayon/latest/rayon/struct.FnContext.html \"struct rayon::FnContext\")\n    Provides the calling context to a closure called by `join_context`.\n\n[Scope](https://docs.rs/rayon/latest/rayon/struct.Scope.html \"struct rayon::Scope\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`](https://docs.rs/rayon/latest/rayon/fn.scope.html) for more information.\n\n[ScopeFifo](https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html \"struct rayon::ScopeFifo\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See [`scope_fifo()`](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) for more information.\n\n[ThreadBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html \"struct rayon::ThreadBuilder\")\n    Thread builder used for customization via [`ThreadPoolBuilder::spawn_handler`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler).\n\n[ThreadPool](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html \"struct rayon::ThreadPool\")\n    Represents a user created [thread-pool](https://en.wikipedia.org/wiki/Thread_pool).\n\n[ThreadPoolBuildError](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html \"struct rayon::ThreadPoolBuildError\")\n    Error when initializing a thread pool.\n\n[ThreadPoolBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html \"struct rayon::ThreadPoolBuilder\")\n    Used to create a new [`ThreadPool`](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html) or to configure the global rayon thread pool.\n## Enums[\u00a7](https://docs.rs/rayon/latest/rayon/#enums)\n\n[Yield](https://docs.rs/rayon/latest/rayon/enum.Yield.html \"enum rayon::Yield\")\n    Result of [`yield_now()`](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\") or [`yield_local()`](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\").\n## Functions[\u00a7](https://docs.rs/rayon/latest/rayon/#functions)\n\n[broadcast](https://docs.rs/rayon/latest/rayon/fn.broadcast.html \"fn rayon::broadcast\")\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\n[current_num_threads](https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html \"fn rayon::current_num_threads\")\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\n[current_thread_index](https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html \"fn rayon::current_thread_index\")\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\n[in_place_scope](https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html \"fn rayon::in_place_scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[in_place_scope_fifo](https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html \"fn rayon::in_place_scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[join](https://docs.rs/rayon/latest/rayon/fn.join.html \"fn rayon::join\")\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\n[join_context](https://docs.rs/rayon/latest/rayon/fn.join_context.html \"fn rayon::join_context\")\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\n[max_num_threads](https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html \"fn rayon::max_num_threads\")\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\n[scope](https://docs.rs/rayon/latest/rayon/fn.scope.html \"fn rayon::scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[scope_fifo](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html \"fn rayon::scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[spawn](https://docs.rs/rayon/latest/rayon/fn.spawn.html \"fn rayon::spawn\")\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function](https://docs.rs/rayon/latest/rayon/fn.scope.html) to create a scope.\n\n[spawn_broadcast](https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html \"fn rayon::spawn_broadcast\")\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\n[spawn_fifo](https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html \"fn rayon::spawn_fifo\")\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope_fifo()` function](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) to create a scope.\n\n[yield_local](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\")\n    Cooperatively yields execution to local Rayon work.\n\n[yield_now](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\")\n    Cooperatively yields execution to Rayon.\n",
              "markdown_with_citations": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## \u00a7\u27e84\u27e9How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * Parallel iterators\u27e85\u27e9 make it easy to convert a sequential iterator to execute in parallel. \n      * The `ParallelIterator`\u27e86\u27e9 trait defines general methods for all parallel iterators.\n      * The `IndexedParallelIterator`\u27e87\u27e9 trait adds methods for iterators that support random access.\n    * The `par_sort`\u27e88\u27e9 method sorts `&mut [T]` slices (or vectors) in parallel.\n    * `par_extend`\u27e89\u27e9 can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * `join`\u27e810\u27e9 is used to subdivide a task into two pieces.\n    * `scope`\u27e811\u27e9 creates a scope within which you can create any number of parallel tasks.\n    * `ThreadPoolBuilder`\u27e812\u27e9 can be used to create your own thread pools or customize the global one.\n\n\n## \u00a7\u27e813\u27e9Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module `rayon::prelude`\u27e814\u27e9. It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as `map`\u27e815\u27e9, `for_each`\u27e816\u27e9, `filter`\u27e817\u27e9, `fold`\u27e818\u27e9, and more\u27e819\u27e9.\n## \u00a7\u27e820\u27e9Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror `std`\u27e821\u27e9 itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in the `option` module of `std`\u27e822\u27e9. Similarly, the `collections` module in Rayon offers parallel iterator types for the `collections` from `std`\u27e823\u27e9. You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## \u00a7\u27e824\u27e9Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the `rayon_core`\u27e825\u27e9 documentation for more information about its global fallback.\n## \u00a7\u27e826\u27e9Other questions?\nSee the Rayon FAQ\u27e827\u27e9.\n## Modules\u00a7\u27e828\u27e9\n\narray\u27e829\u27e9\n    Parallel iterator types for arrays\u27e830\u27e9 (`[T; N]`)\n\ncollections\u27e831\u27e9\n    Parallel iterator types for standard collections\u27e832\u27e9\n\niter\u27e85\u27e9\n    Traits for writing parallel programs using an iterator-style interface\n\noption\u27e833\u27e9\n    Parallel iterator types for options\u27e834\u27e9\n\nprelude\u27e814\u27e9\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\nrange\u27e835\u27e9\n    Parallel iterator types for ranges\u27e836\u27e9, the type for values created by `a..b` expressions\n\nrange_inclusive\u27e837\u27e9\n    Parallel iterator types for inclusive ranges\u27e838\u27e9, the type for values created by `a..=b` expressions\n\nresult\u27e839\u27e9\n    Parallel iterator types for results\u27e840\u27e9\n\nslice\u27e841\u27e9\n    Parallel iterator types for slices\u27e842\u27e9\n\nstr\u27e843\u27e9\n    Parallel iterator types for strings\u27e844\u27e9\n\nstring\u27e845\u27e9\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n## Structs\u00a7\u27e848\u27e9\n\nBroadcastContext\u27e849\u27e9\n    Provides context to a closure called by `broadcast`.\n\nFnContext\u27e850\u27e9\n    Provides the calling context to a closure called by `join_context`.\n\nScope\u27e851\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. See `scope()`\u27e811\u27e9 for more information.\n\nScopeFifo\u27e852\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See `scope_fifo()`\u27e853\u27e9 for more information.\n\nThreadBuilder\u27e854\u27e9\n    Thread builder used for customization via `ThreadPoolBuilder::spawn_handler`\u27e855\u27e9.\n\nThreadPool\u27e856\u27e9\n    Represents a user created thread-pool\u27e857\u27e9.\n\nThreadPoolBuildError\u27e858\u27e9\n    Error when initializing a thread pool.\n\nThreadPoolBuilder\u27e812\u27e9\n    Used to create a new `ThreadPool`\u27e856\u27e9 or to configure the global rayon thread pool.\n## Enums\u00a7\u27e859\u27e9\n\nYield\u27e860\u27e9\n    Result of `yield_now()`\u27e861\u27e9 or `yield_local()`\u27e862\u27e9.\n## Functions\u00a7\u27e863\u27e9\n\nbroadcast\u27e864\u27e9\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\ncurrent_num_threads\u27e865\u27e9\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\ncurrent_thread_index\u27e866\u27e9\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\nin_place_scope\u27e867\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nin_place_scope_fifo\u27e868\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\njoin\u27e810\u27e9\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\njoin_context\u27e869\u27e9\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\nmax_num_threads\u27e870\u27e9\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\nscope\u27e811\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nscope_fifo\u27e853\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nspawn\u27e871\u27e9\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope()` function\u27e811\u27e9 to create a scope.\n\nspawn_broadcast\u27e872\u27e9\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\nspawn_fifo\u27e873\u27e9\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope_fifo()` function\u27e853\u27e9 to create a scope.\n\nyield_local\u27e862\u27e9\n    Cooperatively yields execution to local Rayon work.\n\nyield_now\u27e861\u27e9\n    Cooperatively yields execution to Rayon.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rayon/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rayon/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160: Source\n\u27e84\u27e9 https://docs.rs/rayon/latest/rayon/#how-to-use-rayon: \u00a7\n\u27e85\u27e9 https://docs.rs/rayon/latest/rayon/iter/index.html: Parallel iterators\n\u27e86\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html: `ParallelIterator`\n\u27e87\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html: `IndexedParallelIterator`\n\u27e88\u27e9 https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort: `par_sort`\n\u27e89\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend: `par_extend`\n\u27e810\u27e9 https://docs.rs/rayon/latest/rayon/fn.join.html: `join`\n\u27e811\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope.html: `scope`\n\u27e812\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html: `ThreadPoolBuilder`\n\u27e813\u27e9 https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude: \u00a7\n\u27e814\u27e9 https://docs.rs/rayon/latest/rayon/prelude/index.html: `rayon::prelude`\n\u27e815\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map: `map`\n\u27e816\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each: `for_each`\n\u27e817\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter: `filter`\n\u27e818\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold: `fold`\n\u27e819\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods: more\n\u27e820\u27e9 https://docs.rs/rayon/latest/rayon/#crate-layout: \u00a7\n\u27e821\u27e9 https://doc.rust-lang.org/std/: `std`\n\u27e822\u27e9 https://doc.rust-lang.org/std/option/index.html: the `option` module of `std`\n\u27e823\u27e9 https://doc.rust-lang.org/std/collections/index.html: the `collections` from `std`\n\u27e824\u27e9 https://docs.rs/rayon/latest/rayon/#targets-without-threading: \u00a7\n\u27e825\u27e9 https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html: mod rayon_core - `rayon_core`\n\u27e826\u27e9 https://docs.rs/rayon/latest/rayon/#other-questions: \u00a7\n\u27e827\u27e9 https://github.com/rayon-rs/rayon/blob/main/FAQ.md: the Rayon FAQ\n\u27e828\u27e9 https://docs.rs/rayon/latest/rayon/#modules: \u00a7\n\u27e829\u27e9 https://docs.rs/rayon/latest/rayon/array/index.html: mod rayon::array - array\n\u27e830\u27e9 https://doc.rust-lang.org/std/primitive.array.html: arrays\n\u27e831\u27e9 https://docs.rs/rayon/latest/rayon/collections/index.html: mod rayon::collections - collections\n\u27e832\u27e9 https://doc.rust-lang.org/stable/std/collections/: standard collections\n\u27e833\u27e9 https://docs.rs/rayon/latest/rayon/option/index.html: mod rayon::option - option\n\u27e834\u27e9 https://doc.rust-lang.org/stable/std/option/: options\n\u27e835\u27e9 https://docs.rs/rayon/latest/rayon/range/index.html: mod rayon::range - range\n\u27e836\u27e9 https://doc.rust-lang.org/core/ops/struct.Range.html: ranges\n\u27e837\u27e9 https://docs.rs/rayon/latest/rayon/range_inclusive/index.html: mod rayon::range_inclusive - range_inclusive\n\u27e838\u27e9 https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html: inclusive ranges\n\u27e839\u27e9 https://docs.rs/rayon/latest/rayon/result/index.html: mod rayon::result - result\n\u27e840\u27e9 https://doc.rust-lang.org/stable/std/result/: results\n\u27e841\u27e9 https://docs.rs/rayon/latest/rayon/slice/index.html: mod rayon::slice - slice\n\u27e842\u27e9 https://doc.rust-lang.org/stable/std/slice/: slices\n\u27e843\u27e9 https://docs.rs/rayon/latest/rayon/str/index.html: mod rayon::str - str\n\u27e844\u27e9 https://doc.rust-lang.org/stable/std/str/: strings\n\u27e845\u27e9 https://docs.rs/rayon/latest/rayon/string/index.html: mod rayon::string - string\n\u27e846\u27e9 https://docs.rs/rayon/latest/rayon/vec/index.html: mod rayon::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/stable/std/vec/: vectors\n\u27e848\u27e9 https://docs.rs/rayon/latest/rayon/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html: struct rayon::BroadcastContext - BroadcastContext\n\u27e850\u27e9 https://docs.rs/rayon/latest/rayon/struct.FnContext.html: struct rayon::FnContext - FnContext\n\u27e851\u27e9 https://docs.rs/rayon/latest/rayon/struct.Scope.html: struct rayon::Scope - Scope\n\u27e852\u27e9 https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html: struct rayon::ScopeFifo - ScopeFifo\n\u27e853\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html: `scope_fifo()`\n\u27e854\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html: struct rayon::ThreadBuilder - ThreadBuilder\n\u27e855\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler: `ThreadPoolBuilder::spawn_handler`\n\u27e856\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html: struct rayon::ThreadPool - ThreadPool\n\u27e857\u27e9 https://en.wikipedia.org/wiki/Thread_pool: thread-pool\n\u27e858\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html: struct rayon::ThreadPoolBuildError - ThreadPoolBuildError\n\u27e859\u27e9 https://docs.rs/rayon/latest/rayon/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/rayon/latest/rayon/enum.Yield.html: enum rayon::Yield - Yield\n\u27e861\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_now.html: fn rayon::yield_now - `yield_now()`\n\u27e862\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_local.html: fn rayon::yield_local - `yield_local()`\n\u27e863\u27e9 https://docs.rs/rayon/latest/rayon/#functions: \u00a7\n\u27e864\u27e9 https://docs.rs/rayon/latest/rayon/fn.broadcast.html: fn rayon::broadcast - broadcast\n\u27e865\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html: fn rayon::current_num_threads - current_num_threads\n\u27e866\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html: fn rayon::current_thread_index - current_thread_index\n\u27e867\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html: fn rayon::in_place_scope - in_place_scope\n\u27e868\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html: fn rayon::in_place_scope_fifo - in_place_scope_fifo\n\u27e869\u27e9 https://docs.rs/rayon/latest/rayon/fn.join_context.html: fn rayon::join_context - join_context\n\u27e870\u27e9 https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html: fn rayon::max_num_threads - max_num_threads\n\u27e871\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn.html: fn rayon::spawn - spawn\n\u27e872\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html: fn rayon::spawn_broadcast - spawn_broadcast\n\u27e873\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html: fn rayon::spawn_fifo - spawn_fifo\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14815,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116591.6962466"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rayon",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [38 releases](https://lib.rs/crates/rayon/versions) (22 stable)\n1.10.0 |  Mar 24, 2024   \n---|---  \n1.8.1 |  Jan 17, 2024   \n1.8.0 |  Sep 20, 2023   \n1.7.0 |  Mar 4, 2023   \n0.0.1 |  Dec 10, 2015   \n#**3** in [Concurrency](https://lib.rs/concurrency \"Crates for implementing concurrent and parallel computation.\")\nDownload history 2479045/week @ 2025-03-07 2497028/week @ 2025-03-14 3045208/week @ 2025-03-21 2306265/week @ 2025-03-28 2546694/week @ 2025-04-04 2427133/week @ 2025-04-11 2297757/week @ 2025-04-18 2330421/week @ 2025-04-25 2227157/week @ 2025-05-02 2346205/week @ 2025-05-09 2581573/week @ 2025-05-16 1971329/week @ 2025-05-23 2026639/week @ 2025-05-30 2098559/week @ 2025-06-06 2478511/week @ 2025-06-13 2565324/week @ 2025-06-20\n**9,514,924** downloads per month Used in [**18,588** crates (4,729 directly)](https://lib.rs/crates/rayon/rev)\n**MIT/Apache**\n1MB  **22K** SLoC\n# Rayon\n[![Rayon crate](https://img.shields.io/crates/v/rayon.svg)](https://crates.io/crates/rayon) [![Rayon documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/rayon/badge.svg)](https://docs.rs/rayon) ![minimum rustc 1.63](https://img.shields.io/badge/rustc-1.63+-red.svg) [![build status](https://img.gs/czjpqfbdkz/full/https://github.com/rayon-rs/rayon/workflows/main/badge.svg)](https://github.com/rayon-rs/rayon/actions) [![Join the chat at https://gitter.im/rayon-rs/Lobby](https://img.gs/czjpqfbdkz/full/https://badges.gitter.im/rayon-rs/Lobby.svg)](https://gitter.im/rayon-rs/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nRayon is a data-parallelism library for Rust. It is extremely lightweight and makes it easy to convert a sequential computation into a parallel one. It also guarantees data-race freedom. (You may also enjoy [this blog post](https://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/) about Rayon, which gives more background and details about how it works, or [this video](https://www.youtube.com/watch?v=gof_OEv71Aw), from the Rust Belt Rust conference.) Rayon is [available on crates.io](https://crates.io/crates/rayon), and [API documentation is available on docs.rs](https://docs.rs/rayon).\n## Parallel iterators and more\nRayon makes it drop-dead simple to convert sequential iterators into parallel ones: usually, you just change your ``foo`.``iter``(``)``` call into ``foo`.``par_iter``(``)```, and Rayon does the rest:\n```\n``use` `rayon`::```prelude`::```*``;`\n``fn` `sum_of_squares`````(``input``:` `&`[`i32`]```)```` ``->` `i32`` ````{`\n  input`.``par_iter``(``)` ``//` <-- just change that!`\n     `.``map``(````|``````&``i``|`` ``i `*` i``)`\n     `.``sum``(``)`\n```}```\n`\n```\n\n[Parallel iterators](https://docs.rs/rayon/*/rayon/iter/index.html) take care of deciding how to divide your data into tasks; it will dynamically adapt for maximum performance. If you need more flexibility than that, Rayon also offers the [join](https://docs.rs/rayon/*/rayon/fn.join.html) and [scope](https://docs.rs/rayon/*/rayon/fn.scope.html) functions, which let you create parallel tasks on your own. For even more control, you can create [custom threadpools](https://docs.rs/rayon/*/rayon/struct.ThreadPool.html) rather than using Rayon's default, global threadpool.\n## No data races\nYou may have heard that parallel execution can produce all kinds of crazy bugs. Well, rest easy. Rayon's APIs all guarantee **data-race freedom** , which generally rules out most parallel bugs (though not all). In other words, **if your code compiles** , it typically does the same thing it did before.\nFor the most, parallel iterators in particular are guaranteed to produce the same results as their sequential counterparts. One caveat: If your iterator has side effects (for example, sending methods to other threads through a [Rust channel](https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html) or writing to disk), those side effects may occur in a different order. Note also that, in some cases, parallel iterators offer alternative versions of the sequential iterator methods that can have higher performance.\n## Using Rayon\n[Rayon is available on crates.io](https://crates.io/crates/rayon). The recommended way to use it is to add a line into your Cargo.toml such as:\n```\n```[``dependencies``]`\n`rayon ``=` ``\"`1.8`\"``\n``\n```\n\nTo use the parallel iterator APIs, a number of traits have to be in scope. The easiest way to bring those things into scope is to use the [Rayon prelude](https://docs.rs/rayon/*/rayon/prelude/index.html). In each module where you would like to use the parallel iterator APIs, just add:\n```\n``use` `rayon`::```prelude`::```*``;`\n`\n```\n\nRayon currently requires ``rustc `1.``63``.``0``` or greater.\n### Usage with WebAssembly\nBy default, when building to WebAssembly, Rayon will treat it as any other platform without multithreading support and will fall back to sequential iteration. This allows existing code to compile and run successfully with no changes necessary, but it will run slower as it will only use a single CPU core.\nYou can build Rayon-based projects with proper multithreading support for the Web, but you'll need an adapter and some project configuration to account for differences between WebAssembly threads and threads on the other platforms.\nCheck out the [wasm-bindgen-rayon](https://github.com/RReverser/wasm-bindgen-rayon) docs for more details.\n## Contribution\nRayon is an open source project! If you'd like to contribute to Rayon, check out [the list of \"help wanted\" issues](https://github.com/rayon-rs/rayon/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22). These are all (or should be) issues that are suitable for getting started, and they generally include a detailed set of instructions for what to do. Please ask questions if anything is unclear! Also, check out the [Guide to Development](https://github.com/rayon-rs/rayon/wiki/Guide-to-Development) page on the wiki. Note that all code submitted in PRs to Rayon is assumed to [be licensed under Rayon's dual MIT/Apache 2.0 licensing](https://github.com/rayon-rs/rayon/blob/main/README.md#license).\n## Quick demo\nTo see Rayon in action, check out the ``rayon-demo`` directory, which includes a number of demos of code using Rayon. For example, run this command to get a visualization of an N-body simulation. To see the effect of using Rayon, press ``s`` to run sequentially and ``p`` to run in parallel.\n```\n`> cd rayon-demo\n> cargo run --release -- nbody visualize\n`\n```\n\nFor more information on demos, try:\n```\n`> cd rayon-demo\n> cargo run --release -- --help\n`\n```\n\n## Other questions?\nSee [the Rayon FAQ](https://github.com/rayon-rs/rayon/blob/main/FAQ.md).\n## License\nRayon is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See [LICENSE-APACHE](https://github.com/rayon-rs/rayon/blob/HEAD/LICENSE-APACHE) and [LICENSE-MIT](https://github.com/rayon-rs/rayon/blob/HEAD/LICENSE-MIT) for details. Opening a pull request is assumed to signal agreement with these licensing terms.\n#### Dependencies\n~0.3\u20131.8MB  ~32K SLoC\n  * [either](https://lib.rs/crates/either \"1.0\")\n  * [rayon-core](https://lib.rs/crates/rayon-core \"1.12.1\")\n  * [web_spin_lock?](https://lib.rs/crates/rayon/features#feature-web_spin_lock \"optional feature\") [wasm_sync](https://lib.rs/crates/wasm_sync \"0.1.0\")\n\n\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * dev  [rand_xorshift](https://lib.rs/crates/rand_xorshift \"obsolete\") 0.3\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  38 releases\u27e81\u27e9 (22 stable)\n1.10.0 |  Mar 24, 2024   \n---|---  \n1.8.1 |  Jan 17, 2024   \n1.8.0 |  Sep 20, 2023   \n1.7.0 |  Mar 4, 2023   \n0.0.1 |  Dec 10, 2015   \n#**3** in Concurrency\u27e82\u27e9\nDownload history 2479045/week @ 2025-03-07 2497028/week @ 2025-03-14 3045208/week @ 2025-03-21 2306265/week @ 2025-03-28 2546694/week @ 2025-04-04 2427133/week @ 2025-04-11 2297757/week @ 2025-04-18 2330421/week @ 2025-04-25 2227157/week @ 2025-05-02 2346205/week @ 2025-05-09 2581573/week @ 2025-05-16 1971329/week @ 2025-05-23 2026639/week @ 2025-05-30 2098559/week @ 2025-06-06 2478511/week @ 2025-06-13 2565324/week @ 2025-06-20\n**9,514,924** downloads per month Used in **18,588** crates (4,729 directly)\u27e83\u27e9\n**MIT/Apache**\n1MB  **22K** SLoC\n# Rayon\n![Rayon crate\u27e84\u27e9](https://crates.io/crates/rayon) ![Rayon documentation\u27e85\u27e9](https://docs.rs/rayon) ![minimum rustc 1.63\u27e86\u27e9] ![build status\u27e87\u27e9](https://github.com/rayon-rs/rayon/actions) ![Join the chat at https://gitter.im/rayon-rs/Lobby\u27e88\u27e9](https://gitter.im/rayon-rs/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nRayon is a data-parallelism library for Rust. It is extremely lightweight and makes it easy to convert a sequential computation into a parallel one. It also guarantees data-race freedom. (You may also enjoy this blog post\u27e89\u27e9 about Rayon, which gives more background and details about how it works, or this video\u27e810\u27e9, from the Rust Belt Rust conference.) Rayon is available on crates.io\u27e811\u27e9, and API documentation is available on docs.rs\u27e812\u27e9.\n## Parallel iterators and more\nRayon makes it drop-dead simple to convert sequential iterators into parallel ones: usually, you just change your ``foo`.``iter``(``)``` call into ``foo`.``par_iter``(``)```, and Rayon does the rest:\n```\n``use` `rayon`::```prelude`::```*``;`\n``fn` `sum_of_squares`````(``input``:` `&`[`i32`]```)```` ``->` `i32`` ````{`\n  input`.``par_iter``(``)` ``//` <-- just change that!`\n     `.``map``(````|``````&``i``|`` ``i `*` i``)`\n     `.``sum``(``)`\n```}```\n`\n```\n\nParallel iterators\u27e813\u27e9 take care of deciding how to divide your data into tasks; it will dynamically adapt for maximum performance. If you need more flexibility than that, Rayon also offers the join\u27e814\u27e9 and scope\u27e815\u27e9 functions, which let you create parallel tasks on your own. For even more control, you can create custom threadpools\u27e816\u27e9 rather than using Rayon's default, global threadpool.\n## No data races\nYou may have heard that parallel execution can produce all kinds of crazy bugs. Well, rest easy. Rayon's APIs all guarantee **data-race freedom** , which generally rules out most parallel bugs (though not all). In other words, **if your code compiles** , it typically does the same thing it did before.\nFor the most, parallel iterators in particular are guaranteed to produce the same results as their sequential counterparts. One caveat: If your iterator has side effects (for example, sending methods to other threads through a Rust channel\u27e817\u27e9 or writing to disk), those side effects may occur in a different order. Note also that, in some cases, parallel iterators offer alternative versions of the sequential iterator methods that can have higher performance.\n## Using Rayon\nRayon is available on crates.io\u27e811\u27e9. The recommended way to use it is to add a line into your Cargo.toml such as:\n```\n```[``dependencies``]`\n`rayon ``=` ``\"`1.8`\"``\n``\n```\n\nTo use the parallel iterator APIs, a number of traits have to be in scope. The easiest way to bring those things into scope is to use the Rayon prelude\u27e818\u27e9. In each module where you would like to use the parallel iterator APIs, just add:\n```\n``use` `rayon`::```prelude`::```*``;`\n`\n```\n\nRayon currently requires ``rustc `1.``63``.``0``` or greater.\n### Usage with WebAssembly\nBy default, when building to WebAssembly, Rayon will treat it as any other platform without multithreading support and will fall back to sequential iteration. This allows existing code to compile and run successfully with no changes necessary, but it will run slower as it will only use a single CPU core.\nYou can build Rayon-based projects with proper multithreading support for the Web, but you'll need an adapter and some project configuration to account for differences between WebAssembly threads and threads on the other platforms.\nCheck out the wasm-bindgen-rayon\u27e819\u27e9 docs for more details.\n## Contribution\nRayon is an open source project! If you'd like to contribute to Rayon, check out the list of \"help wanted\" issues\u27e820\u27e9. These are all (or should be) issues that are suitable for getting started, and they generally include a detailed set of instructions for what to do. Please ask questions if anything is unclear! Also, check out the Guide to Development\u27e821\u27e9 page on the wiki. Note that all code submitted in PRs to Rayon is assumed to be licensed under Rayon's dual MIT/Apache 2.0 licensing\u27e822\u27e9.\n## Quick demo\nTo see Rayon in action, check out the ``rayon-demo`` directory, which includes a number of demos of code using Rayon. For example, run this command to get a visualization of an N-body simulation. To see the effect of using Rayon, press ``s`` to run sequentially and ``p`` to run in parallel.\n```\n`> cd rayon-demo\n> cargo run --release -- nbody visualize\n`\n```\n\nFor more information on demos, try:\n```\n`> cd rayon-demo\n> cargo run --release -- --help\n`\n```\n\n## Other questions?\nSee the Rayon FAQ\u27e823\u27e9.\n## License\nRayon is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE\u27e824\u27e9 and LICENSE-MIT\u27e825\u27e9 for details. Opening a pull request is assumed to signal agreement with these licensing terms.\n#### Dependencies\n~0.3\u20131.8MB  ~32K SLoC\n  * either\u27e826\u27e9\n  * rayon-core\u27e827\u27e9\n  * web_spin_lock?\u27e828\u27e9 wasm_sync\u27e829\u27e9\n\n\n  * dev  rand\u27e830\u27e9 0.8\n  * dev  rand_xorshift\u27e831\u27e9 0.3\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rayon/versions: 38 releases\n\u27e82\u27e9 https://lib.rs/concurrency: Crates for implementing concurrent and parallel computation. - Concurrency\n\u27e83\u27e9 https://lib.rs/crates/rayon/rev: **18,588** crates (4,729 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/rayon.svg: ![Rayon crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rayon/badge.svg: ![Rayon documentation\n\u27e86\u27e9 https://img.shields.io/badge/rustc-1.63+-red.svg: minimum rustc 1.63\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rayon-rs/rayon/workflows/main/badge.svg: ![build status\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://badges.gitter.im/rayon-rs/Lobby.svg: ![Join the chat at https://gitter.im/rayon-rs/Lobby\n\u27e89\u27e9 https://smallcultfollowing.com/babysteps/blog/2015/12/18/rayon-data-parallelism-in-rust/: this blog post\n\u27e810\u27e9 https://www.youtube.com/watch?v=gof_OEv71Aw: this video\n\u27e811\u27e9 https://crates.io/crates/rayon: available on crates.io\n\u27e812\u27e9 https://docs.rs/rayon: API documentation is available on docs.rs\n\u27e813\u27e9 https://docs.rs/rayon/*/rayon/iter/index.html: Parallel iterators\n\u27e814\u27e9 https://docs.rs/rayon/*/rayon/fn.join.html: join\n\u27e815\u27e9 https://docs.rs/rayon/*/rayon/fn.scope.html: scope\n\u27e816\u27e9 https://docs.rs/rayon/*/rayon/struct.ThreadPool.html: custom threadpools\n\u27e817\u27e9 https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html: Rust channel\n\u27e818\u27e9 https://docs.rs/rayon/*/rayon/prelude/index.html: Rayon prelude\n\u27e819\u27e9 https://github.com/RReverser/wasm-bindgen-rayon: wasm-bindgen-rayon\n\u27e820\u27e9 https://github.com/rayon-rs/rayon/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22: the list of \"help wanted\" issues\n\u27e821\u27e9 https://github.com/rayon-rs/rayon/wiki/Guide-to-Development: Guide to Development\n\u27e822\u27e9 https://github.com/rayon-rs/rayon/blob/main/README.md#license: be licensed under Rayon's dual MIT/Apache 2.0 licensing\n\u27e823\u27e9 https://github.com/rayon-rs/rayon/blob/main/FAQ.md: the Rayon FAQ\n\u27e824\u27e9 https://github.com/rayon-rs/rayon/blob/HEAD/LICENSE-APACHE: LICENSE-APACHE\n\u27e825\u27e9 https://github.com/rayon-rs/rayon/blob/HEAD/LICENSE-MIT: LICENSE-MIT\n\u27e826\u27e9 https://lib.rs/crates/either: 1.0 - either\n\u27e827\u27e9 https://lib.rs/crates/rayon-core: 1.12.1 - rayon-core\n\u27e828\u27e9 https://lib.rs/crates/rayon/features#feature-web_spin_lock: optional feature - web_spin_lock?\n\u27e829\u27e9 https://lib.rs/crates/wasm_sync: 0.1.0 - wasm_sync\n\u27e830\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e831\u27e9 https://lib.rs/crates/rand_xorshift: obsolete - rand_xorshift\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7519,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116592.1052043"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#either@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "either",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libeither-0ffbc1a8126db283.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-8a97615c96d19aa8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-8a97615c96d19aa8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-a8f7ad3b36b987dc\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-a76aac2ae9866593\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_utils-bb4ad7bf8162756c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_epoch-3bbc16071692da97.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_deque-be98454bdfe2e624.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\librayon_core-f61f619dc8e10838.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\librayon-dca44347ecfbb3d8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\crossbeam-utils-a76aac2ae9866593\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-8a97615c96d19aa8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-8a97615c96d19aa8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#either@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "either",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\either-1.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libeither-0ffbc1a8126db283.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_utils-bb4ad7bf8162756c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\build\\rayon-core-a8f7ad3b36b987dc\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_epoch",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-epoch-0.9.18\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_epoch-3bbc16071692da97.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_deque",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-deque-0.8.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\libcrossbeam_deque-be98454bdfe2e624.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rayon-core-1.12.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\librayon_core-f61f619dc8e10838.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\chain.rs:145:1\n    |\n145 | / /// ////////////////////////////////////////////////////////////////////////\n146 | |\n    | |_^\n147 |   struct ChainProducer<A, B>\n    |   -------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_doc_comments)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4087,
                        "byte_start": 4086,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 146,
                        "line_start": 145,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 4108,
                    "byte_start": 4088,
                    "column_end": 21,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\chain.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "struct ChainProducer<A, B>"
                      }
                    ]
                  },
                  {
                    "byte_end": 4087,
                    "byte_start": 4010,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\chain.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 146,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\chain.rs:220:1\n    |\n220 | / /// Wrapper for Chain to implement ExactSizeIterator\n221 | |\n    | |_^\n222 |   struct ChainSeq<A, B> {\n    |   --------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5977,
                        "byte_start": 5976,
                        "column_end": 1,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\iter\\chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 221,
                        "line_start": 220,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "/// Wrapper for Chain to implement ExactSizeIterator"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5993,
                    "byte_start": 5978,
                    "column_end": 16,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\chain.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 222,
                    "line_start": 222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "struct ChainSeq<A, B> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5977,
                    "byte_start": 5924,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\chain.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 221,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 1,
                        "text": "/// Wrapper for Chain to implement ExactSizeIterator"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\cloned.rs:93:1\n   |\n93 | / /// ////////////////////////////////////////////////////////////////////////\n94 | |\n   | |_^\n95 |   struct ClonedProducer<P> {\n   |   --------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2290,
                        "byte_start": 2289,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\cloned.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 93,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2312,
                    "byte_start": 2291,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\cloned.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct ClonedProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2290,
                    "byte_start": 2213,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\cloned.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\cloned.rs:136:1\n    |\n136 | / /// Consumer implementation\n137 | |\n    | |_^\n138 |   struct ClonedConsumer<C> {\n    |   --------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3220,
                        "byte_start": 3219,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\cloned.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 137,
                        "line_start": 136,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3242,
                    "byte_start": 3221,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\cloned.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct ClonedConsumer<C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3220,
                    "byte_start": 3192,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\cloned.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 137,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\copied.rs:93:1\n   |\n93 | / /// ////////////////////////////////////////////////////////////////////////\n94 | |\n   | |_^\n95 |   struct CopiedProducer<P> {\n   |   --------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2287,
                        "byte_start": 2286,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\copied.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 93,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2309,
                    "byte_start": 2288,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\copied.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct CopiedProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2287,
                    "byte_start": 2210,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\copied.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\copied.rs:136:1\n    |\n136 | / /// Consumer implementation\n137 | |\n    | |_^\n138 |   struct CopiedConsumer<C> {\n    |   --------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3216,
                        "byte_start": 3215,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\copied.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 137,
                        "line_start": 136,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3238,
                    "byte_start": 3217,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\copied.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct CopiedConsumer<C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3216,
                    "byte_start": 3188,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\copied.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 137,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\enumerate.rs:85:1\n   |\n85 | / /// Producer implementation\n86 | |\n   | |_^\n87 |   struct EnumerateProducer<P> {\n   |   ------------------------ the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2159,
                        "byte_start": 2158,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\enumerate.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 86,
                        "line_start": 85,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Producer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2184,
                    "byte_start": 2160,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\enumerate.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct EnumerateProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2159,
                    "byte_start": 2131,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\enumerate.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Producer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\filter.rs:51:1\n   |\n51 | / /// Consumer implementation\n52 | |\n   | |_^\n53 |   struct FilterConsumer<'p, C, P> {\n   |   --------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1407,
                        "byte_start": 1406,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\filter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 52,
                        "line_start": 51,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1429,
                    "byte_start": 1408,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\filter.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct FilterConsumer<'p, C, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1407,
                    "byte_start": 1379,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\filter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 52,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\filter_map.rs:51:1\n   |\n51 | / /// Consumer implementation\n52 | |\n   | |_^\n53 |   struct FilterMapConsumer<'p, C, P> {\n   |   ------------------------ the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1480,
                        "byte_start": 1479,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\filter_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 52,
                        "line_start": 51,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1505,
                    "byte_start": 1481,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\filter_map.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct FilterMapConsumer<'p, C, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1480,
                    "byte_start": 1452,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\filter_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 52,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\flat_map.rs:49:1\n   |\n49 | / /// Consumer implementation\n50 | |\n   | |_^\n51 |   struct FlatMapConsumer<'f, C, F> {\n   |   ---------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1442,
                        "byte_start": 1441,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\flat_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 50,
                        "line_start": 49,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1465,
                    "byte_start": 1443,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flat_map.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 51,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct FlatMapConsumer<'f, C, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1442,
                    "byte_start": 1414,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flat_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\flat_map_iter.rs:52:1\n   |\n52 | / /// Consumer implementation\n53 | |\n   | |_^\n54 |   struct FlatMapIterConsumer<'f, C, F> {\n   |   -------------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1529,
                        "byte_start": 1528,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\flat_map_iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 53,
                        "line_start": 52,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1556,
                    "byte_start": 1530,
                    "column_end": 27,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flat_map_iter.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "struct FlatMapIterConsumer<'f, C, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1529,
                    "byte_start": 1501,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flat_map_iter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 52,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\flatten.rs:43:1\n   |\n43 | / /// Consumer implementation\n44 | |\n   | |_^\n45 |   struct FlattenConsumer<C> {\n   |   ---------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1191,
                        "byte_start": 1190,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\flatten.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 44,
                        "line_start": 43,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1214,
                    "byte_start": 1192,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flatten.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct FlattenConsumer<C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1191,
                    "byte_start": 1163,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flatten.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 44,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\flatten_iter.rs:45:1\n   |\n45 | / /// Consumer implementation\n46 | |\n   | |_^\n47 |   struct FlattenIterConsumer<C> {\n   |   -------------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1294,
                        "byte_start": 1293,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\flatten_iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 45,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1321,
                    "byte_start": 1295,
                    "column_end": 27,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flatten_iter.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "struct FlattenIterConsumer<C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1294,
                    "byte_start": 1266,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\flatten_iter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\inspect.rs:109:1\n    |\n109 | / /// ////////////////////////////////////////////////////////////////////////\n110 | |\n    | |_^\n111 |   struct InspectProducer<'f, P, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2796,
                        "byte_start": 2795,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\inspect.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 110,
                        "line_start": 109,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2819,
                    "byte_start": 2797,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\inspect.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 111,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct InspectProducer<'f, P, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2796,
                    "byte_start": 2719,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\inspect.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 110,
                    "line_start": 109,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\inspect.rs:163:1\n    |\n163 | / /// Consumer implementation\n164 | |\n    | |_^\n165 |   struct InspectConsumer<'f, C, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4034,
                        "byte_start": 4033,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\inspect.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 164,
                        "line_start": 163,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 4057,
                    "byte_start": 4035,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\inspect.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 165,
                    "line_start": 165,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct InspectConsumer<'f, C, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4034,
                    "byte_start": 4006,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\inspect.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\len.rs:90:1\n   |\n90 | / /// `MinLenProducer` implementation\n91 | |\n   | |_^\n92 |   struct MinLenProducer<P> {\n   |   --------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2243,
                        "byte_start": 2242,
                        "column_end": 1,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\iter\\len.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 91,
                        "line_start": 90,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 36,
                            "text": "/// `MinLenProducer` implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2265,
                    "byte_start": 2244,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\len.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct MinLenProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2243,
                    "byte_start": 2207,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\len.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 1,
                        "text": "/// `MinLenProducer` implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\len.rs:224:1\n    |\n224 | / /// `MaxLenProducer` implementation\n225 | |\n    | |_^\n226 |   struct MaxLenProducer<P> {\n    |   --------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5343,
                        "byte_start": 5342,
                        "column_end": 1,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\iter\\len.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 225,
                        "line_start": 224,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 36,
                            "text": "/// `MaxLenProducer` implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5365,
                    "byte_start": 5344,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\len.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 226,
                    "line_start": 226,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct MaxLenProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5343,
                    "byte_start": 5307,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\len.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 225,
                    "line_start": 224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 1,
                        "text": "/// `MaxLenProducer` implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map.rs:111:1\n    |\n111 | / /// ////////////////////////////////////////////////////////////////////////\n112 | |\n    | |_^\n113 |   struct MapProducer<'f, P, F> {\n    |   ------------------ the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2743,
                        "byte_start": 2742,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 112,
                        "line_start": 111,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2762,
                    "byte_start": 2744,
                    "column_end": 19,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "struct MapProducer<'f, P, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2743,
                    "byte_start": 2666,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 112,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map.rs:165:1\n    |\n165 | / /// Consumer implementation\n166 | |\n    | |_^\n167 |   struct MapConsumer<'f, C, F> {\n    |   ------------------ the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3942,
                        "byte_start": 3941,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 166,
                        "line_start": 165,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3961,
                    "byte_start": 3943,
                    "column_end": 19,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "struct MapConsumer<'f, C, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3942,
                    "byte_start": 3914,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 166,
                    "line_start": 165,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map_with.rs:120:1\n    |\n120 | / /// ////////////////////////////////////////////////////////////////////////\n121 | |\n    | |_^\n122 |   struct MapWithProducer<'f, P, U, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3123,
                        "byte_start": 3122,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\map_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 120,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3146,
                    "byte_start": 3124,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 122,
                    "line_start": 122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct MapWithProducer<'f, P, U, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3123,
                    "byte_start": 3046,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 121,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map_with.rs:227:1\n    |\n227 | / /// Consumer implementation\n228 | |\n    | |_^\n229 |   struct MapWithConsumer<'f, C, U, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5506,
                        "byte_start": 5505,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\map_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 228,
                        "line_start": 227,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5529,
                    "byte_start": 5507,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 229,
                    "line_start": 229,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct MapWithConsumer<'f, C, U, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5506,
                    "byte_start": 5478,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 228,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map_with.rs:449:1\n    |\n449 | / /// ////////////////////////////////////////////////////////////////////////\n450 | |\n    | |_^\n451 |   struct MapInitProducer<'f, P, INIT, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11211,
                        "byte_start": 11210,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\map_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 450,
                        "line_start": 449,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 11234,
                    "byte_start": 11212,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 451,
                    "line_start": 451,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct MapInitProducer<'f, P, INIT, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 11211,
                    "byte_start": 11134,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 450,
                    "line_start": 449,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\map_with.rs:512:1\n    |\n512 | / /// Consumer implementation\n513 | |\n    | |_^\n514 |   struct MapInitConsumer<'f, C, INIT, F> {\n    |   ---------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12695,
                        "byte_start": 12694,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\map_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 513,
                        "line_start": 512,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 12718,
                    "byte_start": 12696,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 514,
                    "line_start": 514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct MapInitConsumer<'f, C, INIT, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 12695,
                    "byte_start": 12667,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\map_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 513,
                    "line_start": 512,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\panic_fuse.rs:124:1\n    |\n124 | / /// Producer implementation\n125 | |\n    | |_^\n126 |   struct PanicFuseProducer<'a, P> {\n    |   ------------------------ the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3066,
                        "byte_start": 3065,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\panic_fuse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 125,
                        "line_start": 124,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Producer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3091,
                    "byte_start": 3067,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\panic_fuse.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 126,
                    "line_start": 126,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct PanicFuseProducer<'a, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3066,
                    "byte_start": 3038,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\panic_fuse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 124,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Producer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\panic_fuse.rs:225:1\n    |\n225 | / /// Consumer implementation\n226 | |\n    | |_^\n227 |   struct PanicFuseConsumer<'a, C> {\n    |   ------------------------ the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5123,
                        "byte_start": 5122,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\panic_fuse.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 226,
                        "line_start": 225,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5148,
                    "byte_start": 5124,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\panic_fuse.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 227,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct PanicFuseConsumer<'a, C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5123,
                    "byte_start": 5095,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\panic_fuse.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 226,
                    "line_start": 225,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\positions.rs:55:1\n   |\n55 | / /// Consumer implementation\n56 | |\n   | |_^\n57 |   struct PositionsConsumer<'p, C, P> {\n   |   ------------------------ the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1546,
                        "byte_start": 1545,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\positions.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 55,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1571,
                    "byte_start": 1547,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\positions.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct PositionsConsumer<'p, C, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1546,
                    "byte_start": 1518,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\positions.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\skip_any.rs:46:1\n   |\n46 | / /// Consumer implementation\n47 | |\n   | |_^\n48 |   struct SkipAnyConsumer<'f, C> {\n   |   ---------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1238,
                        "byte_start": 1237,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\skip_any.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 46,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1261,
                    "byte_start": 1239,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\skip_any.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct SkipAnyConsumer<'f, C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1238,
                    "byte_start": 1210,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\skip_any.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\skip_any_while.rs:58:1\n   |\n58 | / /// Consumer implementation\n59 | |\n   | |_^\n60 |   struct SkipAnyWhileConsumer<'p, C, P> {\n   |   --------------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1680,
                        "byte_start": 1679,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\skip_any_while.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1708,
                    "byte_start": 1681,
                    "column_end": 28,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\skip_any_while.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "struct SkipAnyWhileConsumer<'p, C, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1680,
                    "byte_start": 1652,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\skip_any_while.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\step_by.rs:97:1\n   |\n97 | / /// Producer implementation\n98 | |\n   | |_^\n99 |   struct StepByProducer<P> {\n   |   --------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2449,
                        "byte_start": 2448,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\step_by.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 97,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Producer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2471,
                    "byte_start": 2450,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\step_by.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct StepByProducer<P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2449,
                    "byte_start": 2421,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\step_by.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Producer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\take_any.rs:46:1\n   |\n46 | / /// Consumer implementation\n47 | |\n   | |_^\n48 |   struct TakeAnyConsumer<'f, C> {\n   |   ---------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1241,
                        "byte_start": 1240,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\take_any.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 46,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1264,
                    "byte_start": 1242,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\take_any.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "struct TakeAnyConsumer<'f, C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1241,
                    "byte_start": 1213,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\take_any.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\take_any_while.rs:58:1\n   |\n58 | / /// Consumer implementation\n59 | |\n   | |_^\n60 |   struct TakeAnyWhileConsumer<'p, C, P> {\n   |   --------------------------- the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1681,
                        "byte_start": 1680,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\take_any_while.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1709,
                    "byte_start": 1682,
                    "column_end": 28,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\take_any_while.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "struct TakeAnyWhileConsumer<'p, C, P> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1681,
                    "byte_start": 1653,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\take_any_while.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\update.rs:108:1\n    |\n108 | / /// ////////////////////////////////////////////////////////////////////////\n109 | |\n    | |_^\n110 |   struct UpdateProducer<'f, P, F> {\n    |   --------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2777,
                        "byte_start": 2776,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\update.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 109,
                        "line_start": 108,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2799,
                    "byte_start": 2778,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\update.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 110,
                    "line_start": 110,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct UpdateProducer<'f, P, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2777,
                    "byte_start": 2700,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\update.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 109,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\update.rs:164:1\n    |\n164 | / /// Consumer implementation\n165 | |\n    | |_^\n166 |   struct UpdateConsumer<'f, C, F> {\n    |   --------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4064,
                        "byte_start": 4063,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\update.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 165,
                        "line_start": 164,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 4086,
                    "byte_start": 4065,
                    "column_end": 22,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\update.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 166,
                    "line_start": 166,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "struct UpdateConsumer<'f, C, F> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4064,
                    "byte_start": 4036,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\update.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 165,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\iter\\while_some.rs:49:1\n   |\n49 | / /// Consumer implementation\n50 | |\n   | |_^\n51 |   struct WhileSomeConsumer<'f, C> {\n   |   ------------------------ the comment documents this struct\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1312,
                        "byte_start": 1311,
                        "column_end": 1,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\iter\\while_some.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 50,
                        "line_start": 49,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "/// Consumer implementation"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1337,
                    "byte_start": 1313,
                    "column_end": 25,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\while_some.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 51,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "struct WhileSomeConsumer<'f, C> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1312,
                    "byte_start": 1284,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\while_some.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 50,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "/// Consumer implementation"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\iter\\zip.rs:121:1\n    |\n121 | / /// ////////////////////////////////////////////////////////////////////////\n122 | |\n    | |_^\n123 |   struct ZipProducer<A: Producer, B: Producer> {\n    |   ------------------ the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3018,
                        "byte_start": 3017,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\iter\\zip.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 122,
                        "line_start": 121,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 3037,
                    "byte_start": 3019,
                    "column_end": 19,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\zip.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "struct ZipProducer<A: Producer, B: Producer> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3018,
                    "byte_start": 2941,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\iter\\zip.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 122,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\vec.rs:177:1\n    |\n177 | / /// ////////////////////////////////////////////////////////////////////////\n178 | |\n    | |_^\n179 |   pub(crate) struct DrainProducer<'data, T: Send> {\n    |   ------------------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4844,
                        "byte_start": 4843,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\vec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 178,
                        "line_start": 177,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 4876,
                    "byte_start": 4845,
                    "column_end": 32,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\vec.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "pub(crate) struct DrainProducer<'data, T: Send> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4844,
                    "byte_start": 4767,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\vec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 178,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\vec.rs:234:1\n    |\n234 | / /// ////////////////////////////////////////////////////////////////////////\n235 | |\n    | |_^\n236 |   // like std::vec::Drain, without updating a source Vec\n237 |   pub(crate) struct SliceDrain<'data, T> {\n    |   ---------------------------- the comment documents this struct\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\nhelp: if the doc comment should not document struct `SliceDrain` then comment it out\n    |\n234 | // /// ////////////////////////////////////////////////////////////////////////\n    | ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6932,
                        "byte_start": 6931,
                        "column_end": 1,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\vec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 235,
                        "line_start": 234,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the doc comment should not document struct `SliceDrain` then comment it out",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6855,
                        "byte_start": 6855,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\vec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 234,
                        "line_start": 234,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "/// ////////////////////////////////////////////////////////////////////////"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 7016,
                    "byte_start": 6988,
                    "column_end": 29,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\vec.rs",
                    "is_primary": false,
                    "label": "the comment documents this struct",
                    "line_end": 237,
                    "line_start": 237,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "pub(crate) struct SliceDrain<'data, T> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6932,
                    "byte_start": 6855,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\vec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 235,
                    "line_start": 234,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "/// ////////////////////////////////////////////////////////////////////////"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n  --> src\\iter\\plumbing\\mod.rs:11:5\n   |\n11 | use std::usize;\n   |     ^^^^^^^^^^\n   |\n   = help: remove this import\n   = note: then `usize::<CONST>` will resolve to the respective associated constant\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `usize::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 398,
                    "byte_start": 388,
                    "column_end": 15,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\iter\\plumbing\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 5,
                        "text": "use std::usize;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n  --> src\\iter\\blocks.rs:30:52\n   |\n30 |             let size = self.sizes.next().unwrap_or(std::usize::MAX);\n   |                                                    ^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n   |\n30 -             let size = self.sizes.next().unwrap_or(std::usize::MAX);\n30 +             let size = self.sizes.next().unwrap_or(usize::MAX);\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 957,
                        "byte_start": 942,
                        "column_end": 67,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\iter\\blocks.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": "usize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 52,
                            "text": "            let size = self.sizes.next().unwrap_or(std::usize::MAX);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 957,
                    "byte_start": 942,
                    "column_end": 67,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "src\\iter\\blocks.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 52,
                        "text": "            let size = self.sizes.next().unwrap_or(std::usize::MAX);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\iter\\collect\\mod.rs:100:5\n    |\n100 | /     assert!(\n101 | |         actual_writes == len,\n102 | |         \"expected {} total writes, but got {}\",\n103 | |         len,\n104 | |         actual_writes\n105 | |     );\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3961,
                        "byte_start": 3961,
                        "column_end": 20,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\iter\\collect\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": "len",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 20,
                            "text": "        \"expected {} total writes, but got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3986,
                        "byte_start": 3986,
                        "column_end": 45,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\iter\\collect\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": "actual_writes",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 45,
                            "text": "        \"expected {} total writes, but got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 4001,
                        "byte_start": 3988,
                        "column_end": 12,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\iter\\collect\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 103,
                        "line_start": 102,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 47,
                            "text": "        \"expected {} total writes, but got {}\","
                          },
                          {
                            "highlight_end": 12,
                            "highlight_start": 1,
                            "text": "        len,"
                          }
                        ]
                      },
                      {
                        "byte_end": 4024,
                        "byte_start": 4001,
                        "column_end": 22,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "src\\iter\\collect\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 104,
                        "line_start": 103,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 12,
                            "text": "        len,"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "        actual_writes"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4030,
                    "byte_start": 3903,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\iter\\collect\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 105,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 5,
                        "text": "    assert!("
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "        actual_writes == len,"
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "        \"expected {} total writes, but got {}\","
                      },
                      {
                        "highlight_end": 13,
                        "highlight_start": 1,
                        "text": "        len,"
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "        actual_writes"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    );"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\iter\\enumerate.rs:5:5\n  |\n5 | use std::usize;\n  |     ^^^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `usize::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `usize::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 88,
                    "byte_start": 78,
                    "column_end": 15,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\iter\\enumerate.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 5,
                        "text": "use std::usize;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n  --> src\\iter\\find_first_last\\mod.rs:46:46\n   |\n46 |     let best_found = AtomicUsize::new(usize::max_value());\n   |                                              ^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n   |\n46 -     let best_found = AtomicUsize::new(usize::max_value());\n46 +     let best_found = AtomicUsize::new(usize::MAX);\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1804,
                        "byte_start": 1793,
                        "column_end": 57,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\iter\\find_first_last\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 46,
                            "text": "    let best_found = AtomicUsize::new(usize::max_value());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 1804,
                    "byte_start": 1793,
                    "column_end": 57,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\iter\\find_first_last\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 46,
                        "text": "    let best_found = AtomicUsize::new(usize::max_value());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n  --> src\\iter\\find_first_last\\mod.rs:74:33\n   |\n74 |             upper_bound: usize::max_value(),\n   |                                 ^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n   |\n74 -             upper_bound: usize::max_value(),\n74 +             upper_bound: usize::MAX,\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2662,
                        "byte_start": 2651,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\iter\\find_first_last\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 74,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "            upper_bound: usize::max_value(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 2662,
                    "byte_start": 2651,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\iter\\find_first_last\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "            upper_bound: usize::max_value(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\iter\\repeat.rs:4:5\n  |\n4 | use std::usize;\n  |     ^^^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `usize::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `usize::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 67,
                    "byte_start": 57,
                    "column_end": 15,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\iter\\repeat.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 4,
                    "line_start": 4,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 5,
                        "text": "use std::usize;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\iter\\step_by.rs:5:5\n  |\n5 | use std::usize;\n  |     ^^^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `usize::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `usize::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 98,
                    "byte_start": 88,
                    "column_end": 15,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\iter\\step_by.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 5,
                        "text": "use std::usize;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\slice\\mod.rs:576:38\n    |\n576 |         if sz_u8 < sz_u16 && len <= (std::u8::MAX as usize) {\n    |                                      ^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n576 -         if sz_u8 < sz_u16 && len <= (std::u8::MAX as usize) {\n576 +         if sz_u8 < sz_u16 && len <= (u8::MAX as usize) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21722,
                        "byte_start": 21710,
                        "column_end": 50,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 576,
                        "line_start": 576,
                        "suggested_replacement": "u8::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 38,
                            "text": "        if sz_u8 < sz_u16 && len <= (std::u8::MAX as usize) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 21722,
                    "byte_start": 21710,
                    "column_end": 50,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 576,
                    "line_start": 576,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 38,
                        "text": "        if sz_u8 < sz_u16 && len <= (std::u8::MAX as usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\slice\\mod.rs:579:39\n    |\n579 |         if sz_u16 < sz_u32 && len <= (std::u16::MAX as usize) {\n    |                                       ^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n579 -         if sz_u16 < sz_u32 && len <= (std::u16::MAX as usize) {\n579 +         if sz_u16 < sz_u32 && len <= (u16::MAX as usize) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21833,
                        "byte_start": 21820,
                        "column_end": 52,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 579,
                        "line_start": 579,
                        "suggested_replacement": "u16::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 39,
                            "text": "        if sz_u16 < sz_u32 && len <= (std::u16::MAX as usize) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 21833,
                    "byte_start": 21820,
                    "column_end": 52,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 579,
                    "line_start": 579,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 39,
                        "text": "        if sz_u16 < sz_u32 && len <= (std::u16::MAX as usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\slice\\mod.rs:582:41\n    |\n582 |         if sz_u32 < sz_usize && len <= (std::u32::MAX as usize) {\n    |                                         ^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n582 -         if sz_u32 < sz_usize && len <= (std::u32::MAX as usize) {\n582 +         if sz_u32 < sz_usize && len <= (u32::MAX as usize) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21947,
                        "byte_start": 21934,
                        "column_end": 54,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 582,
                        "line_start": 582,
                        "suggested_replacement": "u32::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 41,
                            "text": "        if sz_u32 < sz_usize && len <= (std::u32::MAX as usize) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 21947,
                    "byte_start": 21934,
                    "column_end": 54,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 582,
                    "line_start": 582,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 41,
                        "text": "        if sz_u32 < sz_usize && len <= (std::u32::MAX as usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'data\n    --> src\\slice\\mod.rs:1070:6\n     |\n1070 | impl<'data, T, P> Fissile<P> for &'data [T]\n     |      ^^^^^                        ^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n     = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n     |\n1070 - impl<'data, T, P> Fissile<P> for &'data [T]\n1070 + impl<T, P> Fissile<P> for &[T]\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36429,
                        "byte_start": 36422,
                        "column_end": 13,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1070,
                        "line_start": 1070,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 6,
                            "text": "impl<'data, T, P> Fissile<P> for &'data [T]"
                          }
                        ]
                      },
                      {
                        "byte_end": 36457,
                        "byte_start": 36451,
                        "column_end": 41,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1070,
                        "line_start": 1070,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 35,
                            "text": "impl<'data, T, P> Fissile<P> for &'data [T]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'data",
                "spans": [
                  {
                    "byte_end": 36427,
                    "byte_start": 36422,
                    "column_end": 11,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1070,
                    "line_start": 1070,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 6,
                        "text": "impl<'data, T, P> Fissile<P> for &'data [T]"
                      }
                    ]
                  },
                  {
                    "byte_end": 36456,
                    "byte_start": 36451,
                    "column_end": 40,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1070,
                    "line_start": 1070,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 35,
                        "text": "impl<'data, T, P> Fissile<P> for &'data [T]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'data\n    --> src\\slice\\mod.rs:1180:6\n     |\n1180 | impl<'data, T, P> Fissile<P> for &'data mut [T]\n     |      ^^^^^                        ^^^^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n     |\n1180 - impl<'data, T, P> Fissile<P> for &'data mut [T]\n1180 + impl<T, P> Fissile<P> for &mut [T]\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 39382,
                        "byte_start": 39375,
                        "column_end": 13,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1180,
                        "line_start": 1180,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 6,
                            "text": "impl<'data, T, P> Fissile<P> for &'data mut [T]"
                          }
                        ]
                      },
                      {
                        "byte_end": 39410,
                        "byte_start": 39404,
                        "column_end": 41,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\slice\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1180,
                        "line_start": 1180,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 35,
                            "text": "impl<'data, T, P> Fissile<P> for &'data mut [T]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'data",
                "spans": [
                  {
                    "byte_end": 39380,
                    "byte_start": 39375,
                    "column_end": 11,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1180,
                    "line_start": 1180,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 6,
                        "text": "impl<'data, T, P> Fissile<P> for &'data mut [T]"
                      }
                    ]
                  },
                  {
                    "byte_end": 39409,
                    "byte_start": 39404,
                    "column_end": 40,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\slice\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1180,
                    "line_start": 1180,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 35,
                        "text": "impl<'data, T, P> Fissile<P> for &'data mut [T]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'ch\n   --> src\\str.rs:684:6\n    |\n684 | impl<'ch, P: Pattern> Fissile<P> for &'ch str {\n    |      ^^^                              ^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n684 - impl<'ch, P: Pattern> Fissile<P> for &'ch str {\n684 + impl<P: Pattern> Fissile<P> for &str {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20993,
                        "byte_start": 20988,
                        "column_end": 11,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\str.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 684,
                        "line_start": 684,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 6,
                            "text": "impl<'ch, P: Pattern> Fissile<P> for &'ch str {"
                          }
                        ]
                      },
                      {
                        "byte_end": 21025,
                        "byte_start": 21021,
                        "column_end": 43,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\str.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 684,
                        "line_start": 684,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 39,
                            "text": "impl<'ch, P: Pattern> Fissile<P> for &'ch str {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'ch",
                "spans": [
                  {
                    "byte_end": 20991,
                    "byte_start": 20988,
                    "column_end": 9,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\str.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 684,
                    "line_start": 684,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 6,
                        "text": "impl<'ch, P: Pattern> Fissile<P> for &'ch str {"
                      }
                    ]
                  },
                  {
                    "byte_end": 21024,
                    "byte_start": 21021,
                    "column_end": 42,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\str.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 684,
                    "line_start": 684,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 39,
                        "text": "impl<'ch, P: Pattern> Fissile<P> for &'ch str {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\math.rs:21:18\n   |\n21 |         bound => panic!(\"range start {:?} should be <= length {}\", bound, len),\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n21 -         bound => panic!(\"range start {:?} should be <= length {}\", bound, len),\n21 +         bound => panic!(\"range start {bound:?} should be <= length {len}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 694,
                        "byte_start": 694,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "bound",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "        bound => panic!(\"range start {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 719,
                        "byte_start": 719,
                        "column_end": 64,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "len",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 64,
                            "text": "        bound => panic!(\"range start {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 728,
                        "byte_start": 721,
                        "column_end": 73,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 66,
                            "text": "        bound => panic!(\"range start {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 733,
                        "byte_start": 728,
                        "column_end": 78,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 73,
                            "text": "        bound => panic!(\"range start {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 734,
                    "byte_start": 673,
                    "column_end": 79,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\math.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 18,
                        "text": "        bound => panic!(\"range start {:?} should be <= length {}\", bound, len),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\math.rs:27:18\n   |\n27 |         bound => panic!(\"range end {:?} should be <= length {}\", bound, len),\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n27 -         bound => panic!(\"range end {:?} should be <= length {}\", bound, len),\n27 +         bound => panic!(\"range end {bound:?} should be <= length {len}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 947,
                        "byte_start": 947,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "bound",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "        bound => panic!(\"range end {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 972,
                        "byte_start": 972,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "len",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "        bound => panic!(\"range end {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 981,
                        "byte_start": 974,
                        "column_end": 71,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 64,
                            "text": "        bound => panic!(\"range end {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      },
                      {
                        "byte_end": 986,
                        "byte_start": 981,
                        "column_end": 76,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\math.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 71,
                            "text": "        bound => panic!(\"range end {:?} should be <= length {}\", bound, len),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 987,
                    "byte_start": 928,
                    "column_end": 77,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\math.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 18,
                        "text": "        bound => panic!(\"range end {:?} should be <= length {}\", bound, len),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp_1se0c_s/rayon-1.10.0#rayon@1.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rayon",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp_1se0c_s\\rayon-1.10.0\\target\\debug\\deps\\librayon-b405bcb7605af166.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 32
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rayon",
          "version": "1.10.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\n[Settings](https://docs.rs/rayon/latest/settings.html)\n[Help](https://docs.rs/rayon/latest/help.html)\nSummary[Source](https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160)\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#how-to-use-rayon)How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * [Parallel iterators](https://docs.rs/rayon/latest/rayon/iter/index.html) make it easy to convert a sequential iterator to execute in parallel. \n      * The [`ParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html) trait defines general methods for all parallel iterators.\n      * The [`IndexedParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html) trait adds methods for iterators that support random access.\n    * The [`par_sort`](https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort) method sorts `&mut [T]` slices (or vectors) in parallel.\n    * [`par_extend`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend) can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * [`join`](https://docs.rs/rayon/latest/rayon/fn.join.html) is used to subdivide a task into two pieces.\n    * [`scope`](https://docs.rs/rayon/latest/rayon/fn.scope.html) creates a scope within which you can create any number of parallel tasks.\n    * [`ThreadPoolBuilder`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html) can be used to create your own thread pools or customize the global one.\n\n\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude)Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module [`rayon::prelude`](https://docs.rs/rayon/latest/rayon/prelude/index.html). It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as [`map`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map), [`for_each`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each), [`filter`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter), [`fold`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold), and [more](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods).\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#crate-layout)Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror [`std`](https://doc.rust-lang.org/std/) itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in [the `option` module of `std`](https://doc.rust-lang.org/std/option/index.html). Similarly, the `collections` module in Rayon offers parallel iterator types for [the `collections` from `std`](https://doc.rust-lang.org/std/collections/index.html). You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#targets-without-threading)Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the [`rayon_core`](https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html \"mod rayon_core\") documentation for more information about its global fallback.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#other-questions)Other questions?\nSee [the Rayon FAQ](https://github.com/rayon-rs/rayon/blob/main/FAQ.md).\n## Modules[\u00a7](https://docs.rs/rayon/latest/rayon/#modules)\n\n[array](https://docs.rs/rayon/latest/rayon/array/index.html \"mod rayon::array\")\n    Parallel iterator types for [arrays](https://doc.rust-lang.org/std/primitive.array.html) (`[T; N]`)\n\n[collections](https://docs.rs/rayon/latest/rayon/collections/index.html \"mod rayon::collections\")\n    Parallel iterator types for [standard collections](https://doc.rust-lang.org/stable/std/collections/)\n\n[iter](https://docs.rs/rayon/latest/rayon/iter/index.html \"mod rayon::iter\")\n    Traits for writing parallel programs using an iterator-style interface\n\n[option](https://docs.rs/rayon/latest/rayon/option/index.html \"mod rayon::option\")\n    Parallel iterator types for [options](https://doc.rust-lang.org/stable/std/option/)\n\n[prelude](https://docs.rs/rayon/latest/rayon/prelude/index.html \"mod rayon::prelude\")\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\n[range](https://docs.rs/rayon/latest/rayon/range/index.html \"mod rayon::range\")\n    Parallel iterator types for [ranges](https://doc.rust-lang.org/core/ops/struct.Range.html), the type for values created by `a..b` expressions\n\n[range_inclusive](https://docs.rs/rayon/latest/rayon/range_inclusive/index.html \"mod rayon::range_inclusive\")\n    Parallel iterator types for [inclusive ranges](https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html), the type for values created by `a..=b` expressions\n\n[result](https://docs.rs/rayon/latest/rayon/result/index.html \"mod rayon::result\")\n    Parallel iterator types for [results](https://doc.rust-lang.org/stable/std/result/)\n\n[slice](https://docs.rs/rayon/latest/rayon/slice/index.html \"mod rayon::slice\")\n    Parallel iterator types for [slices](https://doc.rust-lang.org/stable/std/slice/)\n\n[str](https://docs.rs/rayon/latest/rayon/str/index.html \"mod rayon::str\")\n    Parallel iterator types for [strings](https://doc.rust-lang.org/stable/std/str/)\n\n[string](https://docs.rs/rayon/latest/rayon/string/index.html \"mod rayon::string\")\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\n[vec](https://docs.rs/rayon/latest/rayon/vec/index.html \"mod rayon::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/stable/std/vec/) (`Vec<T>`)\n## Structs[\u00a7](https://docs.rs/rayon/latest/rayon/#structs)\n\n[BroadcastContext](https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html \"struct rayon::BroadcastContext\")\n    Provides context to a closure called by `broadcast`.\n\n[FnContext](https://docs.rs/rayon/latest/rayon/struct.FnContext.html \"struct rayon::FnContext\")\n    Provides the calling context to a closure called by `join_context`.\n\n[Scope](https://docs.rs/rayon/latest/rayon/struct.Scope.html \"struct rayon::Scope\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`](https://docs.rs/rayon/latest/rayon/fn.scope.html) for more information.\n\n[ScopeFifo](https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html \"struct rayon::ScopeFifo\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See [`scope_fifo()`](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) for more information.\n\n[ThreadBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html \"struct rayon::ThreadBuilder\")\n    Thread builder used for customization via [`ThreadPoolBuilder::spawn_handler`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler).\n\n[ThreadPool](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html \"struct rayon::ThreadPool\")\n    Represents a user created [thread-pool](https://en.wikipedia.org/wiki/Thread_pool).\n\n[ThreadPoolBuildError](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html \"struct rayon::ThreadPoolBuildError\")\n    Error when initializing a thread pool.\n\n[ThreadPoolBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html \"struct rayon::ThreadPoolBuilder\")\n    Used to create a new [`ThreadPool`](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html) or to configure the global rayon thread pool.\n## Enums[\u00a7](https://docs.rs/rayon/latest/rayon/#enums)\n\n[Yield](https://docs.rs/rayon/latest/rayon/enum.Yield.html \"enum rayon::Yield\")\n    Result of [`yield_now()`](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\") or [`yield_local()`](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\").\n## Functions[\u00a7](https://docs.rs/rayon/latest/rayon/#functions)\n\n[broadcast](https://docs.rs/rayon/latest/rayon/fn.broadcast.html \"fn rayon::broadcast\")\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\n[current_num_threads](https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html \"fn rayon::current_num_threads\")\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\n[current_thread_index](https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html \"fn rayon::current_thread_index\")\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\n[in_place_scope](https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html \"fn rayon::in_place_scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[in_place_scope_fifo](https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html \"fn rayon::in_place_scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[join](https://docs.rs/rayon/latest/rayon/fn.join.html \"fn rayon::join\")\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\n[join_context](https://docs.rs/rayon/latest/rayon/fn.join_context.html \"fn rayon::join_context\")\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\n[max_num_threads](https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html \"fn rayon::max_num_threads\")\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\n[scope](https://docs.rs/rayon/latest/rayon/fn.scope.html \"fn rayon::scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[scope_fifo](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html \"fn rayon::scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[spawn](https://docs.rs/rayon/latest/rayon/fn.spawn.html \"fn rayon::spawn\")\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function](https://docs.rs/rayon/latest/rayon/fn.scope.html) to create a scope.\n\n[spawn_broadcast](https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html \"fn rayon::spawn_broadcast\")\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\n[spawn_fifo](https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html \"fn rayon::spawn_fifo\")\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope_fifo()` function](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) to create a scope.\n\n[yield_local](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\")\n    Cooperatively yields execution to local Rayon work.\n\n[yield_now](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\")\n    Cooperatively yields execution to Rayon.\n",
            "markdown_with_citations": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## \u00a7\u27e84\u27e9How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * Parallel iterators\u27e85\u27e9 make it easy to convert a sequential iterator to execute in parallel. \n      * The `ParallelIterator`\u27e86\u27e9 trait defines general methods for all parallel iterators.\n      * The `IndexedParallelIterator`\u27e87\u27e9 trait adds methods for iterators that support random access.\n    * The `par_sort`\u27e88\u27e9 method sorts `&mut [T]` slices (or vectors) in parallel.\n    * `par_extend`\u27e89\u27e9 can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * `join`\u27e810\u27e9 is used to subdivide a task into two pieces.\n    * `scope`\u27e811\u27e9 creates a scope within which you can create any number of parallel tasks.\n    * `ThreadPoolBuilder`\u27e812\u27e9 can be used to create your own thread pools or customize the global one.\n\n\n## \u00a7\u27e813\u27e9Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module `rayon::prelude`\u27e814\u27e9. It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as `map`\u27e815\u27e9, `for_each`\u27e816\u27e9, `filter`\u27e817\u27e9, `fold`\u27e818\u27e9, and more\u27e819\u27e9.\n## \u00a7\u27e820\u27e9Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror `std`\u27e821\u27e9 itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in the `option` module of `std`\u27e822\u27e9. Similarly, the `collections` module in Rayon offers parallel iterator types for the `collections` from `std`\u27e823\u27e9. You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## \u00a7\u27e824\u27e9Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the `rayon_core`\u27e825\u27e9 documentation for more information about its global fallback.\n## \u00a7\u27e826\u27e9Other questions?\nSee the Rayon FAQ\u27e827\u27e9.\n## Modules\u00a7\u27e828\u27e9\n\narray\u27e829\u27e9\n    Parallel iterator types for arrays\u27e830\u27e9 (`[T; N]`)\n\ncollections\u27e831\u27e9\n    Parallel iterator types for standard collections\u27e832\u27e9\n\niter\u27e85\u27e9\n    Traits for writing parallel programs using an iterator-style interface\n\noption\u27e833\u27e9\n    Parallel iterator types for options\u27e834\u27e9\n\nprelude\u27e814\u27e9\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\nrange\u27e835\u27e9\n    Parallel iterator types for ranges\u27e836\u27e9, the type for values created by `a..b` expressions\n\nrange_inclusive\u27e837\u27e9\n    Parallel iterator types for inclusive ranges\u27e838\u27e9, the type for values created by `a..=b` expressions\n\nresult\u27e839\u27e9\n    Parallel iterator types for results\u27e840\u27e9\n\nslice\u27e841\u27e9\n    Parallel iterator types for slices\u27e842\u27e9\n\nstr\u27e843\u27e9\n    Parallel iterator types for strings\u27e844\u27e9\n\nstring\u27e845\u27e9\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n## Structs\u00a7\u27e848\u27e9\n\nBroadcastContext\u27e849\u27e9\n    Provides context to a closure called by `broadcast`.\n\nFnContext\u27e850\u27e9\n    Provides the calling context to a closure called by `join_context`.\n\nScope\u27e851\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. See `scope()`\u27e811\u27e9 for more information.\n\nScopeFifo\u27e852\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See `scope_fifo()`\u27e853\u27e9 for more information.\n\nThreadBuilder\u27e854\u27e9\n    Thread builder used for customization via `ThreadPoolBuilder::spawn_handler`\u27e855\u27e9.\n\nThreadPool\u27e856\u27e9\n    Represents a user created thread-pool\u27e857\u27e9.\n\nThreadPoolBuildError\u27e858\u27e9\n    Error when initializing a thread pool.\n\nThreadPoolBuilder\u27e812\u27e9\n    Used to create a new `ThreadPool`\u27e856\u27e9 or to configure the global rayon thread pool.\n## Enums\u00a7\u27e859\u27e9\n\nYield\u27e860\u27e9\n    Result of `yield_now()`\u27e861\u27e9 or `yield_local()`\u27e862\u27e9.\n## Functions\u00a7\u27e863\u27e9\n\nbroadcast\u27e864\u27e9\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\ncurrent_num_threads\u27e865\u27e9\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\ncurrent_thread_index\u27e866\u27e9\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\nin_place_scope\u27e867\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nin_place_scope_fifo\u27e868\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\njoin\u27e810\u27e9\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\njoin_context\u27e869\u27e9\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\nmax_num_threads\u27e870\u27e9\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\nscope\u27e811\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nscope_fifo\u27e853\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nspawn\u27e871\u27e9\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope()` function\u27e811\u27e9 to create a scope.\n\nspawn_broadcast\u27e872\u27e9\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\nspawn_fifo\u27e873\u27e9\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope_fifo()` function\u27e853\u27e9 to create a scope.\n\nyield_local\u27e862\u27e9\n    Cooperatively yields execution to local Rayon work.\n\nyield_now\u27e861\u27e9\n    Cooperatively yields execution to Rayon.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rayon/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rayon/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160: Source\n\u27e84\u27e9 https://docs.rs/rayon/latest/rayon/#how-to-use-rayon: \u00a7\n\u27e85\u27e9 https://docs.rs/rayon/latest/rayon/iter/index.html: Parallel iterators\n\u27e86\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html: `ParallelIterator`\n\u27e87\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html: `IndexedParallelIterator`\n\u27e88\u27e9 https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort: `par_sort`\n\u27e89\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend: `par_extend`\n\u27e810\u27e9 https://docs.rs/rayon/latest/rayon/fn.join.html: `join`\n\u27e811\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope.html: `scope`\n\u27e812\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html: `ThreadPoolBuilder`\n\u27e813\u27e9 https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude: \u00a7\n\u27e814\u27e9 https://docs.rs/rayon/latest/rayon/prelude/index.html: `rayon::prelude`\n\u27e815\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map: `map`\n\u27e816\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each: `for_each`\n\u27e817\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter: `filter`\n\u27e818\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold: `fold`\n\u27e819\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods: more\n\u27e820\u27e9 https://docs.rs/rayon/latest/rayon/#crate-layout: \u00a7\n\u27e821\u27e9 https://doc.rust-lang.org/std/: `std`\n\u27e822\u27e9 https://doc.rust-lang.org/std/option/index.html: the `option` module of `std`\n\u27e823\u27e9 https://doc.rust-lang.org/std/collections/index.html: the `collections` from `std`\n\u27e824\u27e9 https://docs.rs/rayon/latest/rayon/#targets-without-threading: \u00a7\n\u27e825\u27e9 https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html: mod rayon_core - `rayon_core`\n\u27e826\u27e9 https://docs.rs/rayon/latest/rayon/#other-questions: \u00a7\n\u27e827\u27e9 https://github.com/rayon-rs/rayon/blob/main/FAQ.md: the Rayon FAQ\n\u27e828\u27e9 https://docs.rs/rayon/latest/rayon/#modules: \u00a7\n\u27e829\u27e9 https://docs.rs/rayon/latest/rayon/array/index.html: mod rayon::array - array\n\u27e830\u27e9 https://doc.rust-lang.org/std/primitive.array.html: arrays\n\u27e831\u27e9 https://docs.rs/rayon/latest/rayon/collections/index.html: mod rayon::collections - collections\n\u27e832\u27e9 https://doc.rust-lang.org/stable/std/collections/: standard collections\n\u27e833\u27e9 https://docs.rs/rayon/latest/rayon/option/index.html: mod rayon::option - option\n\u27e834\u27e9 https://doc.rust-lang.org/stable/std/option/: options\n\u27e835\u27e9 https://docs.rs/rayon/latest/rayon/range/index.html: mod rayon::range - range\n\u27e836\u27e9 https://doc.rust-lang.org/core/ops/struct.Range.html: ranges\n\u27e837\u27e9 https://docs.rs/rayon/latest/rayon/range_inclusive/index.html: mod rayon::range_inclusive - range_inclusive\n\u27e838\u27e9 https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html: inclusive ranges\n\u27e839\u27e9 https://docs.rs/rayon/latest/rayon/result/index.html: mod rayon::result - result\n\u27e840\u27e9 https://doc.rust-lang.org/stable/std/result/: results\n\u27e841\u27e9 https://docs.rs/rayon/latest/rayon/slice/index.html: mod rayon::slice - slice\n\u27e842\u27e9 https://doc.rust-lang.org/stable/std/slice/: slices\n\u27e843\u27e9 https://docs.rs/rayon/latest/rayon/str/index.html: mod rayon::str - str\n\u27e844\u27e9 https://doc.rust-lang.org/stable/std/str/: strings\n\u27e845\u27e9 https://docs.rs/rayon/latest/rayon/string/index.html: mod rayon::string - string\n\u27e846\u27e9 https://docs.rs/rayon/latest/rayon/vec/index.html: mod rayon::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/stable/std/vec/: vectors\n\u27e848\u27e9 https://docs.rs/rayon/latest/rayon/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html: struct rayon::BroadcastContext - BroadcastContext\n\u27e850\u27e9 https://docs.rs/rayon/latest/rayon/struct.FnContext.html: struct rayon::FnContext - FnContext\n\u27e851\u27e9 https://docs.rs/rayon/latest/rayon/struct.Scope.html: struct rayon::Scope - Scope\n\u27e852\u27e9 https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html: struct rayon::ScopeFifo - ScopeFifo\n\u27e853\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html: `scope_fifo()`\n\u27e854\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html: struct rayon::ThreadBuilder - ThreadBuilder\n\u27e855\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler: `ThreadPoolBuilder::spawn_handler`\n\u27e856\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html: struct rayon::ThreadPool - ThreadPool\n\u27e857\u27e9 https://en.wikipedia.org/wiki/Thread_pool: thread-pool\n\u27e858\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html: struct rayon::ThreadPoolBuildError - ThreadPoolBuildError\n\u27e859\u27e9 https://docs.rs/rayon/latest/rayon/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/rayon/latest/rayon/enum.Yield.html: enum rayon::Yield - Yield\n\u27e861\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_now.html: fn rayon::yield_now - `yield_now()`\n\u27e862\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_local.html: fn rayon::yield_local - `yield_local()`\n\u27e863\u27e9 https://docs.rs/rayon/latest/rayon/#functions: \u00a7\n\u27e864\u27e9 https://docs.rs/rayon/latest/rayon/fn.broadcast.html: fn rayon::broadcast - broadcast\n\u27e865\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html: fn rayon::current_num_threads - current_num_threads\n\u27e866\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html: fn rayon::current_thread_index - current_thread_index\n\u27e867\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html: fn rayon::in_place_scope - in_place_scope\n\u27e868\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html: fn rayon::in_place_scope_fifo - in_place_scope_fifo\n\u27e869\u27e9 https://docs.rs/rayon/latest/rayon/fn.join_context.html: fn rayon::join_context - join_context\n\u27e870\u27e9 https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html: fn rayon::max_num_threads - max_num_threads\n\u27e871\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn.html: fn rayon::spawn - spawn\n\u27e872\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html: fn rayon::spawn_broadcast - spawn_broadcast\n\u27e873\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html: fn rayon::spawn_fifo - spawn_fifo\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rayon",
          "version": "1.10.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\n[Settings](https://docs.rs/rayon/latest/settings.html)\n[Help](https://docs.rs/rayon/latest/help.html)\nSummary[Source](https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160)\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#how-to-use-rayon)How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * [Parallel iterators](https://docs.rs/rayon/latest/rayon/iter/index.html) make it easy to convert a sequential iterator to execute in parallel. \n      * The [`ParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html) trait defines general methods for all parallel iterators.\n      * The [`IndexedParallelIterator`](https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html) trait adds methods for iterators that support random access.\n    * The [`par_sort`](https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort) method sorts `&mut [T]` slices (or vectors) in parallel.\n    * [`par_extend`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend) can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * [`join`](https://docs.rs/rayon/latest/rayon/fn.join.html) is used to subdivide a task into two pieces.\n    * [`scope`](https://docs.rs/rayon/latest/rayon/fn.scope.html) creates a scope within which you can create any number of parallel tasks.\n    * [`ThreadPoolBuilder`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html) can be used to create your own thread pools or customize the global one.\n\n\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude)Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module [`rayon::prelude`](https://docs.rs/rayon/latest/rayon/prelude/index.html). It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as [`map`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map), [`for_each`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each), [`filter`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter), [`fold`](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold), and [more](https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods).\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#crate-layout)Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror [`std`](https://doc.rust-lang.org/std/) itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in [the `option` module of `std`](https://doc.rust-lang.org/std/option/index.html). Similarly, the `collections` module in Rayon offers parallel iterator types for [the `collections` from `std`](https://doc.rust-lang.org/std/collections/index.html). You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#targets-without-threading)Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the [`rayon_core`](https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html \"mod rayon_core\") documentation for more information about its global fallback.\n## [\u00a7](https://docs.rs/rayon/latest/rayon/#other-questions)Other questions?\nSee [the Rayon FAQ](https://github.com/rayon-rs/rayon/blob/main/FAQ.md).\n## Modules[\u00a7](https://docs.rs/rayon/latest/rayon/#modules)\n\n[array](https://docs.rs/rayon/latest/rayon/array/index.html \"mod rayon::array\")\n    Parallel iterator types for [arrays](https://doc.rust-lang.org/std/primitive.array.html) (`[T; N]`)\n\n[collections](https://docs.rs/rayon/latest/rayon/collections/index.html \"mod rayon::collections\")\n    Parallel iterator types for [standard collections](https://doc.rust-lang.org/stable/std/collections/)\n\n[iter](https://docs.rs/rayon/latest/rayon/iter/index.html \"mod rayon::iter\")\n    Traits for writing parallel programs using an iterator-style interface\n\n[option](https://docs.rs/rayon/latest/rayon/option/index.html \"mod rayon::option\")\n    Parallel iterator types for [options](https://doc.rust-lang.org/stable/std/option/)\n\n[prelude](https://docs.rs/rayon/latest/rayon/prelude/index.html \"mod rayon::prelude\")\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\n[range](https://docs.rs/rayon/latest/rayon/range/index.html \"mod rayon::range\")\n    Parallel iterator types for [ranges](https://doc.rust-lang.org/core/ops/struct.Range.html), the type for values created by `a..b` expressions\n\n[range_inclusive](https://docs.rs/rayon/latest/rayon/range_inclusive/index.html \"mod rayon::range_inclusive\")\n    Parallel iterator types for [inclusive ranges](https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html), the type for values created by `a..=b` expressions\n\n[result](https://docs.rs/rayon/latest/rayon/result/index.html \"mod rayon::result\")\n    Parallel iterator types for [results](https://doc.rust-lang.org/stable/std/result/)\n\n[slice](https://docs.rs/rayon/latest/rayon/slice/index.html \"mod rayon::slice\")\n    Parallel iterator types for [slices](https://doc.rust-lang.org/stable/std/slice/)\n\n[str](https://docs.rs/rayon/latest/rayon/str/index.html \"mod rayon::str\")\n    Parallel iterator types for [strings](https://doc.rust-lang.org/stable/std/str/)\n\n[string](https://docs.rs/rayon/latest/rayon/string/index.html \"mod rayon::string\")\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\n[vec](https://docs.rs/rayon/latest/rayon/vec/index.html \"mod rayon::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/stable/std/vec/) (`Vec<T>`)\n## Structs[\u00a7](https://docs.rs/rayon/latest/rayon/#structs)\n\n[BroadcastContext](https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html \"struct rayon::BroadcastContext\")\n    Provides context to a closure called by `broadcast`.\n\n[FnContext](https://docs.rs/rayon/latest/rayon/struct.FnContext.html \"struct rayon::FnContext\")\n    Provides the calling context to a closure called by `join_context`.\n\n[Scope](https://docs.rs/rayon/latest/rayon/struct.Scope.html \"struct rayon::Scope\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`](https://docs.rs/rayon/latest/rayon/fn.scope.html) for more information.\n\n[ScopeFifo](https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html \"struct rayon::ScopeFifo\")\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See [`scope_fifo()`](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) for more information.\n\n[ThreadBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html \"struct rayon::ThreadBuilder\")\n    Thread builder used for customization via [`ThreadPoolBuilder::spawn_handler`](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler).\n\n[ThreadPool](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html \"struct rayon::ThreadPool\")\n    Represents a user created [thread-pool](https://en.wikipedia.org/wiki/Thread_pool).\n\n[ThreadPoolBuildError](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html \"struct rayon::ThreadPoolBuildError\")\n    Error when initializing a thread pool.\n\n[ThreadPoolBuilder](https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html \"struct rayon::ThreadPoolBuilder\")\n    Used to create a new [`ThreadPool`](https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html) or to configure the global rayon thread pool.\n## Enums[\u00a7](https://docs.rs/rayon/latest/rayon/#enums)\n\n[Yield](https://docs.rs/rayon/latest/rayon/enum.Yield.html \"enum rayon::Yield\")\n    Result of [`yield_now()`](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\") or [`yield_local()`](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\").\n## Functions[\u00a7](https://docs.rs/rayon/latest/rayon/#functions)\n\n[broadcast](https://docs.rs/rayon/latest/rayon/fn.broadcast.html \"fn rayon::broadcast\")\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\n[current_num_threads](https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html \"fn rayon::current_num_threads\")\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\n[current_thread_index](https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html \"fn rayon::current_thread_index\")\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\n[in_place_scope](https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html \"fn rayon::in_place_scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[in_place_scope_fifo](https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html \"fn rayon::in_place_scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[join](https://docs.rs/rayon/latest/rayon/fn.join.html \"fn rayon::join\")\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\n[join_context](https://docs.rs/rayon/latest/rayon/fn.join_context.html \"fn rayon::join_context\")\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\n[max_num_threads](https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html \"fn rayon::max_num_threads\")\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\n[scope](https://docs.rs/rayon/latest/rayon/fn.scope.html \"fn rayon::scope\")\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[scope_fifo](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html \"fn rayon::scope_fifo\")\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\n[spawn](https://docs.rs/rayon/latest/rayon/fn.spawn.html \"fn rayon::spawn\")\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function](https://docs.rs/rayon/latest/rayon/fn.scope.html) to create a scope.\n\n[spawn_broadcast](https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html \"fn rayon::spawn_broadcast\")\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\n[spawn_fifo](https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html \"fn rayon::spawn_fifo\")\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope_fifo()` function](https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html) to create a scope.\n\n[yield_local](https://docs.rs/rayon/latest/rayon/fn.yield_local.html \"fn rayon::yield_local\")\n    Cooperatively yields execution to local Rayon work.\n\n[yield_now](https://docs.rs/rayon/latest/rayon/fn.yield_now.html \"fn rayon::yield_now\")\n    Cooperatively yields execution to Rayon.\n",
            "markdown_with_citations": "[](https://docs.rs/rayon/latest/rayon/all.html \"show sidebar\")\n# Crate rayonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.\nIt is lightweight and convenient for introducing parallelism into existing code. It guarantees data-race free executions and takes advantage of parallelism when sensible, based on work-load at runtime.\n## \u00a7\u27e84\u27e9How to use Rayon\nThere are two ways to use Rayon:\n  * **High-level parallel constructs** are the simplest way to use Rayon and also typically the most efficient. \n    * Parallel iterators\u27e85\u27e9 make it easy to convert a sequential iterator to execute in parallel. \n      * The `ParallelIterator`\u27e86\u27e9 trait defines general methods for all parallel iterators.\n      * The `IndexedParallelIterator`\u27e87\u27e9 trait adds methods for iterators that support random access.\n    * The `par_sort`\u27e88\u27e9 method sorts `&mut [T]` slices (or vectors) in parallel.\n    * `par_extend`\u27e89\u27e9 can be used to efficiently grow collections with items produced by a parallel iterator.\n  * **Custom tasks** let you divide your work into parallel tasks yourself. \n    * `join`\u27e810\u27e9 is used to subdivide a task into two pieces.\n    * `scope`\u27e811\u27e9 creates a scope within which you can create any number of parallel tasks.\n    * `ThreadPoolBuilder`\u27e812\u27e9 can be used to create your own thread pools or customize the global one.\n\n\n## \u00a7\u27e813\u27e9Basic usage and the Rayon prelude\nFirst, you will need to add `rayon` to your `Cargo.toml`.\nNext, to use parallel iterators or the other high-level methods, you need to import several traits. Those traits are bundled into the module `rayon::prelude`\u27e814\u27e9. It is recommended that you import all of these traits at once by adding `use rayon::prelude::*` at the top of each module that uses Rayon methods.\nThese traits give you access to the `par_iter` method which provides parallel implementations of many iterative functions such as `map`\u27e815\u27e9, `for_each`\u27e816\u27e9, `filter`\u27e817\u27e9, `fold`\u27e818\u27e9, and more\u27e819\u27e9.\n## \u00a7\u27e820\u27e9Crate Layout\nRayon extends many of the types found in the standard library with parallel iterator implementations. The modules in the `rayon` crate mirror `std`\u27e821\u27e9 itself: so, e.g., the `option` module in Rayon contains parallel iterators for the `Option` type, which is found in the `option` module of `std`\u27e822\u27e9. Similarly, the `collections` module in Rayon offers parallel iterator types for the `collections` from `std`\u27e823\u27e9. You will rarely need to access these submodules unless you need to name iterator types explicitly.\n## \u00a7\u27e824\u27e9Targets without threading\nRayon has limited support for targets without `std` threading implementations. See the `rayon_core`\u27e825\u27e9 documentation for more information about its global fallback.\n## \u00a7\u27e826\u27e9Other questions?\nSee the Rayon FAQ\u27e827\u27e9.\n## Modules\u00a7\u27e828\u27e9\n\narray\u27e829\u27e9\n    Parallel iterator types for arrays\u27e830\u27e9 (`[T; N]`)\n\ncollections\u27e831\u27e9\n    Parallel iterator types for standard collections\u27e832\u27e9\n\niter\u27e85\u27e9\n    Traits for writing parallel programs using an iterator-style interface\n\noption\u27e833\u27e9\n    Parallel iterator types for options\u27e834\u27e9\n\nprelude\u27e814\u27e9\n    The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.\n\nrange\u27e835\u27e9\n    Parallel iterator types for ranges\u27e836\u27e9, the type for values created by `a..b` expressions\n\nrange_inclusive\u27e837\u27e9\n    Parallel iterator types for inclusive ranges\u27e838\u27e9, the type for values created by `a..=b` expressions\n\nresult\u27e839\u27e9\n    Parallel iterator types for results\u27e840\u27e9\n\nslice\u27e841\u27e9\n    Parallel iterator types for slices\u27e842\u27e9\n\nstr\u27e843\u27e9\n    Parallel iterator types for strings\u27e844\u27e9\n\nstring\u27e845\u27e9\n    This module contains the parallel iterator types for owned strings (`String`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n## Structs\u00a7\u27e848\u27e9\n\nBroadcastContext\u27e849\u27e9\n    Provides context to a closure called by `broadcast`.\n\nFnContext\u27e850\u27e9\n    Provides the calling context to a closure called by `join_context`.\n\nScope\u27e851\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. See `scope()`\u27e811\u27e9 for more information.\n\nScopeFifo\u27e852\u27e9\n    Represents a fork-join scope which can be used to spawn any number of tasks. Those spawned from the same thread are prioritized in relative FIFO order. See `scope_fifo()`\u27e853\u27e9 for more information.\n\nThreadBuilder\u27e854\u27e9\n    Thread builder used for customization via `ThreadPoolBuilder::spawn_handler`\u27e855\u27e9.\n\nThreadPool\u27e856\u27e9\n    Represents a user created thread-pool\u27e857\u27e9.\n\nThreadPoolBuildError\u27e858\u27e9\n    Error when initializing a thread pool.\n\nThreadPoolBuilder\u27e812\u27e9\n    Used to create a new `ThreadPool`\u27e856\u27e9 or to configure the global rayon thread pool.\n## Enums\u00a7\u27e859\u27e9\n\nYield\u27e860\u27e9\n    Result of `yield_now()`\u27e861\u27e9 or `yield_local()`\u27e862\u27e9.\n## Functions\u00a7\u27e863\u27e9\n\nbroadcast\u27e864\u27e9\n    Executes `op` within every thread in the current threadpool. If this is called from a non-Rayon thread, it will execute in the global threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool. When the call has completed on each thread, returns a vector containing all of their return values.\n\ncurrent_num_threads\u27e865\u27e9\n    Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.\n\ncurrent_thread_index\u27e866\u27e9\n    If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.\n\nin_place_scope\u27e867\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nin_place_scope_fifo\u27e868\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\njoin\u27e810\u27e9\n    Takes two closures and _potentially_ runs them in parallel. It returns a pair of the results from those closures.\n\njoin_context\u27e869\u27e9\n    Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they\u2019re executing on a different thread than where `join_context` was called. This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.\n\nmax_num_threads\u27e870\u27e9\n    Returns the maximum number of threads that Rayon supports in a single thread-pool.\n\nscope\u27e811\u27e9\n    Creates a \u201cfork-join\u201d scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nscope_fifo\u27e853\u27e9\n    Creates a \u201cfork-join\u201d scope `s` with FIFO order, and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.\n\nspawn\u27e871\u27e9\n    Puts the task into the Rayon threadpool\u2019s job queue in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope()` function\u27e811\u27e9 to create a scope.\n\nspawn_broadcast\u27e872\u27e9\n    Spawns an asynchronous task on every thread in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame \u2013 therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).\n\nspawn_fifo\u27e873\u27e9\n    Fires off a task into the Rayon threadpool in the \u201cstatic\u201d or \u201cglobal\u201d scope. Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use the `scope_fifo()` function\u27e853\u27e9 to create a scope.\n\nyield_local\u27e862\u27e9\n    Cooperatively yields execution to local Rayon work.\n\nyield_now\u27e861\u27e9\n    Cooperatively yields execution to Rayon.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rayon/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rayon/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rayon/latest/src/rayon/lib.rs.html#1-160: Source\n\u27e84\u27e9 https://docs.rs/rayon/latest/rayon/#how-to-use-rayon: \u00a7\n\u27e85\u27e9 https://docs.rs/rayon/latest/rayon/iter/index.html: Parallel iterators\n\u27e86\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html: `ParallelIterator`\n\u27e87\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.IndexedParallelIterator.html: `IndexedParallelIterator`\n\u27e88\u27e9 https://docs.rs/rayon/latest/rayon/slice/trait.ParallelSliceMut.html#method.par_sort: `par_sort`\n\u27e89\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelExtend.html#tymethod.par_extend: `par_extend`\n\u27e810\u27e9 https://docs.rs/rayon/latest/rayon/fn.join.html: `join`\n\u27e811\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope.html: `scope`\n\u27e812\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html: `ThreadPoolBuilder`\n\u27e813\u27e9 https://docs.rs/rayon/latest/rayon/#basic-usage-and-the-rayon-prelude: \u00a7\n\u27e814\u27e9 https://docs.rs/rayon/latest/rayon/prelude/index.html: `rayon::prelude`\n\u27e815\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.map: `map`\n\u27e816\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.for_each: `for_each`\n\u27e817\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.filter: `filter`\n\u27e818\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#method.fold: `fold`\n\u27e819\u27e9 https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html#provided-methods: more\n\u27e820\u27e9 https://docs.rs/rayon/latest/rayon/#crate-layout: \u00a7\n\u27e821\u27e9 https://doc.rust-lang.org/std/: `std`\n\u27e822\u27e9 https://doc.rust-lang.org/std/option/index.html: the `option` module of `std`\n\u27e823\u27e9 https://doc.rust-lang.org/std/collections/index.html: the `collections` from `std`\n\u27e824\u27e9 https://docs.rs/rayon/latest/rayon/#targets-without-threading: \u00a7\n\u27e825\u27e9 https://docs.rs/rayon-core/1.12.1/x86_64-unknown-linux-gnu/rayon_core/index.html: mod rayon_core - `rayon_core`\n\u27e826\u27e9 https://docs.rs/rayon/latest/rayon/#other-questions: \u00a7\n\u27e827\u27e9 https://github.com/rayon-rs/rayon/blob/main/FAQ.md: the Rayon FAQ\n\u27e828\u27e9 https://docs.rs/rayon/latest/rayon/#modules: \u00a7\n\u27e829\u27e9 https://docs.rs/rayon/latest/rayon/array/index.html: mod rayon::array - array\n\u27e830\u27e9 https://doc.rust-lang.org/std/primitive.array.html: arrays\n\u27e831\u27e9 https://docs.rs/rayon/latest/rayon/collections/index.html: mod rayon::collections - collections\n\u27e832\u27e9 https://doc.rust-lang.org/stable/std/collections/: standard collections\n\u27e833\u27e9 https://docs.rs/rayon/latest/rayon/option/index.html: mod rayon::option - option\n\u27e834\u27e9 https://doc.rust-lang.org/stable/std/option/: options\n\u27e835\u27e9 https://docs.rs/rayon/latest/rayon/range/index.html: mod rayon::range - range\n\u27e836\u27e9 https://doc.rust-lang.org/core/ops/struct.Range.html: ranges\n\u27e837\u27e9 https://docs.rs/rayon/latest/rayon/range_inclusive/index.html: mod rayon::range_inclusive - range_inclusive\n\u27e838\u27e9 https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html: inclusive ranges\n\u27e839\u27e9 https://docs.rs/rayon/latest/rayon/result/index.html: mod rayon::result - result\n\u27e840\u27e9 https://doc.rust-lang.org/stable/std/result/: results\n\u27e841\u27e9 https://docs.rs/rayon/latest/rayon/slice/index.html: mod rayon::slice - slice\n\u27e842\u27e9 https://doc.rust-lang.org/stable/std/slice/: slices\n\u27e843\u27e9 https://docs.rs/rayon/latest/rayon/str/index.html: mod rayon::str - str\n\u27e844\u27e9 https://doc.rust-lang.org/stable/std/str/: strings\n\u27e845\u27e9 https://docs.rs/rayon/latest/rayon/string/index.html: mod rayon::string - string\n\u27e846\u27e9 https://docs.rs/rayon/latest/rayon/vec/index.html: mod rayon::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/stable/std/vec/: vectors\n\u27e848\u27e9 https://docs.rs/rayon/latest/rayon/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/rayon/latest/rayon/struct.BroadcastContext.html: struct rayon::BroadcastContext - BroadcastContext\n\u27e850\u27e9 https://docs.rs/rayon/latest/rayon/struct.FnContext.html: struct rayon::FnContext - FnContext\n\u27e851\u27e9 https://docs.rs/rayon/latest/rayon/struct.Scope.html: struct rayon::Scope - Scope\n\u27e852\u27e9 https://docs.rs/rayon/latest/rayon/struct.ScopeFifo.html: struct rayon::ScopeFifo - ScopeFifo\n\u27e853\u27e9 https://docs.rs/rayon/latest/rayon/fn.scope_fifo.html: `scope_fifo()`\n\u27e854\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadBuilder.html: struct rayon::ThreadBuilder - ThreadBuilder\n\u27e855\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuilder.html#method.spawn_handler: `ThreadPoolBuilder::spawn_handler`\n\u27e856\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPool.html: struct rayon::ThreadPool - ThreadPool\n\u27e857\u27e9 https://en.wikipedia.org/wiki/Thread_pool: thread-pool\n\u27e858\u27e9 https://docs.rs/rayon/latest/rayon/struct.ThreadPoolBuildError.html: struct rayon::ThreadPoolBuildError - ThreadPoolBuildError\n\u27e859\u27e9 https://docs.rs/rayon/latest/rayon/#enums: \u00a7\n\u27e860\u27e9 https://docs.rs/rayon/latest/rayon/enum.Yield.html: enum rayon::Yield - Yield\n\u27e861\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_now.html: fn rayon::yield_now - `yield_now()`\n\u27e862\u27e9 https://docs.rs/rayon/latest/rayon/fn.yield_local.html: fn rayon::yield_local - `yield_local()`\n\u27e863\u27e9 https://docs.rs/rayon/latest/rayon/#functions: \u00a7\n\u27e864\u27e9 https://docs.rs/rayon/latest/rayon/fn.broadcast.html: fn rayon::broadcast - broadcast\n\u27e865\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_num_threads.html: fn rayon::current_num_threads - current_num_threads\n\u27e866\u27e9 https://docs.rs/rayon/latest/rayon/fn.current_thread_index.html: fn rayon::current_thread_index - current_thread_index\n\u27e867\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope.html: fn rayon::in_place_scope - in_place_scope\n\u27e868\u27e9 https://docs.rs/rayon/latest/rayon/fn.in_place_scope_fifo.html: fn rayon::in_place_scope_fifo - in_place_scope_fifo\n\u27e869\u27e9 https://docs.rs/rayon/latest/rayon/fn.join_context.html: fn rayon::join_context - join_context\n\u27e870\u27e9 https://docs.rs/rayon/latest/rayon/fn.max_num_threads.html: fn rayon::max_num_threads - max_num_threads\n\u27e871\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn.html: fn rayon::spawn - spawn\n\u27e872\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_broadcast.html: fn rayon::spawn_broadcast - spawn_broadcast\n\u27e873\u27e9 https://docs.rs/rayon/latest/rayon/fn.spawn_fifo.html: fn rayon::spawn_fifo - spawn_fifo\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `rayon` crate is a lightweight and ergonomic library for data parallelism in Rust, enabling easy conversion of sequential computations into parallel ones while ensuring data-race-free execution. It provides high-level parallel constructs, including parallel iterators (`par_iter`) for operations like `map`, `filter`, and `fold`, as well as custom task management with `join` and `scope`. Additionally, it extends standard library types (e.g., slices, collections, ranges) with parallel iterator implementations and supports customizable thread pools.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 9.5,
          "factual_counterfactual": "### Pair 1: Parallel Iterators  \n\u2705 Factual: Rayon provides parallel iterator implementations via the `ParallelIterator` trait, allowing methods like `map`, `filter`, and `fold` to run concurrently across multiple threads.  \n\u274c Counterfactual: Rayon parallel iterators automatically determine the optimal number of threads based on the size of the input data, without relying on the thread pool configuration.  \n\n---\n\n### Pair 2: Sorting with `par_sort`  \n\u2705 Factual: The `par_sort` method in Rayon enables parallel sorting of slices or vectors, leveraging multiple threads to improve performance for large datasets.  \n\u274c Counterfactual: The `par_sort` method in Rayon guarantees deterministic sorting order regardless of the underlying thread execution order.  \n\n---\n\n### Pair 3: Custom Thread Pool Configuration  \n\u2705 Factual: Rayon allows users to create custom thread pools using `ThreadPoolBuilder`, enabling fine-grained control over the number of threads and their behavior.  \n\u274c Counterfactual: Custom thread pools in Rayon can be dynamically resized at runtime based on workload changes.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-23d40cfc-379f22ac-1751262801",
      "timestamp": "2025-06-30T05:53:21.006609+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]