[
  {
    "execution_id": "exec-7dadb450-2fddb508-1751261237",
    "timestamp": "2025-06-30T05:27:17.346663+00:00",
    "sacred_chain": {
      "input_data": "unicode-width",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'unicode-width' -> 'unicode-width'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "unicode-width",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/unicode-width",
            "title": "unicode-width v0.2.1",
            "content": {
              "raw_markdown": "#  unicode-width v0.2.1\nDetermine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules. \n  * [ #text ](https://crates.io/keywords/text)\n  * [ #unicode ](https://crates.io/keywords/unicode)\n  * [ #width ](https://crates.io/keywords/width)\n\n\n  * [ Readme ](https://crates.io/crates/unicode-width)\n  * [ 18 Versions ](https://crates.io/crates/unicode-width/versions)\n  * [ Dependencies ](https://crates.io/crates/unicode-width/dependencies)\n  * [ Dependents ](https://crates.io/crates/unicode-width/reverse_dependencies)\n\n\n## Metadata\n20 days ago \nv1.66.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n273 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-width\nOr add the following line to your Cargo.toml:\nunicode-width = \"0.2.1\"\n## Repository\n[ github.com/unicode-rs/unicode-width ](https://github.com/unicode-rs/unicode-width)\n## Owners\n## Categories\n  * [Command-line interface](https://crates.io/categories/command-line-interface)\n  * [Text processing](https://crates.io/categories/text-processing)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n  * [Internationalization (i18n)](https://crates.io/categories/internationalization)\n\n\n[ Report crate ](https://crates.io/support?crate=unicode-width&inquire=crate-violation)\n### Stats Overview\n297,424,373 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  unicode-width v0.2.1\nDetermine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules. \n  *  #text \u27e81\u27e9\n  *  #unicode \u27e82\u27e9\n  *  #width \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  18 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n20 days ago \nv1.66.0 \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n273 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-width\nOr add the following line to your Cargo.toml:\nunicode-width = \"0.2.1\"\n## Repository\n github.com/unicode-rs/unicode-width \u27e810\u27e9\n## Owners\n## Categories\n  * Command-line interface\u27e811\u27e9\n  * Text processing\u27e812\u27e9\n  * No dynamic allocation\u27e813\u27e9\n  * Internationalization (i18n)\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n297,424,373 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/text:  #text \n\u27e82\u27e9 https://crates.io/keywords/unicode:  #unicode \n\u27e83\u27e9 https://crates.io/keywords/width:  #width \n\u27e84\u27e9 https://crates.io/crates/unicode-width:  Readme \n\u27e85\u27e9 https://crates.io/crates/unicode-width/versions:  18 Versions \n\u27e86\u27e9 https://crates.io/crates/unicode-width/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/unicode-width/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://github.com/unicode-rs/unicode-width:  github.com/unicode-rs/unicode-width \n\u27e811\u27e9 https://crates.io/categories/command-line-interface: Command-line interface\n\u27e812\u27e9 https://crates.io/categories/text-processing: Text processing\n\u27e813\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e814\u27e9 https://crates.io/categories/internationalization: Internationalization (i18n)\n\u27e815\u27e9 https://crates.io/support?crate=unicode-width&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1569,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115026.861398"
          },
          "docs_rs": {
            "url": "https://docs.rs/unicode-width",
            "title": "Crate unicode_widthCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\n[Settings](https://docs.rs/unicode-width/latest/settings.html)\n[Help](https://docs.rs/unicode-width/latest/help.html)\nSummary[Source](https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259)\nExpand description\nDetermine displayed width of `char` and `str` types according to [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/) and other portions of the Unicode standard. See the [Rules for determining width](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width) section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag)`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the [`UnicodeWidthChar::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthChar::width_cjk\") and [`UnicodeWidthStr::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthStr::width_cjk\"), which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the [`UnicodeWidthChar`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\") and [`UnicodeWidthStr`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\") traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width)Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified [emoji ZWJ sequences](https://www.unicode.org/reports/tr51/#def_emoji_sequence) have width 2.\n       * [Emoji modifier sequences](https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence) have width 2.\n       * [Emoji presentation sequences](https://unicode.org/reports/tr51/#def_emoji_presentation_sequence) have width 2.\n       * Outside of an East Asian context, [text presentation sequences](https://unicode.org/reports/tr51/#def_text_presentation_sequence) have width 1 if their base character: \n         * Has the [`Emoji_Presentation`](https://unicode.org/reports/tr51/#def_emoji_presentation) property, and\n         * Is not in the [Enclosed Ideographic Supplement](https://unicode.org/charts/nameslist/n_1F200.html) block.\n     * [`'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`](https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf) always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining marks](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602) anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of [`'\\u{200D}'` ZERO WIDTH JOINER](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126)s will not affect the width.\n       * **[Arabic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480)** : A character sequence consisting of one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Lam`, followed by any number of characters with [`Joining_Type`](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009)`=Transparent`, followed by one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **[Buginese](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743)** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **[Hebrew](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528)** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **[Khmer](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642)** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **[Kirat Rai](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409)** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **[Lisu](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587)** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **[Old Turkic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975)** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **[Tifinagh](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184)** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338). The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has [`Canonical_Combining_Class`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313) greater than 1, or\n       * Is a [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining mark](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602).\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) has width 1 (outside of the ligatures described previously).\n    2. [`'\\u{115F}'` HANGUL CHOSEONG FILLER](https://util.unicode.org/UnicodeJsps/character.jsp?a=115F) and [`'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA](https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4) have width 2.\n    3. [`'\\u{17D8}'` KHMER SIGN BEYYAL](https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8) has width 3.\n    4. The following have width 0: \n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D) with the [`Default_Ignorable_Code_Point`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D) with the [`Grapheme_Extend`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D) with a [`Hangul_Syllable_Type`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593) of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s: \n         * [`'\\u{0605}'` NUMBER MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0605),\n         * [`'\\u{070F}'` SYRIAC ABBREVIATION MARK](https://util.unicode.org/UnicodeJsps/character.jsp?a=070F),\n         * [`'\\u{0890}'` POUND MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0890),\n         * [`'\\u{0891}'` PIASTRE MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0891), and\n         * [`'\\u{08E2}'` DISPUTED END OF AYAH](https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2).\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D) with the [`Grapheme_Extend=Prepend`](https://www.unicode.org/reports/tr29/#Prepend) property, that are not also [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s.\n       * [`'\\u{A8FA}'` DEVANAGARI CARET](https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA).\n    5. [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D) with an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Fullwidth`](https://www.unicode.org/reports/tr11/#ED2) or [`Wide`](https://www.unicode.org/reports/tr11/#ED4) have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6), or\n         * Has a [`Line_Break`](https://www.unicode.org/reports/tr14/#LD5) of [`AI`](https://www.unicode.org/reports/tr14/#AI), or\n         * Has a canonical decomposition to an [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6) character followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338), or\n         * Is [`'\\u{0387}'` GREEK ANO TELEIA](https://util.unicode.org/UnicodeJsps/character.jsp?a=0387); and\n       * Does not have a [`General_Category`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142) of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence)Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html \"constant unicode_width::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-width is based on.\n## Traits[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#traits)\n\n[UnicodeWidthChar](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\")\n    Methods for determining displayed width of Unicode characters.\n\n[UnicodeWidthStr](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\")\n    Methods for determining displayed width of Unicode strings.\n",
              "markdown_with_citations": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nDetermine displayed width of `char` and `str` types according to Unicode Standard Annex #11\u27e84\u27e9 and other portions of the Unicode standard. See the Rules for determining width\u27e85\u27e9 section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## \u00a7\u27e86\u27e9`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the `UnicodeWidthChar::width_cjk`\u27e87\u27e9 and `UnicodeWidthStr::width_cjk`\u27e88\u27e9, which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the `UnicodeWidthChar`\u27e89\u27e9 and `UnicodeWidthStr`\u27e810\u27e9 traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## \u00a7\u27e85\u27e9Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified emoji ZWJ sequences\u27e811\u27e9 have width 2.\n       * Emoji modifier sequences\u27e812\u27e9 have width 2.\n       * Emoji presentation sequences\u27e813\u27e9 have width 2.\n       * Outside of an East Asian context, text presentation sequences\u27e814\u27e9 have width 1 if their base character: \n         * Has the `Emoji_Presentation`\u27e815\u27e9 property, and\n         * Is not in the Enclosed Ideographic Supplement\u27e816\u27e9 block.\n     * `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\u27e817\u27e9 always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of default-ignorable\u27e818\u27e9 combining marks\u27e819\u27e9 anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of `'\\u{200D}'` ZERO WIDTH JOINER\u27e820\u27e9s will not affect the width.\n       * **Arabic\u27e821\u27e9** : A character sequence consisting of one character with `Joining_Group`\u27e822\u27e9`=Lam`, followed by any number of characters with `Joining_Type`\u27e823\u27e9`=Transparent`, followed by one character with `Joining_Group`\u27e822\u27e9`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **Buginese\u27e824\u27e9** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **Hebrew\u27e825\u27e9** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **Khmer\u27e826\u27e9** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **Kirat Rai\u27e827\u27e9** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **Lisu\u27e828\u27e9** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **Old Turkic\u27e829\u27e9** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **Tifinagh\u27e830\u27e9** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9. The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has `Canonical_Combining_Class`\u27e833\u27e9 greater than 1, or\n       * Is a default-ignorable\u27e818\u27e9 combining mark\u27e819\u27e9.\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 has width 1 (outside of the ligatures described previously).\n    2. `'\\u{115F}'` HANGUL CHOSEONG FILLER\u27e834\u27e9 and `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\u27e835\u27e9 have width 2.\n    3. `'\\u{17D8}'` KHMER SIGN BEYYAL\u27e836\u27e9 has width 3.\n    4. The following have width 0: \n       * Characters\u27e837\u27e9 with the `Default_Ignorable_Code_Point`\u27e818\u27e9 property.\n       * Characters\u27e838\u27e9 with the `Grapheme_Extend`\u27e839\u27e9 property.\n       * Characters\u27e840\u27e9 with a `Hangul_Syllable_Type`\u27e841\u27e9 of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following `Prepended_Concatenation_Mark`\u27e842\u27e9s: \n         * `'\\u{0605}'` NUMBER MARK ABOVE\u27e843\u27e9,\n         * `'\\u{070F}'` SYRIAC ABBREVIATION MARK\u27e844\u27e9,\n         * `'\\u{0890}'` POUND MARK ABOVE\u27e845\u27e9,\n         * `'\\u{0891}'` PIASTRE MARK ABOVE\u27e846\u27e9, and\n         * `'\\u{08E2}'` DISPUTED END OF AYAH\u27e847\u27e9.\n       * Characters\u27e848\u27e9 with the `Grapheme_Extend=Prepend`\u27e849\u27e9 property, that are not also `Prepended_Concatenation_Mark`\u27e842\u27e9s.\n       * `'\\u{A8FA}'` DEVANAGARI CARET\u27e850\u27e9.\n    5. Characters\u27e851\u27e9 with an `East_Asian_Width`\u27e852\u27e9 of `Fullwidth`\u27e853\u27e9 or `Wide`\u27e854\u27e9 have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an `East_Asian_Width`\u27e852\u27e9 of `Ambiguous`\u27e855\u27e9, or\n         * Has a `Line_Break`\u27e856\u27e9 of `AI`\u27e857\u27e9, or\n         * Has a canonical decomposition to an `Ambiguous`\u27e855\u27e9 character followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9, or\n         * Is `'\\u{0387}'` GREEK ANO TELEIA\u27e858\u27e9; and\n       * Does not have a `General_Category`\u27e859\u27e9 of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### \u00a7\u27e860\u27e9Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants\u00a7\u27e861\u27e9\n\nUNICODE_VERSION\u27e862\u27e9\n    The version of Unicode\u27e863\u27e9 that this version of unicode-width is based on.\n## Traits\u00a7\u27e864\u27e9\n\nUnicodeWidthChar\u27e89\u27e9\n    Methods for determining displayed width of Unicode characters.\n\nUnicodeWidthStr\u27e810\u27e9\n    Methods for determining displayed width of Unicode strings.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-width/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-width/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr11/: Unicode Standard Annex #11\n\u27e85\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width: Rules for determining width\n\u27e86\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk: method unicode_width::UnicodeWidthChar::width_cjk - `UnicodeWidthChar::width_cjk`\n\u27e88\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk: method unicode_width::UnicodeWidthStr::width_cjk - `UnicodeWidthStr::width_cjk`\n\u27e89\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html: trait unicode_width::UnicodeWidthChar - `UnicodeWidthChar`\n\u27e810\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html: trait unicode_width::UnicodeWidthStr - `UnicodeWidthStr`\n\u27e811\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_sequence: emoji ZWJ sequences\n\u27e812\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence: Emoji modifier sequences\n\u27e813\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation_sequence: Emoji presentation sequences\n\u27e814\u27e9 https://unicode.org/reports/tr51/#def_text_presentation_sequence: text presentation sequences\n\u27e815\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation: `Emoji_Presentation`\n\u27e816\u27e9 https://unicode.org/charts/nameslist/n_1F200.html: Enclosed Ideographic Supplement\n\u27e817\u27e9 https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf: `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\n\u27e818\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095: default-ignorable\n\u27e819\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602: combining marks\n\u27e820\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126: `'\\u{200D}'` ZERO WIDTH JOINER\n\u27e821\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480: Arabic\n\u27e822\u27e9 https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862: `Joining_Group`\n\u27e823\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009: `Joining_Type`\n\u27e824\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743: Buginese\n\u27e825\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528: Hebrew\n\u27e826\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642: Khmer\n\u27e827\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409: Kirat Rai\n\u27e828\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587: Lisu\n\u27e829\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975: Old Turkic\n\u27e830\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184: Tifinagh\n\u27e831\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F: `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\n\u27e832\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0338: `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\n\u27e833\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313: `Canonical_Combining_Class`\n\u27e834\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=115F: `'\\u{115F}'` HANGUL CHOSEONG FILLER\n\u27e835\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4: `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\n\u27e836\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8: `'\\u{17D8}'` KHMER SIGN BEYYAL\n\u27e837\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D: Characters\n\u27e838\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D: Characters\n\u27e839\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443: `Grapheme_Extend`\n\u27e840\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D: Characters\n\u27e841\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593: `Hangul_Syllable_Type`\n\u27e842\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908: `Prepended_Concatenation_Mark`\n\u27e843\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0605: `'\\u{0605}'` NUMBER MARK ABOVE\n\u27e844\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=070F: `'\\u{070F}'` SYRIAC ABBREVIATION MARK\n\u27e845\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0890: `'\\u{0890}'` POUND MARK ABOVE\n\u27e846\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0891: `'\\u{0891}'` PIASTRE MARK ABOVE\n\u27e847\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2: `'\\u{08E2}'` DISPUTED END OF AYAH\n\u27e848\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D: Characters\n\u27e849\u27e9 https://www.unicode.org/reports/tr29/#Prepend: `Grapheme_Extend=Prepend`\n\u27e850\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA: `'\\u{A8FA}'` DEVANAGARI CARET\n\u27e851\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D: Characters\n\u27e852\u27e9 https://www.unicode.org/reports/tr11/#ED1: `East_Asian_Width`\n\u27e853\u27e9 https://www.unicode.org/reports/tr11/#ED2: `Fullwidth`\n\u27e854\u27e9 https://www.unicode.org/reports/tr11/#ED4: `Wide`\n\u27e855\u27e9 https://www.unicode.org/reports/tr11/#ED6: `Ambiguous`\n\u27e856\u27e9 https://www.unicode.org/reports/tr14/#LD5: `Line_Break`\n\u27e857\u27e9 https://www.unicode.org/reports/tr14/#AI: `AI`\n\u27e858\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0387: `'\\u{0387}'` GREEK ANO TELEIA\n\u27e859\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142: `General_Category`\n\u27e860\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence: \u00a7\n\u27e861\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#constants: \u00a7\n\u27e862\u27e9 https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html: constant unicode_width::UNICODE_VERSION - UNICODE_VERSION\n\u27e863\u27e9 http://www.unicode.org/: Unicode\n\u27e864\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#traits: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 12138,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115027.8417955"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/unicode-width",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [18 releases](https://lib.rs/crates/unicode-width/versions)\n0.2.1 |  Jun 9, 2025   \n---|---  \n0.2.0 |  Sep 19, 2024   \n0.1.14 |  Sep 19, 2024   \n0.1.13 |  Jun 4, 2024   \n0.1.2 |  Jul 9, 2015   \n#**3** in [Text processing](https://lib.rs/text-processing \"Crates to deal with the complexities of human language when expressed in textual form.\")\nDownload history 3519195/week @ 2025-03-09 3682482/week @ 2025-03-16 4158066/week @ 2025-03-23 3768709/week @ 2025-03-30 4113493/week @ 2025-04-06 3786296/week @ 2025-04-13 3684442/week @ 2025-04-20 3532800/week @ 2025-04-27 3618668/week @ 2025-05-04 3802249/week @ 2025-05-11 3877508/week @ 2025-05-18 3211603/week @ 2025-05-25 3591299/week @ 2025-06-01 3855726/week @ 2025-06-08 4173185/week @ 2025-06-15 4300035/week @ 2025-06-22\n**16,148,015** downloads per month Used in [**28,318** crates (803 directly)](https://lib.rs/crates/unicode-width/rev)\n**MIT/Apache**\n1.5MB  **24K** SLoC\n# ``unicode-width``\n[![Build status](https://img.gs/czjpqfbdkz/full/https://github.com/unicode-rs/unicode-width/actions/workflows/rust.yml/badge.svg)](https://github.com/unicode-rs/unicode-width/actions/workflows/rust.yml) [![crates.io version](https://img.shields.io/crates/v/unicode-width)](https://crates.io/crates/unicode-width) [![Docs status](https://img.shields.io/docsrs/unicode-width)](https://docs.rs/unicode-width/)\nDetermine displayed width of ```char``` and ```str``` types according to [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/) and other portions of the Unicode standard.\nThis crate is ````#!``[``no_std``]````.\n```\n``use` `unicode_width`::``UnicodeWidthStr`;`\n``fn` `main`````(````)``````{`\n  `let` teststr `=` ``\"`\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!`\"```;`\n  `let` width `=` teststr`.``width``(``)``;`\n  `println!``(```\"``{}``\"```,` teststr`)``;`\n  `println!``(```\"`The above string is `{}` columns wide.`\"```,` width`)``;`\n  `let` width `=` teststr`.``width_cjk``(``)``;`\n  `println!``(```\"`The above string is `{}` columns wide (CJK).`\"```,` width`)``;`\n```}```\n`\n```\n\n**NOTE:** The computed width values may not match the actual rendered column width. For example, many Brahmic scripts like Devanagari have complex rendering rules which this crate does not currently handle (and will never fully handle, because the exact rendering depends on the font):\n```\n``extern` `crate` unicode_width`;`\n`use` `unicode_width`::``UnicodeWidthStr`;`\n``fn` `main`````(````)``````{`\n  `assert_eq!``(```\"`\u0915`\"```.``width``(``)``,` `1``)``;` ``//` Devanagari letter Ka`\n  `assert_eq!``(```\"`\u0937`\"```.``width``(``)``,` `1``)``;` ``//` Devanagari letter Ssa`\n  `assert_eq!``(```\"`\u0915\u094d\u0937`\"```.``width``(``)``,` `2``)``;` ``//` Ka + Virama + Ssa`\n```}```\n`\n```\n\nAdditionally, [defective combining character sequences](https://unicode.org/glossary/#defective_combining_character_sequence) and nonstandard [Korean jamo](https://unicode.org/glossary/#jamo) sequences may be rendered with a different width than what this crate says. (This is not an exhaustive list.) For a list of what this crate _does_ handle, see [docs.rs](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width).\n## crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-width ``=` ``\"`0.2`\"``\n``\n```\n\n## Changelog\n### 0.2.0\n  * Treat ``\\n`` as width 1 (#60)\n  * Treat ambiguous ``Modifier_Letter``s as narrow (#63)\n  * Support ``Grapheme_Cluster_Break`=`Prepend`` (#62)\n  * Support lots of ligatures (#53)\n\n\nNote: If you are using ``unicode-width`` for linebreaking, the change treating ``\\n`` as width 1 _may cause behavior changes_. It is recommended that in such cases you feed already-line segmented text to ``unicode-width``. In other words, please apply higher level control character based line breaking protocols before feeding text to ``unicode-width``. Relying on any character producing a stable width in this crate is likely the sign of a bug.\n#### Dependencies\n  * [rustc-dep-of-std?](https://lib.rs/crates/unicode-width/features#feature-rustc-dep-of-std \"optional feature\") [rustc-std-workspace-core](https://lib.rs/crates/rustc-std-workspace-core \"renamed core, 1.0\")\n  * [rustc-dep-of-std?](https://lib.rs/crates/unicode-width/features#feature-rustc-dep-of-std \"optional feature\") [rustc-std-workspace-std](https://lib.rs/crates/rustc-std-workspace-std \"renamed std, 1.0\")\n\n\n#### [Other features](https://lib.rs/crates/unicode-width/features)\n  * [cjk](https://lib.rs/crates/unicode-width/features#feature-cjk)\n  * [no_std](https://lib.rs/crates/unicode-width/features#feature-no_std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  18 releases\u27e81\u27e9\n0.2.1 |  Jun 9, 2025   \n---|---  \n0.2.0 |  Sep 19, 2024   \n0.1.14 |  Sep 19, 2024   \n0.1.13 |  Jun 4, 2024   \n0.1.2 |  Jul 9, 2015   \n#**3** in Text processing\u27e82\u27e9\nDownload history 3519195/week @ 2025-03-09 3682482/week @ 2025-03-16 4158066/week @ 2025-03-23 3768709/week @ 2025-03-30 4113493/week @ 2025-04-06 3786296/week @ 2025-04-13 3684442/week @ 2025-04-20 3532800/week @ 2025-04-27 3618668/week @ 2025-05-04 3802249/week @ 2025-05-11 3877508/week @ 2025-05-18 3211603/week @ 2025-05-25 3591299/week @ 2025-06-01 3855726/week @ 2025-06-08 4173185/week @ 2025-06-15 4300035/week @ 2025-06-22\n**16,148,015** downloads per month Used in **28,318** crates (803 directly)\u27e83\u27e9\n**MIT/Apache**\n1.5MB  **24K** SLoC\n# ``unicode-width``\n![Build status\u27e84\u27e9](https://github.com/unicode-rs/unicode-width/actions/workflows/rust.yml) ![crates.io version\u27e85\u27e9](https://crates.io/crates/unicode-width) ![Docs status\u27e86\u27e9](https://docs.rs/unicode-width/)\nDetermine displayed width of ```char``` and ```str``` types according to Unicode Standard Annex #11\u27e87\u27e9 and other portions of the Unicode standard.\nThis crate is ````#!``[``no_std``]````.\n```\n``use` `unicode_width`::``UnicodeWidthStr`;`\n``fn` `main`````(````)``````{`\n  `let` teststr `=` ``\"`\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!`\"```;`\n  `let` width `=` teststr`.``width``(``)``;`\n  `println!``(```\"``{}``\"```,` teststr`)``;`\n  `println!``(```\"`The above string is `{}` columns wide.`\"```,` width`)``;`\n  `let` width `=` teststr`.``width_cjk``(``)``;`\n  `println!``(```\"`The above string is `{}` columns wide (CJK).`\"```,` width`)``;`\n```}```\n`\n```\n\n**NOTE:** The computed width values may not match the actual rendered column width. For example, many Brahmic scripts like Devanagari have complex rendering rules which this crate does not currently handle (and will never fully handle, because the exact rendering depends on the font):\n```\n``extern` `crate` unicode_width`;`\n`use` `unicode_width`::``UnicodeWidthStr`;`\n``fn` `main`````(````)``````{`\n  `assert_eq!``(```\"`\u0915`\"```.``width``(``)``,` `1``)``;` ``//` Devanagari letter Ka`\n  `assert_eq!``(```\"`\u0937`\"```.``width``(``)``,` `1``)``;` ``//` Devanagari letter Ssa`\n  `assert_eq!``(```\"`\u0915\u094d\u0937`\"```.``width``(``)``,` `2``)``;` ``//` Ka + Virama + Ssa`\n```}```\n`\n```\n\nAdditionally, defective combining character sequences\u27e88\u27e9 and nonstandard Korean jamo\u27e89\u27e9 sequences may be rendered with a different width than what this crate says. (This is not an exhaustive list.) For a list of what this crate _does_ handle, see docs.rs\u27e810\u27e9.\n## crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-width ``=` ``\"`0.2`\"``\n``\n```\n\n## Changelog\n### 0.2.0\n  * Treat ``\\n`` as width 1 (#60)\n  * Treat ambiguous ``Modifier_Letter``s as narrow (#63)\n  * Support ``Grapheme_Cluster_Break`=`Prepend`` (#62)\n  * Support lots of ligatures (#53)\n\n\nNote: If you are using ``unicode-width`` for linebreaking, the change treating ``\\n`` as width 1 _may cause behavior changes_. It is recommended that in such cases you feed already-line segmented text to ``unicode-width``. In other words, please apply higher level control character based line breaking protocols before feeding text to ``unicode-width``. Relying on any character producing a stable width in this crate is likely the sign of a bug.\n#### Dependencies\n  * rustc-dep-of-std?\u27e811\u27e9 rustc-std-workspace-core\u27e812\u27e9\n  * rustc-dep-of-std?\u27e811\u27e9 rustc-std-workspace-std\u27e813\u27e9\n\n\n#### Other features\u27e814\u27e9\n  * cjk\u27e815\u27e9\n  * no_std\u27e816\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/unicode-width/versions: 18 releases\n\u27e82\u27e9 https://lib.rs/text-processing: Crates to deal with the complexities of human language when expressed in textual form. - Text processing\n\u27e83\u27e9 https://lib.rs/crates/unicode-width/rev: **28,318** crates (803 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/unicode-rs/unicode-width/actions/workflows/rust.yml/badge.svg: ![Build status\n\u27e85\u27e9 https://img.shields.io/crates/v/unicode-width: ![crates.io version\n\u27e86\u27e9 https://img.shields.io/docsrs/unicode-width: ![Docs status\n\u27e87\u27e9 http://www.unicode.org/reports/tr11/: Unicode Standard Annex #11\n\u27e88\u27e9 https://unicode.org/glossary/#defective_combining_character_sequence: defective combining character sequences\n\u27e89\u27e9 https://unicode.org/glossary/#jamo: Korean jamo\n\u27e810\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width: docs.rs\n\u27e811\u27e9 https://lib.rs/crates/unicode-width/features#feature-rustc-dep-of-std: optional feature - rustc-dep-of-std?\n\u27e812\u27e9 https://lib.rs/crates/rustc-std-workspace-core: renamed core, 1.0 - rustc-std-workspace-core\n\u27e813\u27e9 https://lib.rs/crates/rustc-std-workspace-std: renamed std, 1.0 - rustc-std-workspace-std\n\u27e814\u27e9 https://lib.rs/crates/unicode-width/features: Other features\n\u27e815\u27e9 https://lib.rs/crates/unicode-width/features#feature-cjk: cjk\n\u27e816\u27e9 https://lib.rs/crates/unicode-width/features#feature-no_std: no_std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4651,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115028.4284939"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxd1v3f6j/unicode-width-0.2.1#unicode-width@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\target\\debug\\deps\\libunicode_width-829b38bab7b502ba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxd1v3f6j/unicode-width-0.2.1#unicode-width@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxd1v3f6j\\unicode-width-0.2.1\\target\\debug\\deps\\libunicode_width-9e205dda16d93f69.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 3
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "unicode-width",
          "version": "0.2.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\n[Settings](https://docs.rs/unicode-width/latest/settings.html)\n[Help](https://docs.rs/unicode-width/latest/help.html)\nSummary[Source](https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259)\nExpand description\nDetermine displayed width of `char` and `str` types according to [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/) and other portions of the Unicode standard. See the [Rules for determining width](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width) section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag)`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the [`UnicodeWidthChar::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthChar::width_cjk\") and [`UnicodeWidthStr::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthStr::width_cjk\"), which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the [`UnicodeWidthChar`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\") and [`UnicodeWidthStr`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\") traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width)Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified [emoji ZWJ sequences](https://www.unicode.org/reports/tr51/#def_emoji_sequence) have width 2.\n       * [Emoji modifier sequences](https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence) have width 2.\n       * [Emoji presentation sequences](https://unicode.org/reports/tr51/#def_emoji_presentation_sequence) have width 2.\n       * Outside of an East Asian context, [text presentation sequences](https://unicode.org/reports/tr51/#def_text_presentation_sequence) have width 1 if their base character: \n         * Has the [`Emoji_Presentation`](https://unicode.org/reports/tr51/#def_emoji_presentation) property, and\n         * Is not in the [Enclosed Ideographic Supplement](https://unicode.org/charts/nameslist/n_1F200.html) block.\n     * [`'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`](https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf) always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining marks](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602) anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of [`'\\u{200D}'` ZERO WIDTH JOINER](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126)s will not affect the width.\n       * **[Arabic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480)** : A character sequence consisting of one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Lam`, followed by any number of characters with [`Joining_Type`](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009)`=Transparent`, followed by one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **[Buginese](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743)** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **[Hebrew](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528)** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **[Khmer](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642)** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **[Kirat Rai](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409)** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **[Lisu](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587)** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **[Old Turkic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975)** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **[Tifinagh](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184)** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338). The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has [`Canonical_Combining_Class`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313) greater than 1, or\n       * Is a [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining mark](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602).\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) has width 1 (outside of the ligatures described previously).\n    2. [`'\\u{115F}'` HANGUL CHOSEONG FILLER](https://util.unicode.org/UnicodeJsps/character.jsp?a=115F) and [`'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA](https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4) have width 2.\n    3. [`'\\u{17D8}'` KHMER SIGN BEYYAL](https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8) has width 3.\n    4. The following have width 0: \n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D) with the [`Default_Ignorable_Code_Point`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D) with the [`Grapheme_Extend`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D) with a [`Hangul_Syllable_Type`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593) of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s: \n         * [`'\\u{0605}'` NUMBER MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0605),\n         * [`'\\u{070F}'` SYRIAC ABBREVIATION MARK](https://util.unicode.org/UnicodeJsps/character.jsp?a=070F),\n         * [`'\\u{0890}'` POUND MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0890),\n         * [`'\\u{0891}'` PIASTRE MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0891), and\n         * [`'\\u{08E2}'` DISPUTED END OF AYAH](https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2).\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D) with the [`Grapheme_Extend=Prepend`](https://www.unicode.org/reports/tr29/#Prepend) property, that are not also [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s.\n       * [`'\\u{A8FA}'` DEVANAGARI CARET](https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA).\n    5. [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D) with an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Fullwidth`](https://www.unicode.org/reports/tr11/#ED2) or [`Wide`](https://www.unicode.org/reports/tr11/#ED4) have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6), or\n         * Has a [`Line_Break`](https://www.unicode.org/reports/tr14/#LD5) of [`AI`](https://www.unicode.org/reports/tr14/#AI), or\n         * Has a canonical decomposition to an [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6) character followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338), or\n         * Is [`'\\u{0387}'` GREEK ANO TELEIA](https://util.unicode.org/UnicodeJsps/character.jsp?a=0387); and\n       * Does not have a [`General_Category`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142) of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence)Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html \"constant unicode_width::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-width is based on.\n## Traits[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#traits)\n\n[UnicodeWidthChar](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\")\n    Methods for determining displayed width of Unicode characters.\n\n[UnicodeWidthStr](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\")\n    Methods for determining displayed width of Unicode strings.\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nDetermine displayed width of `char` and `str` types according to Unicode Standard Annex #11\u27e84\u27e9 and other portions of the Unicode standard. See the Rules for determining width\u27e85\u27e9 section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## \u00a7\u27e86\u27e9`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the `UnicodeWidthChar::width_cjk`\u27e87\u27e9 and `UnicodeWidthStr::width_cjk`\u27e88\u27e9, which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the `UnicodeWidthChar`\u27e89\u27e9 and `UnicodeWidthStr`\u27e810\u27e9 traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## \u00a7\u27e85\u27e9Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified emoji ZWJ sequences\u27e811\u27e9 have width 2.\n       * Emoji modifier sequences\u27e812\u27e9 have width 2.\n       * Emoji presentation sequences\u27e813\u27e9 have width 2.\n       * Outside of an East Asian context, text presentation sequences\u27e814\u27e9 have width 1 if their base character: \n         * Has the `Emoji_Presentation`\u27e815\u27e9 property, and\n         * Is not in the Enclosed Ideographic Supplement\u27e816\u27e9 block.\n     * `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\u27e817\u27e9 always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of default-ignorable\u27e818\u27e9 combining marks\u27e819\u27e9 anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of `'\\u{200D}'` ZERO WIDTH JOINER\u27e820\u27e9s will not affect the width.\n       * **Arabic\u27e821\u27e9** : A character sequence consisting of one character with `Joining_Group`\u27e822\u27e9`=Lam`, followed by any number of characters with `Joining_Type`\u27e823\u27e9`=Transparent`, followed by one character with `Joining_Group`\u27e822\u27e9`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **Buginese\u27e824\u27e9** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **Hebrew\u27e825\u27e9** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **Khmer\u27e826\u27e9** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **Kirat Rai\u27e827\u27e9** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **Lisu\u27e828\u27e9** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **Old Turkic\u27e829\u27e9** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **Tifinagh\u27e830\u27e9** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9. The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has `Canonical_Combining_Class`\u27e833\u27e9 greater than 1, or\n       * Is a default-ignorable\u27e818\u27e9 combining mark\u27e819\u27e9.\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 has width 1 (outside of the ligatures described previously).\n    2. `'\\u{115F}'` HANGUL CHOSEONG FILLER\u27e834\u27e9 and `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\u27e835\u27e9 have width 2.\n    3. `'\\u{17D8}'` KHMER SIGN BEYYAL\u27e836\u27e9 has width 3.\n    4. The following have width 0: \n       * Characters\u27e837\u27e9 with the `Default_Ignorable_Code_Point`\u27e818\u27e9 property.\n       * Characters\u27e838\u27e9 with the `Grapheme_Extend`\u27e839\u27e9 property.\n       * Characters\u27e840\u27e9 with a `Hangul_Syllable_Type`\u27e841\u27e9 of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following `Prepended_Concatenation_Mark`\u27e842\u27e9s: \n         * `'\\u{0605}'` NUMBER MARK ABOVE\u27e843\u27e9,\n         * `'\\u{070F}'` SYRIAC ABBREVIATION MARK\u27e844\u27e9,\n         * `'\\u{0890}'` POUND MARK ABOVE\u27e845\u27e9,\n         * `'\\u{0891}'` PIASTRE MARK ABOVE\u27e846\u27e9, and\n         * `'\\u{08E2}'` DISPUTED END OF AYAH\u27e847\u27e9.\n       * Characters\u27e848\u27e9 with the `Grapheme_Extend=Prepend`\u27e849\u27e9 property, that are not also `Prepended_Concatenation_Mark`\u27e842\u27e9s.\n       * `'\\u{A8FA}'` DEVANAGARI CARET\u27e850\u27e9.\n    5. Characters\u27e851\u27e9 with an `East_Asian_Width`\u27e852\u27e9 of `Fullwidth`\u27e853\u27e9 or `Wide`\u27e854\u27e9 have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an `East_Asian_Width`\u27e852\u27e9 of `Ambiguous`\u27e855\u27e9, or\n         * Has a `Line_Break`\u27e856\u27e9 of `AI`\u27e857\u27e9, or\n         * Has a canonical decomposition to an `Ambiguous`\u27e855\u27e9 character followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9, or\n         * Is `'\\u{0387}'` GREEK ANO TELEIA\u27e858\u27e9; and\n       * Does not have a `General_Category`\u27e859\u27e9 of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### \u00a7\u27e860\u27e9Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants\u00a7\u27e861\u27e9\n\nUNICODE_VERSION\u27e862\u27e9\n    The version of Unicode\u27e863\u27e9 that this version of unicode-width is based on.\n## Traits\u00a7\u27e864\u27e9\n\nUnicodeWidthChar\u27e89\u27e9\n    Methods for determining displayed width of Unicode characters.\n\nUnicodeWidthStr\u27e810\u27e9\n    Methods for determining displayed width of Unicode strings.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-width/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-width/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr11/: Unicode Standard Annex #11\n\u27e85\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width: Rules for determining width\n\u27e86\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk: method unicode_width::UnicodeWidthChar::width_cjk - `UnicodeWidthChar::width_cjk`\n\u27e88\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk: method unicode_width::UnicodeWidthStr::width_cjk - `UnicodeWidthStr::width_cjk`\n\u27e89\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html: trait unicode_width::UnicodeWidthChar - `UnicodeWidthChar`\n\u27e810\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html: trait unicode_width::UnicodeWidthStr - `UnicodeWidthStr`\n\u27e811\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_sequence: emoji ZWJ sequences\n\u27e812\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence: Emoji modifier sequences\n\u27e813\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation_sequence: Emoji presentation sequences\n\u27e814\u27e9 https://unicode.org/reports/tr51/#def_text_presentation_sequence: text presentation sequences\n\u27e815\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation: `Emoji_Presentation`\n\u27e816\u27e9 https://unicode.org/charts/nameslist/n_1F200.html: Enclosed Ideographic Supplement\n\u27e817\u27e9 https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf: `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\n\u27e818\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095: default-ignorable\n\u27e819\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602: combining marks\n\u27e820\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126: `'\\u{200D}'` ZERO WIDTH JOINER\n\u27e821\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480: Arabic\n\u27e822\u27e9 https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862: `Joining_Group`\n\u27e823\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009: `Joining_Type`\n\u27e824\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743: Buginese\n\u27e825\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528: Hebrew\n\u27e826\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642: Khmer\n\u27e827\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409: Kirat Rai\n\u27e828\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587: Lisu\n\u27e829\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975: Old Turkic\n\u27e830\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184: Tifinagh\n\u27e831\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F: `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\n\u27e832\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0338: `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\n\u27e833\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313: `Canonical_Combining_Class`\n\u27e834\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=115F: `'\\u{115F}'` HANGUL CHOSEONG FILLER\n\u27e835\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4: `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\n\u27e836\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8: `'\\u{17D8}'` KHMER SIGN BEYYAL\n\u27e837\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D: Characters\n\u27e838\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D: Characters\n\u27e839\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443: `Grapheme_Extend`\n\u27e840\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D: Characters\n\u27e841\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593: `Hangul_Syllable_Type`\n\u27e842\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908: `Prepended_Concatenation_Mark`\n\u27e843\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0605: `'\\u{0605}'` NUMBER MARK ABOVE\n\u27e844\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=070F: `'\\u{070F}'` SYRIAC ABBREVIATION MARK\n\u27e845\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0890: `'\\u{0890}'` POUND MARK ABOVE\n\u27e846\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0891: `'\\u{0891}'` PIASTRE MARK ABOVE\n\u27e847\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2: `'\\u{08E2}'` DISPUTED END OF AYAH\n\u27e848\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D: Characters\n\u27e849\u27e9 https://www.unicode.org/reports/tr29/#Prepend: `Grapheme_Extend=Prepend`\n\u27e850\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA: `'\\u{A8FA}'` DEVANAGARI CARET\n\u27e851\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D: Characters\n\u27e852\u27e9 https://www.unicode.org/reports/tr11/#ED1: `East_Asian_Width`\n\u27e853\u27e9 https://www.unicode.org/reports/tr11/#ED2: `Fullwidth`\n\u27e854\u27e9 https://www.unicode.org/reports/tr11/#ED4: `Wide`\n\u27e855\u27e9 https://www.unicode.org/reports/tr11/#ED6: `Ambiguous`\n\u27e856\u27e9 https://www.unicode.org/reports/tr14/#LD5: `Line_Break`\n\u27e857\u27e9 https://www.unicode.org/reports/tr14/#AI: `AI`\n\u27e858\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0387: `'\\u{0387}'` GREEK ANO TELEIA\n\u27e859\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142: `General_Category`\n\u27e860\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence: \u00a7\n\u27e861\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#constants: \u00a7\n\u27e862\u27e9 https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html: constant unicode_width::UNICODE_VERSION - UNICODE_VERSION\n\u27e863\u27e9 http://www.unicode.org/: Unicode\n\u27e864\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "unicode-width",
          "version": "0.2.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\n[Settings](https://docs.rs/unicode-width/latest/settings.html)\n[Help](https://docs.rs/unicode-width/latest/help.html)\nSummary[Source](https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259)\nExpand description\nDetermine displayed width of `char` and `str` types according to [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/) and other portions of the Unicode standard. See the [Rules for determining width](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width) section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag)`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the [`UnicodeWidthChar::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthChar::width_cjk\") and [`UnicodeWidthStr::width_cjk`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk \"method unicode_width::UnicodeWidthStr::width_cjk\"), which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the [`UnicodeWidthChar`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\") and [`UnicodeWidthStr`](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\") traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width)Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified [emoji ZWJ sequences](https://www.unicode.org/reports/tr51/#def_emoji_sequence) have width 2.\n       * [Emoji modifier sequences](https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence) have width 2.\n       * [Emoji presentation sequences](https://unicode.org/reports/tr51/#def_emoji_presentation_sequence) have width 2.\n       * Outside of an East Asian context, [text presentation sequences](https://unicode.org/reports/tr51/#def_text_presentation_sequence) have width 1 if their base character: \n         * Has the [`Emoji_Presentation`](https://unicode.org/reports/tr51/#def_emoji_presentation) property, and\n         * Is not in the [Enclosed Ideographic Supplement](https://unicode.org/charts/nameslist/n_1F200.html) block.\n     * [`'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`](https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf) always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining marks](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602) anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of [`'\\u{200D}'` ZERO WIDTH JOINER](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126)s will not affect the width.\n       * **[Arabic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480)** : A character sequence consisting of one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Lam`, followed by any number of characters with [`Joining_Type`](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009)`=Transparent`, followed by one character with [`Joining_Group`](https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862)`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **[Buginese](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743)** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **[Hebrew](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528)** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **[Khmer](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642)** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **[Kirat Rai](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409)** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **[Lisu](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587)** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **[Old Turkic](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975)** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **[Tifinagh](http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184)** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338). The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has [`Canonical_Combining_Class`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313) greater than 1, or\n       * Is a [default-ignorable](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) [combining mark](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602).\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. [`'\\u{2D7F}'` TIFINAGH CONSONANT JOINER](https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F) has width 1 (outside of the ligatures described previously).\n    2. [`'\\u{115F}'` HANGUL CHOSEONG FILLER](https://util.unicode.org/UnicodeJsps/character.jsp?a=115F) and [`'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA](https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4) have width 2.\n    3. [`'\\u{17D8}'` KHMER SIGN BEYYAL](https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8) has width 3.\n    4. The following have width 0: \n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D) with the [`Default_Ignorable_Code_Point`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D) with the [`Grapheme_Extend`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443) property.\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D) with a [`Hangul_Syllable_Type`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593) of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s: \n         * [`'\\u{0605}'` NUMBER MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0605),\n         * [`'\\u{070F}'` SYRIAC ABBREVIATION MARK](https://util.unicode.org/UnicodeJsps/character.jsp?a=070F),\n         * [`'\\u{0890}'` POUND MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0890),\n         * [`'\\u{0891}'` PIASTRE MARK ABOVE](https://util.unicode.org/UnicodeJsps/character.jsp?a=0891), and\n         * [`'\\u{08E2}'` DISPUTED END OF AYAH](https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2).\n       * [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D) with the [`Grapheme_Extend=Prepend`](https://www.unicode.org/reports/tr29/#Prepend) property, that are not also [`Prepended_Concatenation_Mark`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908)s.\n       * [`'\\u{A8FA}'` DEVANAGARI CARET](https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA).\n    5. [Characters](https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D) with an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Fullwidth`](https://www.unicode.org/reports/tr11/#ED2) or [`Wide`](https://www.unicode.org/reports/tr11/#ED4) have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an [`East_Asian_Width`](https://www.unicode.org/reports/tr11/#ED1) of [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6), or\n         * Has a [`Line_Break`](https://www.unicode.org/reports/tr14/#LD5) of [`AI`](https://www.unicode.org/reports/tr14/#AI), or\n         * Has a canonical decomposition to an [`Ambiguous`](https://www.unicode.org/reports/tr11/#ED6) character followed by [`'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY](https://util.unicode.org/UnicodeJsps/character.jsp?a=0338), or\n         * Is [`'\\u{0387}'` GREEK ANO TELEIA](https://util.unicode.org/UnicodeJsps/character.jsp?a=0387); and\n       * Does not have a [`General_Category`](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142) of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### [\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence)Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html \"constant unicode_width::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-width is based on.\n## Traits[\u00a7](https://docs.rs/unicode-width/latest/unicode_width/#traits)\n\n[UnicodeWidthChar](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html \"trait unicode_width::UnicodeWidthChar\")\n    Methods for determining displayed width of Unicode characters.\n\n[UnicodeWidthStr](https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html \"trait unicode_width::UnicodeWidthStr\")\n    Methods for determining displayed width of Unicode strings.\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-width/latest/unicode_width/all.html \"show sidebar\")\n# Crate unicode_widthCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nDetermine displayed width of `char` and `str` types according to Unicode Standard Annex #11\u27e84\u27e9 and other portions of the Unicode standard. See the Rules for determining width\u27e85\u27e9 section for the exact rules.\nThis crate is `#![no_std]`.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\uff28\uff45\uff4c\uff4c\uff4f, \uff57\uff4f\uff52\uff4c\uff44!\";\nlet width = UnicodeWidthStr::width(teststr);\nprintln!(\"{}\", teststr);\nprintln!(\"The above string is {} columns wide.\", width);\n```\n\n## \u00a7\u27e86\u27e9`\"cjk\"` feature flag\nThis crate has one Cargo feature flag, `\"cjk\"` (enabled by default). It enables the `UnicodeWidthChar::width_cjk`\u27e87\u27e9 and `UnicodeWidthStr::width_cjk`\u27e88\u27e9, which perform an alternate width calculation more suited to CJK contexts. The flag also unseals the `UnicodeWidthChar`\u27e89\u27e9 and `UnicodeWidthStr`\u27e810\u27e9 traits.\nDisabling the flag (with `no_default_features` in `Cargo.toml`) will reduce the amount of static data needed by the crate.\n```\nuse unicode_width::UnicodeWidthStr;\nlet teststr = \"\u201c\ud820\udc00\u201d\";\nassert_eq!(teststr.width(), 4);\n#[cfg(feature = \"cjk\")]\nassert_eq!(teststr.width_cjk(), 6);\n```\n\n## \u00a7\u27e85\u27e9Rules for determining width\nThis crate currently uses the following rules to determine the width of a character or string, in order of decreasing precedence. These may be tweaked in the future.\n  1. In the following cases, the width of a string differs from the sum of the widths of its constituent characters: \n     * The sequence `\"\\r\\n\"` has width 1.\n     * Emoji-specific ligatures: \n       * Well-formed, fully-qualified emoji ZWJ sequences\u27e811\u27e9 have width 2.\n       * Emoji modifier sequences\u27e812\u27e9 have width 2.\n       * Emoji presentation sequences\u27e813\u27e9 have width 2.\n       * Outside of an East Asian context, text presentation sequences\u27e814\u27e9 have width 1 if their base character: \n         * Has the `Emoji_Presentation`\u27e815\u27e9 property, and\n         * Is not in the Enclosed Ideographic Supplement\u27e816\u27e9 block.\n     * `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\u27e817\u27e9 always have width 1 when followed by \u2018\\u{FE00}\u2019, and width 2 when followed by \u2018\\u{FE01}\u2019.\n     * Script-specific ligatures: \n       * For all the following ligatures, the insertion of any number of default-ignorable\u27e818\u27e9 combining marks\u27e819\u27e9 anywhere in the sequence will not change the total width. In addition, for all non-Arabic ligatures, the insertion of any number of `'\\u{200D}'` ZERO WIDTH JOINER\u27e820\u27e9s will not affect the width.\n       * **Arabic\u27e821\u27e9** : A character sequence consisting of one character with `Joining_Group`\u27e822\u27e9`=Lam`, followed by any number of characters with `Joining_Type`\u27e823\u27e9`=Transparent`, followed by one character with `Joining_Group`\u27e822\u27e9`=Alef`, has total width 1. For example: `\u0644\u0627`\u200e, `\u0644\u0622`\u200e, `\u06b8\u0627`\u200e, `\u0644\u065f\u065e\u0623`\n       * **Buginese\u27e824\u27e9** : `\"\\u{1A15}\\u{1A17}\\u{200D}\\u{1A10}\"` (<a, -i> ya, `\u1a15\u1a17\u200d\u1a10`) has total width 1.\n       * **Hebrew\u27e825\u27e9** : `\"\u05d0\\u{200D}\u05dc\"` (Alef-Lamed, `\u05d0\u200d\u05dc`) has total width 1.\n       * **Khmer\u27e826\u27e9** : Coeng signs consisting of `'\\u{17D2}'` followed by a character in `'\\u{1780}'..='\\u{1782}' | '\\u{1784}'..='\\u{1787}' | '\\u{1789}'..='\\u{178C}' | '\\u{178E}'..='\\u{1793}' | '\\u{1795}'..='\\u{1798}' | '\\u{179B}'..='\\u{179D}' | '\\u{17A0}' | '\\u{17A2}' | '\\u{17A7}' | '\\u{17AB}'..='\\u{17AC}' | '\\u{17AF}'` have width 0.\n       * **Kirat Rai\u27e827\u27e9** : Any sequence canonically equivalent to `'\\u{16D68}'`, `'\\u{16D69}'`, or `'\\u{16D6A}'` has total width 1.\n       * **Lisu\u27e828\u27e9** : Tone letter combinations consisting of a character in the range `'\\u{A4F8}'..='\\u{A4FB}'` followed by a character in the range `'\\u{A4FC}'..='\\u{A4FD}'` have width 1. For example: `\ua4f9\ua4fc`\n       * **Old Turkic\u27e829\u27e9** : `\"\\u{10C32}\\u{200D}\\u{10C03}\"` (`\ud803\udc32\u200d\ud803\udc03`) has total width 1.\n       * **Tifinagh\u27e830\u27e9** : A sequence of a Tifinagh consonant in the range `'\\u{2D31}'..='\\u{2D65}' | '\\u{2D6F}'`, followed by either `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 or `'\\u{200D}'`, followed by another Tifinangh consonant, has total width 1. For example: `\u2d4f\u2d7f\u2d3e`\n     * In an East Asian context only, `<`, `=`, or `>` have width 2 when followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9. The two characters may be separated by any number of characters whose canonical decompositions consist only of characters meeting one of the following requirements: \n       * Has `Canonical_Combining_Class`\u27e833\u27e9 greater than 1, or\n       * Is a default-ignorable\u27e818\u27e9 combining mark\u27e819\u27e9.\n  2. In all other cases, the width of the string equals the sum of its character widths: \n    1. `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\u27e831\u27e9 has width 1 (outside of the ligatures described previously).\n    2. `'\\u{115F}'` HANGUL CHOSEONG FILLER\u27e834\u27e9 and `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\u27e835\u27e9 have width 2.\n    3. `'\\u{17D8}'` KHMER SIGN BEYYAL\u27e836\u27e9 has width 3.\n    4. The following have width 0: \n       * Characters\u27e837\u27e9 with the `Default_Ignorable_Code_Point`\u27e818\u27e9 property.\n       * Characters\u27e838\u27e9 with the `Grapheme_Extend`\u27e839\u27e9 property.\n       * Characters\u27e840\u27e9 with a `Hangul_Syllable_Type`\u27e841\u27e9 of `Vowel_Jamo` (`V`) or `Trailing_Jamo` (`T`).\n       * The following `Prepended_Concatenation_Mark`\u27e842\u27e9s: \n         * `'\\u{0605}'` NUMBER MARK ABOVE\u27e843\u27e9,\n         * `'\\u{070F}'` SYRIAC ABBREVIATION MARK\u27e844\u27e9,\n         * `'\\u{0890}'` POUND MARK ABOVE\u27e845\u27e9,\n         * `'\\u{0891}'` PIASTRE MARK ABOVE\u27e846\u27e9, and\n         * `'\\u{08E2}'` DISPUTED END OF AYAH\u27e847\u27e9.\n       * Characters\u27e848\u27e9 with the `Grapheme_Extend=Prepend`\u27e849\u27e9 property, that are not also `Prepended_Concatenation_Mark`\u27e842\u27e9s.\n       * `'\\u{A8FA}'` DEVANAGARI CARET\u27e850\u27e9.\n    5. Characters\u27e851\u27e9 with an `East_Asian_Width`\u27e852\u27e9 of `Fullwidth`\u27e853\u27e9 or `Wide`\u27e854\u27e9 have width 2.\n    6. Characters fulfilling all of the following conditions have width 2 in an East Asian context, and width 1 otherwise: \n       * Fulfills one of the following conditions: \n         * Has an `East_Asian_Width`\u27e852\u27e9 of `Ambiguous`\u27e855\u27e9, or\n         * Has a `Line_Break`\u27e856\u27e9 of `AI`\u27e857\u27e9, or\n         * Has a canonical decomposition to an `Ambiguous`\u27e855\u27e9 character followed by `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\u27e832\u27e9, or\n         * Is `'\\u{0387}'` GREEK ANO TELEIA\u27e858\u27e9; and\n       * Does not have a `General_Category`\u27e859\u27e9 of `Letter` or `Modifier_Symbol`.\n    7. All other characters have width 1.\n\n\n### \u00a7\u27e860\u27e9Canonical equivalence\nCanonically equivalent strings are assigned the same width (CJK and non-CJK).\n## Constants\u00a7\u27e861\u27e9\n\nUNICODE_VERSION\u27e862\u27e9\n    The version of Unicode\u27e863\u27e9 that this version of unicode-width is based on.\n## Traits\u00a7\u27e864\u27e9\n\nUnicodeWidthChar\u27e89\u27e9\n    Methods for determining displayed width of Unicode characters.\n\nUnicodeWidthStr\u27e810\u27e9\n    Methods for determining displayed width of Unicode strings.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-width/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-width/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-width/latest/src/unicode_width/lib.rs.html#11-259: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr11/: Unicode Standard Annex #11\n\u27e85\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#rules-for-determining-width: Rules for determining width\n\u27e86\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#cjk-feature-flag: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html#tymethod.width_cjk: method unicode_width::UnicodeWidthChar::width_cjk - `UnicodeWidthChar::width_cjk`\n\u27e88\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html#tymethod.width_cjk: method unicode_width::UnicodeWidthStr::width_cjk - `UnicodeWidthStr::width_cjk`\n\u27e89\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthChar.html: trait unicode_width::UnicodeWidthChar - `UnicodeWidthChar`\n\u27e810\u27e9 https://docs.rs/unicode-width/latest/unicode_width/trait.UnicodeWidthStr.html: trait unicode_width::UnicodeWidthStr - `UnicodeWidthStr`\n\u27e811\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_sequence: emoji ZWJ sequences\n\u27e812\u27e9 https://www.unicode.org/reports/tr51/#def_emoji_modifier_sequence: Emoji modifier sequences\n\u27e813\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation_sequence: Emoji presentation sequences\n\u27e814\u27e9 https://unicode.org/reports/tr51/#def_text_presentation_sequence: text presentation sequences\n\u27e815\u27e9 https://unicode.org/reports/tr51/#def_emoji_presentation: `Emoji_Presentation`\n\u27e816\u27e9 https://unicode.org/charts/nameslist/n_1F200.html: Enclosed Ideographic Supplement\n\u27e817\u27e9 https://www.unicode.org/charts/PDF/Unicode-16.0/U160-2000.pdf: `'\\u{2018}'`, `'\\u{2019}'`, `'\\u{201C}'`, and `'\\u{201D}'`\n\u27e818\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-5/#G40095: default-ignorable\n\u27e819\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G30602: combining marks\n\u27e820\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G23126: `'\\u{200D}'` ZERO WIDTH JOINER\n\u27e821\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G7480: Arabic\n\u27e822\u27e9 https://www.unicode.org/versions/Unicode14.0.0/ch09.pdf#G36862: `Joining_Group`\n\u27e823\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G50009: `Joining_Type`\n\u27e824\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-17/#G26743: Buginese\n\u27e825\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-9/#G6528: Hebrew\n\u27e826\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-16/#G64642: Khmer\n\u27e827\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-13/#G746409: Kirat Rai\n\u27e828\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-18/#G44587: Lisu\n\u27e829\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-14/#G41975: Old Turkic\n\u27e830\u27e9 http://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-19/#G43184: Tifinagh\n\u27e831\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=2D7F: `'\\u{2D7F}'` TIFINAGH CONSONANT JOINER\n\u27e832\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0338: `'\\u{0338}'` COMBINING LONG SOLIDUS OVERLAY\n\u27e833\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G50313: `Canonical_Combining_Class`\n\u27e834\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=115F: `'\\u{115F}'` HANGUL CHOSEONG FILLER\n\u27e835\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17A4: `'\\u{17A4}'` KHMER INDEPENDENT VOWEL QAA\n\u27e836\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=17D8: `'\\u{17D8}'` KHMER SIGN BEYYAL\n\u27e837\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BDefault_Ignorable_Code_Point%7D: Characters\n\u27e838\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Extend%7D: Characters\n\u27e839\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G52443: `Grapheme_Extend`\n\u27e840\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BHangul_Syllable_Type%3DV%7D%5Cp%7BHangul_Syllable_Type%3DT%7D: Characters\n\u27e841\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G45593: `Hangul_Syllable_Type`\n\u27e842\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-23/#G37908: `Prepended_Concatenation_Mark`\n\u27e843\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0605: `'\\u{0605}'` NUMBER MARK ABOVE\n\u27e844\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=070F: `'\\u{070F}'` SYRIAC ABBREVIATION MARK\n\u27e845\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0890: `'\\u{0890}'` POUND MARK ABOVE\n\u27e846\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0891: `'\\u{0891}'` PIASTRE MARK ABOVE\n\u27e847\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=08E2: `'\\u{08E2}'` DISPUTED END OF AYAH\n\u27e848\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BGrapheme_Cluster_Break%3DPrepend%7D-%5Cp%7BPrepended_Concatenation_Mark%7D: Characters\n\u27e849\u27e9 https://www.unicode.org/reports/tr29/#Prepend: `Grapheme_Extend=Prepend`\n\u27e850\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=A8FA: `'\\u{A8FA}'` DEVANAGARI CARET\n\u27e851\u27e9 https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7BEast_Asian_Width%3DF%7D%5Cp%7BEast_Asian_Width%3DW%7D: Characters\n\u27e852\u27e9 https://www.unicode.org/reports/tr11/#ED1: `East_Asian_Width`\n\u27e853\u27e9 https://www.unicode.org/reports/tr11/#ED2: `Fullwidth`\n\u27e854\u27e9 https://www.unicode.org/reports/tr11/#ED4: `Wide`\n\u27e855\u27e9 https://www.unicode.org/reports/tr11/#ED6: `Ambiguous`\n\u27e856\u27e9 https://www.unicode.org/reports/tr14/#LD5: `Line_Break`\n\u27e857\u27e9 https://www.unicode.org/reports/tr14/#AI: `AI`\n\u27e858\u27e9 https://util.unicode.org/UnicodeJsps/character.jsp?a=0387: `'\\u{0387}'` GREEK ANO TELEIA\n\u27e859\u27e9 https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-4/#G124142: `General_Category`\n\u27e860\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#canonical-equivalence: \u00a7\n\u27e861\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#constants: \u00a7\n\u27e862\u27e9 https://docs.rs/unicode-width/latest/unicode_width/constant.UNICODE_VERSION.html: constant unicode_width::UNICODE_VERSION - UNICODE_VERSION\n\u27e863\u27e9 http://www.unicode.org/: Unicode\n\u27e864\u27e9 https://docs.rs/unicode-width/latest/unicode_width/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `unicode-width` crate calculates the displayed width of `char` and `str` types based on the Unicode Standard, including support for complex width rules like emoji sequences, script-specific ligatures, and East Asian contexts. It features a `\"cjk\"` flag (enabled by default) for alternate width calculations tailored to CJK environments and is `#![no_std]`, making it suitable for embedded applications.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Feature Flag Behavior  \n\u2705 Factual: The `\"cjk\"` feature flag in the `unicode-width` crate is enabled by default and provides alternate width calculations for CJK contexts using the `width_cjk` methods.  \n\u274c Counterfactual: The `\"cjk\"` feature flag in the `unicode-width` crate is disabled by default and must be explicitly enabled to use the `width_cjk` methods.  \n\n---\n\n### Pair 2: `#![no_std]` Compatibility  \n\u2705 Factual: The `unicode-width` crate is `#![no_std]`, making it suitable for embedded environments where the standard library is unavailable.  \n\u274c Counterfactual: The `unicode-width` crate requires the Rust standard library and is incompatible with `#![no_std]` environments.  \n\n---\n\n### Pair 3: Width Calculation Rules  \n\u2705 Factual: The `unicode-width` crate determines the width of strings based on Unicode Standard Annex #11, accounting for special cases like emoji ligatures and East Asian width rules.  \n\u274c Counterfactual: The `unicode-width` crate calculates string widths solely by summing the widths of individual characters, without considering special cases like emoji ligatures or East Asian width rules.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7dadb450-2fddb508-1751261237",
      "timestamp": "2025-06-30T05:27:17.346663+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]