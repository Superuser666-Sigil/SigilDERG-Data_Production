[
  {
    "execution_id": "exec-24c2d1fb-fdcf3046-1751258475",
    "timestamp": "2025-06-30T04:41:15.764693+00:00",
    "sacred_chain": {
      "input_data": "async-std",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-std' -> 'async-std'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-std",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-std",
            "title": "async-std v1.13.1",
            "content": {
              "raw_markdown": "#  async-std v1.13.1\nDeprecated in favor of `smol` - Async version of the Rust standard library \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #await ](https://crates.io/keywords/await)\n  * [ #future ](https://crates.io/keywords/future)\n  * [ #std ](https://crates.io/keywords/std)\n  * [ #task ](https://crates.io/keywords/task)\n\n\n  * [ Readme ](https://crates.io/crates/async-std)\n  * [ 37 Versions ](https://crates.io/crates/async-std/versions)\n  * [ Dependencies ](https://crates.io/crates/async-std/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-std/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.63.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n214 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-std\nOr add the following line to your Cargo.toml:\nasync-std = \"1.13.1\"\n## Homepage\n[ async.rs ](https://async.rs)\n## Repository\n[ github.com/async-rs/async-std ](https://github.com/async-rs/async-std)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [Concurrency](https://crates.io/categories/concurrency)\n\n\n[ Report crate ](https://crates.io/support?crate=async-std&inquire=crate-violation)\n### Stats Overview\n46,502,724 Downloads all time\n37 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async-std v1.13.1\nDeprecated in favor of `smol` - Async version of the Rust standard library \n  *  #async \u27e81\u27e9\n  *  #await \u27e82\u27e9\n  *  #future \u27e83\u27e9\n  *  #std \u27e84\u27e9\n  *  #task \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  37 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n4 months ago \nv1.63.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n214 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-std\nOr add the following line to your Cargo.toml:\nasync-std = \"1.13.1\"\n## Homepage\n async.rs \u27e812\u27e9\n## Repository\n github.com/async-rs/async-std \u27e813\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e814\u27e9\n  * Network programming\u27e815\u27e9\n  * Concurrency\u27e816\u27e9\n\n\n Report crate \u27e817\u27e9\n### Stats Overview\n46,502,724 Downloads all time\n37 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/await:  #await \n\u27e83\u27e9 https://crates.io/keywords/future:  #future \n\u27e84\u27e9 https://crates.io/keywords/std:  #std \n\u27e85\u27e9 https://crates.io/keywords/task:  #task \n\u27e86\u27e9 https://crates.io/crates/async-std:  Readme \n\u27e87\u27e9 https://crates.io/crates/async-std/versions:  37 Versions \n\u27e88\u27e9 https://crates.io/crates/async-std/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/async-std/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://async.rs:  async.rs \n\u27e813\u27e9 https://github.com/async-rs/async-std:  github.com/async-rs/async-std \n\u27e814\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e815\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e816\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e817\u27e9 https://crates.io/support?crate=async-std&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1526,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112265.4864799"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-std",
            "title": "Crate async_stdCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\n[Settings](https://docs.rs/async-std/latest/settings.html)\n[Help](https://docs.rs/async-std/latest/help.html)\nSummary[Source](https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338)\nExpand description\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library)Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the [broader Rust ecosystem](https://crates.io). It offers std types, like [`Future`](https://docs.rs/async-std/latest/async_std/future/trait.Future.html) and [`Stream`](https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html), library-defined [operations on language primitives](https://docs.rs/async-std/latest/async_std/#primitives), [standard macros](https://docs.rs/async-std/latest/async_std/#macros), [I/O](https://docs.rs/async-std/latest/async_std/io/index.html) and [multithreading](https://docs.rs/async-std/latest/async_std/task/index.html), among [many other things](https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation).\n`async-std` is available from [crates.io](https://crates.io). Once included, `async-std` can be accessed in [`use`](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html) statements through the path `async_std`, as in [`use async_std::future`](https://docs.rs/async-std/latest/async_std/future/index.html).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation)How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the [search bar](https://docs.rs/async-std/latest/async_std/) at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * [`async_std::*` modules](https://docs.rs/async-std/latest/async_std/#modules)\n  * [Async macros](https://docs.rs/async-std/latest/async_std/#macros)\n  * [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html)\n  * [Cargo.toml feature flags](https://docs.rs/async-std/latest/async_std/#features)\n  * [Examples](https://docs.rs/async-std/latest/async_std/#examples)\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * [The async-std website](https://async.rs/)\n  * [The async-std book](https://book.async.rs)\n  * [GitHub repository](https://github.com/async-rs/async-std)\n  * [List of code examples](https://github.com/async-rs/async-std/tree/HEAD/examples)\n  * [Discord chat](https://discord.gg/JvZeVNe)\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation)What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, [all listed further down this page](https://docs.rs/async-std/latest/async_std/#modules). These modules are the bedrock upon which async Rust is forged, and they have mighty names like [`async_std::os`](https://docs.rs/async-std/latest/async_std/os/index.html) and [`async_std::task`](https://docs.rs/async-std/latest/async_std/task/index.html). Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html), a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and [lists them on this page](https://docs.rs/async-std/latest/async_std/#macros).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation)Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines [here](https://async.rs/contribute). The source for this documentation can be found on [GitHub](https://github.com/async-rs). To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on [Discord](https://discord.gg/JvZeVNe).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std)A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io)Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including [files](https://docs.rs/async-std/latest/async_std/fs/struct.File.html), [TCP](https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html), [UDP](https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html), are defined in the [`io`](https://docs.rs/async-std/latest/async_std/io/index.html), [`fs`](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\"), and [`net`](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\") modules.\nThe [`task`](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\") module contains `async-std`\u2019s task abstractions. [`sync`](https://docs.rs/async-std/latest/async_std/sync/index.html) contains further primitive shared memory types. [`channel`](https://docs.rs/async-std/latest/async_std/channel/index.html) contains the channel types for message passing.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays)Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * [`task::sleep`](https://docs.rs/async-std/latest/async_std/task/fn.sleep.html) to wait for a duration to pass without blocking.\n  * [`stream::interval`](https://docs.rs/async-std/latest/async_std/stream/fn.interval.html) for emitting an event at a set interval.\n  * [`future::timeout`](https://docs.rs/async-std/latest/async_std/future/fn.timeout.html) to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#examples)Examples\nAll examples require the [`\"attributes\"` feature](https://docs.rs/async-std/latest/async_std/#features) to be enabled. This feature is not enabled by default because it significantly impacts compile times. See [`task::block_on`](https://docs.rs/async-std/latest/async_std/task/fn.block_on.html) for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#features)Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#runtime-configuration)Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by [async-global-executor](https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html \"mod async_global_executor\"), which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules[\u00a7](https://docs.rs/async-std/latest/async_std/#modules)\n\n[channel](https://docs.rs/async-std/latest/async_std/channel/index.html \"mod async_std::channel\")\n    Channels\n\n[fs](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\")\n    Filesystem manipulation operations.\n\n[future](https://docs.rs/async-std/latest/async_std/future/index.html \"mod async_std::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/async-std/latest/async_std/io/index.html \"mod async_std::io\")\n    Traits, helpers, and type definitions for core I/O functionality.\n\n[net](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\")\n    Networking primitives for TCP/UDP communication.\n\n[os](https://docs.rs/async-std/latest/async_std/os/index.html \"mod async_std::os\")\n    OS-specific extensions.\n\n[path](https://docs.rs/async-std/latest/async_std/path/index.html \"mod async_std::path\")\n    Cross-platform path manipulation.\n\n[pin](https://docs.rs/async-std/latest/async_std/pin/index.html \"mod async_std::pin\")`unstable`\n    Types that pin data to its location in memory.\n\n[prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html \"mod async_std::prelude\")\n    The async prelude.\n\n[process](https://docs.rs/async-std/latest/async_std/process/index.html \"mod async_std::process\")`unstable`\n    A module for working with processes.\n\n[stream](https://docs.rs/async-std/latest/async_std/stream/index.html \"mod async_std::stream\")\n    Composable asynchronous iteration.\n\n[sync](https://docs.rs/async-std/latest/async_std/sync/index.html \"mod async_std::sync\")\n    Synchronization primitives.\n\n[task](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\")\n    Types and traits for working with asynchronous tasks.\n## Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#macros)\n\n[eprint](https://docs.rs/async-std/latest/async_std/macro.eprint.html \"macro async_std::eprint\")`unstable`\n    Prints to the standard error.\n\n[eprintln](https://docs.rs/async-std/latest/async_std/macro.eprintln.html \"macro async_std::eprintln\")`unstable`\n    Prints to the standard error, with a newline.\n\n[print](https://docs.rs/async-std/latest/async_std/macro.print.html \"macro async_std::print\")`unstable`\n    Prints to the standard output.\n\n[println](https://docs.rs/async-std/latest/async_std/macro.println.html \"macro async_std::println\")`unstable`\n    Prints to the standard output, with a newline.\n\n[task_local](https://docs.rs/async-std/latest/async_std/macro.task_local.html \"macro async_std::task_local\")\n    Declares task-local values.\n\n[write](https://docs.rs/async-std/latest/async_std/macro.write.html \"macro async_std::write\")`unstable`\n    Writes formatted data into a buffer.\n\n[writeln](https://docs.rs/async-std/latest/async_std/macro.writeln.html \"macro async_std::writeln\")`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#attributes)\n\n[main](https://docs.rs/async-std/latest/async_std/attr.main.html \"attr async_std::main\")`attributes`\n    Enables an async main function.\n\n[test](https://docs.rs/async-std/latest/async_std/attr.test.html \"attr async_std::test\")`attributes`\n    Enables an async test function.\n",
              "markdown_with_citations": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem\u27e85\u27e9. It offers std types, like `Future`\u27e86\u27e9 and `Stream`\u27e87\u27e9, library-defined operations on language primitives\u27e88\u27e9, standard macros\u27e89\u27e9, I/O\u27e810\u27e9 and multithreading\u27e811\u27e9, among many other things\u27e812\u27e9.\n`async-std` is available from crates.io\u27e85\u27e9. Once included, `async-std` can be accessed in `use`\u27e813\u27e9 statements through the path `async_std`, as in `use async_std::future`\u27e814\u27e9.\n## \u00a7\u27e815\u27e9How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the search bar\u27e816\u27e9 at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * `async_std::*` modules\u27e817\u27e9\n  * Async macros\u27e89\u27e9\n  * The Async Prelude\u27e818\u27e9\n  * Cargo.toml feature flags\u27e819\u27e9\n  * Examples\u27e820\u27e9\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * The async-std website\u27e821\u27e9\n  * The async-std book\u27e822\u27e9\n  * GitHub repository\u27e823\u27e9\n  * List of code examples\u27e824\u27e9\n  * Discord chat\u27e825\u27e9\n\n\n## \u00a7\u27e826\u27e9What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, all listed further down this page\u27e817\u27e9. These modules are the bedrock upon which async Rust is forged, and they have mighty names like `async_std::os`\u27e827\u27e9 and `async_std::task`\u27e811\u27e9. Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines The Async Prelude\u27e818\u27e9, a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and lists them on this page\u27e89\u27e9.\n## \u00a7\u27e828\u27e9Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines here\u27e829\u27e9. The source for this documentation can be found on GitHub\u27e830\u27e9. To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on Discord\u27e825\u27e9.\n## \u00a7\u27e831\u27e9A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### \u00a7\u27e832\u27e9Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including files\u27e833\u27e9, TCP\u27e834\u27e9, UDP\u27e835\u27e9, are defined in the `io`\u27e810\u27e9, `fs`\u27e836\u27e9, and `net`\u27e837\u27e9 modules.\nThe `task`\u27e811\u27e9 module contains `async-std`\u2019s task abstractions. `sync`\u27e838\u27e9 contains further primitive shared memory types. `channel`\u27e839\u27e9 contains the channel types for message passing.\n### \u00a7\u27e840\u27e9Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * `task::sleep`\u27e841\u27e9 to wait for a duration to pass without blocking.\n  * `stream::interval`\u27e842\u27e9 for emitting an event at a set interval.\n  * `future::timeout`\u27e843\u27e9 to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## \u00a7\u27e820\u27e9Examples\nAll examples require the `\"attributes\"` feature\u27e819\u27e9 to be enabled. This feature is not enabled by default because it significantly impacts compile times. See `task::block_on`\u27e844\u27e9 for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## \u00a7\u27e819\u27e9Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## \u00a7\u27e845\u27e9Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by async-global-executor\u27e846\u27e9, which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules\u00a7\u27e817\u27e9\n\nchannel\u27e839\u27e9\n    Channels\n\nfs\u27e836\u27e9\n    Filesystem manipulation operations.\n\nfuture\u27e814\u27e9\n    Asynchronous values.\n\nio\u27e810\u27e9\n    Traits, helpers, and type definitions for core I/O functionality.\n\nnet\u27e837\u27e9\n    Networking primitives for TCP/UDP communication.\n\nos\u27e827\u27e9\n    OS-specific extensions.\n\npath\u27e847\u27e9\n    Cross-platform path manipulation.\n\npin\u27e848\u27e9`unstable`\n    Types that pin data to its location in memory.\n\nprelude\u27e818\u27e9\n    The async prelude.\n\nprocess\u27e849\u27e9`unstable`\n    A module for working with processes.\n\nstream\u27e850\u27e9\n    Composable asynchronous iteration.\n\nsync\u27e838\u27e9\n    Synchronization primitives.\n\ntask\u27e811\u27e9\n    Types and traits for working with asynchronous tasks.\n## Macros\u00a7\u27e89\u27e9\n\neprint\u27e851\u27e9`unstable`\n    Prints to the standard error.\n\neprintln\u27e852\u27e9`unstable`\n    Prints to the standard error, with a newline.\n\nprint\u27e853\u27e9`unstable`\n    Prints to the standard output.\n\nprintln\u27e854\u27e9`unstable`\n    Prints to the standard output, with a newline.\n\ntask_local\u27e855\u27e9\n    Declares task-local values.\n\nwrite\u27e856\u27e9`unstable`\n    Writes formatted data into a buffer.\n\nwriteln\u27e857\u27e9`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros\u00a7\u27e858\u27e9\n\nmain\u27e859\u27e9`attributes`\n    Enables an async main function.\n\ntest\u27e860\u27e9`attributes`\n    Enables an async test function.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-std/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-std/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338: Source\n\u27e84\u27e9 https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library: \u00a7\n\u27e85\u27e9 https://crates.io: broader Rust ecosystem\n\u27e86\u27e9 https://docs.rs/async-std/latest/async_std/future/trait.Future.html: `Future`\n\u27e87\u27e9 https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html: `Stream`\n\u27e88\u27e9 https://docs.rs/async-std/latest/async_std/#primitives: operations on language primitives\n\u27e89\u27e9 https://docs.rs/async-std/latest/async_std/#macros: standard macros\n\u27e810\u27e9 https://docs.rs/async-std/latest/async_std/io/index.html: I/O\n\u27e811\u27e9 https://docs.rs/async-std/latest/async_std/task/index.html: multithreading\n\u27e812\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation: many other things\n\u27e813\u27e9 https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html: `use`\n\u27e814\u27e9 https://docs.rs/async-std/latest/async_std/future/index.html: `use async_std::future`\n\u27e815\u27e9 https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation: \u00a7\n\u27e816\u27e9 https://docs.rs/async-std/latest/async_std/: search bar\n\u27e817\u27e9 https://docs.rs/async-std/latest/async_std/#modules: `async_std::*` modules\n\u27e818\u27e9 https://docs.rs/async-std/latest/async_std/prelude/index.html: The Async Prelude\n\u27e819\u27e9 https://docs.rs/async-std/latest/async_std/#features: Cargo.toml feature flags\n\u27e820\u27e9 https://docs.rs/async-std/latest/async_std/#examples: Examples\n\u27e821\u27e9 https://async.rs/: The async-std website\n\u27e822\u27e9 https://book.async.rs: The async-std book\n\u27e823\u27e9 https://github.com/async-rs/async-std: GitHub repository\n\u27e824\u27e9 https://github.com/async-rs/async-std/tree/HEAD/examples: List of code examples\n\u27e825\u27e9 https://discord.gg/JvZeVNe: Discord chat\n\u27e826\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation: \u00a7\n\u27e827\u27e9 https://docs.rs/async-std/latest/async_std/os/index.html: `async_std::os`\n\u27e828\u27e9 https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation: \u00a7\n\u27e829\u27e9 https://async.rs/contribute: here\n\u27e830\u27e9 https://github.com/async-rs: GitHub\n\u27e831\u27e9 https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std: \u00a7\n\u27e832\u27e9 https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io: \u00a7\n\u27e833\u27e9 https://docs.rs/async-std/latest/async_std/fs/struct.File.html: files\n\u27e834\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html: TCP\n\u27e835\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html: UDP\n\u27e836\u27e9 https://docs.rs/async-std/latest/async_std/fs/index.html: mod async_std::fs - `fs`\n\u27e837\u27e9 https://docs.rs/async-std/latest/async_std/net/index.html: mod async_std::net - `net`\n\u27e838\u27e9 https://docs.rs/async-std/latest/async_std/sync/index.html: `sync`\n\u27e839\u27e9 https://docs.rs/async-std/latest/async_std/channel/index.html: `channel`\n\u27e840\u27e9 https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays: \u00a7\n\u27e841\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.sleep.html: `task::sleep`\n\u27e842\u27e9 https://docs.rs/async-std/latest/async_std/stream/fn.interval.html: `stream::interval`\n\u27e843\u27e9 https://docs.rs/async-std/latest/async_std/future/fn.timeout.html: `future::timeout`\n\u27e844\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.block_on.html: `task::block_on`\n\u27e845\u27e9 https://docs.rs/async-std/latest/async_std/#runtime-configuration: \u00a7\n\u27e846\u27e9 https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html: mod async_global_executor - async-global-executor\n\u27e847\u27e9 https://docs.rs/async-std/latest/async_std/path/index.html: mod async_std::path - path\n\u27e848\u27e9 https://docs.rs/async-std/latest/async_std/pin/index.html: mod async_std::pin - pin\n\u27e849\u27e9 https://docs.rs/async-std/latest/async_std/process/index.html: mod async_std::process - process\n\u27e850\u27e9 https://docs.rs/async-std/latest/async_std/stream/index.html: mod async_std::stream - stream\n\u27e851\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprint.html: macro async_std::eprint - eprint\n\u27e852\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprintln.html: macro async_std::eprintln - eprintln\n\u27e853\u27e9 https://docs.rs/async-std/latest/async_std/macro.print.html: macro async_std::print - print\n\u27e854\u27e9 https://docs.rs/async-std/latest/async_std/macro.println.html: macro async_std::println - println\n\u27e855\u27e9 https://docs.rs/async-std/latest/async_std/macro.task_local.html: macro async_std::task_local - task_local\n\u27e856\u27e9 https://docs.rs/async-std/latest/async_std/macro.write.html: macro async_std::write - write\n\u27e857\u27e9 https://docs.rs/async-std/latest/async_std/macro.writeln.html: macro async_std::writeln - writeln\n\u27e858\u27e9 https://docs.rs/async-std/latest/async_std/#attributes: \u00a7\n\u27e859\u27e9 https://docs.rs/async-std/latest/async_std/attr.main.html: attr async_std::main - main\n\u27e860\u27e9 https://docs.rs/async-std/latest/async_std/attr.test.html: attr async_std::test - test\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14476,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112266.2559663"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-std",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [37 releases](https://lib.rs/crates/async-std/versions) (21 stable)\n1.13.1 |  Mar 15, 2025   \n---|---  \n1.13.0 |  Sep 6, 2024   \n1.12.0 |  Jun 18, 2022   \n1.11.0 |  Mar 22, 2022   \n0.1.0 |  May 30, 2019   \n#**2821** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 576856/week @ 2025-03-07 560381/week @ 2025-03-14 544774/week @ 2025-03-21 558729/week @ 2025-03-28 571732/week @ 2025-04-04 649906/week @ 2025-04-11 536498/week @ 2025-04-18 525759/week @ 2025-04-25 570160/week @ 2025-05-02 632815/week @ 2025-05-09 631598/week @ 2025-05-16 546115/week @ 2025-05-23 607141/week @ 2025-05-30 565617/week @ 2025-06-06 621996/week @ 2025-06-13 536291/week @ 2025-06-20\n**2,433,048** downloads per month Used in [**2,971** crates (1,912 directly)](https://lib.rs/crates/async-std/rev)\n**Apache-2.0 OR MIT**\n705KB  14K  SLoC\n# ``async-std`` has been discontinued; use ``smol`` instead\nWe created ``async-std`` to demonstrate the value of making a library as close to ``std`` as possible, but async. We think that demonstration was successful, and we hope it will influence future design and development directions of async in ``std``. However, in the meantime, the [``smol``](https://github.com/smol-rs/smol/) project came about and provided a great executor and libraries for asynchronous use in the Rust ecosystem. We think that resources would be better spent consolidating around ``smol``, rather than continuing to provide occasional maintenance of ``async-std``. As such, we recommend that all users of ``async-std``, and all libraries built on ``async-std``, switch to ``smol`` instead.\nIn addition to the ``smol`` project as a direct replacement, you may find other parts of the futures ecosystem useful, including ``futures-concurrency``, ``async-io``, ``futures-lite``, and ``async-compat``.\n###  [ API Docs ](https://docs.rs/async-std) |  [ Book ](https://book.async.rs)\nThis crate provides an async version of [``std``](https://doc.rust-lang.org/std/index.html). It provides all the interfaces you are used to, but in an async version and ready for Rust's ``async``/``await`` syntax.\n## Features\n  * **Modern:** Built from the ground up for ```std`::``future`` and ``async`/`await`` with blazing fast compilation time.\n  * **Fast:** Our robust allocator and threadpool designs provide ultra-high throughput with predictably low latency.\n  * **Intuitive:** Complete parity with the stdlib means you only need to learn APIs once.\n  * **Clear:** [Detailed documentation](https://docs.rs/async-std) and [accessible guides](https://book.async.rs) mean using async Rust was never easier.\n\n\n## Examples\n```\n``use` `async_std`::``task`;`\nasync ``fn` `say_hello`````(````)``````{`\n  `println!``(```\"`Hello, world!`\"```)``;`\n```}```\n``fn` `main`````(````)``````{`\n  `task`::``block_on`(``say_hello``(``)``)`\n```}```\n`\n```\n\nMore examples, including networking and file access, can be found in our [``examples``](https://github.com/async-rs/async-std/tree/HEAD/examples) directory and in our [documentation](https://docs.rs/async-std#examples).\n## Philosophy\nWe believe Async Rust should be as easy to pick up as Sync Rust. We also believe that the best API is the one you already know. And finally, we believe that providing an asynchronous counterpart to the standard library is the best way stdlib provides a reliable basis for both performance and productivity.\nAsync-std is the embodiment of that vision. It combines single-allocation task creation, with an adaptive lock-free executor, threadpool and network driver to create a smooth system that processes work at a high pace with low latency, using Rust's familiar stdlib API.\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/async-rs/async-std/blob/main/LICENSE-APACHE) or [MIT license](https://github.com/async-rs/async-std/blob/main/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~4\u201317MB  ~233K SLoC\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [async-channel](https://lib.rs/crates/async-channel \"outdated\") 1.8\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [async-lock](https://lib.rs/crates/async-lock \"3.1.0\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [crossbeam-utils](https://lib.rs/crates/crossbeam-utils \"0.8.0\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [futures-channel](https://lib.rs/crates/futures-channel \"0.3.4\") wasm32\n  * [alloc](https://lib.rs/crates/async-std/features#feature-alloc \"default feature\") [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [futures-core](https://lib.rs/crates/futures-core \"0.3.4\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [futures-io](https://lib.rs/crates/futures-io \"0.3.4\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [memchr](https://lib.rs/crates/memchr \"2.3.3\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [once_cell](https://lib.rs/crates/once_cell \"1.3.1\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [pin-utils](https://lib.rs/crates/pin-utils \"0.1.0-alpha.4\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [slab](https://lib.rs/crates/slab \"0.4.2\")\n  * [std](https://lib.rs/crates/async-std/features#feature-std \"default feature\") [wasm-bindgen-futures](https://lib.rs/crates/wasm-bindgen-futures \"0.4.10\") wasm32\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [tokio02?](https://lib.rs/crates/async-std/features#feature-tokio02 \"optional feature\") [tokio03?](https://lib.rs/crates/async-std/features#feature-tokio03 \"optional feature\") [tokio1?](https://lib.rs/crates/async-std/features#feature-tokio1 \"optional feature\") [async-global-executor](https://lib.rs/crates/async-global-executor \"2.4.0\")[+async-io](https://lib.rs/crates/async-global-executor/features#feature-async-io) not unknown\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [async-io](https://lib.rs/crates/async-io \"2.2.0\") not unknown\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [futures-lite](https://lib.rs/crates/futures-lite \"new\") 2.0 not unknown\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [gloo-timers](https://lib.rs/crates/gloo-timers \"0.3.0\")[+futures](https://lib.rs/crates/gloo-timers/features#feature-futures) wasm32\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [kv-log-macro](https://lib.rs/crates/kv-log-macro \"1.0.6\")\n  * [default](https://lib.rs/crates/async-std/features#feature-default \"default feature\") [log](https://lib.rs/crates/log \"0.4.8\")[+kv_unstable](https://lib.rs/crates/log/features#feature-kv_unstable)\n  * [alloc](https://lib.rs/crates/async-std/features#feature-alloc \"default feature\") [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.0\")\n  * [attributes?](https://lib.rs/crates/async-std/features#feature-attributes \"optional feature\") [async-attributes](https://lib.rs/crates/async-attributes \"1.1.2\")\n  * [unstable?](https://lib.rs/crates/async-std/features#feature-unstable \"optional feature\") [async-process](https://lib.rs/crates/async-process \"2.0.0\") not unknown\n  * [ optional ](https://lib.rs/crates/async-std/features#feature-surf \"surf is optional feature\") [surf](https://lib.rs/crates/surf \"obsolete\") 2.0\n\n\n  * dev  [femme](https://lib.rs/crates/femme \"new\") 2.1\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.4\")\n  * dev  [getrandom](https://lib.rs/crates/getrandom \"outdated\") 0.2[+js](https://lib.rs/crates/getrandom/features#feature-js) wasm32\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * dev  [rand_xorshift](https://lib.rs/crates/rand_xorshift \"obsolete\") 0.3\n  * dev  [tempfile](https://lib.rs/crates/tempfile \"3.1.0\")\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3.10\") wasm32\n\n\n#### [Other features](https://lib.rs/crates/async-std/features)\n  * [docs](https://lib.rs/crates/async-std/features#feature-docs)\n  * [io_safety](https://lib.rs/crates/async-std/features#feature-io_safety)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  37 releases\u27e81\u27e9 (21 stable)\n1.13.1 |  Mar 15, 2025   \n---|---  \n1.13.0 |  Sep 6, 2024   \n1.12.0 |  Jun 18, 2022   \n1.11.0 |  Mar 22, 2022   \n0.1.0 |  May 30, 2019   \n#**2821** in Asynchronous\u27e82\u27e9\nDownload history 576856/week @ 2025-03-07 560381/week @ 2025-03-14 544774/week @ 2025-03-21 558729/week @ 2025-03-28 571732/week @ 2025-04-04 649906/week @ 2025-04-11 536498/week @ 2025-04-18 525759/week @ 2025-04-25 570160/week @ 2025-05-02 632815/week @ 2025-05-09 631598/week @ 2025-05-16 546115/week @ 2025-05-23 607141/week @ 2025-05-30 565617/week @ 2025-06-06 621996/week @ 2025-06-13 536291/week @ 2025-06-20\n**2,433,048** downloads per month Used in **2,971** crates (1,912 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n705KB  14K  SLoC\n# ``async-std`` has been discontinued; use ``smol`` instead\nWe created ``async-std`` to demonstrate the value of making a library as close to ``std`` as possible, but async. We think that demonstration was successful, and we hope it will influence future design and development directions of async in ``std``. However, in the meantime, the ``smol``\u27e84\u27e9 project came about and provided a great executor and libraries for asynchronous use in the Rust ecosystem. We think that resources would be better spent consolidating around ``smol``, rather than continuing to provide occasional maintenance of ``async-std``. As such, we recommend that all users of ``async-std``, and all libraries built on ``async-std``, switch to ``smol`` instead.\nIn addition to the ``smol`` project as a direct replacement, you may find other parts of the futures ecosystem useful, including ``futures-concurrency``, ``async-io``, ``futures-lite``, and ``async-compat``.\n###   API Docs \u27e85\u27e9 |   Book \u27e86\u27e9\nThis crate provides an async version of ``std``\u27e87\u27e9. It provides all the interfaces you are used to, but in an async version and ready for Rust's ``async``/``await`` syntax.\n## Features\n  * **Modern:** Built from the ground up for ```std`::``future`` and ``async`/`await`` with blazing fast compilation time.\n  * **Fast:** Our robust allocator and threadpool designs provide ultra-high throughput with predictably low latency.\n  * **Intuitive:** Complete parity with the stdlib means you only need to learn APIs once.\n  * **Clear:** Detailed documentation\u27e85\u27e9 and accessible guides\u27e86\u27e9 mean using async Rust was never easier.\n\n\n## Examples\n```\n``use` `async_std`::``task`;`\nasync ``fn` `say_hello`````(````)``````{`\n  `println!``(```\"`Hello, world!`\"```)``;`\n```}```\n``fn` `main`````(````)``````{`\n  `task`::``block_on`(``say_hello``(``)``)`\n```}```\n`\n```\n\nMore examples, including networking and file access, can be found in our ``examples``\u27e88\u27e9 directory and in our documentation\u27e89\u27e9.\n## Philosophy\nWe believe Async Rust should be as easy to pick up as Sync Rust. We also believe that the best API is the one you already know. And finally, we believe that providing an asynchronous counterpart to the standard library is the best way stdlib provides a reliable basis for both performance and productivity.\nAsync-std is the embodiment of that vision. It combines single-allocation task creation, with an adaptive lock-free executor, threadpool and network driver to create a smooth system that processes work at a high pace with low latency, using Rust's familiar stdlib API.\n## License\nLicensed under either of Apache License, Version 2.0\u27e810\u27e9 or MIT license\u27e811\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~4\u201317MB  ~233K SLoC\n  * std\u27e812\u27e9 async-channel\u27e813\u27e9 1.8\n  * std\u27e812\u27e9 async-lock\u27e814\u27e9\n  * std\u27e812\u27e9 crossbeam-utils\u27e815\u27e9\n  * std\u27e812\u27e9 futures-channel\u27e816\u27e9 wasm32\n  * alloc\u27e817\u27e9 std\u27e812\u27e9 futures-core\u27e818\u27e9\n  * std\u27e812\u27e9 futures-io\u27e819\u27e9\n  * std\u27e812\u27e9 memchr\u27e820\u27e9\n  * std\u27e812\u27e9 once_cell\u27e821\u27e9\n  * std\u27e812\u27e9 pin-utils\u27e822\u27e9\n  * std\u27e812\u27e9 slab\u27e823\u27e9\n  * std\u27e812\u27e9 wasm-bindgen-futures\u27e824\u27e9 wasm32\n  * default\u27e825\u27e9 tokio02?\u27e826\u27e9 tokio03?\u27e827\u27e9 tokio1?\u27e828\u27e9 async-global-executor\u27e829\u27e9+async-io\u27e830\u27e9 not unknown\n  * default\u27e825\u27e9 async-io\u27e831\u27e9 not unknown\n  * default\u27e825\u27e9 futures-lite\u27e832\u27e9 2.0 not unknown\n  * default\u27e825\u27e9 gloo-timers\u27e833\u27e9+futures\u27e834\u27e9 wasm32\n  * default\u27e825\u27e9 kv-log-macro\u27e835\u27e9\n  * default\u27e825\u27e9 log\u27e836\u27e9+kv_unstable\u27e837\u27e9\n  * alloc\u27e817\u27e9 pin-project-lite\u27e838\u27e9\n  * attributes?\u27e839\u27e9 async-attributes\u27e840\u27e9\n  * unstable?\u27e841\u27e9 async-process\u27e842\u27e9 not unknown\n  *  optional \u27e843\u27e9 surf\u27e844\u27e9 2.0\n\n\n  * dev  femme\u27e845\u27e9 2.1\n  * dev  futures\u27e846\u27e9\n  * dev  getrandom\u27e847\u27e9 0.2+js\u27e848\u27e9 wasm32\n  * dev  rand\u27e849\u27e9 0.8\n  * dev  rand_xorshift\u27e850\u27e9 0.3\n  * dev  tempfile\u27e851\u27e9\n  * dev  wasm-bindgen-test\u27e852\u27e9 wasm32\n\n\n#### Other features\u27e853\u27e9\n  * docs\u27e854\u27e9\n  * io_safety\u27e855\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/async-std/versions: 37 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/async-std/rev: **2,971** crates (1,912 directly)\n\u27e84\u27e9 https://github.com/smol-rs/smol/: ``smol``\n\u27e85\u27e9 https://docs.rs/async-std:  API Docs \n\u27e86\u27e9 https://book.async.rs:  Book \n\u27e87\u27e9 https://doc.rust-lang.org/std/index.html: ``std``\n\u27e88\u27e9 https://github.com/async-rs/async-std/tree/HEAD/examples: ``examples``\n\u27e89\u27e9 https://docs.rs/async-std#examples: documentation\n\u27e810\u27e9 https://github.com/async-rs/async-std/blob/main/LICENSE-APACHE: Apache License, Version 2.0\n\u27e811\u27e9 https://github.com/async-rs/async-std/blob/main/LICENSE-MIT: MIT license\n\u27e812\u27e9 https://lib.rs/crates/async-std/features#feature-std: default feature - std\n\u27e813\u27e9 https://lib.rs/crates/async-channel: outdated - async-channel\n\u27e814\u27e9 https://lib.rs/crates/async-lock: 3.1.0 - async-lock\n\u27e815\u27e9 https://lib.rs/crates/crossbeam-utils: 0.8.0 - crossbeam-utils\n\u27e816\u27e9 https://lib.rs/crates/futures-channel: 0.3.4 - futures-channel\n\u27e817\u27e9 https://lib.rs/crates/async-std/features#feature-alloc: default feature - alloc\n\u27e818\u27e9 https://lib.rs/crates/futures-core: 0.3.4 - futures-core\n\u27e819\u27e9 https://lib.rs/crates/futures-io: 0.3.4 - futures-io\n\u27e820\u27e9 https://lib.rs/crates/memchr: 2.3.3 - memchr\n\u27e821\u27e9 https://lib.rs/crates/once_cell: 1.3.1 - once_cell\n\u27e822\u27e9 https://lib.rs/crates/pin-utils: 0.1.0-alpha.4 - pin-utils\n\u27e823\u27e9 https://lib.rs/crates/slab: 0.4.2 - slab\n\u27e824\u27e9 https://lib.rs/crates/wasm-bindgen-futures: 0.4.10 - wasm-bindgen-futures\n\u27e825\u27e9 https://lib.rs/crates/async-std/features#feature-default: default feature - default\n\u27e826\u27e9 https://lib.rs/crates/async-std/features#feature-tokio02: optional feature - tokio02?\n\u27e827\u27e9 https://lib.rs/crates/async-std/features#feature-tokio03: optional feature - tokio03?\n\u27e828\u27e9 https://lib.rs/crates/async-std/features#feature-tokio1: optional feature - tokio1?\n\u27e829\u27e9 https://lib.rs/crates/async-global-executor: 2.4.0 - async-global-executor\n\u27e830\u27e9 https://lib.rs/crates/async-global-executor/features#feature-async-io: +async-io\n\u27e831\u27e9 https://lib.rs/crates/async-io: 2.2.0 - async-io\n\u27e832\u27e9 https://lib.rs/crates/futures-lite: new - futures-lite\n\u27e833\u27e9 https://lib.rs/crates/gloo-timers: 0.3.0 - gloo-timers\n\u27e834\u27e9 https://lib.rs/crates/gloo-timers/features#feature-futures: +futures\n\u27e835\u27e9 https://lib.rs/crates/kv-log-macro: 1.0.6 - kv-log-macro\n\u27e836\u27e9 https://lib.rs/crates/log: 0.4.8 - log\n\u27e837\u27e9 https://lib.rs/crates/log/features#feature-kv_unstable: +kv_unstable\n\u27e838\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.0 - pin-project-lite\n\u27e839\u27e9 https://lib.rs/crates/async-std/features#feature-attributes: optional feature - attributes?\n\u27e840\u27e9 https://lib.rs/crates/async-attributes: 1.1.2 - async-attributes\n\u27e841\u27e9 https://lib.rs/crates/async-std/features#feature-unstable: optional feature - unstable?\n\u27e842\u27e9 https://lib.rs/crates/async-process: 2.0.0 - async-process\n\u27e843\u27e9 https://lib.rs/crates/async-std/features#feature-surf: surf is optional feature -  optional \n\u27e844\u27e9 https://lib.rs/crates/surf: obsolete - surf\n\u27e845\u27e9 https://lib.rs/crates/femme: new - femme\n\u27e846\u27e9 https://lib.rs/crates/futures: 0.3.4 - futures\n\u27e847\u27e9 https://lib.rs/crates/getrandom: outdated - getrandom\n\u27e848\u27e9 https://lib.rs/crates/getrandom/features#feature-js: +js\n\u27e849\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e850\u27e9 https://lib.rs/crates/rand_xorshift: obsolete - rand_xorshift\n\u27e851\u27e9 https://lib.rs/crates/tempfile: 3.1.0 - tempfile\n\u27e852\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3.10 - wasm-bindgen-test\n\u27e853\u27e9 https://lib.rs/crates/async-std/features: Other features\n\u27e854\u27e9 https://lib.rs/crates/async-std/features#feature-docs: docs\n\u27e855\u27e9 https://lib.rs/crates/async-std/features#feature-io_safety: io_safety\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8763,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112266.8163278"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_io-bd8e4b4f12fa4b3d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#waker-fn@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\waker-fn-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "waker_fn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\waker-fn-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwaker_fn-eb60e92a9a5f581c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libatomic_waker-51a570a3292c2eef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfastrand-be824bc817d66839.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-994f7b8a5feabb9b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-994f7b8a5feabb9b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-b1c4d136db72c851\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-b1c4d136db72c851\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-2143ba19fe56c123\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-2143ba19fe56c123\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-62c295d6f2f44b74\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-62c295d6f2f44b74\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.8.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libbitflags-faf753ba4539101f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libonce_cell-07a53299f2b10edb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "memchr_runtime_simd",
                "memchr_runtime_sse2",
                "memchr_runtime_sse42",
                "memchr_runtime_avx"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-2c21c3e4dd8c19f4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-task@4.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-task-4.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-task-4.7.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_task-c0d5a46f5a425ddf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piper@0.2.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piper-0.2.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piper-0.2.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "futures-io",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpiper-1841d188f3df9691.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv_unstable",
                "kv_unstable_serde",
                "kv_unstable_std",
                "serde",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-aed3c79b5e288449\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-aed3c79b5e288449\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-02dfcb2c2e0fb5d2\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "event",
                "fs",
                "libc-extra-traits",
                "net",
                "pipe",
                "process",
                "std",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-172a0bb2313fc175\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-172a0bb2313fc175\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-0ea37674e32689c8\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-2ce3868fd4129e2e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-f5cf7d5adc2ec8b3\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-a76aac2ae9866593\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libtracing_core-52878b7c88c8abcd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "atomic_cas",
                "has_atomics"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-5883f00731efc7a9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@2.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-2.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-2.5.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener-7a74c27e697039f8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "static_assertions",
                "libc"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-e6306345a91ee3d9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libtracing-9c158f0bfef4114a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "erased-serde1",
                "error",
                "serde",
                "serde1",
                "serde1_fmt",
                "serde1_lib",
                "std",
                "sval1_lib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-c29a715b2ec55d1b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-c29a715b2ec55d1b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "value_bag_capture_ctor"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-10b4f27b684cf4aa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libcrossbeam_utils-bb4ad7bf8162756c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libconcurrent_queue-7b157725c3d69593.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libmemchr-1c68ebc5888f7217.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-channel@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_channel-fb09fc3c8f62fe39.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener-623304047ba1a659.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener_strategy-27ea96c5a8b836d7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-channel@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-2.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_channel-aad7b0fbb0ba0bc0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "fastrand",
                "futures-io",
                "memchr",
                "parking",
                "race",
                "std",
                "waker-fn"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_lite-655a606783792f5e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_lock-fd182a9b782dad61.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#blocking@1.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blocking-1.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blocking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blocking-1.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libblocking-325ee8988e93b218.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-executor@1.13.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-executor-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-executor-1.13.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_executor-ef52c142e397ba31.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Win32",
                "Win32_Foundation",
                "Win32_NetworkManagement",
                "Win32_NetworkManagement_IpHelper",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Diagnostics",
                "Win32_System_Diagnostics_Debug",
                "Win32_System_IO",
                "Win32_System_LibraryLoader",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_sys-2680d8721485098f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libserde-b34f9e35cbadab21.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#errno@0.3.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\errno-0.3.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "errno",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\errno-0.3.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liberrno-56f7a84272aff687.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_fmt@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_fmt-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_fmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_fmt-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libserde_fmt-2a0f83dd0ffb3a0d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#polling@3.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polling-3.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "polling",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polling-3.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpolling-2f132b0e85428606.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sval@1.0.0-alpha.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sval-1.0.0-alpha.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sval",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sval-1.0.0-alpha.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "fmt",
                "serde1",
                "serde1_lib",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsval-2ff084c0fe586523.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "erased_serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liberased_serde-8fb910981a80ae0f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustix",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "event",
                "fs",
                "libc-extra-traits",
                "net",
                "pipe",
                "process",
                "std",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\librustix-e019735a4f48cb3b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-io@2.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-io-2.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-io-2.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_io-d1e7ce9e8234fa82.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsyn-de608003c0e51aad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsyn-de608003c0e51aad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-global-executor@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-global-executor-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_global_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-global-executor-2.4.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "async-io",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_global_executor-17a89a6b42d1fac1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ctor@0.1.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.1.22\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "ctor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.1.22\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "value_bag",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "erased-serde1",
                "error",
                "serde",
                "serde1",
                "serde1_fmt",
                "serde1_lib",
                "std",
                "sval1_lib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libvalue_bag-9b8fa05566d64b93.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv_unstable",
                "kv_unstable_serde",
                "kv_unstable_std",
                "serde",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liblog-befe1bb8aa377ed3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kv-log-macro@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kv-log-macro-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "kv_log_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kv-log-macro-1.0.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libkv_log_macro-eb0db35b6959bb28.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-channel",
                "async-global-executor",
                "async-io",
                "async-lock",
                "crossbeam-utils",
                "default",
                "futures-channel",
                "futures-core",
                "futures-io",
                "futures-lite",
                "gloo-timers",
                "kv-log-macro",
                "log",
                "memchr",
                "once_cell",
                "pin-project-lite",
                "pin-utils",
                "slab",
                "std",
                "wasm-bindgen-futures"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_std-ec795e0a0a723848.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-eac37113d2f8721b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\crossbeam-utils-a76aac2ae9866593\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-e39b891b56899934\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-2143ba19fe56c123\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-2143ba19fe56c123\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-994f7b8a5feabb9b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-994f7b8a5feabb9b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libunicode_xid-0bef5e4b1c555606.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfastrand-be824bc817d66839.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-62c295d6f2f44b74\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-62c295d6f2f44b74\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_io-bd8e4b4f12fa4b3d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-b1c4d136db72c851\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-b1c4d136db72c851\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#waker-fn@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\waker-fn-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "waker_fn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\waker-fn-1.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwaker_fn-eb60e92a9a5f581c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libcrossbeam_utils-bb4ad7bf8162756c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\serde-0ea37674e32689c8\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\proc-macro2-f5cf7d5adc2ec8b3\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "memchr_runtime_simd",
                "memchr_runtime_sse2",
                "memchr_runtime_sse42",
                "memchr_runtime_avx"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\memchr-2c21c3e4dd8c19f4\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\syn-2ce3868fd4129e2e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\erased-serde-02dfcb2c2e0fb5d2\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "event",
                "fs",
                "libc-extra-traits",
                "net",
                "pipe",
                "process",
                "std",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-172a0bb2313fc175\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-172a0bb2313fc175\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.33\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libtracing_core-52878b7c88c8abcd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-task@4.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-task-4.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-task-4.7.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_task-c0d5a46f5a425ddf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.8.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libbitflags-faf753ba4539101f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atomic-waker-1.1.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libatomic_waker-51a570a3292c2eef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv_unstable",
                "kv_unstable_serde",
                "kv_unstable_std",
                "serde",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-aed3c79b5e288449\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-aed3c79b5e288449\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libonce_cell-07a53299f2b10edb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libconcurrent_queue-7b157725c3d69593.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.136",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.136\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libserde-b34f9e35cbadab21.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libproc_macro2-e97922ab2b6a39a0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libmemchr-1c68ebc5888f7217.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "erased-serde1",
                "error",
                "serde",
                "serde1",
                "serde1_fmt",
                "serde1_lib",
                "std",
                "sval1_lib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-c29a715b2ec55d1b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-c29a715b2ec55d1b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "static_assertions",
                "libc"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\rustix-e6306345a91ee3d9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.41\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libtracing-9c158f0bfef4114a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piper@0.2.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piper-0.2.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piper",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piper-0.2.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "futures-io",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpiper-1841d188f3df9691.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "atomic_cas",
                "has_atomics"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\log-5883f00731efc7a9\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@2.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-2.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-2.5.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener-7a74c27e697039f8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener-623304047ba1a659.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libquote-fe3df0227bbf1566.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "fastrand",
                "futures-io",
                "memchr",
                "parking",
                "race",
                "std",
                "waker-fn"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libfutures_lite-655a606783792f5e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "value_bag_capture_ctor"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\build\\value-bag-10b4f27b684cf4aa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_fmt@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_fmt-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_fmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_fmt-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libserde_fmt-2a0f83dd0ffb3a0d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#erased-serde@0.3.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "erased_serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\erased-serde-0.3.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liberased_serde-8fb910981a80ae0f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sval@1.0.0-alpha.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sval-1.0.0-alpha.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sval",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sval-1.0.0-alpha.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "fmt",
                "serde1",
                "serde1_lib",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsval-2ff084c0fe586523.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-channel@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_channel-fb09fc3c8f62fe39.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libevent_listener_strategy-27ea96c5a8b836d7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Win32",
                "Win32_Foundation",
                "Win32_NetworkManagement",
                "Win32_NetworkManagement_IpHelper",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Security",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Diagnostics",
                "Win32_System_Diagnostics_Debug",
                "Win32_System_IO",
                "Win32_System_LibraryLoader",
                "Win32_System_Threading",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libwindows_sys-2680d8721485098f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsyn-de608003c0e51aad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libsyn-de608003c0e51aad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-executor@1.13.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-executor-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-executor-1.13.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_executor-ef52c142e397ba31.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#errno@0.3.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\errno-0.3.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "errno",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\errno-0.3.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liberrno-56f7a84272aff687.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ctor@0.1.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.1.22\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "ctor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ctor-0.1.22\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\ctor-bc0175261b972e10.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#polling@3.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polling-3.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "polling",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\polling-3.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libpolling-2f132b0e85428606.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_lock-fd182a9b782dad61.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-channel@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-channel-2.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_channel-aad7b0fbb0ba0bc0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.0.0-alpha.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "value_bag",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.0.0-alpha.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "erased-serde1",
                "error",
                "serde",
                "serde1",
                "serde1_fmt",
                "serde1_lib",
                "std",
                "sval1_lib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libvalue_bag-9b8fa05566d64b93.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.44",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustix",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustix-0.38.44\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "event",
                "fs",
                "libc-extra-traits",
                "net",
                "pipe",
                "process",
                "std",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\librustix-e019735a4f48cb3b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#blocking@1.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blocking-1.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blocking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blocking-1.6.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libblocking-325ee8988e93b218.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.16\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv_unstable",
                "kv_unstable_serde",
                "kv_unstable_std",
                "serde",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\liblog-befe1bb8aa377ed3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-io@2.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-io-2.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-io-2.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_io-d1e7ce9e8234fa82.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-global-executor@2.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-global-executor-2.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_global_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-global-executor-2.4.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "async-io",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_global_executor-17a89a6b42d1fac1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kv-log-macro@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kv-log-macro-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "kv_log_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kv-log-macro-1.0.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libkv_log_macro-eb0db35b6959bb28.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unneeded sub `cfg` when there is only one condition\n  --> src\\utils.rs:74:7\n   |\n74 | #[cfg(any(all(target_arch = \"wasm32\", feature = \"default\"),))]\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `all(target_arch = \"wasm32\", feature = \"default\")`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n   = note: `#[warn(clippy::non_minimal_cfg)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_minimal_cfg)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1894,
                        "byte_start": 1840,
                        "column_end": 61,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\utils.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 74,
                        "line_start": 74,
                        "suggested_replacement": "all(target_arch = \"wasm32\", feature = \"default\")",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 7,
                            "text": "#[cfg(any(all(target_arch = \"wasm32\", feature = \"default\"),))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_minimal_cfg",
                  "explanation": null
                },
                "level": "warning",
                "message": "unneeded sub `cfg` when there is only one condition",
                "spans": [
                  {
                    "byte_end": 1894,
                    "byte_start": 1840,
                    "column_end": 61,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\utils.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 7,
                        "text": "#[cfg(any(all(target_arch = \"wasm32\", feature = \"default\"),))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: initializer for `thread_local` value can be made `const`\n   --> src\\task\\builder.rs:157:55\n    |\n157 |             static NUM_NESTED_BLOCKING: Cell<usize> = Cell::new(0);\n    |                                                       ^^^^^^^^^^^^ help: replace with: `const { Cell::new(0) }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n    = note: `#[warn(clippy::missing_const_for_thread_local)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_const_for_thread_local)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4700,
                        "byte_start": 4688,
                        "column_end": 67,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\task\\builder.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 157,
                        "line_start": 157,
                        "suggested_replacement": "const { Cell::new(0) }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 55,
                            "text": "            static NUM_NESTED_BLOCKING: Cell<usize> = Cell::new(0);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_const_for_thread_local",
                  "explanation": null
                },
                "level": "warning",
                "message": "initializer for `thread_local` value can be made `const`",
                "spans": [
                  {
                    "byte_end": 4700,
                    "byte_start": 4688,
                    "column_end": 67,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "src\\task\\builder.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 55,
                        "text": "            static NUM_NESTED_BLOCKING: Cell<usize> = Cell::new(0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n  --> src\\task\\task_id.rs:25:24\n   |\n25 |         if id > usize::max_value() / 2 {\n   |                        ^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n   = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n   |\n25 -         if id > usize::max_value() / 2 {\n25 +         if id > usize::MAX / 2 {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 663,
                        "byte_start": 652,
                        "column_end": 35,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\task\\task_id.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 25,
                        "line_start": 25,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 24,
                            "text": "        if id > usize::max_value() / 2 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 663,
                    "byte_start": 652,
                    "column_end": 35,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\task\\task_id.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 24,
                        "text": "        if id > usize::max_value() / 2 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\task\\task_local.rs:123:31\n    |\n123 |             if counter > u32::max_value() / 2 {\n    |                               ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n123 -             if counter > u32::max_value() / 2 {\n123 +             if counter > u32::MAX / 2 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3784,
                        "byte_start": 3773,
                        "column_end": 42,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\task\\task_local.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 123,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 31,
                            "text": "            if counter > u32::max_value() / 2 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 3784,
                    "byte_start": 3773,
                    "column_end": 42,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\task\\task_local.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 31,
                        "text": "            if counter > u32::max_value() / 2 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: initializer for `thread_local` value can be made `const`\n --> src\\task\\task_locals_wrapper.rs:9:54\n  |\n9 |     static CURRENT: Cell<*const TaskLocalsWrapper> = Cell::new(ptr::null_mut());\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `const { Cell::new(ptr::null_mut()) }`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 259,
                        "byte_start": 233,
                        "column_end": 80,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\task\\task_locals_wrapper.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 9,
                        "line_start": 9,
                        "suggested_replacement": "const { Cell::new(ptr::null_mut()) }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 54,
                            "text": "    static CURRENT: Cell<*const TaskLocalsWrapper> = Cell::new(ptr::null_mut());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_const_for_thread_local",
                  "explanation": null
                },
                "level": "warning",
                "message": "initializer for `thread_local` value can be made `const`",
                "spans": [
                  {
                    "byte_end": 259,
                    "byte_start": 233,
                    "column_end": 80,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "src\\task\\task_locals_wrapper.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 80,
                        "highlight_start": 54,
                        "text": "    static CURRENT: Cell<*const TaskLocalsWrapper> = Cell::new(ptr::null_mut());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\future\\poll_fn.rs:47:9\n   |\n47 |         (&mut self.f)(cx)\n   |         ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n   = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 979,
                        "byte_start": 966,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\poll_fn.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 47,
                        "line_start": 47,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut self.f)(cx)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 979,
                    "byte_start": 966,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\poll_fn.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut self.f)(cx)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\all.rs:40:30\n   |\n40 |                 let result = (&mut self.f)(v);\n   |                              ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 993,
                        "byte_start": 980,
                        "column_end": 43,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\all.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 40,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 30,
                            "text": "                let result = (&mut self.f)(v);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 993,
                    "byte_start": 980,
                    "column_end": 43,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\all.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 30,
                        "text": "                let result = (&mut self.f)(v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\any.rs:40:30\n   |\n40 |                 let result = (&mut self.f)(v);\n   |                              ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 993,
                        "byte_start": 980,
                        "column_end": 43,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\any.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 40,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 30,
                            "text": "                let result = (&mut self.f)(v);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 993,
                    "byte_start": 980,
                    "column_end": 43,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\any.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 30,
                        "text": "                let result = (&mut self.f)(v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\find.rs:33:24\n   |\n33 |             Some(v) if (&mut self.p)(&v) => Poll::Ready(Some(v)),\n   |                        ^^^^^^^^^^^^^ help: change this to: `(self.p)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 798,
                        "byte_start": 785,
                        "column_end": 37,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\find.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 33,
                        "line_start": 33,
                        "suggested_replacement": "(self.p)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 24,
                            "text": "            Some(v) if (&mut self.p)(&v) => Poll::Ready(Some(v)),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 798,
                    "byte_start": 785,
                    "column_end": 37,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\find.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 24,
                        "text": "            Some(v) if (&mut self.p)(&v) => Poll::Ready(Some(v)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\find_map.rs:33:30\n   |\n33 |             Some(v) => match (&mut self.f)(v) {\n   |                              ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 816,
                        "byte_start": 803,
                        "column_end": 43,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\find_map.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 33,
                        "line_start": 33,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 30,
                            "text": "            Some(v) => match (&mut self.f)(v) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 816,
                    "byte_start": 803,
                    "column_end": 43,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\find_map.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 30,
                        "text": "            Some(v) => match (&mut self.f)(v) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: called `Option::take()` on a temporary value\n  --> src\\stream\\stream\\partial_cmp.rs:79:31\n   |\n79 |                 let l_value = this.l_cache.as_mut().take().unwrap();\n   |                               ^^^^^^^^^^^^^^^^^^^^^-------\n   |                                                    |\n   |                                                    help: remove\n   |\n   = note: `as_mut` creates a temporary value, so calling take() has no effect\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take\n   = note: `#[warn(clippy::needless_option_take)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`as_mut` creates a temporary value, so calling take() has no effect",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_option_take)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2472,
                        "byte_start": 2465,
                        "column_end": 59,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\partial_cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 79,
                        "line_start": 79,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 52,
                            "text": "                let l_value = this.l_cache.as_mut().take().unwrap();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_option_take",
                  "explanation": null
                },
                "level": "warning",
                "message": "called `Option::take()` on a temporary value",
                "spans": [
                  {
                    "byte_end": 2472,
                    "byte_start": 2444,
                    "column_end": 59,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\partial_cmp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 31,
                        "text": "                let l_value = this.l_cache.as_mut().take().unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: called `Option::take()` on a temporary value\n  --> src\\stream\\stream\\partial_cmp.rs:80:31\n   |\n80 |                 let r_value = this.r_cache.as_mut().take().unwrap();\n   |                               ^^^^^^^^^^^^^^^^^^^^^-------\n   |                                                    |\n   |                                                    help: remove\n   |\n   = note: `as_mut` creates a temporary value, so calling take() has no effect\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`as_mut` creates a temporary value, so calling take() has no effect",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2541,
                        "byte_start": 2534,
                        "column_end": 59,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\partial_cmp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 80,
                        "line_start": 80,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 52,
                            "text": "                let r_value = this.r_cache.as_mut().take().unwrap();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_option_take",
                  "explanation": null
                },
                "level": "warning",
                "message": "called `Option::take()` on a temporary value",
                "spans": [
                  {
                    "byte_end": 2541,
                    "byte_start": 2513,
                    "column_end": 59,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\partial_cmp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 80,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 31,
                        "text": "                let r_value = this.r_cache.as_mut().take().unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\position.rs:39:20\n   |\n39 |                 if (&mut self.predicate)(v) {\n   |                    ^^^^^^^^^^^^^^^^^^^^^ help: change this to: `(self.predicate)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 925,
                        "byte_start": 904,
                        "column_end": 41,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\position.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "(self.predicate)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 20,
                            "text": "                if (&mut self.predicate)(v) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 925,
                    "byte_start": 904,
                    "column_end": 41,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\position.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 20,
                        "text": "                if (&mut self.predicate)(v) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\try_fold.rs:41:31\n   |\n41 |                     let new = (&mut self.f)(old, v);\n   |                               ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1036,
                        "byte_start": 1023,
                        "column_end": 44,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\try_fold.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 41,
                        "line_start": 41,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 31,
                            "text": "                    let new = (&mut self.f)(old, v);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 1036,
                    "byte_start": 1023,
                    "column_end": 44,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\try_fold.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 41,
                    "line_start": 41,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 31,
                        "text": "                    let new = (&mut self.f)(old, v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\stream\\try_for_each.rs:36:31\n   |\n36 |                     let res = (&mut self.f)(v);\n   |                               ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 930,
                        "byte_start": 917,
                        "column_end": 44,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\try_for_each.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 36,
                        "line_start": 36,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 31,
                            "text": "                    let res = (&mut self.f)(v);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 930,
                    "byte_start": 917,
                    "column_end": 44,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\try_for_each.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 36,
                    "line_start": 36,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 31,
                        "text": "                    let res = (&mut self.f)(v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\from_fn.rs:65:20\n   |\n65 |         let item = (&mut self.f)();\n   |                    ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1478,
                        "byte_start": 1465,
                        "column_end": 33,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\stream\\from_fn.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 20,
                            "text": "        let item = (&mut self.f)();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 1478,
                    "byte_start": 1465,
                    "column_end": 33,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\stream\\from_fn.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 20,
                        "text": "        let item = (&mut self.f)();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\repeat_with.rs:81:20\n   |\n81 |         let item = (&mut self.f)();\n   |                    ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1790,
                        "byte_start": 1777,
                        "column_end": 33,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\stream\\repeat_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 81,
                        "line_start": 81,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 20,
                            "text": "        let item = (&mut self.f)();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 1790,
                    "byte_start": 1777,
                    "column_end": 33,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\stream\\repeat_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 20,
                        "text": "        let item = (&mut self.f)();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n  --> src\\io\\buf_read\\lines.rs:53:29\n   |\n53 |         Poll::Ready(Some(Ok(mem::replace(this.buf, String::new()))))\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(this.buf)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n   = note: `#[warn(clippy::mem_replace_with_default)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mem_replace_with_default)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1517,
                        "byte_start": 1480,
                        "column_end": 66,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\buf_read\\lines.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": "std::mem::take(this.buf)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 29,
                            "text": "        Poll::Ready(Some(Ok(mem::replace(this.buf, String::new()))))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 1517,
                    "byte_start": 1480,
                    "column_end": 66,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\buf_read\\lines.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 29,
                        "text": "        Poll::Ready(Some(Ok(mem::replace(this.buf, String::new()))))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\io\\buf_read\\lines.rs:65:23\n   |\n65 |     if str::from_utf8(&bytes).is_err() {\n   |                       ^^^^^^ help: change this to: `bytes`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1846,
                        "byte_start": 1840,
                        "column_end": 29,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\io\\buf_read\\lines.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "bytes",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 23,
                            "text": "    if str::from_utf8(&bytes).is_err() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 1846,
                    "byte_start": 1840,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\io\\buf_read\\lines.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "    if str::from_utf8(&bytes).is_err() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\io\\buf_read\\read_line.rs:32:27\n   |\n32 |         if str::from_utf8(&bytes).is_err() {\n   |                           ^^^^^^ help: change this to: `bytes`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 883,
                        "byte_start": 877,
                        "column_end": 33,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\io\\buf_read\\read_line.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "bytes",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 27,
                            "text": "        if str::from_utf8(&bytes).is_err() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 883,
                    "byte_start": 877,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\io\\buf_read\\read_line.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "        if str::from_utf8(&bytes).is_err() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n  --> src\\io\\buf_read\\split.rs:49:29\n   |\n49 |         Poll::Ready(Some(Ok(mem::replace(this.buf, vec![]))))\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(this.buf)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1475,
                        "byte_start": 1445,
                        "column_end": 59,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\buf_read\\split.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": "std::mem::take(this.buf)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 29,
                            "text": "        Poll::Ready(Some(Ok(mem::replace(this.buf, vec![]))))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 1475,
                    "byte_start": 1445,
                    "column_end": 59,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\buf_read\\split.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 29,
                        "text": "        Poll::Ready(Some(Ok(mem::replace(this.buf, vec![]))))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n   --> src\\io\\buf_read\\mod.rs:139:29\n    |\n139 |             bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(buf.as_mut_vec())`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3846,
                        "byte_start": 3804,
                        "column_end": 71,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\buf_read\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 139,
                        "line_start": 139,
                        "suggested_replacement": "std::mem::take(buf.as_mut_vec())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 29,
                            "text": "            bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 3846,
                    "byte_start": 3804,
                    "column_end": 71,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\buf_read\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 71,
                        "highlight_start": 29,
                        "text": "            bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant guard\n   --> src\\io\\read\\chain.rs:147:28\n    |\n147 |                 Ok(buf) if buf.is_empty() => {\n    |                            ^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_guards\n    = note: `#[warn(clippy::redundant_guards)]` on by default\nhelp: try\n    |\n147 -                 Ok(buf) if buf.is_empty() => {\n147 +                 Ok([]) => {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_guards",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_guards)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4427,
                        "byte_start": 4424,
                        "column_end": 23,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\io\\read\\chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": "[]",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 23,
                            "highlight_start": 20,
                            "text": "                Ok(buf) if buf.is_empty() => {"
                          }
                        ]
                      },
                      {
                        "byte_end": 4446,
                        "byte_start": 4428,
                        "column_end": 42,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\io\\read\\chain.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 147,
                        "line_start": 147,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 24,
                            "text": "                Ok(buf) if buf.is_empty() => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_guards",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant guard",
                "spans": [
                  {
                    "byte_end": 4446,
                    "byte_start": 4432,
                    "column_end": 42,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\io\\read\\chain.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 28,
                        "text": "                Ok(buf) if buf.is_empty() => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n  --> src\\io\\read\\read_exact.rs:23:29\n   |\n23 |             let (_, rest) = mem::replace(buf, &mut []).split_at_mut(n);\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(buf)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 707,
                        "byte_start": 681,
                        "column_end": 55,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\read\\read_exact.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "std::mem::take(buf)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 29,
                            "text": "            let (_, rest) = mem::replace(buf, &mut []).split_at_mut(n);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 707,
                    "byte_start": 681,
                    "column_end": 55,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\read\\read_exact.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 29,
                        "text": "            let (_, rest) = mem::replace(buf, &mut []).split_at_mut(n);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\io\\read\\read_to_string.rs:32:27\n   |\n32 |         if str::from_utf8(&bytes).is_err() {\n   |                           ^^^^^^ help: change this to: `bytes`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 896,
                        "byte_start": 890,
                        "column_end": 33,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\io\\read\\read_to_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "bytes",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 27,
                            "text": "        if str::from_utf8(&bytes).is_err() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 896,
                    "byte_start": 890,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\io\\read\\read_to_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "        if str::from_utf8(&bytes).is_err() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n   --> src\\io\\read\\mod.rs:171:29\n    |\n171 |             bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(buf.as_mut_vec())`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4599,
                        "byte_start": 4557,
                        "column_end": 71,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\read\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 171,
                        "line_start": 171,
                        "suggested_replacement": "std::mem::take(buf.as_mut_vec())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 29,
                            "text": "            bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 4599,
                    "byte_start": 4557,
                    "column_end": 71,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\read\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 171,
                    "line_start": 171,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 71,
                        "highlight_start": 29,
                        "text": "            bytes: unsafe { mem::replace(buf.as_mut_vec(), Vec::new()) },"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n  --> src\\io\\write\\write_all.rs:23:29\n   |\n23 |             let (_, rest) = mem::replace(buf, &[]).split_at(n);\n   |                             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(buf)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 701,
                        "byte_start": 679,
                        "column_end": 51,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\io\\write\\write_all.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "std::mem::take(buf)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 29,
                            "text": "            let (_, rest) = mem::replace(buf, &[]).split_at(n);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 701,
                    "byte_start": 679,
                    "column_end": 51,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\io\\write\\write_all.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 29,
                        "text": "            let (_, rest) = mem::replace(buf, &[]).split_at(n);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: using `SeekFrom::Current` to start from current position\n   --> src\\fs\\file.rs:699:28\n    |\n699 |             let internal = (&*self.file).seek(SeekFrom::Current(0))?;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `(&*self.file).stream_position()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current\n    = note: `#[warn(clippy::seek_from_current)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::seek_from_current)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21111,
                        "byte_start": 21071,
                        "column_end": 68,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\fs\\file.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 699,
                        "line_start": 699,
                        "suggested_replacement": "(&*self.file).stream_position()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 28,
                            "text": "            let internal = (&*self.file).seek(SeekFrom::Current(0))?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::seek_from_current",
                  "explanation": null
                },
                "level": "warning",
                "message": "using `SeekFrom::Current` to start from current position",
                "spans": [
                  {
                    "byte_end": 21111,
                    "byte_start": 21071,
                    "column_end": 68,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "src\\fs\\file.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 699,
                    "line_start": 699,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 28,
                        "text": "            let internal = (&*self.file).seek(SeekFrom::Current(0))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: using `SeekFrom::Current` to start from current position\n   --> src\\fs\\file.rs:717:40\n    |\n717 |                         let internal = (&*self.file).seek(SeekFrom::Current(0))?;\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `(&*self.file).stream_position()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22035,
                        "byte_start": 21995,
                        "column_end": 80,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\fs\\file.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 717,
                        "line_start": 717,
                        "suggested_replacement": "(&*self.file).stream_position()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 40,
                            "text": "                        let internal = (&*self.file).seek(SeekFrom::Current(0))?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::seek_from_current",
                  "explanation": null
                },
                "level": "warning",
                "message": "using `SeekFrom::Current` to start from current position",
                "spans": [
                  {
                    "byte_end": 22035,
                    "byte_start": 21995,
                    "column_end": 80,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\fs\\file.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 717,
                    "line_start": 717,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 80,
                        "highlight_start": 40,
                        "text": "                        let internal = (&*self.file).seek(SeekFrom::Current(0))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: large size difference between variants\n  --> src\\fs\\read_dir.rs:76:1\n   |\n76 | / enum State {\n77 | |     Idle(Option<std::fs::ReadDir>),\n   | |     ------------------------------ the largest variant contains at least 624 bytes\n78 | |     Busy(JoinHandle<(std::fs::ReadDir, Option<io::Result<std::fs::DirEntry>>)>),\n   | |     --------------------------------------------------------------------------- the second-largest variant contains at least 24 bytes\n79 | | }\n   | |_^ the entire enum is at least 624 bytes\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n   = note: `#[warn(clippy::large_enum_variant)]` on by default\nhelp: consider boxing the large fields to reduce the total size of the enum\n   |\n77 -     Idle(Option<std::fs::ReadDir>),\n77 +     Idle(Box<Option<std::fs::ReadDir>>),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::large_enum_variant)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider boxing the large fields to reduce the total size of the enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2346,
                        "byte_start": 2322,
                        "column_end": 34,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\fs\\read_dir.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 77,
                        "line_start": 77,
                        "suggested_replacement": "Box<Option<std::fs::ReadDir>>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 10,
                            "text": "    Idle(Option<std::fs::ReadDir>),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::large_enum_variant",
                  "explanation": null
                },
                "level": "warning",
                "message": "large size difference between variants",
                "spans": [
                  {
                    "byte_end": 2431,
                    "byte_start": 2300,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\fs\\read_dir.rs",
                    "is_primary": true,
                    "label": "the entire enum is at least 624 bytes",
                    "line_end": 79,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 1,
                        "text": "enum State {"
                      },
                      {
                        "highlight_end": 36,
                        "highlight_start": 1,
                        "text": "    Idle(Option<std::fs::ReadDir>),"
                      },
                      {
                        "highlight_end": 81,
                        "highlight_start": 1,
                        "text": "    Busy(JoinHandle<(std::fs::ReadDir, Option<io::Result<std::fs::DirEntry>>)>),"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  },
                  {
                    "byte_end": 2347,
                    "byte_start": 2317,
                    "column_end": 35,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\fs\\read_dir.rs",
                    "is_primary": false,
                    "label": "the largest variant contains at least 624 bytes",
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 5,
                        "text": "    Idle(Option<std::fs::ReadDir>),"
                      }
                    ]
                  },
                  {
                    "byte_end": 2428,
                    "byte_start": 2353,
                    "column_end": 80,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\fs\\read_dir.rs",
                    "is_primary": false,
                    "label": "the second-largest variant contains at least 24 bytes",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 80,
                        "highlight_start": 5,
                        "text": "    Busy(JoinHandle<(std::fs::ReadDir, Option<io::Result<std::fs::DirEntry>>)>),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\path\\path.rs:264:32\n    |\n264 |         Ancestors { next: Some(&self) }\n    |                                ^^^^^ help: change this to: `self`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8216,
                        "byte_start": 8211,
                        "column_end": 37,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 264,
                        "line_start": 264,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 32,
                            "text": "        Ancestors { next: Some(&self) }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 8216,
                    "byte_start": 8211,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\path\\path.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 264,
                    "line_start": 264,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "        Ancestors { next: Some(&self) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n    --> src\\path\\path.rs:1014:9\n     |\n1014 |         &Path::new(path.as_os_str())\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `Path::new(path.as_os_str())`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 31386,
                        "byte_start": 31358,
                        "column_end": 37,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1014,
                        "line_start": 1014,
                        "suggested_replacement": "Path::new(path.as_os_str())",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 9,
                            "text": "        &Path::new(path.as_os_str())"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 31386,
                    "byte_start": 31358,
                    "column_end": 37,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\path\\path.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1014,
                    "line_start": 1014,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 9,
                        "text": "        &Path::new(path.as_os_str())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n    --> src\\path\\path.rs:1018:1\n     |\n1018 | impl<'a> Into<&'a std::path::Path> for &'a Path {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n             https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n     = note: `#[warn(clippy::from_over_into)]` on by default\nhelp: replace the `Into` implementation with `From<&'a path::path::Path>`\n     |\n1018 ~ impl<'a> From<&'a Path> for &'a std::path::Path {\n1019 ~     fn from(val: &'a Path) -> Self {\n1020 ~         std::path::Path::new(&val.inner)\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::from_over_into)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<&'a path::path::Path>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 31409,
                        "byte_start": 31405,
                        "column_end": 14,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1018,
                        "line_start": 1018,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 10,
                            "text": "impl<'a> Into<&'a std::path::Path> for &'a Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31429,
                        "byte_start": 31410,
                        "column_end": 34,
                        "column_start": 15,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1018,
                        "line_start": 1018,
                        "suggested_replacement": "&'a Path",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 15,
                            "text": "impl<'a> Into<&'a std::path::Path> for &'a Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31443,
                        "byte_start": 31435,
                        "column_end": 48,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1018,
                        "line_start": 1018,
                        "suggested_replacement": "&'a std::path::Path",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 40,
                            "text": "impl<'a> Into<&'a std::path::Path> for &'a Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31457,
                        "byte_start": 31453,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1019,
                        "line_start": 1019,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> &'a std::path::Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31462,
                        "byte_start": 31458,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1019,
                        "line_start": 1019,
                        "suggested_replacement": "val: &'a Path",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> &'a std::path::Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31486,
                        "byte_start": 31467,
                        "column_end": 41,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1019,
                        "line_start": 1019,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> &'a std::path::Path {"
                          }
                        ]
                      },
                      {
                        "byte_end": 31523,
                        "byte_start": 31519,
                        "column_end": 35,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\path\\path.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1020,
                        "line_start": 1020,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 31,
                            "text": "        std::path::Path::new(&self.inner)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 31443,
                    "byte_start": 31396,
                    "column_end": 48,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\path\\path.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1018,
                    "line_start": 1018,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "impl<'a> Into<&'a std::path::Path> for &'a Path {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> src\\path\\pathbuf.rs:367:1\n    |\n367 | impl Into<std::path::PathBuf> for PathBuf {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\nhelp: replace the `Into` implementation with `From<path::pathbuf::PathBuf>`\n    |\n367 ~ impl From<PathBuf> for std::path::PathBuf {\n368 ~     fn from(val: PathBuf) -> Self {\n369 ~         val.inner\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the `Into` implementation with `From<path::pathbuf::PathBuf>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9653,
                        "byte_start": 9649,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 367,
                        "line_start": 367,
                        "suggested_replacement": "From",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl Into<std::path::PathBuf> for PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9672,
                        "byte_start": 9654,
                        "column_end": 29,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 367,
                        "line_start": 367,
                        "suggested_replacement": "PathBuf",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 11,
                            "text": "impl Into<std::path::PathBuf> for PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9685,
                        "byte_start": 9678,
                        "column_end": 42,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 367,
                        "line_start": 367,
                        "suggested_replacement": "std::path::PathBuf",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 35,
                            "text": "impl Into<std::path::PathBuf> for PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9699,
                        "byte_start": 9695,
                        "column_end": 12,
                        "column_start": 8,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 368,
                        "line_start": 368,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 12,
                            "highlight_start": 8,
                            "text": "    fn into(self) -> std::path::PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9704,
                        "byte_start": 9700,
                        "column_end": 17,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 368,
                        "line_start": 368,
                        "suggested_replacement": "val: PathBuf",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 13,
                            "text": "    fn into(self) -> std::path::PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9727,
                        "byte_start": 9709,
                        "column_end": 40,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 368,
                        "line_start": 368,
                        "suggested_replacement": "Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 22,
                            "text": "    fn into(self) -> std::path::PathBuf {"
                          }
                        ]
                      },
                      {
                        "byte_end": 9742,
                        "byte_start": 9738,
                        "column_end": 13,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\path\\pathbuf.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 369,
                        "line_start": 369,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 9,
                            "text": "        self.inner"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_over_into",
                  "explanation": null
                },
                "level": "warning",
                "message": "an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true",
                "spans": [
                  {
                    "byte_end": 9685,
                    "byte_start": 9644,
                    "column_end": 42,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\path\\pathbuf.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 367,
                    "line_start": 367,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 1,
                        "text": "impl Into<std::path::PathBuf> for PathBuf {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\net\\addr.rs:131:25\n    |\n131 |             .context(|| format!(\"could not resolve address `{}`\", self))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n131 -             .context(|| format!(\"could not resolve address `{}`\", self))\n131 +             .context(|| format!(\"could not resolve address `{self}`\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3874,
                        "byte_start": 3874,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                          }
                        ]
                      },
                      {
                        "byte_end": 3883,
                        "byte_start": 3877,
                        "column_end": 71,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 65,
                            "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3884,
                    "byte_start": 3837,
                    "column_end": 72,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\net\\addr.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 25,
                        "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\net\\addr.rs:146:25\n    |\n146 |             .context(|| format!(\"could not resolve address `{}`\", self))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n146 -             .context(|| format!(\"could not resolve address `{}`\", self))\n146 +             .context(|| format!(\"could not resolve address `{self}`\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4251,
                        "byte_start": 4251,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                          }
                        ]
                      },
                      {
                        "byte_end": 4260,
                        "byte_start": 4254,
                        "column_end": 71,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 146,
                        "line_start": 146,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 65,
                            "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4261,
                    "byte_start": 4214,
                    "column_end": 72,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\net\\addr.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 146,
                    "line_start": 146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 25,
                        "text": "            .context(|| format!(\"could not resolve address `{}`\", self))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\net\\addr.rs:220:29\n    |\n220 |                 .context(|| format!(\"could not resolve address `{:?}`\", addr))\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n220 -                 .context(|| format!(\"could not resolve address `{:?}`\", addr))\n220 +                 .context(|| format!(\"could not resolve address `{addr:?}`\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6304,
                        "byte_start": 6304,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 220,
                        "line_start": 220,
                        "suggested_replacement": "addr",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6315,
                        "byte_start": 6309,
                        "column_end": 77,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 220,
                        "line_start": 220,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 71,
                            "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6316,
                    "byte_start": 6267,
                    "column_end": 78,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\net\\addr.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 220,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 29,
                        "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\net\\addr.rs:242:29\n    |\n242 |                 .context(|| format!(\"could not resolve address `{:?}`\", addr))\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n242 -                 .context(|| format!(\"could not resolve address `{:?}`\", addr))\n242 +                 .context(|| format!(\"could not resolve address `{addr:?}`\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6947,
                        "byte_start": 6947,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 242,
                        "line_start": 242,
                        "suggested_replacement": "addr",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6958,
                        "byte_start": 6952,
                        "column_end": 77,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 242,
                        "line_start": 242,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 71,
                            "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6959,
                    "byte_start": 6910,
                    "column_end": 78,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\net\\addr.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 242,
                    "line_start": 242,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 29,
                        "text": "                .context(|| format!(\"could not resolve address `{:?}`\", addr))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\net\\addr.rs:283:9\n    |\n283 |         (&**self).to_socket_addrs()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7868,
                        "byte_start": 7859,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\net\\addr.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 283,
                        "line_start": 283,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).to_socket_addrs()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 7868,
                    "byte_start": 7859,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\net\\addr.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 283,
                    "line_start": 283,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).to_socket_addrs()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\net\\udp\\mod.rs:181:25\n    |\n181 |             .context(|| format!(\"could not send packet to {}\", addr))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n181 -             .context(|| format!(\"could not send packet to {}\", addr))\n181 +             .context(|| format!(\"could not send packet to {addr}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5660,
                        "byte_start": 5660,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\net\\udp\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 181,
                        "line_start": 181,
                        "suggested_replacement": "addr",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            .context(|| format!(\"could not send packet to {}\", addr))"
                          }
                        ]
                      },
                      {
                        "byte_end": 5668,
                        "byte_start": 5662,
                        "column_end": 68,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\net\\udp\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 181,
                        "line_start": 181,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 62,
                            "text": "            .context(|| format!(\"could not send packet to {}\", addr))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5669,
                    "byte_start": 5625,
                    "column_end": 69,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\net\\udp\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 181,
                    "line_start": 181,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 69,
                        "highlight_start": 25,
                        "text": "            .context(|| format!(\"could not send packet to {}\", addr))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1bdqscfi/async-std-1.13.1#async-std@1.13.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_std",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-channel",
                "async-global-executor",
                "async-io",
                "async-lock",
                "crossbeam-utils",
                "default",
                "futures-channel",
                "futures-core",
                "futures-io",
                "futures-lite",
                "gloo-timers",
                "kv-log-macro",
                "log",
                "memchr",
                "once_cell",
                "pin-project-lite",
                "pin-utils",
                "slab",
                "std",
                "wasm-bindgen-futures"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1bdqscfi\\async-std-1.13.1\\target\\debug\\deps\\libasync_std-a542bb00aafb1607.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 215
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 6,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.2.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8",
                    "dependencies": [
                      {
                        "name": "matches",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0018",
                    "package": "remove_dir_all",
                    "title": "Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU)",
                    "description": "The remove_dir_all crate is a Rust library that offers additional features over the Rust\nstandard library fs::remove_dir_all function.\n\nIt was possible to trick a privileged process doing a recursive delete in an\nattacker controlled directory into deleting privileged files, on all operating systems.\n\nFor instance, consider deleting a tree called 'etc' in a parent directory\ncalled 'p'. Between calling `remove_dir_all(\"a\")` and remove_dir_all(\"a\")\nactually starting its work, the attacker can move 'p' to 'p-prime', and\nreplace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'\nwhich is actually /etc, and now your system is broken. There are some\nmitigations for this exact scenario, such as CWD relative file lookup, but\nthey are not guaranteed - any code using absolute paths will not have that\nprotection in place.\n\nThe same attack could be performed at any point in the directory tree being\ndeleted: if 'a' contains a child directory called 'etc', attacking the\ndeletion by replacing 'a' with a link is possible.\n\nThe new code in this release mitigates the attack within the directory tree\nbeing deleted by using file-handle relative operations: to open 'a/etc', the\npath 'etc' relative to 'a' is opened, where 'a' is represented by a file\ndescriptor (Unix) or handle (Windows). With the exception of the entry points\ninto the directory deletion logic, this is robust against manipulation of the\ndirectory hierarchy, and remove_dir_all will only delete files and directories\ncontained in the tree it is deleting.\n\nThe entry path however is a challenge - as described above, there are some\npotential mitigations, but since using them must be done by the calling code,\nit is hard to be confident about the security properties of the path based\ninterface.\n\nThe new extension trait `RemoveDir` provides an interface where it is much\nharder to get it wrong.\n\n`somedir.remove_dir_contents(\"name-of-child\")`.\n\nCallers can then make their own security evaluation about how to securely get\na directory handle. That is still not particularly obvious, and we're going to\nfollow up with a helper of some sort (probably in the `fs_at` crate). Once\nthat is available, the path based entry points will get deprecated.\n\nIn the interim, processes that might run with elevated privileges should\nfigure out how to securely identify the directory they are going to delete, to\navoid the initial race. Pragmatically, other processes should be fine with the\npath based entry points : this is the same interface `std::fs::remove_dir_all`\noffers, and an unprivileged process running in an attacker controlled\ndirectory can't do anything that the attacker can't already do.",
                    "date": "2023-02-24",
                    "aliases": [
                      "GHSA-mc8h-8q98-g5hr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "TOCTOU"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
                    ],
                    "source": null,
                    "url": "https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "remove_dir_all::ensure_empty_dir": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_all": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_contents": [
                        "<0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "remove_dir_all",
                    "version": "0.5.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0124",
                    "package": "tokio",
                    "title": "Data race when sending and receiving after closing a `oneshot` channel",
                    "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
                    "date": "2021-11-16",
                    "aliases": [
                      "CVE-2021-45710",
                      "GHSA-fg7r-2g4j-5cgr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "race condition"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/4225",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.8.4, <1.9.0",
                      ">=1.13.1"
                    ],
                    "unaffected": [
                      "<0.1.14"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::sync::oneshot::Receiver::close": [
                        "<=1.13.0, >=0.1.14"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.2.25",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.5.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0072",
                    "package": "tokio",
                    "title": "Task dropped in wrong thread when aborting `LocalSet` task",
                    "description": "When aborting a task with `JoinHandle::abort`, the future is dropped in the\nthread calling abort if the task is not currently being executed. This is\nincorrect for tasks spawned on a `LocalSet`.\n\nThis can easily result in race conditions as many projects use `Rc` or `RefCell`\nin their Tokio tasks for better performance.\n\nSee [tokio#3929][issue] for more details.\n\n[issue]: https://github.com/tokio-rs/tokio/issues/3929",
                    "date": "2021-07-07",
                    "aliases": [
                      "CVE-2021-38191",
                      "GHSA-2grh-hm3w-w7hv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "race condition",
                      "send"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/3929",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.5.1, <1.6.0",
                      ">=1.6.3, <1.7.0",
                      ">=1.7.2, <1.8.0",
                      ">=1.8.1"
                    ],
                    "unaffected": [
                      "<0.3.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::task::JoinHandle::abort": [
                        "<=1.8.0, >=0.3.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "46409491c9375a693ce7032101970a54f8a2010efb77e13f70788f0d84489e39",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0124",
                    "package": "tokio",
                    "title": "Data race when sending and receiving after closing a `oneshot` channel",
                    "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
                    "date": "2021-11-16",
                    "aliases": [
                      "CVE-2021-45710",
                      "GHSA-fg7r-2g4j-5cgr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "race condition"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/4225",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.8.4, <1.9.0",
                      ">=1.13.1"
                    ],
                    "unaffected": [
                      "<0.1.14"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::sync::oneshot::Receiver::close": [
                        "<=1.13.0, >=0.1.14"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "46409491c9375a693ce7032101970a54f8a2010efb77e13f70788f0d84489e39",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0001",
                    "package": "tokio",
                    "title": "reject_remote_clients Configuration corruption",
                    "description": "On Windows, configuring a named pipe server with [pipe_mode] will force [ServerOptions]::[reject_remote_clients] as `false`.\n\nThis drops any intended explicit configuration for the [reject_remote_clients] that may have been set as `true` previously.\n\nThe default setting of [reject_remote_clients] is normally `true` meaning the default is also overridden as `false`.\n\n## Workarounds\n\nEnsure that [pipe_mode] is set first after initializing a [ServerOptions]. For example:\n\n```rust\nlet mut opts = ServerOptions::new();\nopts.pipe_mode(PipeMode::Message);\nopts.reject_remote_clients(true);\n```\n\n[ServerOptions]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html\n[pipe_mode]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.pipe_mode\n[reject_remote_clients]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.reject_remote_clients",
                    "date": "2023-01-04",
                    "aliases": [
                      "CVE-2023-22466",
                      "GHSA-7rrj-xr53-82p7"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "configuration failure"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/tokio-rs/tokio/pull/5336",
                      "https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients"
                    ],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.18.4, <1.19.0",
                      ">=1.20.3, <1.21.0",
                      ">=1.23.1"
                    ],
                    "unaffected": [
                      "<1.7.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "package": {
                    "name": "tokio",
                    "version": "1.17.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee",
                    "dependencies": [
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "aes-soft",
                    "version": "0.6.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "be14c7498ea50828a38d0e24a765ed2effe92a705885b57d029cd67d45744072",
                    "dependencies": [
                      {
                        "name": "cipher",
                        "version": "0.2.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "opaque-debug",
                        "version": "0.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0060",
                    "package": "aes-soft",
                    "title": "`aes-soft` has been merged into the `aes` crate",
                    "description": "Please use the `aes` crate going forward. The new repository location is at:\n\n<https://github.com/RustCrypto/block-ciphers/tree/master/aes>\n\nAES-NI is now autodetected at runtime on `i686`/`x86-64` platforms.\nIf AES-NI is not present, the `aes` crate will fallback to a constant-time\nportable software implementation.\n\nTo force the use of a constant-time portable implementation on these platforms,\neven if AES-NI is available, use the new `force-soft` feature of the `aes`\ncrate to disable autodetection.",
                    "date": "2021-04-29",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/RustCrypto/block-ciphers/pull/200",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "aesni",
                    "version": "0.10.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ea2e11f5e94c2f7d386164cc2aa1f97823fed6f259e486940a71c174dd01b0ce",
                    "dependencies": [
                      {
                        "name": "cipher",
                        "version": "0.2.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "opaque-debug",
                        "version": "0.3.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0059",
                    "package": "aesni",
                    "title": "`aesni` has been merged into the `aes` crate",
                    "description": "Please use the `aes` crate going forward. The new repository location is at:\n\n<https://github.com/RustCrypto/block-ciphers/tree/master/aes>\n\nAES-NI is now autodetected at runtime on `i686`/`x86-64` platforms.\nIf AES-NI is not present, the `aes` crate will fallback to a constant-time\nportable software implementation.\n\nTo prevent this fallback (and have absence of AES-NI result in an illegal\ninstruction crash instead), continue to pass the same RUSTFLAGS which were\npreviously required for the `aesni` crate to compile:\n\n```\nRUSTFLAGS=-Ctarget-feature=+aes,+ssse3\n```",
                    "date": "2021-04-29",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/RustCrypto/block-ciphers/pull/200",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "cpuid-bool",
                    "version": "0.2.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "dcb25d077389e53838a8158c8e99174c5a9d902dee4904320db714f3c653ffba",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0064",
                    "package": "cpuid-bool",
                    "title": "`cpuid-bool` has been renamed to `cpufeatures`",
                    "description": "Please use the `cpufeatures`` crate going forward:\n\n<https://github.com/RustCrypto/utils/tree/master/cpufeatures>\n\nThere will be no further releases of `cpuid-bool`.",
                    "date": "2021-05-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/RustCrypto/utils/pull/381",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "stdweb",
                    "version": "0.4.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5",
                    "dependencies": [
                      {
                        "name": "discard",
                        "version": "1.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustc_version",
                        "version": "0.2.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-derive",
                        "version": "0.5.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-internal-macros",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-internal-runtime",
                        "version": "0.1.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasm-bindgen",
                        "version": "0.2.80",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0056",
                    "package": "stdweb",
                    "title": "stdweb is unmaintained",
                    "description": "The author of the `stdweb` crate is unresponsive.\n\nMaintained alternatives:\n\n- [`wasm-bindgen`](https://github.com/rustwasm/wasm-bindgen)\n- [`js-sys`](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/js-sys)\n- [`web-sys`](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/web-sys)",
                    "date": "2020-05-04",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/koute/stdweb/issues/403",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">0.4.20"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "surf",
                    "version": "2.3.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "718b1ae6b50351982dedff021db0def601677f2120938b070eadb10ba4038dd7",
                    "dependencies": [
                      {
                        "name": "async-std",
                        "version": "1.11.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "async-trait",
                        "version": "0.1.53",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "encoding_rs",
                        "version": "0.8.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-util",
                        "version": "0.3.21",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "getrandom",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "http-client",
                        "version": "6.5.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "http-types",
                        "version": "2.12.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.4.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime_guess",
                        "version": "2.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.136",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde_json",
                        "version": "1.0.79",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.57",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0036",
                    "package": "surf",
                    "title": "surf is unmaintained",
                    "description": "The developer has indicated that the crate is unmaintained.\n\nThe last release is over three years old (from 2021), the crate depends on the\ndeprecated `async-std` crate and on a very old version of `rustls` for TLS\nsupport.\n\n## Possible alternatives\n\n- [reqwest](https://crates.io/crates/reqwest)\n- [ureq](https://crates.io/crates/ureq)",
                    "date": "2025-05-17",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://github.com/http-rs/surf/issues/352"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "bumpalo",
                    "version": "3.9.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "a4a45a46ab1f2412e53d3a0ade76ffad2025804294569aae387231a0cd6e0899",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0078",
                    "package": "bumpalo",
                    "title": "Use-after-free due to a lifetime error in `Vec::into_iter()`",
                    "description": "In affected versions of this crate, the lifetime of the iterator produced by\n`Vec::into_iter()` is not constrained to the lifetime of the `Bump` that\nallocated the vector's memory. Using the iterator after the `Bump` is dropped\ncauses use-after-free accesses.\n\nThe following example demonstrates memory corruption arising from a misuse of\nthis unsoundness.\n\n```rust\nuse bumpalo::{collections::Vec, Bump};\n\nfn main() {\n    let bump = Bump::new();\n    let mut vec = Vec::new_in(&bump);\n    vec.extend([0x01u8; 32]);\n    let into_iter = vec.into_iter();\n    drop(bump);\n\n    for _ in 0..100 {\n        let reuse_bump = Bump::new();\n        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);\n    }\n\n    for x in into_iter {\n        print!(\"0x{:02x} \", x);\n    }\n    println!();\n}\n```\n\nThe issue was corrected in version 3.11.1 by adding a lifetime to the `IntoIter`\ntype, and updating the signature of `Vec::into_iter()` to constrain this\nlifetime.",
                    "date": "2022-01-14",
                    "aliases": [
                      "GHSA-f85w-wvc7-crwc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "memory-exposure"
                    ],
                    "keywords": [
                      "use-after-free"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "bumpalo::collections::vec::Vec::into_iter": [
                        "<3.11.1"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=3.11.1"
                    ],
                    "unaffected": [
                      "<1.1.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.7.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "0.2.25",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.5.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0005",
                    "package": "tokio",
                    "title": "`tokio::io::ReadHalf<T>::unsplit` is Unsound",
                    "description": "`tokio::io::ReadHalf<T>::unsplit` can violate the `Pin` contract\n\nThe soundness issue is described in the [tokio/issues#5372](https://github.com/tokio-rs/tokio/issues/5372)\n\nSpecific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.\n\nThe `tokio` feature `io-util` is also required to be enabled to trigger this\nsoundness issue.\n\nThanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.\n\nTokio before 0.2.0 used `futures` 0.1 that did not have `Pin`, so it is not\naffected by this issue.",
                    "date": "2023-01-11",
                    "aliases": [
                      "GHSA-4q83-7cq4-p6wg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/5372",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.18.5, <1.19.0",
                      ">=1.20.4, <1.21.0",
                      ">=1.24.2"
                    ],
                    "unaffected": [
                      "<0.2.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "0.2.25",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.5.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "46409491c9375a693ce7032101970a54f8a2010efb77e13f70788f0d84489e39",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0005",
                    "package": "tokio",
                    "title": "`tokio::io::ReadHalf<T>::unsplit` is Unsound",
                    "description": "`tokio::io::ReadHalf<T>::unsplit` can violate the `Pin` contract\n\nThe soundness issue is described in the [tokio/issues#5372](https://github.com/tokio-rs/tokio/issues/5372)\n\nSpecific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.\n\nThe `tokio` feature `io-util` is also required to be enabled to trigger this\nsoundness issue.\n\nThanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.\n\nTokio before 0.2.0 used `futures` 0.1 that did not have `Pin`, so it is not\naffected by this issue.",
                    "date": "2023-01-11",
                    "aliases": [
                      "GHSA-4q83-7cq4-p6wg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/5372",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.18.5, <1.19.0",
                      ">=1.20.4, <1.21.0",
                      ">=1.24.2"
                    ],
                    "unaffected": [
                      "<0.2.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "0.3.7",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "46409491c9375a693ce7032101970a54f8a2010efb77e13f70788f0d84489e39",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.17.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee",
                    "dependencies": [
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0005",
                    "package": "tokio",
                    "title": "`tokio::io::ReadHalf<T>::unsplit` is Unsound",
                    "description": "`tokio::io::ReadHalf<T>::unsplit` can violate the `Pin` contract\n\nThe soundness issue is described in the [tokio/issues#5372](https://github.com/tokio-rs/tokio/issues/5372)\n\nSpecific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.\n\nThe `tokio` feature `io-util` is also required to be enabled to trigger this\nsoundness issue.\n\nThanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.\n\nTokio before 0.2.0 used `futures` 0.1 that did not have `Pin`, so it is not\naffected by this issue.",
                    "date": "2023-01-11",
                    "aliases": [
                      "GHSA-4q83-7cq4-p6wg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/5372",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.18.5, <1.19.0",
                      ">=1.20.4, <1.21.0",
                      ">=1.24.2"
                    ],
                    "unaffected": [
                      "<0.2.0"
                    ]
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.17.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee",
                    "dependencies": [
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "cpufeatures",
                    "version": "0.2.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "59a6001667ab124aebae2a495118e11d30984c3a653e99d86d58971708cf5e4b",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.169",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.21",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a",
                    "dependencies": [
                      {
                        "name": "futures-channel",
                        "version": "0.3.21",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-io",
                        "version": "0.3.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-macro",
                        "version": "0.3.21",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.21",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.21",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.4.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.16",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "async-std",
          "version": "1.13.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\n[Settings](https://docs.rs/async-std/latest/settings.html)\n[Help](https://docs.rs/async-std/latest/help.html)\nSummary[Source](https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338)\nExpand description\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library)Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the [broader Rust ecosystem](https://crates.io). It offers std types, like [`Future`](https://docs.rs/async-std/latest/async_std/future/trait.Future.html) and [`Stream`](https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html), library-defined [operations on language primitives](https://docs.rs/async-std/latest/async_std/#primitives), [standard macros](https://docs.rs/async-std/latest/async_std/#macros), [I/O](https://docs.rs/async-std/latest/async_std/io/index.html) and [multithreading](https://docs.rs/async-std/latest/async_std/task/index.html), among [many other things](https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation).\n`async-std` is available from [crates.io](https://crates.io). Once included, `async-std` can be accessed in [`use`](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html) statements through the path `async_std`, as in [`use async_std::future`](https://docs.rs/async-std/latest/async_std/future/index.html).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation)How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the [search bar](https://docs.rs/async-std/latest/async_std/) at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * [`async_std::*` modules](https://docs.rs/async-std/latest/async_std/#modules)\n  * [Async macros](https://docs.rs/async-std/latest/async_std/#macros)\n  * [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html)\n  * [Cargo.toml feature flags](https://docs.rs/async-std/latest/async_std/#features)\n  * [Examples](https://docs.rs/async-std/latest/async_std/#examples)\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * [The async-std website](https://async.rs/)\n  * [The async-std book](https://book.async.rs)\n  * [GitHub repository](https://github.com/async-rs/async-std)\n  * [List of code examples](https://github.com/async-rs/async-std/tree/HEAD/examples)\n  * [Discord chat](https://discord.gg/JvZeVNe)\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation)What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, [all listed further down this page](https://docs.rs/async-std/latest/async_std/#modules). These modules are the bedrock upon which async Rust is forged, and they have mighty names like [`async_std::os`](https://docs.rs/async-std/latest/async_std/os/index.html) and [`async_std::task`](https://docs.rs/async-std/latest/async_std/task/index.html). Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html), a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and [lists them on this page](https://docs.rs/async-std/latest/async_std/#macros).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation)Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines [here](https://async.rs/contribute). The source for this documentation can be found on [GitHub](https://github.com/async-rs). To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on [Discord](https://discord.gg/JvZeVNe).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std)A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io)Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including [files](https://docs.rs/async-std/latest/async_std/fs/struct.File.html), [TCP](https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html), [UDP](https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html), are defined in the [`io`](https://docs.rs/async-std/latest/async_std/io/index.html), [`fs`](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\"), and [`net`](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\") modules.\nThe [`task`](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\") module contains `async-std`\u2019s task abstractions. [`sync`](https://docs.rs/async-std/latest/async_std/sync/index.html) contains further primitive shared memory types. [`channel`](https://docs.rs/async-std/latest/async_std/channel/index.html) contains the channel types for message passing.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays)Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * [`task::sleep`](https://docs.rs/async-std/latest/async_std/task/fn.sleep.html) to wait for a duration to pass without blocking.\n  * [`stream::interval`](https://docs.rs/async-std/latest/async_std/stream/fn.interval.html) for emitting an event at a set interval.\n  * [`future::timeout`](https://docs.rs/async-std/latest/async_std/future/fn.timeout.html) to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#examples)Examples\nAll examples require the [`\"attributes\"` feature](https://docs.rs/async-std/latest/async_std/#features) to be enabled. This feature is not enabled by default because it significantly impacts compile times. See [`task::block_on`](https://docs.rs/async-std/latest/async_std/task/fn.block_on.html) for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#features)Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#runtime-configuration)Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by [async-global-executor](https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html \"mod async_global_executor\"), which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules[\u00a7](https://docs.rs/async-std/latest/async_std/#modules)\n\n[channel](https://docs.rs/async-std/latest/async_std/channel/index.html \"mod async_std::channel\")\n    Channels\n\n[fs](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\")\n    Filesystem manipulation operations.\n\n[future](https://docs.rs/async-std/latest/async_std/future/index.html \"mod async_std::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/async-std/latest/async_std/io/index.html \"mod async_std::io\")\n    Traits, helpers, and type definitions for core I/O functionality.\n\n[net](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\")\n    Networking primitives for TCP/UDP communication.\n\n[os](https://docs.rs/async-std/latest/async_std/os/index.html \"mod async_std::os\")\n    OS-specific extensions.\n\n[path](https://docs.rs/async-std/latest/async_std/path/index.html \"mod async_std::path\")\n    Cross-platform path manipulation.\n\n[pin](https://docs.rs/async-std/latest/async_std/pin/index.html \"mod async_std::pin\")`unstable`\n    Types that pin data to its location in memory.\n\n[prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html \"mod async_std::prelude\")\n    The async prelude.\n\n[process](https://docs.rs/async-std/latest/async_std/process/index.html \"mod async_std::process\")`unstable`\n    A module for working with processes.\n\n[stream](https://docs.rs/async-std/latest/async_std/stream/index.html \"mod async_std::stream\")\n    Composable asynchronous iteration.\n\n[sync](https://docs.rs/async-std/latest/async_std/sync/index.html \"mod async_std::sync\")\n    Synchronization primitives.\n\n[task](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\")\n    Types and traits for working with asynchronous tasks.\n## Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#macros)\n\n[eprint](https://docs.rs/async-std/latest/async_std/macro.eprint.html \"macro async_std::eprint\")`unstable`\n    Prints to the standard error.\n\n[eprintln](https://docs.rs/async-std/latest/async_std/macro.eprintln.html \"macro async_std::eprintln\")`unstable`\n    Prints to the standard error, with a newline.\n\n[print](https://docs.rs/async-std/latest/async_std/macro.print.html \"macro async_std::print\")`unstable`\n    Prints to the standard output.\n\n[println](https://docs.rs/async-std/latest/async_std/macro.println.html \"macro async_std::println\")`unstable`\n    Prints to the standard output, with a newline.\n\n[task_local](https://docs.rs/async-std/latest/async_std/macro.task_local.html \"macro async_std::task_local\")\n    Declares task-local values.\n\n[write](https://docs.rs/async-std/latest/async_std/macro.write.html \"macro async_std::write\")`unstable`\n    Writes formatted data into a buffer.\n\n[writeln](https://docs.rs/async-std/latest/async_std/macro.writeln.html \"macro async_std::writeln\")`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#attributes)\n\n[main](https://docs.rs/async-std/latest/async_std/attr.main.html \"attr async_std::main\")`attributes`\n    Enables an async main function.\n\n[test](https://docs.rs/async-std/latest/async_std/attr.test.html \"attr async_std::test\")`attributes`\n    Enables an async test function.\n",
            "markdown_with_citations": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem\u27e85\u27e9. It offers std types, like `Future`\u27e86\u27e9 and `Stream`\u27e87\u27e9, library-defined operations on language primitives\u27e88\u27e9, standard macros\u27e89\u27e9, I/O\u27e810\u27e9 and multithreading\u27e811\u27e9, among many other things\u27e812\u27e9.\n`async-std` is available from crates.io\u27e85\u27e9. Once included, `async-std` can be accessed in `use`\u27e813\u27e9 statements through the path `async_std`, as in `use async_std::future`\u27e814\u27e9.\n## \u00a7\u27e815\u27e9How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the search bar\u27e816\u27e9 at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * `async_std::*` modules\u27e817\u27e9\n  * Async macros\u27e89\u27e9\n  * The Async Prelude\u27e818\u27e9\n  * Cargo.toml feature flags\u27e819\u27e9\n  * Examples\u27e820\u27e9\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * The async-std website\u27e821\u27e9\n  * The async-std book\u27e822\u27e9\n  * GitHub repository\u27e823\u27e9\n  * List of code examples\u27e824\u27e9\n  * Discord chat\u27e825\u27e9\n\n\n## \u00a7\u27e826\u27e9What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, all listed further down this page\u27e817\u27e9. These modules are the bedrock upon which async Rust is forged, and they have mighty names like `async_std::os`\u27e827\u27e9 and `async_std::task`\u27e811\u27e9. Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines The Async Prelude\u27e818\u27e9, a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and lists them on this page\u27e89\u27e9.\n## \u00a7\u27e828\u27e9Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines here\u27e829\u27e9. The source for this documentation can be found on GitHub\u27e830\u27e9. To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on Discord\u27e825\u27e9.\n## \u00a7\u27e831\u27e9A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### \u00a7\u27e832\u27e9Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including files\u27e833\u27e9, TCP\u27e834\u27e9, UDP\u27e835\u27e9, are defined in the `io`\u27e810\u27e9, `fs`\u27e836\u27e9, and `net`\u27e837\u27e9 modules.\nThe `task`\u27e811\u27e9 module contains `async-std`\u2019s task abstractions. `sync`\u27e838\u27e9 contains further primitive shared memory types. `channel`\u27e839\u27e9 contains the channel types for message passing.\n### \u00a7\u27e840\u27e9Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * `task::sleep`\u27e841\u27e9 to wait for a duration to pass without blocking.\n  * `stream::interval`\u27e842\u27e9 for emitting an event at a set interval.\n  * `future::timeout`\u27e843\u27e9 to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## \u00a7\u27e820\u27e9Examples\nAll examples require the `\"attributes\"` feature\u27e819\u27e9 to be enabled. This feature is not enabled by default because it significantly impacts compile times. See `task::block_on`\u27e844\u27e9 for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## \u00a7\u27e819\u27e9Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## \u00a7\u27e845\u27e9Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by async-global-executor\u27e846\u27e9, which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules\u00a7\u27e817\u27e9\n\nchannel\u27e839\u27e9\n    Channels\n\nfs\u27e836\u27e9\n    Filesystem manipulation operations.\n\nfuture\u27e814\u27e9\n    Asynchronous values.\n\nio\u27e810\u27e9\n    Traits, helpers, and type definitions for core I/O functionality.\n\nnet\u27e837\u27e9\n    Networking primitives for TCP/UDP communication.\n\nos\u27e827\u27e9\n    OS-specific extensions.\n\npath\u27e847\u27e9\n    Cross-platform path manipulation.\n\npin\u27e848\u27e9`unstable`\n    Types that pin data to its location in memory.\n\nprelude\u27e818\u27e9\n    The async prelude.\n\nprocess\u27e849\u27e9`unstable`\n    A module for working with processes.\n\nstream\u27e850\u27e9\n    Composable asynchronous iteration.\n\nsync\u27e838\u27e9\n    Synchronization primitives.\n\ntask\u27e811\u27e9\n    Types and traits for working with asynchronous tasks.\n## Macros\u00a7\u27e89\u27e9\n\neprint\u27e851\u27e9`unstable`\n    Prints to the standard error.\n\neprintln\u27e852\u27e9`unstable`\n    Prints to the standard error, with a newline.\n\nprint\u27e853\u27e9`unstable`\n    Prints to the standard output.\n\nprintln\u27e854\u27e9`unstable`\n    Prints to the standard output, with a newline.\n\ntask_local\u27e855\u27e9\n    Declares task-local values.\n\nwrite\u27e856\u27e9`unstable`\n    Writes formatted data into a buffer.\n\nwriteln\u27e857\u27e9`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros\u00a7\u27e858\u27e9\n\nmain\u27e859\u27e9`attributes`\n    Enables an async main function.\n\ntest\u27e860\u27e9`attributes`\n    Enables an async test function.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-std/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-std/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338: Source\n\u27e84\u27e9 https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library: \u00a7\n\u27e85\u27e9 https://crates.io: broader Rust ecosystem\n\u27e86\u27e9 https://docs.rs/async-std/latest/async_std/future/trait.Future.html: `Future`\n\u27e87\u27e9 https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html: `Stream`\n\u27e88\u27e9 https://docs.rs/async-std/latest/async_std/#primitives: operations on language primitives\n\u27e89\u27e9 https://docs.rs/async-std/latest/async_std/#macros: standard macros\n\u27e810\u27e9 https://docs.rs/async-std/latest/async_std/io/index.html: I/O\n\u27e811\u27e9 https://docs.rs/async-std/latest/async_std/task/index.html: multithreading\n\u27e812\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation: many other things\n\u27e813\u27e9 https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html: `use`\n\u27e814\u27e9 https://docs.rs/async-std/latest/async_std/future/index.html: `use async_std::future`\n\u27e815\u27e9 https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation: \u00a7\n\u27e816\u27e9 https://docs.rs/async-std/latest/async_std/: search bar\n\u27e817\u27e9 https://docs.rs/async-std/latest/async_std/#modules: `async_std::*` modules\n\u27e818\u27e9 https://docs.rs/async-std/latest/async_std/prelude/index.html: The Async Prelude\n\u27e819\u27e9 https://docs.rs/async-std/latest/async_std/#features: Cargo.toml feature flags\n\u27e820\u27e9 https://docs.rs/async-std/latest/async_std/#examples: Examples\n\u27e821\u27e9 https://async.rs/: The async-std website\n\u27e822\u27e9 https://book.async.rs: The async-std book\n\u27e823\u27e9 https://github.com/async-rs/async-std: GitHub repository\n\u27e824\u27e9 https://github.com/async-rs/async-std/tree/HEAD/examples: List of code examples\n\u27e825\u27e9 https://discord.gg/JvZeVNe: Discord chat\n\u27e826\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation: \u00a7\n\u27e827\u27e9 https://docs.rs/async-std/latest/async_std/os/index.html: `async_std::os`\n\u27e828\u27e9 https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation: \u00a7\n\u27e829\u27e9 https://async.rs/contribute: here\n\u27e830\u27e9 https://github.com/async-rs: GitHub\n\u27e831\u27e9 https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std: \u00a7\n\u27e832\u27e9 https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io: \u00a7\n\u27e833\u27e9 https://docs.rs/async-std/latest/async_std/fs/struct.File.html: files\n\u27e834\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html: TCP\n\u27e835\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html: UDP\n\u27e836\u27e9 https://docs.rs/async-std/latest/async_std/fs/index.html: mod async_std::fs - `fs`\n\u27e837\u27e9 https://docs.rs/async-std/latest/async_std/net/index.html: mod async_std::net - `net`\n\u27e838\u27e9 https://docs.rs/async-std/latest/async_std/sync/index.html: `sync`\n\u27e839\u27e9 https://docs.rs/async-std/latest/async_std/channel/index.html: `channel`\n\u27e840\u27e9 https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays: \u00a7\n\u27e841\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.sleep.html: `task::sleep`\n\u27e842\u27e9 https://docs.rs/async-std/latest/async_std/stream/fn.interval.html: `stream::interval`\n\u27e843\u27e9 https://docs.rs/async-std/latest/async_std/future/fn.timeout.html: `future::timeout`\n\u27e844\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.block_on.html: `task::block_on`\n\u27e845\u27e9 https://docs.rs/async-std/latest/async_std/#runtime-configuration: \u00a7\n\u27e846\u27e9 https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html: mod async_global_executor - async-global-executor\n\u27e847\u27e9 https://docs.rs/async-std/latest/async_std/path/index.html: mod async_std::path - path\n\u27e848\u27e9 https://docs.rs/async-std/latest/async_std/pin/index.html: mod async_std::pin - pin\n\u27e849\u27e9 https://docs.rs/async-std/latest/async_std/process/index.html: mod async_std::process - process\n\u27e850\u27e9 https://docs.rs/async-std/latest/async_std/stream/index.html: mod async_std::stream - stream\n\u27e851\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprint.html: macro async_std::eprint - eprint\n\u27e852\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprintln.html: macro async_std::eprintln - eprintln\n\u27e853\u27e9 https://docs.rs/async-std/latest/async_std/macro.print.html: macro async_std::print - print\n\u27e854\u27e9 https://docs.rs/async-std/latest/async_std/macro.println.html: macro async_std::println - println\n\u27e855\u27e9 https://docs.rs/async-std/latest/async_std/macro.task_local.html: macro async_std::task_local - task_local\n\u27e856\u27e9 https://docs.rs/async-std/latest/async_std/macro.write.html: macro async_std::write - write\n\u27e857\u27e9 https://docs.rs/async-std/latest/async_std/macro.writeln.html: macro async_std::writeln - writeln\n\u27e858\u27e9 https://docs.rs/async-std/latest/async_std/#attributes: \u00a7\n\u27e859\u27e9 https://docs.rs/async-std/latest/async_std/attr.main.html: attr async_std::main - main\n\u27e860\u27e9 https://docs.rs/async-std/latest/async_std/attr.test.html: attr async_std::test - test\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-std",
          "version": "1.13.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\n[Settings](https://docs.rs/async-std/latest/settings.html)\n[Help](https://docs.rs/async-std/latest/help.html)\nSummary[Source](https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338)\nExpand description\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library)Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the [broader Rust ecosystem](https://crates.io). It offers std types, like [`Future`](https://docs.rs/async-std/latest/async_std/future/trait.Future.html) and [`Stream`](https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html), library-defined [operations on language primitives](https://docs.rs/async-std/latest/async_std/#primitives), [standard macros](https://docs.rs/async-std/latest/async_std/#macros), [I/O](https://docs.rs/async-std/latest/async_std/io/index.html) and [multithreading](https://docs.rs/async-std/latest/async_std/task/index.html), among [many other things](https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation).\n`async-std` is available from [crates.io](https://crates.io). Once included, `async-std` can be accessed in [`use`](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html) statements through the path `async_std`, as in [`use async_std::future`](https://docs.rs/async-std/latest/async_std/future/index.html).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation)How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the [search bar](https://docs.rs/async-std/latest/async_std/) at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * [`async_std::*` modules](https://docs.rs/async-std/latest/async_std/#modules)\n  * [Async macros](https://docs.rs/async-std/latest/async_std/#macros)\n  * [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html)\n  * [Cargo.toml feature flags](https://docs.rs/async-std/latest/async_std/#features)\n  * [Examples](https://docs.rs/async-std/latest/async_std/#examples)\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * [The async-std website](https://async.rs/)\n  * [The async-std book](https://book.async.rs)\n  * [GitHub repository](https://github.com/async-rs/async-std)\n  * [List of code examples](https://github.com/async-rs/async-std/tree/HEAD/examples)\n  * [Discord chat](https://discord.gg/JvZeVNe)\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation)What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, [all listed further down this page](https://docs.rs/async-std/latest/async_std/#modules). These modules are the bedrock upon which async Rust is forged, and they have mighty names like [`async_std::os`](https://docs.rs/async-std/latest/async_std/os/index.html) and [`async_std::task`](https://docs.rs/async-std/latest/async_std/task/index.html). Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines [The Async Prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html), a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and [lists them on this page](https://docs.rs/async-std/latest/async_std/#macros).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation)Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines [here](https://async.rs/contribute). The source for this documentation can be found on [GitHub](https://github.com/async-rs). To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on [Discord](https://discord.gg/JvZeVNe).\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std)A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io)Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including [files](https://docs.rs/async-std/latest/async_std/fs/struct.File.html), [TCP](https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html), [UDP](https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html), are defined in the [`io`](https://docs.rs/async-std/latest/async_std/io/index.html), [`fs`](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\"), and [`net`](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\") modules.\nThe [`task`](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\") module contains `async-std`\u2019s task abstractions. [`sync`](https://docs.rs/async-std/latest/async_std/sync/index.html) contains further primitive shared memory types. [`channel`](https://docs.rs/async-std/latest/async_std/channel/index.html) contains the channel types for message passing.\n### [\u00a7](https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays)Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * [`task::sleep`](https://docs.rs/async-std/latest/async_std/task/fn.sleep.html) to wait for a duration to pass without blocking.\n  * [`stream::interval`](https://docs.rs/async-std/latest/async_std/stream/fn.interval.html) for emitting an event at a set interval.\n  * [`future::timeout`](https://docs.rs/async-std/latest/async_std/future/fn.timeout.html) to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#examples)Examples\nAll examples require the [`\"attributes\"` feature](https://docs.rs/async-std/latest/async_std/#features) to be enabled. This feature is not enabled by default because it significantly impacts compile times. See [`task::block_on`](https://docs.rs/async-std/latest/async_std/task/fn.block_on.html) for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#features)Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## [\u00a7](https://docs.rs/async-std/latest/async_std/#runtime-configuration)Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by [async-global-executor](https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html \"mod async_global_executor\"), which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules[\u00a7](https://docs.rs/async-std/latest/async_std/#modules)\n\n[channel](https://docs.rs/async-std/latest/async_std/channel/index.html \"mod async_std::channel\")\n    Channels\n\n[fs](https://docs.rs/async-std/latest/async_std/fs/index.html \"mod async_std::fs\")\n    Filesystem manipulation operations.\n\n[future](https://docs.rs/async-std/latest/async_std/future/index.html \"mod async_std::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/async-std/latest/async_std/io/index.html \"mod async_std::io\")\n    Traits, helpers, and type definitions for core I/O functionality.\n\n[net](https://docs.rs/async-std/latest/async_std/net/index.html \"mod async_std::net\")\n    Networking primitives for TCP/UDP communication.\n\n[os](https://docs.rs/async-std/latest/async_std/os/index.html \"mod async_std::os\")\n    OS-specific extensions.\n\n[path](https://docs.rs/async-std/latest/async_std/path/index.html \"mod async_std::path\")\n    Cross-platform path manipulation.\n\n[pin](https://docs.rs/async-std/latest/async_std/pin/index.html \"mod async_std::pin\")`unstable`\n    Types that pin data to its location in memory.\n\n[prelude](https://docs.rs/async-std/latest/async_std/prelude/index.html \"mod async_std::prelude\")\n    The async prelude.\n\n[process](https://docs.rs/async-std/latest/async_std/process/index.html \"mod async_std::process\")`unstable`\n    A module for working with processes.\n\n[stream](https://docs.rs/async-std/latest/async_std/stream/index.html \"mod async_std::stream\")\n    Composable asynchronous iteration.\n\n[sync](https://docs.rs/async-std/latest/async_std/sync/index.html \"mod async_std::sync\")\n    Synchronization primitives.\n\n[task](https://docs.rs/async-std/latest/async_std/task/index.html \"mod async_std::task\")\n    Types and traits for working with asynchronous tasks.\n## Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#macros)\n\n[eprint](https://docs.rs/async-std/latest/async_std/macro.eprint.html \"macro async_std::eprint\")`unstable`\n    Prints to the standard error.\n\n[eprintln](https://docs.rs/async-std/latest/async_std/macro.eprintln.html \"macro async_std::eprintln\")`unstable`\n    Prints to the standard error, with a newline.\n\n[print](https://docs.rs/async-std/latest/async_std/macro.print.html \"macro async_std::print\")`unstable`\n    Prints to the standard output.\n\n[println](https://docs.rs/async-std/latest/async_std/macro.println.html \"macro async_std::println\")`unstable`\n    Prints to the standard output, with a newline.\n\n[task_local](https://docs.rs/async-std/latest/async_std/macro.task_local.html \"macro async_std::task_local\")\n    Declares task-local values.\n\n[write](https://docs.rs/async-std/latest/async_std/macro.write.html \"macro async_std::write\")`unstable`\n    Writes formatted data into a buffer.\n\n[writeln](https://docs.rs/async-std/latest/async_std/macro.writeln.html \"macro async_std::writeln\")`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros[\u00a7](https://docs.rs/async-std/latest/async_std/#attributes)\n\n[main](https://docs.rs/async-std/latest/async_std/attr.main.html \"attr async_std::main\")`attributes`\n    Enables an async main function.\n\n[test](https://docs.rs/async-std/latest/async_std/attr.test.html \"attr async_std::test\")`attributes`\n    Enables an async test function.\n",
            "markdown_with_citations": "[](https://docs.rs/async-std/latest/async_std/all.html \"show sidebar\")\n# Crate async_stdCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Async version of the Rust standard library\n`async-std` is a foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem\u27e85\u27e9. It offers std types, like `Future`\u27e86\u27e9 and `Stream`\u27e87\u27e9, library-defined operations on language primitives\u27e88\u27e9, standard macros\u27e89\u27e9, I/O\u27e810\u27e9 and multithreading\u27e811\u27e9, among many other things\u27e812\u27e9.\n`async-std` is available from crates.io\u27e85\u27e9. Once included, `async-std` can be accessed in `use`\u27e813\u27e9 statements through the path `async_std`, as in `use async_std::future`\u27e814\u27e9.\n## \u00a7\u27e815\u27e9How to read this documentation\nIf you already know the name of what you are looking for, the fastest way to find it is to use the search bar\u27e816\u27e9 at the top of the page.\nOtherwise, you may want to jump to one of these useful sections:\n  * `async_std::*` modules\u27e817\u27e9\n  * Async macros\u27e89\u27e9\n  * The Async Prelude\u27e818\u27e9\n  * Cargo.toml feature flags\u27e819\u27e9\n  * Examples\u27e820\u27e9\n\n\nIf this is your first time, the documentation for `async-std` is written to be casually perused. Clicking on interesting things should generally lead you to interesting places. Still, there are important bits you don\u2019t want to miss, so read on for a tour of the `async-std` and its documentation!\nOnce you are familiar with the contents of `async-std` you may begin to find the verbosity of the prose distracting. At this stage in your development you may want to press the `[-]` button near the top of the page to collapse it into a more skimmable view.\nWhile you are looking at that `[-]` button also notice the `[src]` button. Rust\u2019s API documentation comes with the source code and you are encouraged to read it. The `async-std` source is generally high quality and a peek behind the curtains is often enlightening.\nModules in this crate are organized in the same way as in `std`, except blocking functions have been replaced with async functions and threads have been replaced with lightweight tasks.\nYou can find more information, reading materials, and other resources here:\n  * The async-std website\u27e821\u27e9\n  * The async-std book\u27e822\u27e9\n  * GitHub repository\u27e823\u27e9\n  * List of code examples\u27e824\u27e9\n  * Discord chat\u27e825\u27e9\n\n\n## \u00a7\u27e826\u27e9What is in the `async-std` documentation?\nFirst, `async-std` is divided into a number of focused modules, all listed further down this page\u27e817\u27e9. These modules are the bedrock upon which async Rust is forged, and they have mighty names like `async_std::os`\u27e827\u27e9 and `async_std::task`\u27e811\u27e9. Modules\u2019 documentation typically includes an overview of the module along with examples, and are a smart place to start familiarizing yourself with the library.\nSecond, `async-std` defines The Async Prelude\u27e818\u27e9, a small collection of items - mostly traits - that should be imported into every module of every async crate. The traits in the prelude are pervasive, making the prelude documentation a good entry point to learning about the library.\nAnd finally, `async-std` exports a number of async macros, and lists them on this page\u27e89\u27e9.\n## \u00a7\u27e828\u27e9Contributing changes to the documentation\nCheck out `async-std`\u2019s contribution guidelines here\u27e829\u27e9. The source for this documentation can be found on GitHub\u27e830\u27e9. To contribute changes, make sure you read the guidelines first, then submit pull requests for your suggested changes.\nContributions are appreciated! If you see a part of the docs that can be improved, submit a PR, or chat with us first on Discord\u27e825\u27e9.\n## \u00a7\u27e831\u27e9A tour of `async-std`\nThe rest of this crate documentation is dedicated to pointing out notable features of `async-std`.\n### \u00a7\u27e832\u27e9Platform abstractions and I/O\nBesides basic data types, `async-std` is largely concerned with abstracting over differences in common platforms, most notably Windows and Unix derivatives.\nCommon types of I/O, including files\u27e833\u27e9, TCP\u27e834\u27e9, UDP\u27e835\u27e9, are defined in the `io`\u27e810\u27e9, `fs`\u27e836\u27e9, and `net`\u27e837\u27e9 modules.\nThe `task`\u27e811\u27e9 module contains `async-std`\u2019s task abstractions. `sync`\u27e838\u27e9 contains further primitive shared memory types. `channel`\u27e839\u27e9 contains the channel types for message passing.\n### \u00a7\u27e840\u27e9Timeouts, intervals, and delays\n`async-std` provides several methods to manipulate time:\n  * `task::sleep`\u27e841\u27e9 to wait for a duration to pass without blocking.\n  * `stream::interval`\u27e842\u27e9 for emitting an event at a set interval.\n  * `future::timeout`\u27e843\u27e9 to time-out futures if they don\u2019t resolve within a set interval.\n\n\n## \u00a7\u27e820\u27e9Examples\nAll examples require the `\"attributes\"` feature\u27e819\u27e9 to be enabled. This feature is not enabled by default because it significantly impacts compile times. See `task::block_on`\u27e844\u27e9 for an alternative way to start executing tasks.\nCall an async function from the main function:\n```\nasync fn say_hello() {\n  println!(\"Hello, world!\");\n}\n#[async_std::main]\nasync fn main() {\n  say_hello().await;\n}\n```\n\nAwait two futures concurrently, and return a tuple of their output:\n```\nuse async_std::prelude::*;\n#[async_std::main]\nasync fn main() {\n  let a = async { 1u8 };\n  let b = async { 2u8 };\n  assert_eq!(a.join(b).await, (1u8, 2u8))\n}\n```\n\nCreate a UDP server that echoes back each received message to the sender:\n```\nuse async_std::net::UdpSocket;\n#[async_std::main]\nasync fn main() -> std::io::Result<()> {\n  let socket = UdpSocket::bind(\"127.0.0.1:8080\").await?;\n  println!(\"Listening on {}\", socket.local_addr()?);\n  let mut buf = vec![0u8; 1024];\n  loop {\n    let (recv, peer) = socket.recv_from(&mut buf).await?;\n    let sent = socket.send_to(&buf[..recv], &peer).await?;\n    println!(\"Sent {} out of {} bytes to {}\", sent, recv, peer);\n  }\n}\n```\n\n## \u00a7\u27e819\u27e9Features\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `unstable` are available only when the `unstable` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"unstable\"]\n```\n\nItems marked with <span class=\u201cmodule-item stab portability\u201d style=\u201cdisplay: inline; border-radius: 3px; padding: 2px; font-size: 80%; line-height: 1.2;\u201d\n> `attributes` are available only when the `attributes` Cargo feature is enabled:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"attributes\"]\n```\n\nCompatibility with the `tokio` 1.0 runtime is also simultaneously possible using the `tokio1` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio1\"]\n```\n\nCompatibility with the `tokio` 0.2 runtime is possible using the `tokio02` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio02\"]\n```\n\nCompatibility with the `tokio` 0.3 runtime is also simultaneously possible using the `tokio03` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\nfeatures = [\"tokio03\"]\n```\n\nAdditionally it\u2019s possible to only use the core traits and combinators by only enabling the `std` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"std\"]\n```\n\nAnd to use async-std on `no_std` targets that only support `alloc` only enable the `alloc` Cargo feature:\n```\n[dependencies.async-std]\nversion = \"1.7.0\"\ndefault-features = false\nfeatures = [\"alloc\"]\n```\n\n## \u00a7\u27e845\u27e9Runtime configuration\nSeveral environment variables are available to tune the async-std runtime:\n  * `ASYNC_STD_THREAD_COUNT`: The number of threads that the async-std runtime will start. By default, this is one per logical cpu as determined by async-global-executor\u27e846\u27e9, which may be different than the number of physical cpus. Async-std _will panic_ if this is set to any value other than a positive integer.\n  * `ASYNC_STD_THREAD_NAME`: The name that async-std\u2019s runtime threads report to the operating system. The default value is `\"async-std/runtime\"`.\n\n\n## Modules\u00a7\u27e817\u27e9\n\nchannel\u27e839\u27e9\n    Channels\n\nfs\u27e836\u27e9\n    Filesystem manipulation operations.\n\nfuture\u27e814\u27e9\n    Asynchronous values.\n\nio\u27e810\u27e9\n    Traits, helpers, and type definitions for core I/O functionality.\n\nnet\u27e837\u27e9\n    Networking primitives for TCP/UDP communication.\n\nos\u27e827\u27e9\n    OS-specific extensions.\n\npath\u27e847\u27e9\n    Cross-platform path manipulation.\n\npin\u27e848\u27e9`unstable`\n    Types that pin data to its location in memory.\n\nprelude\u27e818\u27e9\n    The async prelude.\n\nprocess\u27e849\u27e9`unstable`\n    A module for working with processes.\n\nstream\u27e850\u27e9\n    Composable asynchronous iteration.\n\nsync\u27e838\u27e9\n    Synchronization primitives.\n\ntask\u27e811\u27e9\n    Types and traits for working with asynchronous tasks.\n## Macros\u00a7\u27e89\u27e9\n\neprint\u27e851\u27e9`unstable`\n    Prints to the standard error.\n\neprintln\u27e852\u27e9`unstable`\n    Prints to the standard error, with a newline.\n\nprint\u27e853\u27e9`unstable`\n    Prints to the standard output.\n\nprintln\u27e854\u27e9`unstable`\n    Prints to the standard output, with a newline.\n\ntask_local\u27e855\u27e9\n    Declares task-local values.\n\nwrite\u27e856\u27e9`unstable`\n    Writes formatted data into a buffer.\n\nwriteln\u27e857\u27e9`unstable`\n    Writes formatted data into a buffer, with a newline appended.\n## Attribute Macros\u00a7\u27e858\u27e9\n\nmain\u27e859\u27e9`attributes`\n    Enables an async main function.\n\ntest\u27e860\u27e9`attributes`\n    Enables an async test function.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-std/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-std/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-std/latest/src/async_std/lib.rs.html#1-338: Source\n\u27e84\u27e9 https://docs.rs/async-std/latest/async_std/#async-version-of-the-rust-standard-library: \u00a7\n\u27e85\u27e9 https://crates.io: broader Rust ecosystem\n\u27e86\u27e9 https://docs.rs/async-std/latest/async_std/future/trait.Future.html: `Future`\n\u27e87\u27e9 https://docs.rs/async-std/latest/async_std/stream/trait.Stream.html: `Stream`\n\u27e88\u27e9 https://docs.rs/async-std/latest/async_std/#primitives: operations on language primitives\n\u27e89\u27e9 https://docs.rs/async-std/latest/async_std/#macros: standard macros\n\u27e810\u27e9 https://docs.rs/async-std/latest/async_std/io/index.html: I/O\n\u27e811\u27e9 https://docs.rs/async-std/latest/async_std/task/index.html: multithreading\n\u27e812\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-standard-library-documentation: many other things\n\u27e813\u27e9 https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html: `use`\n\u27e814\u27e9 https://docs.rs/async-std/latest/async_std/future/index.html: `use async_std::future`\n\u27e815\u27e9 https://docs.rs/async-std/latest/async_std/#how-to-read-this-documentation: \u00a7\n\u27e816\u27e9 https://docs.rs/async-std/latest/async_std/: search bar\n\u27e817\u27e9 https://docs.rs/async-std/latest/async_std/#modules: `async_std::*` modules\n\u27e818\u27e9 https://docs.rs/async-std/latest/async_std/prelude/index.html: The Async Prelude\n\u27e819\u27e9 https://docs.rs/async-std/latest/async_std/#features: Cargo.toml feature flags\n\u27e820\u27e9 https://docs.rs/async-std/latest/async_std/#examples: Examples\n\u27e821\u27e9 https://async.rs/: The async-std website\n\u27e822\u27e9 https://book.async.rs: The async-std book\n\u27e823\u27e9 https://github.com/async-rs/async-std: GitHub repository\n\u27e824\u27e9 https://github.com/async-rs/async-std/tree/HEAD/examples: List of code examples\n\u27e825\u27e9 https://discord.gg/JvZeVNe: Discord chat\n\u27e826\u27e9 https://docs.rs/async-std/latest/async_std/#what-is-in-the-async-std-documentation: \u00a7\n\u27e827\u27e9 https://docs.rs/async-std/latest/async_std/os/index.html: `async_std::os`\n\u27e828\u27e9 https://docs.rs/async-std/latest/async_std/#contributing-changes-to-the-documentation: \u00a7\n\u27e829\u27e9 https://async.rs/contribute: here\n\u27e830\u27e9 https://github.com/async-rs: GitHub\n\u27e831\u27e9 https://docs.rs/async-std/latest/async_std/#a-tour-of-async-std: \u00a7\n\u27e832\u27e9 https://docs.rs/async-std/latest/async_std/#platform-abstractions-and-io: \u00a7\n\u27e833\u27e9 https://docs.rs/async-std/latest/async_std/fs/struct.File.html: files\n\u27e834\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.TcpStream.html: TCP\n\u27e835\u27e9 https://docs.rs/async-std/latest/async_std/net/struct.UdpSocket.html: UDP\n\u27e836\u27e9 https://docs.rs/async-std/latest/async_std/fs/index.html: mod async_std::fs - `fs`\n\u27e837\u27e9 https://docs.rs/async-std/latest/async_std/net/index.html: mod async_std::net - `net`\n\u27e838\u27e9 https://docs.rs/async-std/latest/async_std/sync/index.html: `sync`\n\u27e839\u27e9 https://docs.rs/async-std/latest/async_std/channel/index.html: `channel`\n\u27e840\u27e9 https://docs.rs/async-std/latest/async_std/#timeouts-intervals-and-delays: \u00a7\n\u27e841\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.sleep.html: `task::sleep`\n\u27e842\u27e9 https://docs.rs/async-std/latest/async_std/stream/fn.interval.html: `stream::interval`\n\u27e843\u27e9 https://docs.rs/async-std/latest/async_std/future/fn.timeout.html: `future::timeout`\n\u27e844\u27e9 https://docs.rs/async-std/latest/async_std/task/fn.block_on.html: `task::block_on`\n\u27e845\u27e9 https://docs.rs/async-std/latest/async_std/#runtime-configuration: \u00a7\n\u27e846\u27e9 https://docs.rs/async-global-executor/2.4.1/x86_64-unknown-linux-gnu/async_global_executor/index.html: mod async_global_executor - async-global-executor\n\u27e847\u27e9 https://docs.rs/async-std/latest/async_std/path/index.html: mod async_std::path - path\n\u27e848\u27e9 https://docs.rs/async-std/latest/async_std/pin/index.html: mod async_std::pin - pin\n\u27e849\u27e9 https://docs.rs/async-std/latest/async_std/process/index.html: mod async_std::process - process\n\u27e850\u27e9 https://docs.rs/async-std/latest/async_std/stream/index.html: mod async_std::stream - stream\n\u27e851\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprint.html: macro async_std::eprint - eprint\n\u27e852\u27e9 https://docs.rs/async-std/latest/async_std/macro.eprintln.html: macro async_std::eprintln - eprintln\n\u27e853\u27e9 https://docs.rs/async-std/latest/async_std/macro.print.html: macro async_std::print - print\n\u27e854\u27e9 https://docs.rs/async-std/latest/async_std/macro.println.html: macro async_std::println - println\n\u27e855\u27e9 https://docs.rs/async-std/latest/async_std/macro.task_local.html: macro async_std::task_local - task_local\n\u27e856\u27e9 https://docs.rs/async-std/latest/async_std/macro.write.html: macro async_std::write - write\n\u27e857\u27e9 https://docs.rs/async-std/latest/async_std/macro.writeln.html: macro async_std::writeln - writeln\n\u27e858\u27e9 https://docs.rs/async-std/latest/async_std/#attributes: \u00a7\n\u27e859\u27e9 https://docs.rs/async-std/latest/async_std/attr.main.html: attr async_std::main - main\n\u27e860\u27e9 https://docs.rs/async-std/latest/async_std/attr.test.html: attr async_std::test - test\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-std` crate provides an asynchronous version of Rust's standard library, offering familiar `std` types and functionality adapted for async programming, such as `Future`, `Stream`, async I/O, and lightweight task management. It includes modules for platform abstractions, file and network I/O, synchronization primitives, and message-passing channels, along with an \"Async Prelude\" for convenient imports. Designed for portability and ease of use, it serves as a foundational library for building async Rust applications.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Async Foundations  \n\u2705 **Factual**: `async-std` provides async versions of standard Rust library constructs, such as `Future`, `Stream`, and async I/O operations, enabling asynchronous programming in Rust.  \n\u274c **Counterfactual**: `async-std` replaces the standard Rust library entirely, requiring developers to rewrite all existing synchronous code in their projects to use it.  \n\n---\n\n### Pair 2: Multithreading and Lightweight Tasks  \n\u2705 **Factual**: `async-std` replaces traditional threads with lightweight tasks, allowing for efficient concurrency without the overhead of OS-level threads.  \n\u274c **Counterfactual**: `async-std` uses traditional threads for concurrency, making it unsuitable for high-performance applications with many simultaneous tasks.  \n\n---\n\n### Pair 3: Prelude and Macros  \n\u2705 **Factual**: `async-std` includes an \"Async Prelude,\" a collection of traits and utilities designed to be imported in every async Rust module to simplify common patterns.  \n\u274c **Counterfactual**: The \"Async Prelude\" in `async-std` is automatically imported into all modules without requiring explicit inclusion by the developer.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-24c2d1fb-fdcf3046-1751258475",
      "timestamp": "2025-06-30T04:41:15.764693+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]