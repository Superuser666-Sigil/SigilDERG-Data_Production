[
  {
    "execution_id": "exec-7453e4a7-006a9233-1751266360",
    "timestamp": "2025-06-30T06:52:40.034750+00:00",
    "sacred_chain": {
      "input_data": "rustls-pemfile",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rustls-pemfile' -> 'rustls-pemfile'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rustls-pemfile",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rustls-pemfile",
            "title": "rustls-pemfile v2.2.0",
            "content": {
              "raw_markdown": "#  rustls-pemfile v2.2.0\nBasic .pem file parser for keys and certificates \n  * [ Readme ](https://crates.io/crates/rustls-pemfile)\n  * [ 18 Versions ](https://crates.io/crates/rustls-pemfile/versions)\n  * [ Dependencies ](https://crates.io/crates/rustls-pemfile/dependencies)\n  * [ Dependents ](https://crates.io/crates/rustls-pemfile/reverse_dependencies)\n\n\n## Metadata\n9 months ago \n2018 edition \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ ISC ](https://choosealicense.com/licenses/isc) OR [ MIT ](https://choosealicense.com/licenses/mit)\n25.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustls-pemfile\nOr add the following line to your Cargo.toml:\nrustls-pemfile = \"2.2.0\"\n## Repository\n[ github.com/rustls/pemfile ](https://github.com/rustls/pemfile)\n## Owners\n## Categories\n  * [Cryptography](https://crates.io/categories/cryptography)\n  * [Network programming](https://crates.io/categories/network-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=rustls-pemfile&inquire=crate-violation)\n### Stats Overview\n233,715,935 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rustls-pemfile v2.2.0\nBasic .pem file parser for keys and certificates \n  *  Readme \u27e81\u27e9\n  *  18 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\n9 months ago \n2018 edition \n Apache-2.0 \u27e85\u27e9 OR  ISC \u27e86\u27e9 OR  MIT \u27e87\u27e9\n25.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustls-pemfile\nOr add the following line to your Cargo.toml:\nrustls-pemfile = \"2.2.0\"\n## Repository\n github.com/rustls/pemfile \u27e88\u27e9\n## Owners\n## Categories\n  * Cryptography\u27e89\u27e9\n  * Network programming\u27e810\u27e9\n\n\n Report crate \u27e811\u27e9\n### Stats Overview\n233,715,935 Downloads all time\n18 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/rustls-pemfile:  Readme \n\u27e82\u27e9 https://crates.io/crates/rustls-pemfile/versions:  18 Versions \n\u27e83\u27e9 https://crates.io/crates/rustls-pemfile/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/rustls-pemfile/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e86\u27e9 https://choosealicense.com/licenses/isc:  ISC \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://github.com/rustls/pemfile:  github.com/rustls/pemfile \n\u27e89\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e810\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e811\u27e9 https://crates.io/support?crate=rustls-pemfile&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1243,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120149.9160858"
          },
          "docs_rs": {
            "url": "https://docs.rs/rustls-pemfile",
            "title": "Crate rustls_pemfileCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\n[Settings](https://docs.rs/rustls-pemfile/latest/settings.html)\n[Help](https://docs.rs/rustls-pemfile/latest/help.html)\nSummary[Source](https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212)\nExpand description\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile)rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start)Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support)no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code)Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums)\n\n[Error](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html \"enum rustls_pemfile::Error\")\n    Errors that may arise when parsing the contents of a PEM file\n\n[Item](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html \"enum rustls_pemfile::Item\")\n    The contents of a single recognised block in a PEM file.\n## Functions[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions)\n\n[certs](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html \"fn rustls_pemfile::certs\")\n    Return an iterator over certificates from `rd`.\n\n[crls](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html \"fn rustls_pemfile::crls\")\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\n[csr](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html \"fn rustls_pemfile::csr\")\n    Return the first certificate signing request (CSR) found in `rd`.\n\n[ec_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html \"fn rustls_pemfile::ec_private_keys\")\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\n[pkcs8_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html \"fn rustls_pemfile::pkcs8_private_keys\")\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\n[private_key](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html \"fn rustls_pemfile::private_key\")\n    Return the first private key found in `rd`.\n\n[public_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html \"fn rustls_pemfile::public_keys\")\n    Return an iterator over SPKI-encoded keys from `rd`.\n\n[read_all](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html \"fn rustls_pemfile::read_all\")\n    Extract and return all PEM sections by reading `rd`.\n\n[read_one](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html \"fn rustls_pemfile::read_one\")\n    Extract and decode the next PEM section from `rd`.\n\n[read_one_from_slice](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html \"fn rustls_pemfile::read_one_from_slice\")\n    Extract and decode the next PEM section from `input`\n\n[rsa_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html \"fn rustls_pemfile::rsa_private_keys\")\n    Return an iterator over RSA private keys from `rd`.\n",
              "markdown_with_citations": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### \u00a7\u27e85\u27e9Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## \u00a7\u27e86\u27e9no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### \u00a7\u27e87\u27e9Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums\u00a7\u27e88\u27e9\n\nError\u27e89\u27e9\n    Errors that may arise when parsing the contents of a PEM file\n\nItem\u27e810\u27e9\n    The contents of a single recognised block in a PEM file.\n## Functions\u00a7\u27e811\u27e9\n\ncerts\u27e812\u27e9\n    Return an iterator over certificates from `rd`.\n\ncrls\u27e813\u27e9\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\ncsr\u27e814\u27e9\n    Return the first certificate signing request (CSR) found in `rd`.\n\nec_private_keys\u27e815\u27e9\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\npkcs8_private_keys\u27e816\u27e9\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\nprivate_key\u27e817\u27e9\n    Return the first private key found in `rd`.\n\npublic_keys\u27e818\u27e9\n    Return an iterator over SPKI-encoded keys from `rd`.\n\nread_all\u27e819\u27e9\n    Extract and return all PEM sections by reading `rd`.\n\nread_one\u27e820\u27e9\n    Extract and decode the next PEM section from `rd`.\n\nread_one_from_slice\u27e821\u27e9\n    Extract and decode the next PEM section from `input`\n\nrsa_private_keys\u27e822\u27e9\n    Return an iterator over RSA private keys from `rd`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls-pemfile/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls-pemfile/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start: \u00a7\n\u27e86\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support: \u00a7\n\u27e87\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code: \u00a7\n\u27e88\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums: \u00a7\n\u27e89\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html: enum rustls_pemfile::Error - Error\n\u27e810\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html: enum rustls_pemfile::Item - Item\n\u27e811\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html: fn rustls_pemfile::certs - certs\n\u27e813\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html: fn rustls_pemfile::crls - crls\n\u27e814\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html: fn rustls_pemfile::csr - csr\n\u27e815\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html: fn rustls_pemfile::ec_private_keys - ec_private_keys\n\u27e816\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html: fn rustls_pemfile::pkcs8_private_keys - pkcs8_private_keys\n\u27e817\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html: fn rustls_pemfile::private_key - private_key\n\u27e818\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html: fn rustls_pemfile::public_keys - public_keys\n\u27e819\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html: fn rustls_pemfile::read_all - read_all\n\u27e820\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html: fn rustls_pemfile::read_one - read_one\n\u27e821\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html: fn rustls_pemfile::read_one_from_slice - read_one_from_slice\n\u27e822\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html: fn rustls_pemfile::rsa_private_keys - rsa_private_keys\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4726,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120150.7813027"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rustls-pemfile",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [17 releases](https://lib.rs/crates/rustls-pemfile/versions) (11 stable)\n2.2.0 |  Sep 30, 2024   \n---|---  \n2.1.2 |  Apr 6, 2024   \n2.1.1 |  Mar 1, 2024   \n2.0.0 |  Nov 30, 2023   \n0.2.0 |  Dec 28, 2020   \n#**10** in [Cryptography](https://lib.rs/cryptography \"Algorithms intended for securing data.\")\nDownload history 3733856/week @ 2025-03-03 3813563/week @ 2025-03-10 4027350/week @ 2025-03-17 4073445/week @ 2025-03-24 3520914/week @ 2025-03-31 3680880/week @ 2025-04-07 3241118/week @ 2025-04-14 3238567/week @ 2025-04-21 3047771/week @ 2025-04-28 3244876/week @ 2025-05-05 3315072/week @ 2025-05-12 3300050/week @ 2025-05-19 2877901/week @ 2025-05-26 3080848/week @ 2025-06-02 2947923/week @ 2025-06-09 2865746/week @ 2025-06-16\n**11,925,067** downloads per month Used in [**3,742** crates (556 directly)](https://lib.rs/crates/rustls-pemfile/rev)\n**Apache-2.0 OR ISC OR MIT**\n26KB  362 lines\n# rustls-pemfile\nThis is a basic parser for PEM-encodings commonly used for storing keys and certificates at rest.\nIt doesn't support reading encrypted keys: the cryptography standardised for this is typically very poor and doing so doesn't address a meaningful threat model.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/rustls/pemfile/workflows/rustls-pemfile/badge.svg)](https://github.com/rustls/pemfile/actions) [![Crate](https://img.shields.io/crates/v/rustls-pemfile.svg)](https://crates.io/crates/rustls-pemfile) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/rustls-pemfile/badge.svg)](https://docs.rs/rustls-pemfile/)\n# See also: rustls-pki-types\nThe main function of this crate has been incorporated into [rustls-pki-types](https://lib.rs/crates/rustls-pki-types). 2.2.0 maintains the existing public API for this crate, on top of this new implementation. This drops the dependency on the ``base64`` crate, and allows for constant-time decoding of private keys.\nThis crate will continue to exist in its current form, but it is somewhat unlikely that the API will be extended from its current state.\nShould you wish to migrate to using the new [``rustls-pki-types`` PEM APIs](https://docs.rs/rustls-pki-types/latest/rustls_pki_types/pem/trait.PemObject.html) directly, here is a rough cheat-sheet:\n_Use case_ | _Replace_  \n---|---  \nFile stream to ``CertificateDer`` iterator | ```rustls_pemfile`::``certs`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to one ``PrivateKeyDer`` | ```rustls_pemfile`::``private_key`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivateKeyDer`::``from_pem_reader`(``io`::``Read`)```  \nFile stream to one ``CertificateSigningRequestDer`` | ```rustls_pemfile`::``csr`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateSigningRequestDer`::``from_pem_reader`(``io`::``Read`)```  \nFile stream to ``CertificateRevocationListDer`` iterator | ```rustls_pemfile`::``crls`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateRevocationListDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivatePkcs1KeyDer`` iterator | ```rustls_pemfile`::``rsa_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivatePkcs1KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivatePkcs8KeyDer`` iterator | ```rustls_pemfile`::``pkcs8_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivatePkcs8KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivateSec1KeyDer`` iterator | ```rustls_pemfile`::``ec_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivateSec1KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``SubjectPublicKeyInfoDer`` iterator | ```rustls_pemfile`::``public_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```SubjectPublicKeyInfoDer`::``pem_reader_iter`(``io`::``Read`)```  \n# Changelog\nThe detailed list of changes in each release can be found at <https://github.com/rustls/pemfile/releases>.\n# License\nrustls-pemfile is distributed under the following three licenses:\n  * Apache License version 2.0.\n  * MIT license.\n  * ISC license.\n\n\nThese are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC respectively. You may use this software under the terms of any of these licenses, at your option.\n#### Dependencies\n~125KB \n  * [rustls-pki-types](https://lib.rs/crates/rustls-pki-types \"renamed pki-types, 1.9\")\n\n\n  * dev  [bencher](https://lib.rs/crates/bencher \"0.1.5\")\n\n\n#### [Other feature](https://lib.rs/crates/rustls-pemfile/features)\n  * [std](https://lib.rs/crates/rustls-pemfile/features#feature-std)\n\n\n",
              "markdown_with_citations": "###  17 releases\u27e81\u27e9 (11 stable)\n2.2.0 |  Sep 30, 2024   \n---|---  \n2.1.2 |  Apr 6, 2024   \n2.1.1 |  Mar 1, 2024   \n2.0.0 |  Nov 30, 2023   \n0.2.0 |  Dec 28, 2020   \n#**10** in Cryptography\u27e82\u27e9\nDownload history 3733856/week @ 2025-03-03 3813563/week @ 2025-03-10 4027350/week @ 2025-03-17 4073445/week @ 2025-03-24 3520914/week @ 2025-03-31 3680880/week @ 2025-04-07 3241118/week @ 2025-04-14 3238567/week @ 2025-04-21 3047771/week @ 2025-04-28 3244876/week @ 2025-05-05 3315072/week @ 2025-05-12 3300050/week @ 2025-05-19 2877901/week @ 2025-05-26 3080848/week @ 2025-06-02 2947923/week @ 2025-06-09 2865746/week @ 2025-06-16\n**11,925,067** downloads per month Used in **3,742** crates (556 directly)\u27e83\u27e9\n**Apache-2.0 OR ISC OR MIT**\n26KB  362 lines\n# rustls-pemfile\nThis is a basic parser for PEM-encodings commonly used for storing keys and certificates at rest.\nIt doesn't support reading encrypted keys: the cryptography standardised for this is typically very poor and doing so doesn't address a meaningful threat model.\n![Build Status\u27e84\u27e9](https://github.com/rustls/pemfile/actions) ![Crate\u27e85\u27e9](https://crates.io/crates/rustls-pemfile) ![Documentation\u27e86\u27e9](https://docs.rs/rustls-pemfile/)\n# See also: rustls-pki-types\nThe main function of this crate has been incorporated into rustls-pki-types\u27e87\u27e9. 2.2.0 maintains the existing public API for this crate, on top of this new implementation. This drops the dependency on the ``base64`` crate, and allows for constant-time decoding of private keys.\nThis crate will continue to exist in its current form, but it is somewhat unlikely that the API will be extended from its current state.\nShould you wish to migrate to using the new ``rustls-pki-types`` PEM APIs\u27e88\u27e9 directly, here is a rough cheat-sheet:\n_Use case_ | _Replace_  \n---|---  \nFile stream to ``CertificateDer`` iterator | ```rustls_pemfile`::``certs`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to one ``PrivateKeyDer`` | ```rustls_pemfile`::``private_key`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivateKeyDer`::``from_pem_reader`(``io`::``Read`)```  \nFile stream to one ``CertificateSigningRequestDer`` | ```rustls_pemfile`::``csr`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateSigningRequestDer`::``from_pem_reader`(``io`::``Read`)```  \nFile stream to ``CertificateRevocationListDer`` iterator | ```rustls_pemfile`::``crls`(``io`::``BufRead`)``` \u27a1\ufe0f ```CertificateRevocationListDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivatePkcs1KeyDer`` iterator | ```rustls_pemfile`::``rsa_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivatePkcs1KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivatePkcs8KeyDer`` iterator | ```rustls_pemfile`::``pkcs8_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivatePkcs8KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``PrivateSec1KeyDer`` iterator | ```rustls_pemfile`::``ec_private_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```PrivateSec1KeyDer`::``pem_reader_iter`(``io`::``Read`)```  \nFile stream to ``SubjectPublicKeyInfoDer`` iterator | ```rustls_pemfile`::``public_keys`(``io`::``BufRead`)``` \u27a1\ufe0f ```SubjectPublicKeyInfoDer`::``pem_reader_iter`(``io`::``Read`)```  \n# Changelog\nThe detailed list of changes in each release can be found at <https://github.com/rustls/pemfile/releases>.\n# License\nrustls-pemfile is distributed under the following three licenses:\n  * Apache License version 2.0.\n  * MIT license.\n  * ISC license.\n\n\nThese are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC respectively. You may use this software under the terms of any of these licenses, at your option.\n#### Dependencies\n~125KB \n  * rustls-pki-types\u27e87\u27e9\n\n\n  * dev  bencher\u27e89\u27e9\n\n\n#### Other feature\u27e810\u27e9\n  * std\u27e811\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rustls-pemfile/versions: 17 releases\n\u27e82\u27e9 https://lib.rs/cryptography: Algorithms intended for securing data. - Cryptography\n\u27e83\u27e9 https://lib.rs/crates/rustls-pemfile/rev: **3,742** crates (556 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rustls/pemfile/workflows/rustls-pemfile/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/rustls-pemfile.svg: ![Crate\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rustls-pemfile/badge.svg: ![Documentation\n\u27e87\u27e9 https://lib.rs/crates/rustls-pki-types: rustls-pki-types\n\u27e88\u27e9 https://docs.rs/rustls-pki-types/latest/rustls_pki_types/pem/trait.PemObject.html: ``rustls-pki-types`` PEM APIs\n\u27e89\u27e9 https://lib.rs/crates/bencher: 0.1.5 - bencher\n\u27e810\u27e9 https://lib.rs/crates/rustls-pemfile/features: Other feature\n\u27e811\u27e9 https://lib.rs/crates/rustls-pemfile/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4427,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120151.2008422"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\librustls_pki_types-a4693c0bdb67cf2d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8v2_cq9c/rustls-pemfile-2.2.0#rustls-pemfile@2.2.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pemfile",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\librustls_pemfile-0219cb985afed5ac.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\librustls_pki_types-a4693c0bdb67cf2d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8v2_cq9c/rustls-pemfile-2.2.0#rustls-pemfile@2.2.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pemfile",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: useless conversion to the same type: `rustls_pki_types::pem::Error`\n  --> src\\pemfile.rs:78:40\n   |\n78 |                 Err(err) => return Err(err.into()),\n   |                                        ^^^^^^^^^^ help: consider removing `.into()`: `err`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n   = note: `#[warn(clippy::useless_conversion)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::useless_conversion)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider removing `.into()`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2611,
                        "byte_start": 2601,
                        "column_end": 50,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\pemfile.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "err",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 40,
                            "text": "                Err(err) => return Err(err.into()),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::useless_conversion",
                  "explanation": null
                },
                "level": "warning",
                "message": "useless conversion to the same type: `rustls_pki_types::pem::Error`",
                "spans": [
                  {
                    "byte_end": 2611,
                    "byte_start": 2601,
                    "column_end": 50,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\pemfile.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 40,
                        "text": "                Err(err) => return Err(err.into()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8v2_cq9c/rustls-pemfile-2.2.0#rustls-pemfile@2.2.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pemfile",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8v2_cq9c\\rustls-pemfile-2.2.0\\target\\debug\\deps\\librustls_pemfile-f9b6b1cbffc2fd2d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 4
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rustls-pemfile",
          "version": "2.2.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\n[Settings](https://docs.rs/rustls-pemfile/latest/settings.html)\n[Help](https://docs.rs/rustls-pemfile/latest/help.html)\nSummary[Source](https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212)\nExpand description\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile)rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start)Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support)no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code)Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums)\n\n[Error](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html \"enum rustls_pemfile::Error\")\n    Errors that may arise when parsing the contents of a PEM file\n\n[Item](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html \"enum rustls_pemfile::Item\")\n    The contents of a single recognised block in a PEM file.\n## Functions[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions)\n\n[certs](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html \"fn rustls_pemfile::certs\")\n    Return an iterator over certificates from `rd`.\n\n[crls](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html \"fn rustls_pemfile::crls\")\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\n[csr](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html \"fn rustls_pemfile::csr\")\n    Return the first certificate signing request (CSR) found in `rd`.\n\n[ec_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html \"fn rustls_pemfile::ec_private_keys\")\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\n[pkcs8_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html \"fn rustls_pemfile::pkcs8_private_keys\")\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\n[private_key](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html \"fn rustls_pemfile::private_key\")\n    Return the first private key found in `rd`.\n\n[public_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html \"fn rustls_pemfile::public_keys\")\n    Return an iterator over SPKI-encoded keys from `rd`.\n\n[read_all](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html \"fn rustls_pemfile::read_all\")\n    Extract and return all PEM sections by reading `rd`.\n\n[read_one](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html \"fn rustls_pemfile::read_one\")\n    Extract and decode the next PEM section from `rd`.\n\n[read_one_from_slice](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html \"fn rustls_pemfile::read_one_from_slice\")\n    Extract and decode the next PEM section from `input`\n\n[rsa_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html \"fn rustls_pemfile::rsa_private_keys\")\n    Return an iterator over RSA private keys from `rd`.\n",
            "markdown_with_citations": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### \u00a7\u27e85\u27e9Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## \u00a7\u27e86\u27e9no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### \u00a7\u27e87\u27e9Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums\u00a7\u27e88\u27e9\n\nError\u27e89\u27e9\n    Errors that may arise when parsing the contents of a PEM file\n\nItem\u27e810\u27e9\n    The contents of a single recognised block in a PEM file.\n## Functions\u00a7\u27e811\u27e9\n\ncerts\u27e812\u27e9\n    Return an iterator over certificates from `rd`.\n\ncrls\u27e813\u27e9\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\ncsr\u27e814\u27e9\n    Return the first certificate signing request (CSR) found in `rd`.\n\nec_private_keys\u27e815\u27e9\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\npkcs8_private_keys\u27e816\u27e9\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\nprivate_key\u27e817\u27e9\n    Return the first private key found in `rd`.\n\npublic_keys\u27e818\u27e9\n    Return an iterator over SPKI-encoded keys from `rd`.\n\nread_all\u27e819\u27e9\n    Extract and return all PEM sections by reading `rd`.\n\nread_one\u27e820\u27e9\n    Extract and decode the next PEM section from `rd`.\n\nread_one_from_slice\u27e821\u27e9\n    Extract and decode the next PEM section from `input`\n\nrsa_private_keys\u27e822\u27e9\n    Return an iterator over RSA private keys from `rd`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls-pemfile/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls-pemfile/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start: \u00a7\n\u27e86\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support: \u00a7\n\u27e87\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code: \u00a7\n\u27e88\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums: \u00a7\n\u27e89\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html: enum rustls_pemfile::Error - Error\n\u27e810\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html: enum rustls_pemfile::Item - Item\n\u27e811\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html: fn rustls_pemfile::certs - certs\n\u27e813\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html: fn rustls_pemfile::crls - crls\n\u27e814\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html: fn rustls_pemfile::csr - csr\n\u27e815\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html: fn rustls_pemfile::ec_private_keys - ec_private_keys\n\u27e816\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html: fn rustls_pemfile::pkcs8_private_keys - pkcs8_private_keys\n\u27e817\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html: fn rustls_pemfile::private_key - private_key\n\u27e818\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html: fn rustls_pemfile::public_keys - public_keys\n\u27e819\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html: fn rustls_pemfile::read_all - read_all\n\u27e820\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html: fn rustls_pemfile::read_one - read_one\n\u27e821\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html: fn rustls_pemfile::read_one_from_slice - read_one_from_slice\n\u27e822\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html: fn rustls_pemfile::rsa_private_keys - rsa_private_keys\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rustls-pemfile",
          "version": "2.2.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\n[Settings](https://docs.rs/rustls-pemfile/latest/settings.html)\n[Help](https://docs.rs/rustls-pemfile/latest/help.html)\nSummary[Source](https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212)\nExpand description\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile)rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start)Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support)no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### [\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code)Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums)\n\n[Error](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html \"enum rustls_pemfile::Error\")\n    Errors that may arise when parsing the contents of a PEM file\n\n[Item](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html \"enum rustls_pemfile::Item\")\n    The contents of a single recognised block in a PEM file.\n## Functions[\u00a7](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions)\n\n[certs](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html \"fn rustls_pemfile::certs\")\n    Return an iterator over certificates from `rd`.\n\n[crls](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html \"fn rustls_pemfile::crls\")\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\n[csr](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html \"fn rustls_pemfile::csr\")\n    Return the first certificate signing request (CSR) found in `rd`.\n\n[ec_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html \"fn rustls_pemfile::ec_private_keys\")\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\n[pkcs8_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html \"fn rustls_pemfile::pkcs8_private_keys\")\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\n[private_key](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html \"fn rustls_pemfile::private_key\")\n    Return the first private key found in `rd`.\n\n[public_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html \"fn rustls_pemfile::public_keys\")\n    Return an iterator over SPKI-encoded keys from `rd`.\n\n[read_all](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html \"fn rustls_pemfile::read_all\")\n    Extract and return all PEM sections by reading `rd`.\n\n[read_one](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html \"fn rustls_pemfile::read_one\")\n    Extract and decode the next PEM section from `rd`.\n\n[read_one_from_slice](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html \"fn rustls_pemfile::read_one_from_slice\")\n    Extract and decode the next PEM section from `input`\n\n[rsa_private_keys](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html \"fn rustls_pemfile::rsa_private_keys\")\n    Return an iterator over RSA private keys from `rd`.\n",
            "markdown_with_citations": "[](https://docs.rs/rustls-pemfile/latest/rustls_pemfile/all.html \"show sidebar\")\n# Crate rustls_pemfileCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9rustls-pemfile\nA basic parser for .pem files containing cryptographic keys and certificates.\nThe input to this crate is a .pem file containing potentially many sections, and the output is those sections as alleged DER-encodings. This crate does not decode the actual DER-encoded keys/certificates.\n### \u00a7\u27e85\u27e9Quick start\nStarting with an `io::BufRead` containing the file to be read:\n  * Use `read_all()` to ingest the whole file, then work through the contents in-memory, or,\n  * Use `read_one()` to stream through the file, processing the items as found, or,\n  * Use `certs()` to extract just the certificates (silently discarding other sections), and similarly for `rsa_private_keys()` and `pkcs8_private_keys()`.\n\n\n## \u00a7\u27e86\u27e9no-std support\nThe opt-out \u201cstd\u201d Cargo feature can be disabled to put this crate in no-std mode.\nIn no-std mode, the `read_one_from_slice` API can be used to parse a .pem file that has already been loaded into memory.\n### \u00a7\u27e87\u27e9Example code\n```\nuse std::iter;\nuse rustls_pemfile::{Item, read_one};\n// Assume `reader` is any std::io::BufRead implementor\nfor item in iter::from_fn(|| read_one(&mut reader).transpose()) {\n  match item.unwrap() {\n    Item::X509Certificate(cert) => println!(\"certificate {:?}\", cert),\n    Item::Crl(crl) => println!(\"certificate revocation list: {:?}\", crl),\n    Item::Csr(csr) => println!(\"certificate signing request: {:?}\", csr),\n    Item::Pkcs1Key(key) => println!(\"rsa pkcs1 key {:?}\", key),\n    Item::Pkcs8Key(key) => println!(\"pkcs8 key {:?}\", key),\n    Item::Sec1Key(key) => println!(\"sec1 ec key {:?}\", key),\n    _ => println!(\"unhandled item\"),\n  }\n}\n```\n\n## Enums\u00a7\u27e88\u27e9\n\nError\u27e89\u27e9\n    Errors that may arise when parsing the contents of a PEM file\n\nItem\u27e810\u27e9\n    The contents of a single recognised block in a PEM file.\n## Functions\u00a7\u27e811\u27e9\n\ncerts\u27e812\u27e9\n    Return an iterator over certificates from `rd`.\n\ncrls\u27e813\u27e9\n    Return an iterator certificate revocation lists (CRLs) from `rd`.\n\ncsr\u27e814\u27e9\n    Return the first certificate signing request (CSR) found in `rd`.\n\nec_private_keys\u27e815\u27e9\n    Return an iterator over SEC1-encoded EC private keys from `rd`.\n\npkcs8_private_keys\u27e816\u27e9\n    Return an iterator over PKCS8-encoded private keys from `rd`.\n\nprivate_key\u27e817\u27e9\n    Return the first private key found in `rd`.\n\npublic_keys\u27e818\u27e9\n    Return an iterator over SPKI-encoded keys from `rd`.\n\nread_all\u27e819\u27e9\n    Extract and return all PEM sections by reading `rd`.\n\nread_one\u27e820\u27e9\n    Extract and decode the next PEM section from `rd`.\n\nread_one_from_slice\u27e821\u27e9\n    Extract and decode the next PEM section from `input`\n\nrsa_private_keys\u27e822\u27e9\n    Return an iterator over RSA private keys from `rd`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls-pemfile/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls-pemfile/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls-pemfile/latest/src/rustls_pemfile/lib.rs.html#1-212: Source\n\u27e84\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#rustls-pemfile: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#quick-start: \u00a7\n\u27e86\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#no-std-support: \u00a7\n\u27e87\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#example-code: \u00a7\n\u27e88\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#enums: \u00a7\n\u27e89\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Error.html: enum rustls_pemfile::Error - Error\n\u27e810\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/enum.Item.html: enum rustls_pemfile::Item - Item\n\u27e811\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/#functions: \u00a7\n\u27e812\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.certs.html: fn rustls_pemfile::certs - certs\n\u27e813\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.crls.html: fn rustls_pemfile::crls - crls\n\u27e814\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.csr.html: fn rustls_pemfile::csr - csr\n\u27e815\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.ec_private_keys.html: fn rustls_pemfile::ec_private_keys - ec_private_keys\n\u27e816\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.pkcs8_private_keys.html: fn rustls_pemfile::pkcs8_private_keys - pkcs8_private_keys\n\u27e817\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.private_key.html: fn rustls_pemfile::private_key - private_key\n\u27e818\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.public_keys.html: fn rustls_pemfile::public_keys - public_keys\n\u27e819\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_all.html: fn rustls_pemfile::read_all - read_all\n\u27e820\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one.html: fn rustls_pemfile::read_one - read_one\n\u27e821\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.read_one_from_slice.html: fn rustls_pemfile::read_one_from_slice - read_one_from_slice\n\u27e822\u27e9 https://docs.rs/rustls-pemfile/latest/rustls_pemfile/fn.rsa_private_keys.html: fn rustls_pemfile::rsa_private_keys - rsa_private_keys\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `rustls-pemfile` crate is a lightweight parser for `.pem` files containing cryptographic keys and certificates. It extracts PEM sections as DER-encoded data without decoding the contents, offering APIs like `read_all`, `read_one`, and specialized functions (`certs`, `rsa_private_keys`, `pkcs8_private_keys`, etc.) to process specific types of blocks. It supports `no-std` environments via the `read_one_from_slice` API, making it suitable for embedded or constrained systems.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 6.5,
          "factual_counterfactual": "### Pair 1: PEM Parsing Capabilities  \n\u2705 Factual: The `rustls-pemfile` crate can parse `.pem` files and extract specific sections, such as X.509 certificates, RSA private keys, and PKCS8 private keys, without decoding the DER-encoded contents.  \n\u274c Counterfactual: The `rustls-pemfile` crate automatically decodes and validates the DER-encoded contents of certificates and keys extracted from `.pem` files.  \n\n---\n\n### Pair 2: Streaming vs In-Memory Processing  \n\u2705 Factual: The `read_one()` function allows streaming through a `.pem` file section by section, enabling efficient processing without loading the entire file into memory.  \n\u274c Counterfactual: The `read_one()` function requires the entire `.pem` file to be loaded into memory before processing individual sections.  \n\n---\n\n### Pair 3: no-std Support  \n\u2705 Factual: The `rustls-pemfile` crate supports no-std environments by disabling the \"std\" Cargo feature, allowing the use of `read_one_from_slice` for parsing `.pem` files already loaded into memory.  \n\u274c Counterfactual: The `rustls-pemfile` crate requires the standard library and does not support no-std environments, even with feature flags disabled.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7453e4a7-006a9233-1751266360",
      "timestamp": "2025-06-30T06:52:40.034750+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]