[
  {
    "execution_id": "exec-91e235e3-6f116674-1751261437",
    "timestamp": "2025-06-30T05:30:37.611714+00:00",
    "sacred_chain": {
      "input_data": "hyper",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'hyper' -> 'hyper'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "hyper",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/hyper",
            "title": "hyper v1.6.0",
            "content": {
              "raw_markdown": "#  hyper v1.6.0\nA protective and efficient HTTP library for all. \n  * [ #http ](https://crates.io/keywords/http)\n  * [ #hyper ](https://crates.io/keywords/hyper)\n  * [ #hyperium ](https://crates.io/keywords/hyperium)\n\n\n  * [ Readme ](https://crates.io/crates/hyper)\n  * [ 244 Versions ](https://crates.io/crates/hyper/versions)\n  * [ Dependencies ](https://crates.io/crates/hyper/dependencies)\n  * [ Dependents ](https://crates.io/crates/hyper/reverse_dependencies)\n\n\n## Metadata\n5 months ago \nv1.63.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n150 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add hyper\nOr add the following line to your Cargo.toml:\nhyper = \"1.6.0\"\n## Homepage\n[ hyper.rs ](https://hyper.rs)\n## Documentation\n[ docs.rs/hyper ](https://docs.rs/hyper)\n## Repository\n[ github.com/hyperium/hyper ](https://github.com/hyperium/hyper)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [HTTP client](https://crates.io/categories/web-programming::http-client)\n  * [HTTP server](https://crates.io/categories/web-programming::http-server)\n\n\n[ Report crate ](https://crates.io/support?crate=hyper&inquire=crate-violation)\n### Stats Overview\n330,300,388 Downloads all time\n244 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  hyper v1.6.0\nA protective and efficient HTTP library for all. \n  *  #http \u27e81\u27e9\n  *  #hyper \u27e82\u27e9\n  *  #hyperium \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  244 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n5 months ago \nv1.63.0 \n MIT \u27e88\u27e9\n150 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add hyper\nOr add the following line to your Cargo.toml:\nhyper = \"1.6.0\"\n## Homepage\n hyper.rs \u27e89\u27e9\n## Documentation\n docs.rs/hyper \u27e810\u27e9\n## Repository\n github.com/hyperium/hyper \u27e811\u27e9\n## Owners\n## Categories\n  * Network programming\u27e812\u27e9\n  * HTTP client\u27e813\u27e9\n  * HTTP server\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n330,300,388 Downloads all time\n244 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/http:  #http \n\u27e82\u27e9 https://crates.io/keywords/hyper:  #hyper \n\u27e83\u27e9 https://crates.io/keywords/hyperium:  #hyperium \n\u27e84\u27e9 https://crates.io/crates/hyper:  Readme \n\u27e85\u27e9 https://crates.io/crates/hyper/versions:  244 Versions \n\u27e86\u27e9 https://crates.io/crates/hyper/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/hyper/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://hyper.rs:  hyper.rs \n\u27e810\u27e9 https://docs.rs/hyper:  docs.rs/hyper \n\u27e811\u27e9 https://github.com/hyperium/hyper:  github.com/hyperium/hyper \n\u27e812\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e813\u27e9 https://crates.io/categories/web-programming::http-client: HTTP client\n\u27e814\u27e9 https://crates.io/categories/web-programming::http-server: HTTP server\n\u27e815\u27e9 https://crates.io/support?crate=hyper&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1395,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115227.6093635"
          },
          "docs_rs": {
            "url": "https://docs.rs/hyper",
            "title": "Crate hyperCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\n[Settings](https://docs.rs/hyper/latest/settings.html)\n[Help](https://docs.rs/hyper/latest/help.html)\nSummary[Source](https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139)\nExpand description\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#hyper)hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#features)Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * [Client](https://docs.rs/hyper/latest/hyper/client/index.html) and [Server](https://docs.rs/hyper/latest/hyper/server/index.html) APIs\n\n\nIf just starting out, **check out the[Guides](https://hyper.rs/guides/1/) first.**\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#low-level)\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the [reqwest](https://crates.io/crates/reqwest) crate.\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#optional-features)Optional Features\nhyper uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#unstable-features)Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a [configuration flag](https://doc.rust-lang.org/reference/conditional-compilation.html).\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#stability)Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows [SemVer](https://semver.org). Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports[\u00a7](https://docs.rs/hyper/latest/hyper/#reexports)\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules[\u00a7](https://docs.rs/hyper/latest/hyper/#modules)\n\n[body](https://docs.rs/hyper/latest/hyper/body/index.html \"mod hyper::body\")\n    Streaming bodies for Requests and Responses\n\n[client](https://docs.rs/hyper/latest/hyper/client/index.html \"mod hyper::client\")`client`\n    HTTP Client\n\n[ext](https://docs.rs/hyper/latest/hyper/ext/index.html \"mod hyper::ext\")\n    HTTP extensions.\n\n[ffi](https://docs.rs/hyper/latest/hyper/ffi/index.html \"mod hyper::ffi\")`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\n[rt](https://docs.rs/hyper/latest/hyper/rt/index.html \"mod hyper::rt\")\n    Runtime components\n\n[server](https://docs.rs/hyper/latest/hyper/server/index.html \"mod hyper::server\")`server`\n    HTTP Server\n\n[service](https://docs.rs/hyper/latest/hyper/service/index.html \"mod hyper::service\")\n    Asynchronous Services\n\n[upgrade](https://docs.rs/hyper/latest/hyper/upgrade/index.html \"mod hyper::upgrade\")\n    HTTP Upgrades\n## Structs[\u00a7](https://docs.rs/hyper/latest/hyper/#structs)\n\n[Error](https://docs.rs/hyper/latest/hyper/struct.Error.html \"struct hyper::Error\")\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases[\u00a7](https://docs.rs/hyper/latest/hyper/#types)\n\n[Result](https://docs.rs/hyper/latest/hyper/type.Result.html \"type hyper::Result\")\n    Result type often returned from methods that can have hyper `Error`s.\n",
              "markdown_with_citations": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### \u00a7\u27e85\u27e9Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client\u27e86\u27e9 and Server\u27e87\u27e9 APIs\n\n\nIf just starting out, **check out theGuides\u27e88\u27e9 first.**\n### \u00a7\u27e89\u27e9\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the reqwest\u27e810\u27e9 crate.\n## \u00a7\u27e811\u27e9Optional Features\nhyper uses a set of feature flags\u27e812\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### \u00a7\u27e813\u27e9Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a configuration flag\u27e814\u27e9.\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## \u00a7\u27e815\u27e9Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows SemVer\u27e816\u27e9. Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports\u00a7\u27e817\u27e9\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules\u00a7\u27e818\u27e9\n\nbody\u27e819\u27e9\n    Streaming bodies for Requests and Responses\n\nclient\u27e86\u27e9`client`\n    HTTP Client\n\next\u27e820\u27e9\n    HTTP extensions.\n\nffi\u27e821\u27e9`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\nrt\u27e822\u27e9\n    Runtime components\n\nserver\u27e87\u27e9`server`\n    HTTP Server\n\nservice\u27e823\u27e9\n    Asynchronous Services\n\nupgrade\u27e824\u27e9\n    HTTP Upgrades\n## Structs\u00a7\u27e825\u27e9\n\nError\u27e826\u27e9\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases\u00a7\u27e827\u27e9\n\nResult\u27e828\u27e9\n    Result type often returned from methods that can have hyper `Error`s.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139: Source\n\u27e84\u27e9 https://docs.rs/hyper/latest/hyper/#hyper: \u00a7\n\u27e85\u27e9 https://docs.rs/hyper/latest/hyper/#features: \u00a7\n\u27e86\u27e9 https://docs.rs/hyper/latest/hyper/client/index.html: Client\n\u27e87\u27e9 https://docs.rs/hyper/latest/hyper/server/index.html: Server\n\u27e88\u27e9 https://hyper.rs/guides/1/: Guides\n\u27e89\u27e9 https://docs.rs/hyper/latest/hyper/#low-level: \u00a7\n\u27e810\u27e9 https://crates.io/crates/reqwest: reqwest\n\u27e811\u27e9 https://docs.rs/hyper/latest/hyper/#optional-features: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/hyper/latest/hyper/#unstable-features: \u00a7\n\u27e814\u27e9 https://doc.rust-lang.org/reference/conditional-compilation.html: configuration flag\n\u27e815\u27e9 https://docs.rs/hyper/latest/hyper/#stability: \u00a7\n\u27e816\u27e9 https://semver.org: SemVer\n\u27e817\u27e9 https://docs.rs/hyper/latest/hyper/#reexports: \u00a7\n\u27e818\u27e9 https://docs.rs/hyper/latest/hyper/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/hyper/latest/hyper/body/index.html: mod hyper::body - body\n\u27e820\u27e9 https://docs.rs/hyper/latest/hyper/ext/index.html: mod hyper::ext - ext\n\u27e821\u27e9 https://docs.rs/hyper/latest/hyper/ffi/index.html: mod hyper::ffi - ffi\n\u27e822\u27e9 https://docs.rs/hyper/latest/hyper/rt/index.html: mod hyper::rt - rt\n\u27e823\u27e9 https://docs.rs/hyper/latest/hyper/service/index.html: mod hyper::service - service\n\u27e824\u27e9 https://docs.rs/hyper/latest/hyper/upgrade/index.html: mod hyper::upgrade - upgrade\n\u27e825\u27e9 https://docs.rs/hyper/latest/hyper/#structs: \u00a7\n\u27e826\u27e9 https://docs.rs/hyper/latest/hyper/struct.Error.html: struct hyper::Error - Error\n\u27e827\u27e9 https://docs.rs/hyper/latest/hyper/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/hyper/latest/hyper/type.Result.html: type hyper::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6295,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115228.3075799"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/hyper",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [241 releases](https://lib.rs/crates/hyper/versions) (12 stable)\n1.6.0 |  Jan 28, 2025   \n---|---  \n1.5.2 |  Dec 16, 2024   \n1.5.1 |  Nov 19, 2024   \n1.4.1 |  Jul 9, 2024   \n0.0.6 |  Nov 28, 2014   \n#**3** in [HTTP server](https://lib.rs/web-programming/http-server \"Crates to serve data over HTTP.\")\nDownload history 4274160/week @ 2025-03-07 4261789/week @ 2025-03-14 4842253/week @ 2025-03-21 3947700/week @ 2025-03-28 4254164/week @ 2025-04-04 4071674/week @ 2025-04-11 3667545/week @ 2025-04-18 3691971/week @ 2025-04-25 3773515/week @ 2025-05-02 3927837/week @ 2025-05-09 4016478/week @ 2025-05-16 3604287/week @ 2025-05-23 3911103/week @ 2025-05-30 3931973/week @ 2025-06-06 4093309/week @ 2025-06-13 4287191/week @ 2025-06-20\n**16,898,040** downloads per month Used in [**25,644** crates (3,795 directly)](https://lib.rs/crates/hyper/rev)\n**MIT** license \n700KB  15K  SLoC\n# [hyper](https://hyper.rs)\n[![crates.io](https://img.shields.io/crates/v/hyper.svg)](https://crates.io/crates/hyper) [![Released API docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/hyper/badge.svg)](https://docs.rs/hyper) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/LICENSE) [![CI](https://img.gs/czjpqfbdkz/full/https://github.com/hyperium/hyper/workflows/CI/badge.svg)](https://github.com/hyperium/hyper/actions?query=workflow%3ACI) [![Discord chat](https://img.shields.io/discord/500028886025895936.svg?logo=discord)](https://discord.gg/kkwpueZ)\nA protective and efficient HTTP library for all.\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client and Server APIs\n\n\n**Get started** by looking over the [guides](https://hyper.rs/guides/1/).\n## \"Low-level\"\nhyper is a relatively low-level library, meant to be a building block for libraries and applications.\nIf you are looking for a convenient HTTP client, then you may wish to consider [reqwest](https://github.com/seanmonstar/reqwest).\nIf you are not sure what HTTP server to choose, then you may want to consider [axum](https://github.com/tokio-rs/axum) or [warp](https://github.com/seanmonstar/warp), the latter taking a more functional approach. Both are built on top of this library.\n## Contributing\nTo get involved, take a look at [CONTRIBUTING](https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/CONTRIBUTING.md).\nIf you prefer chatting, there is an active community in the [Discord server](https://discord.gg/kkwpueZ).\n## License\nhyper is provided under the MIT license. See [LICENSE](https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/LICENSE).\n#### Dependencies\n~2.4\u20139MB  ~69K SLoC\n  * [bytes](https://lib.rs/crates/bytes \"1.2\")\n  * [http1?](https://lib.rs/crates/hyper/features#feature-http1 \"optional feature\") [http2?](https://lib.rs/crates/hyper/features#feature-http2 \"optional feature\") [futures-channel](https://lib.rs/crates/futures-channel \"0.3\")\n  * [ffi?](https://lib.rs/crates/hyper/features#feature-ffi \"optional feature\") [http1?](https://lib.rs/crates/hyper/features#feature-http1 \"optional feature\") [http2?](https://lib.rs/crates/hyper/features#feature-http2 \"optional feature\") [futures-util](https://lib.rs/crates/futures-util \"0.3\")\n  * [http1?](https://lib.rs/crates/hyper/features#feature-http1 \"optional feature\") [httparse](https://lib.rs/crates/httparse \"1.9\")\n  * [http1?](https://lib.rs/crates/hyper/features#feature-http1 \"optional feature\") [itoa](https://lib.rs/crates/itoa \"1\")\n  * [http2?](https://lib.rs/crates/hyper/features#feature-http2 \"optional feature\") [h2](https://lib.rs/crates/h2 \"new\") 0.4.2\n  * [ffi?](https://lib.rs/crates/hyper/features#feature-ffi \"optional feature\") [http-body-util](https://lib.rs/crates/http-body-util \"0.1\")\n  * [http](https://lib.rs/crates/http \"new\") 1.0\n  * [http-body](https://lib.rs/crates/http-body \"new\") 1.0\n  * [server?](https://lib.rs/crates/hyper/features#feature-server \"optional feature\") [httpdate](https://lib.rs/crates/httpdate \"1.0\")\n  * [client?](https://lib.rs/crates/hyper/features#feature-client \"optional feature\") [server?](https://lib.rs/crates/hyper/features#feature-server \"optional feature\") [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.4\")\n  * [client?](https://lib.rs/crates/hyper/features#feature-client \"optional feature\") [server?](https://lib.rs/crates/hyper/features#feature-server \"optional feature\") [smallvec](https://lib.rs/crates/smallvec \"1.12\")[+const_generics](https://lib.rs/crates/smallvec/features#feature-const_generics)[+const_new](https://lib.rs/crates/smallvec/features#feature-const_new)\n  * [client?](https://lib.rs/crates/hyper/features#feature-client \"optional feature\") [want](https://lib.rs/crates/want \"0.3\")\n  * [tokio](https://lib.rs/crates/tokio \"1\")[+sync](https://lib.rs/crates/tokio/features#feature-sync)\n  * [ optional ](https://lib.rs/crates/hyper/features#feature-tracing \"tracing is optional feature\") [tracing](https://lib.rs/crates/tracing \"0.1\")[+std](https://lib.rs/crates/tracing/features#feature-std)\n\n\n  * dev  [form_urlencoded](https://lib.rs/crates/form_urlencoded \"1\")\n  * dev  [pretty_env_logger](https://lib.rs/crates/pretty_env_logger \"new\") 0.5\n  * dev  [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * dev  [spmc](https://lib.rs/crates/spmc \"0.3\")\n  * dev  [tokio-test](https://lib.rs/crates/tokio-test \"0.4\")\n  * dev  [tokio-util](https://lib.rs/crates/tokio-util \"0.7.10\")\n\n\n#### [Other features](https://lib.rs/crates/hyper/features)\n  * [capi](https://lib.rs/crates/hyper/features#feature-capi)\n  * [full](https://lib.rs/crates/hyper/features#feature-full)\n  * [nightly](https://lib.rs/crates/hyper/features#feature-nightly)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  241 releases\u27e81\u27e9 (12 stable)\n1.6.0 |  Jan 28, 2025   \n---|---  \n1.5.2 |  Dec 16, 2024   \n1.5.1 |  Nov 19, 2024   \n1.4.1 |  Jul 9, 2024   \n0.0.6 |  Nov 28, 2014   \n#**3** in HTTP server\u27e82\u27e9\nDownload history 4274160/week @ 2025-03-07 4261789/week @ 2025-03-14 4842253/week @ 2025-03-21 3947700/week @ 2025-03-28 4254164/week @ 2025-04-04 4071674/week @ 2025-04-11 3667545/week @ 2025-04-18 3691971/week @ 2025-04-25 3773515/week @ 2025-05-02 3927837/week @ 2025-05-09 4016478/week @ 2025-05-16 3604287/week @ 2025-05-23 3911103/week @ 2025-05-30 3931973/week @ 2025-06-06 4093309/week @ 2025-06-13 4287191/week @ 2025-06-20\n**16,898,040** downloads per month Used in **25,644** crates (3,795 directly)\u27e83\u27e9\n**MIT** license \n700KB  15K  SLoC\n# hyper\u27e84\u27e9\n![crates.io\u27e85\u27e9](https://crates.io/crates/hyper) ![Released API docs\u27e86\u27e9](https://docs.rs/hyper) ![MIT licensed\u27e87\u27e9](https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/LICENSE) ![CI\u27e88\u27e9](https://github.com/hyperium/hyper/actions?query=workflow%3ACI) ![Discord chat\u27e89\u27e9](https://discord.gg/kkwpueZ)\nA protective and efficient HTTP library for all.\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client and Server APIs\n\n\n**Get started** by looking over the guides\u27e810\u27e9.\n## \"Low-level\"\nhyper is a relatively low-level library, meant to be a building block for libraries and applications.\nIf you are looking for a convenient HTTP client, then you may wish to consider reqwest\u27e811\u27e9.\nIf you are not sure what HTTP server to choose, then you may want to consider axum\u27e812\u27e9 or warp\u27e813\u27e9, the latter taking a more functional approach. Both are built on top of this library.\n## Contributing\nTo get involved, take a look at CONTRIBUTING\u27e814\u27e9.\nIf you prefer chatting, there is an active community in the Discord server\u27e815\u27e9.\n## License\nhyper is provided under the MIT license. See LICENSE\u27e816\u27e9.\n#### Dependencies\n~2.4\u20139MB  ~69K SLoC\n  * bytes\u27e817\u27e9\n  * http1?\u27e818\u27e9 http2?\u27e819\u27e9 futures-channel\u27e820\u27e9\n  * ffi?\u27e821\u27e9 http1?\u27e818\u27e9 http2?\u27e819\u27e9 futures-util\u27e822\u27e9\n  * http1?\u27e818\u27e9 httparse\u27e823\u27e9\n  * http1?\u27e818\u27e9 itoa\u27e824\u27e9\n  * http2?\u27e819\u27e9 h2\u27e825\u27e9 0.4.2\n  * ffi?\u27e821\u27e9 http-body-util\u27e826\u27e9\n  * http\u27e827\u27e9 1.0\n  * http-body\u27e828\u27e9 1.0\n  * server?\u27e829\u27e9 httpdate\u27e830\u27e9\n  * client?\u27e831\u27e9 server?\u27e829\u27e9 pin-project-lite\u27e832\u27e9\n  * client?\u27e831\u27e9 server?\u27e829\u27e9 smallvec\u27e833\u27e9+const_generics\u27e834\u27e9+const_new\u27e835\u27e9\n  * client?\u27e831\u27e9 want\u27e836\u27e9\n  * tokio\u27e837\u27e9+sync\u27e838\u27e9\n  *  optional \u27e839\u27e9 tracing\u27e840\u27e9+std\u27e841\u27e9\n\n\n  * dev  form_urlencoded\u27e842\u27e9\n  * dev  pretty_env_logger\u27e843\u27e9 0.5\n  * dev  serde\u27e844\u27e9+derive\u27e845\u27e9\n  * dev  serde_json\u27e846\u27e9\n  * dev  spmc\u27e847\u27e9\n  * dev  tokio-test\u27e848\u27e9\n  * dev  tokio-util\u27e849\u27e9\n\n\n#### Other features\u27e850\u27e9\n  * capi\u27e851\u27e9\n  * full\u27e852\u27e9\n  * nightly\u27e853\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/hyper/versions: 241 releases\n\u27e82\u27e9 https://lib.rs/web-programming/http-server: Crates to serve data over HTTP. - HTTP server\n\u27e83\u27e9 https://lib.rs/crates/hyper/rev: **25,644** crates (3,795 directly)\n\u27e84\u27e9 https://hyper.rs: hyper\n\u27e85\u27e9 https://img.shields.io/crates/v/hyper.svg: ![crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/hyper/badge.svg: ![Released API docs\n\u27e87\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/hyperium/hyper/workflows/CI/badge.svg: ![CI\n\u27e89\u27e9 https://img.shields.io/discord/500028886025895936.svg?logo=discord: ![Discord chat\n\u27e810\u27e9 https://hyper.rs/guides/1/: guides\n\u27e811\u27e9 https://github.com/seanmonstar/reqwest: reqwest\n\u27e812\u27e9 https://github.com/tokio-rs/axum: axum\n\u27e813\u27e9 https://github.com/seanmonstar/warp: warp\n\u27e814\u27e9 https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/CONTRIBUTING.md: CONTRIBUTING\n\u27e815\u27e9 https://discord.gg/kkwpueZ: Discord server\n\u27e816\u27e9 https://github.com/hyperium/hyper/blob/621d8e4d7788bfd2d62d15d40a73efae7f9a0bf0/LICENSE: LICENSE\n\u27e817\u27e9 https://lib.rs/crates/bytes: 1.2 - bytes\n\u27e818\u27e9 https://lib.rs/crates/hyper/features#feature-http1: optional feature - http1?\n\u27e819\u27e9 https://lib.rs/crates/hyper/features#feature-http2: optional feature - http2?\n\u27e820\u27e9 https://lib.rs/crates/futures-channel: 0.3 - futures-channel\n\u27e821\u27e9 https://lib.rs/crates/hyper/features#feature-ffi: optional feature - ffi?\n\u27e822\u27e9 https://lib.rs/crates/futures-util: 0.3 - futures-util\n\u27e823\u27e9 https://lib.rs/crates/httparse: 1.9 - httparse\n\u27e824\u27e9 https://lib.rs/crates/itoa: 1 - itoa\n\u27e825\u27e9 https://lib.rs/crates/h2: new - h2\n\u27e826\u27e9 https://lib.rs/crates/http-body-util: 0.1 - http-body-util\n\u27e827\u27e9 https://lib.rs/crates/http: new - http\n\u27e828\u27e9 https://lib.rs/crates/http-body: new - http-body\n\u27e829\u27e9 https://lib.rs/crates/hyper/features#feature-server: optional feature - server?\n\u27e830\u27e9 https://lib.rs/crates/httpdate: 1.0 - httpdate\n\u27e831\u27e9 https://lib.rs/crates/hyper/features#feature-client: optional feature - client?\n\u27e832\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.4 - pin-project-lite\n\u27e833\u27e9 https://lib.rs/crates/smallvec: 1.12 - smallvec\n\u27e834\u27e9 https://lib.rs/crates/smallvec/features#feature-const_generics: +const_generics\n\u27e835\u27e9 https://lib.rs/crates/smallvec/features#feature-const_new: +const_new\n\u27e836\u27e9 https://lib.rs/crates/want: 0.3 - want\n\u27e837\u27e9 https://lib.rs/crates/tokio: 1 - tokio\n\u27e838\u27e9 https://lib.rs/crates/tokio/features#feature-sync: +sync\n\u27e839\u27e9 https://lib.rs/crates/hyper/features#feature-tracing: tracing is optional feature -  optional \n\u27e840\u27e9 https://lib.rs/crates/tracing: 0.1 - tracing\n\u27e841\u27e9 https://lib.rs/crates/tracing/features#feature-std: +std\n\u27e842\u27e9 https://lib.rs/crates/form_urlencoded: 1 - form_urlencoded\n\u27e843\u27e9 https://lib.rs/crates/pretty_env_logger: new - pretty_env_logger\n\u27e844\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e845\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e846\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e847\u27e9 https://lib.rs/crates/spmc: 0.3 - spmc\n\u27e848\u27e9 https://lib.rs/crates/tokio-test: 0.4 - tokio-test\n\u27e849\u27e9 https://lib.rs/crates/tokio-util: 0.7.10 - tokio-util\n\u27e850\u27e9 https://lib.rs/crates/hyper/features: Other features\n\u27e851\u27e9 https://lib.rs/crates/hyper/features#feature-capi: capi\n\u27e852\u27e9 https://lib.rs/crates/hyper/features#feature-full: full\n\u27e853\u27e9 https://lib.rs/crates/hyper/features#feature-nightly: nightly\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5971,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115228.6956417"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libbytes-1cd10b4e16f0232c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhttp-747223df8af9494f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.41.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "sync"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libtokio-a5301a4c1011271d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhttp_body-c90a156dec350a5c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnsm62_uz/hyper-1.6.0#hyper@1.6.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhyper-2c94e63838fb285b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libbytes-1cd10b4e16f0232c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http@1.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-1.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhttp-747223df8af9494f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.41.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "sync"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libtokio-a5301a4c1011271d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "http_body",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\http-body-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhttp_body-c90a156dec350a5c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnsm62_uz/hyper-1.6.0#hyper@1.6.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: module has the same name as its containing module\n  --> src\\service\\mod.rs:25:1\n   |\n25 | mod service;\n   | ^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n   = note: `#[warn(clippy::module_inception)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::module_inception)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::module_inception",
                  "explanation": null
                },
                "level": "warning",
                "message": "module has the same name as its containing module",
                "spans": [
                  {
                    "byte_end": 953,
                    "byte_start": 941,
                    "column_end": 13,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\service\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 1,
                        "text": "mod service;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpnsm62_uz/hyper-1.6.0#hyper@1.6.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hyper",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpnsm62_uz\\hyper-1.6.0\\target\\debug\\deps\\libhyper-ff21f2646b47ce8a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 84
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.41.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "22cfb5bee7a6a52939ca9224d6ac897bb669134078daa8735560897f69de4d33",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.74",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.8.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.164",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "1.0.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "socket2",
                        "version": "0.5.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "hyper",
          "version": "1.6.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\n[Settings](https://docs.rs/hyper/latest/settings.html)\n[Help](https://docs.rs/hyper/latest/help.html)\nSummary[Source](https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139)\nExpand description\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#hyper)hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#features)Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * [Client](https://docs.rs/hyper/latest/hyper/client/index.html) and [Server](https://docs.rs/hyper/latest/hyper/server/index.html) APIs\n\n\nIf just starting out, **check out the[Guides](https://hyper.rs/guides/1/) first.**\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#low-level)\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the [reqwest](https://crates.io/crates/reqwest) crate.\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#optional-features)Optional Features\nhyper uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#unstable-features)Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a [configuration flag](https://doc.rust-lang.org/reference/conditional-compilation.html).\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#stability)Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows [SemVer](https://semver.org). Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports[\u00a7](https://docs.rs/hyper/latest/hyper/#reexports)\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules[\u00a7](https://docs.rs/hyper/latest/hyper/#modules)\n\n[body](https://docs.rs/hyper/latest/hyper/body/index.html \"mod hyper::body\")\n    Streaming bodies for Requests and Responses\n\n[client](https://docs.rs/hyper/latest/hyper/client/index.html \"mod hyper::client\")`client`\n    HTTP Client\n\n[ext](https://docs.rs/hyper/latest/hyper/ext/index.html \"mod hyper::ext\")\n    HTTP extensions.\n\n[ffi](https://docs.rs/hyper/latest/hyper/ffi/index.html \"mod hyper::ffi\")`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\n[rt](https://docs.rs/hyper/latest/hyper/rt/index.html \"mod hyper::rt\")\n    Runtime components\n\n[server](https://docs.rs/hyper/latest/hyper/server/index.html \"mod hyper::server\")`server`\n    HTTP Server\n\n[service](https://docs.rs/hyper/latest/hyper/service/index.html \"mod hyper::service\")\n    Asynchronous Services\n\n[upgrade](https://docs.rs/hyper/latest/hyper/upgrade/index.html \"mod hyper::upgrade\")\n    HTTP Upgrades\n## Structs[\u00a7](https://docs.rs/hyper/latest/hyper/#structs)\n\n[Error](https://docs.rs/hyper/latest/hyper/struct.Error.html \"struct hyper::Error\")\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases[\u00a7](https://docs.rs/hyper/latest/hyper/#types)\n\n[Result](https://docs.rs/hyper/latest/hyper/type.Result.html \"type hyper::Result\")\n    Result type often returned from methods that can have hyper `Error`s.\n",
            "markdown_with_citations": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### \u00a7\u27e85\u27e9Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client\u27e86\u27e9 and Server\u27e87\u27e9 APIs\n\n\nIf just starting out, **check out theGuides\u27e88\u27e9 first.**\n### \u00a7\u27e89\u27e9\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the reqwest\u27e810\u27e9 crate.\n## \u00a7\u27e811\u27e9Optional Features\nhyper uses a set of feature flags\u27e812\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### \u00a7\u27e813\u27e9Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a configuration flag\u27e814\u27e9.\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## \u00a7\u27e815\u27e9Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows SemVer\u27e816\u27e9. Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports\u00a7\u27e817\u27e9\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules\u00a7\u27e818\u27e9\n\nbody\u27e819\u27e9\n    Streaming bodies for Requests and Responses\n\nclient\u27e86\u27e9`client`\n    HTTP Client\n\next\u27e820\u27e9\n    HTTP extensions.\n\nffi\u27e821\u27e9`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\nrt\u27e822\u27e9\n    Runtime components\n\nserver\u27e87\u27e9`server`\n    HTTP Server\n\nservice\u27e823\u27e9\n    Asynchronous Services\n\nupgrade\u27e824\u27e9\n    HTTP Upgrades\n## Structs\u00a7\u27e825\u27e9\n\nError\u27e826\u27e9\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases\u00a7\u27e827\u27e9\n\nResult\u27e828\u27e9\n    Result type often returned from methods that can have hyper `Error`s.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139: Source\n\u27e84\u27e9 https://docs.rs/hyper/latest/hyper/#hyper: \u00a7\n\u27e85\u27e9 https://docs.rs/hyper/latest/hyper/#features: \u00a7\n\u27e86\u27e9 https://docs.rs/hyper/latest/hyper/client/index.html: Client\n\u27e87\u27e9 https://docs.rs/hyper/latest/hyper/server/index.html: Server\n\u27e88\u27e9 https://hyper.rs/guides/1/: Guides\n\u27e89\u27e9 https://docs.rs/hyper/latest/hyper/#low-level: \u00a7\n\u27e810\u27e9 https://crates.io/crates/reqwest: reqwest\n\u27e811\u27e9 https://docs.rs/hyper/latest/hyper/#optional-features: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/hyper/latest/hyper/#unstable-features: \u00a7\n\u27e814\u27e9 https://doc.rust-lang.org/reference/conditional-compilation.html: configuration flag\n\u27e815\u27e9 https://docs.rs/hyper/latest/hyper/#stability: \u00a7\n\u27e816\u27e9 https://semver.org: SemVer\n\u27e817\u27e9 https://docs.rs/hyper/latest/hyper/#reexports: \u00a7\n\u27e818\u27e9 https://docs.rs/hyper/latest/hyper/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/hyper/latest/hyper/body/index.html: mod hyper::body - body\n\u27e820\u27e9 https://docs.rs/hyper/latest/hyper/ext/index.html: mod hyper::ext - ext\n\u27e821\u27e9 https://docs.rs/hyper/latest/hyper/ffi/index.html: mod hyper::ffi - ffi\n\u27e822\u27e9 https://docs.rs/hyper/latest/hyper/rt/index.html: mod hyper::rt - rt\n\u27e823\u27e9 https://docs.rs/hyper/latest/hyper/service/index.html: mod hyper::service - service\n\u27e824\u27e9 https://docs.rs/hyper/latest/hyper/upgrade/index.html: mod hyper::upgrade - upgrade\n\u27e825\u27e9 https://docs.rs/hyper/latest/hyper/#structs: \u00a7\n\u27e826\u27e9 https://docs.rs/hyper/latest/hyper/struct.Error.html: struct hyper::Error - Error\n\u27e827\u27e9 https://docs.rs/hyper/latest/hyper/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/hyper/latest/hyper/type.Result.html: type hyper::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "hyper",
          "version": "1.6.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\n[Settings](https://docs.rs/hyper/latest/settings.html)\n[Help](https://docs.rs/hyper/latest/help.html)\nSummary[Source](https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139)\nExpand description\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#hyper)hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#features)Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * [Client](https://docs.rs/hyper/latest/hyper/client/index.html) and [Server](https://docs.rs/hyper/latest/hyper/server/index.html) APIs\n\n\nIf just starting out, **check out the[Guides](https://hyper.rs/guides/1/) first.**\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#low-level)\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the [reqwest](https://crates.io/crates/reqwest) crate.\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#optional-features)Optional Features\nhyper uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### [\u00a7](https://docs.rs/hyper/latest/hyper/#unstable-features)Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a [configuration flag](https://doc.rust-lang.org/reference/conditional-compilation.html).\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## [\u00a7](https://docs.rs/hyper/latest/hyper/#stability)Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows [SemVer](https://semver.org). Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports[\u00a7](https://docs.rs/hyper/latest/hyper/#reexports)\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules[\u00a7](https://docs.rs/hyper/latest/hyper/#modules)\n\n[body](https://docs.rs/hyper/latest/hyper/body/index.html \"mod hyper::body\")\n    Streaming bodies for Requests and Responses\n\n[client](https://docs.rs/hyper/latest/hyper/client/index.html \"mod hyper::client\")`client`\n    HTTP Client\n\n[ext](https://docs.rs/hyper/latest/hyper/ext/index.html \"mod hyper::ext\")\n    HTTP extensions.\n\n[ffi](https://docs.rs/hyper/latest/hyper/ffi/index.html \"mod hyper::ffi\")`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\n[rt](https://docs.rs/hyper/latest/hyper/rt/index.html \"mod hyper::rt\")\n    Runtime components\n\n[server](https://docs.rs/hyper/latest/hyper/server/index.html \"mod hyper::server\")`server`\n    HTTP Server\n\n[service](https://docs.rs/hyper/latest/hyper/service/index.html \"mod hyper::service\")\n    Asynchronous Services\n\n[upgrade](https://docs.rs/hyper/latest/hyper/upgrade/index.html \"mod hyper::upgrade\")\n    HTTP Upgrades\n## Structs[\u00a7](https://docs.rs/hyper/latest/hyper/#structs)\n\n[Error](https://docs.rs/hyper/latest/hyper/struct.Error.html \"struct hyper::Error\")\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases[\u00a7](https://docs.rs/hyper/latest/hyper/#types)\n\n[Result](https://docs.rs/hyper/latest/hyper/type.Result.html \"type hyper::Result\")\n    Result type often returned from methods that can have hyper `Error`s.\n",
            "markdown_with_citations": "[](https://docs.rs/hyper/latest/hyper/all.html \"show sidebar\")\n# Crate hyperCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9hyper\nhyper is a **fast** and **correct** HTTP implementation written in and for Rust.\n### \u00a7\u27e85\u27e9Features\n  * HTTP/1 and HTTP/2\n  * Asynchronous design\n  * Leading in performance\n  * Tested and **correct**\n  * Extensive production use\n  * Client\u27e86\u27e9 and Server\u27e87\u27e9 APIs\n\n\nIf just starting out, **check out theGuides\u27e88\u27e9 first.**\n### \u00a7\u27e89\u27e9\u201cLow-level\u201d\nhyper is a lower-level HTTP library, meant to be a building block for libraries and applications.\nIf looking for just a convenient HTTP client, consider the reqwest\u27e810\u27e9 crate.\n## \u00a7\u27e811\u27e9Optional Features\nhyper uses a set of feature flags\u27e812\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, hyper does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used.\nIf you are new to hyper it is possible to enable the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\nThe following optional features are available:\n  * `http1`: Enables HTTP/1 support.\n  * `http2`: Enables HTTP/2 support.\n  * `client`: Enables the HTTP `client`.\n  * `server`: Enables the HTTP `server`.\n\n\n### \u00a7\u27e813\u27e9Unstable Features\nhyper includes a set of unstable optional features that can be enabled through the use of a feature flag and a configuration flag\u27e814\u27e9.\nThe following is a list of feature flags and their corresponding `RUSTFLAG`:\n  * `ffi`: Enables C API for hyper `hyper_unstable_ffi`.\n  * `tracing`: Enables debug logging with `hyper_unstable_tracing`.\n\n\nFor example:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_tracing\" cargo build\n```\n\n## \u00a7\u27e815\u27e9Stability\nIt\u2019s worth talking a bit about the stability of hyper. hyper\u2019s API follows SemVer\u27e816\u27e9. Breaking changes will only be introduced in major versions, if ever. New additions to the API, such as new types, methods, or traits will only be added in minor versions.\nSome parts of hyper are documented as NOT being part of the stable API. The following is a brief list, you can read more about each one in the relevant part of the documentation.\n  * Downcasting error types from `Error::source()` is not considered stable.\n  * Private dependencies use of global variables is not considered stable. So, if a dependency uses `log` or `tracing`, hyper doesn\u2019t promise it will continue to do so.\n  * Behavior from default options is not stable. hyper reserves the right to add new options that are enabled by default which might alter the behavior, for the purposes of protection. It is also possible to _change_ what the default options are set to, also in efforts to protect the most people possible.\n\n\n## Re-exports\u00a7\u27e817\u27e9\n\n`pub use http::header[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/index.html \"mod http::header\");`\n\n\n`pub use http::HeaderMap[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/header/map/struct.HeaderMap.html \"struct http::header::map::HeaderMap\");`\n\n\n`pub use http::Method[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/method/struct.Method.html \"struct http::method::Method\");`\n\n\n`pub use http::Request[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/request/struct.Request.html \"struct http::request::Request\");`\n\n\n`pub use http::Response[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/response/struct.Response.html \"struct http::response::Response\");`\n\n\n`pub use http::StatusCode[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/status/struct.StatusCode.html \"struct http::status::StatusCode\");`\n\n\n`pub use http::Uri[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/uri/struct.Uri.html \"struct http::uri::Uri\");`\n\n\n`pub use http::Version[](https://docs.rs/http/1.2.0/x86_64-unknown-linux-gnu/http/version/struct.Version.html \"struct http::version::Version\");`\n\n## Modules\u00a7\u27e818\u27e9\n\nbody\u27e819\u27e9\n    Streaming bodies for Requests and Responses\n\nclient\u27e86\u27e9`client`\n    HTTP Client\n\next\u27e820\u27e9\n    HTTP extensions.\n\nffi\u27e821\u27e9`ffi` and `hyper_unstable_ffi`\n    hyper C API\n\nrt\u27e822\u27e9\n    Runtime components\n\nserver\u27e87\u27e9`server`\n    HTTP Server\n\nservice\u27e823\u27e9\n    Asynchronous Services\n\nupgrade\u27e824\u27e9\n    HTTP Upgrades\n## Structs\u00a7\u27e825\u27e9\n\nError\u27e826\u27e9\n    Represents errors that can occur handling HTTP streams.\n## Type Aliases\u00a7\u27e827\u27e9\n\nResult\u27e828\u27e9\n    Result type often returned from methods that can have hyper `Error`s.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/hyper/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/hyper/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/hyper/latest/src/hyper/lib.rs.html#1-139: Source\n\u27e84\u27e9 https://docs.rs/hyper/latest/hyper/#hyper: \u00a7\n\u27e85\u27e9 https://docs.rs/hyper/latest/hyper/#features: \u00a7\n\u27e86\u27e9 https://docs.rs/hyper/latest/hyper/client/index.html: Client\n\u27e87\u27e9 https://docs.rs/hyper/latest/hyper/server/index.html: Server\n\u27e88\u27e9 https://hyper.rs/guides/1/: Guides\n\u27e89\u27e9 https://docs.rs/hyper/latest/hyper/#low-level: \u00a7\n\u27e810\u27e9 https://crates.io/crates/reqwest: reqwest\n\u27e811\u27e9 https://docs.rs/hyper/latest/hyper/#optional-features: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/hyper/latest/hyper/#unstable-features: \u00a7\n\u27e814\u27e9 https://doc.rust-lang.org/reference/conditional-compilation.html: configuration flag\n\u27e815\u27e9 https://docs.rs/hyper/latest/hyper/#stability: \u00a7\n\u27e816\u27e9 https://semver.org: SemVer\n\u27e817\u27e9 https://docs.rs/hyper/latest/hyper/#reexports: \u00a7\n\u27e818\u27e9 https://docs.rs/hyper/latest/hyper/#modules: \u00a7\n\u27e819\u27e9 https://docs.rs/hyper/latest/hyper/body/index.html: mod hyper::body - body\n\u27e820\u27e9 https://docs.rs/hyper/latest/hyper/ext/index.html: mod hyper::ext - ext\n\u27e821\u27e9 https://docs.rs/hyper/latest/hyper/ffi/index.html: mod hyper::ffi - ffi\n\u27e822\u27e9 https://docs.rs/hyper/latest/hyper/rt/index.html: mod hyper::rt - rt\n\u27e823\u27e9 https://docs.rs/hyper/latest/hyper/service/index.html: mod hyper::service - service\n\u27e824\u27e9 https://docs.rs/hyper/latest/hyper/upgrade/index.html: mod hyper::upgrade - upgrade\n\u27e825\u27e9 https://docs.rs/hyper/latest/hyper/#structs: \u00a7\n\u27e826\u27e9 https://docs.rs/hyper/latest/hyper/struct.Error.html: struct hyper::Error - Error\n\u27e827\u27e9 https://docs.rs/hyper/latest/hyper/#types: \u00a7\n\u27e828\u27e9 https://docs.rs/hyper/latest/hyper/type.Result.html: type hyper::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `hyper` crate is a fast, low-level HTTP library for Rust, supporting both HTTP/1 and HTTP/2 with asynchronous design. It provides robust and tested APIs for building HTTP clients and servers, making it ideal as a foundational building block for libraries and applications. Optional feature flags allow customization, and it adheres to SemVer for API stability.",
          "feature_summary": null,
          "use_case": "Web Framework",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: HTTP Protocol Support  \n\u2705 **Factual**: The `hyper` crate supports both HTTP/1 and HTTP/2 protocols, allowing developers to build clients and servers for modern web applications.  \n\u274c **Counterfactual**: The `hyper` crate exclusively supports HTTP/1 and does not provide HTTP/2 functionality.  \n\n---\n\n### Pair 2: Asynchronous Design  \n\u2705 **Factual**: `hyper` is designed with asynchronous programming in mind, leveraging Rust's `async`/`await` syntax for efficient non-blocking I/O operations.  \n\u274c **Counterfactual**: `hyper` uses synchronous programming models and does not support asynchronous operations.  \n\n---\n\n### Pair 3: Feature Flags  \n\u2705 **Factual**: The `hyper` crate uses feature flags, such as `http1`, `http2`, `client`, and `server`, to allow developers to enable only the functionality they need, reducing unnecessary dependencies.  \n\u274c **Counterfactual**: The `hyper` crate automatically enables all features by default, requiring developers to manually disable unused functionality.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-91e235e3-6f116674-1751261437",
      "timestamp": "2025-06-30T05:30:37.611714+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]