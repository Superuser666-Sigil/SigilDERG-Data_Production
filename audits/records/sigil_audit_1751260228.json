[
  {
    "execution_id": "exec-90e92b63-96687428-1751260219",
    "timestamp": "2025-06-30T05:10:19.811454+00:00",
    "sacred_chain": {
      "input_data": "indicatif",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'indicatif' -> 'indicatif'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "indicatif",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/indicatif",
            "title": "indicatif v0.17.11",
            "content": {
              "raw_markdown": "#  indicatif v0.17.11\nA progress bar and cli reporting library for Rust \n  * [ #cli ](https://crates.io/keywords/cli)\n  * [ #colors ](https://crates.io/keywords/colors)\n  * [ #pb ](https://crates.io/keywords/pb)\n  * [ #progress ](https://crates.io/keywords/progress)\n  * [ #progressbar ](https://crates.io/keywords/progressbar)\n\n\n  * [ Readme ](https://crates.io/crates/indicatif)\n  * [ 48 Versions ](https://crates.io/crates/indicatif/versions)\n  * [ Dependencies ](https://crates.io/crates/indicatif/dependencies)\n  * [ Dependents ](https://crates.io/crates/indicatif/reverse_dependencies)\n\n\n## Metadata\n5 months ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n65 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add indicatif\nOr add the following line to your Cargo.toml:\nindicatif = \"0.17.11\"\n## Documentation\n[ docs.rs/indicatif ](https://docs.rs/indicatif)\n## Repository\n[ github.com/console-rs/indicatif ](https://github.com/console-rs/indicatif)\n## Owners\n## Categories\n  * [Command-line interface](https://crates.io/categories/command-line-interface)\n\n\n[ Report crate ](https://crates.io/support?crate=indicatif&inquire=crate-violation)\n### Stats Overview\n63,531,720 Downloads all time\n48 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  indicatif v0.17.11\nA progress bar and cli reporting library for Rust \n  *  #cli \u27e81\u27e9\n  *  #colors \u27e82\u27e9\n  *  #pb \u27e83\u27e9\n  *  #progress \u27e84\u27e9\n  *  #progressbar \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  48 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n5 months ago \nv1.70.0 \n MIT \u27e810\u27e9\n65 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add indicatif\nOr add the following line to your Cargo.toml:\nindicatif = \"0.17.11\"\n## Documentation\n docs.rs/indicatif \u27e811\u27e9\n## Repository\n github.com/console-rs/indicatif \u27e812\u27e9\n## Owners\n## Categories\n  * Command-line interface\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n63,531,720 Downloads all time\n48 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/cli:  #cli \n\u27e82\u27e9 https://crates.io/keywords/colors:  #colors \n\u27e83\u27e9 https://crates.io/keywords/pb:  #pb \n\u27e84\u27e9 https://crates.io/keywords/progress:  #progress \n\u27e85\u27e9 https://crates.io/keywords/progressbar:  #progressbar \n\u27e86\u27e9 https://crates.io/crates/indicatif:  Readme \n\u27e87\u27e9 https://crates.io/crates/indicatif/versions:  48 Versions \n\u27e88\u27e9 https://crates.io/crates/indicatif/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/indicatif/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/indicatif:  docs.rs/indicatif \n\u27e812\u27e9 https://github.com/console-rs/indicatif:  github.com/console-rs/indicatif \n\u27e813\u27e9 https://crates.io/categories/command-line-interface: Command-line interface\n\u27e814\u27e9 https://crates.io/support?crate=indicatif&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1361,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114009.910981"
          },
          "docs_rs": {
            "url": "https://docs.rs/indicatif",
            "title": "Crate indicatifCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\n[Settings](https://docs.rs/indicatif/latest/settings.html)\n[Help](https://docs.rs/indicatif/latest/help.html)\nSummary[Source](https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292)\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * [console](https://docs.rs/console)\n  * [dialoguer](https://docs.rs/dialoguer)\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#crate-contents)Crate Contents\n  * **Progress bars**\n    * [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html) for bars and spinners\n    * [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html) for multiple bars\n  * **Data Formatting**\n    * [`HumanBytes`](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html) for formatting bytes\n    * [`DecimalBytes`](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html) for formatting bytes using SI prefixes\n    * [`BinaryBytes`](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html) for formatting bytes using ISO/IEC prefixes\n    * [`HumanDuration`](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html) for formatting durations\n    * [`HumanCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html) for formatting large counts\n    * [`HumanFloatCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html) for formatting large float counts\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners)Progress Bars and Spinners\nindicatif comes with a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\") type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") and [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\") utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\"), or you can set them up to spin automatically with [`enable_steady_tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick \"method indicatif::ProgressBar::enable_steady_tick\"):\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when [`set_message`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message \"method indicatif::ProgressBar::set_message\"), [`inc`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc \"method indicatif::ProgressBar::inc\"), [`set_position`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position \"method indicatif::ProgressBar::set_position\") or [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") are called. In some situations you might have to call [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#iterators)Iterators\nSimilar to [tqdm](https://github.com/tqdm/tqdm), progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the [`ProgressIterator`](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html) trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with [Rayon](https://github.com/rayon-rs/rayon). In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#templates)Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see [`Style::from_dotted_str`](https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str) for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom [`ProgressTracker`](https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html \"trait indicatif::style::ProgressTracker\") implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a [`ProgressStyle`](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\") and attaching it to the progress bar.\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting)Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#feature-flags)Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports[\u00a7](https://docs.rs/indicatif/latest/indicatif/#reexports)\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules[\u00a7](https://docs.rs/indicatif/latest/indicatif/#modules)\n\n[style](https://docs.rs/indicatif/latest/indicatif/style/index.html \"mod indicatif::style\")\n\n## Structs[\u00a7](https://docs.rs/indicatif/latest/indicatif/#structs)\n\n[BinaryBytes](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html \"struct indicatif::BinaryBytes\")\n    Formats bytes for human readability using ISO/IEC prefixes\n\n[DecimalBytes](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html \"struct indicatif::DecimalBytes\")\n    Formats bytes for human readability using SI prefixes\n\n[FormattedDuration](https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html \"struct indicatif::FormattedDuration\")\n    Wraps an std duration for human basic formatting.\n\n[HumanBytes](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html \"struct indicatif::HumanBytes\")\n    Formats bytes for human readability\n\n[HumanCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html \"struct indicatif::HumanCount\")\n    Formats counts for human readability using commas\n\n[HumanDuration](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html \"struct indicatif::HumanDuration\")\n    Wraps an std duration for human readable formatting.\n\n[HumanFloatCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html \"struct indicatif::HumanFloatCount\")\n    Formats counts for human readability using commas for floats\n\n[InMemoryTerm](https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html \"struct indicatif::InMemoryTerm\")\n    A thin wrapper around [`vt100::Parser`](https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html \"struct vt100::parser::Parser\").\n\n[MultiProgress](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\")\n    Manages multiple progress bars from different threads\n\n[ProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\")\n    A progress bar or spinner\n\n[ProgressBarIter](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html \"struct indicatif::ProgressBarIter\")\n    Wraps an iterator to display its progress.\n\n[ProgressDrawTarget](https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html \"struct indicatif::ProgressDrawTarget\")\n    Target for draw operations\n\n[ProgressState](https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html \"struct indicatif::ProgressState\")\n    The state of a progress bar at a moment in time.\n\n[WeakProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html \"struct indicatif::WeakProgressBar\")\n    A weak reference to a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\").\n## Enums[\u00a7](https://docs.rs/indicatif/latest/indicatif/#enums)\n\n[MultiProgressAlignment](https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html \"enum indicatif::MultiProgressAlignment\")\n    Vertical alignment of a multi progress.\n\n[ProgressFinish](https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html \"enum indicatif::ProgressFinish\")\n    Behavior of a progress bar when it is finished\n## Traits[\u00a7](https://docs.rs/indicatif/latest/indicatif/#traits)\n\n[ParallelProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html \"trait indicatif::ParallelProgressIterator\")\n    Wraps a Rayon parallel iterator.\n\n[ProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html \"trait indicatif::ProgressIterator\")\n    Wraps an iterator to display its progress.\n\n[TermLike](https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html \"trait indicatif::TermLike\")\n    A trait for minimal terminal-like behavior.\n",
              "markdown_with_citations": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * console\u27e84\u27e9\n  * dialoguer\u27e85\u27e9\n\n\n## \u00a7\u27e86\u27e9Crate Contents\n  * **Progress bars**\n    * `ProgressBar`\u27e87\u27e9 for bars and spinners\n    * `MultiProgress`\u27e88\u27e9 for multiple bars\n  * **Data Formatting**\n    * `HumanBytes`\u27e89\u27e9 for formatting bytes\n    * `DecimalBytes`\u27e810\u27e9 for formatting bytes using SI prefixes\n    * `BinaryBytes`\u27e811\u27e9 for formatting bytes using ISO/IEC prefixes\n    * `HumanDuration`\u27e812\u27e9 for formatting durations\n    * `HumanCount`\u27e813\u27e9 for formatting large counts\n    * `HumanFloatCount`\u27e814\u27e9 for formatting large float counts\n\n\n## \u00a7\u27e815\u27e9Progress Bars and Spinners\nindicatif comes with a `ProgressBar`\u27e87\u27e9 type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are `Sync`\u27e816\u27e9 and `Send`\u27e817\u27e9 objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a `MultiProgress`\u27e88\u27e9 utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with `tick`\u27e818\u27e9, or you can set them up to spin automatically with `enable_steady_tick`\u27e819\u27e9:\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when `set_message`\u27e820\u27e9, `inc`\u27e821\u27e9, `set_position`\u27e822\u27e9 or `tick`\u27e818\u27e9 are called. In some situations you might have to call `tick`\u27e818\u27e9 once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## \u00a7\u27e823\u27e9Iterators\nSimilar to tqdm\u27e824\u27e9, progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the `ProgressIterator`\u27e825\u27e9 trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with Rayon\u27e826\u27e9. In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n\u24d8\u27e827\u27e9```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n\u24d8\u27e827\u27e9```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## \u00a7\u27e828\u27e9Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see `Style::from_dotted_str`\u27e829\u27e9 for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom `ProgressTracker`\u27e830\u27e9 implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a `ProgressStyle`\u27e831\u27e9 and attaching it to the progress bar.\n## \u00a7\u27e832\u27e9Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## \u00a7\u27e833\u27e9Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nstyle\u27e836\u27e9\n\n## Structs\u00a7\u27e837\u27e9\n\nBinaryBytes\u27e811\u27e9\n    Formats bytes for human readability using ISO/IEC prefixes\n\nDecimalBytes\u27e810\u27e9\n    Formats bytes for human readability using SI prefixes\n\nFormattedDuration\u27e838\u27e9\n    Wraps an std duration for human basic formatting.\n\nHumanBytes\u27e89\u27e9\n    Formats bytes for human readability\n\nHumanCount\u27e813\u27e9\n    Formats counts for human readability using commas\n\nHumanDuration\u27e812\u27e9\n    Wraps an std duration for human readable formatting.\n\nHumanFloatCount\u27e814\u27e9\n    Formats counts for human readability using commas for floats\n\nInMemoryTerm\u27e839\u27e9\n    A thin wrapper around `vt100::Parser`\u27e840\u27e9.\n\nMultiProgress\u27e88\u27e9\n    Manages multiple progress bars from different threads\n\nProgressBar\u27e87\u27e9\n    A progress bar or spinner\n\nProgressBarIter\u27e841\u27e9\n    Wraps an iterator to display its progress.\n\nProgressDrawTarget\u27e842\u27e9\n    Target for draw operations\n\nProgressState\u27e843\u27e9\n    The state of a progress bar at a moment in time.\n\nWeakProgressBar\u27e844\u27e9\n    A weak reference to a `ProgressBar`\u27e87\u27e9.\n## Enums\u00a7\u27e845\u27e9\n\nMultiProgressAlignment\u27e846\u27e9\n    Vertical alignment of a multi progress.\n\nProgressFinish\u27e847\u27e9\n    Behavior of a progress bar when it is finished\n## Traits\u00a7\u27e848\u27e9\n\nParallelProgressIterator\u27e849\u27e9\n    Wraps a Rayon parallel iterator.\n\nProgressIterator\u27e825\u27e9\n    Wraps an iterator to display its progress.\n\nTermLike\u27e850\u27e9\n    A trait for minimal terminal-like behavior.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indicatif/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indicatif/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292: Source\n\u27e84\u27e9 https://docs.rs/console: console\n\u27e85\u27e9 https://docs.rs/dialoguer: dialoguer\n\u27e86\u27e9 https://docs.rs/indicatif/latest/indicatif/#crate-contents: \u00a7\n\u27e87\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html: `ProgressBar`\n\u27e88\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html: `MultiProgress`\n\u27e89\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html: `HumanBytes`\n\u27e810\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html: `DecimalBytes`\n\u27e811\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html: `BinaryBytes`\n\u27e812\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html: `HumanDuration`\n\u27e813\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html: `HumanCount`\n\u27e814\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html: `HumanFloatCount`\n\u27e815\u27e9 https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e817\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e818\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick: method indicatif::ProgressBar::tick - `tick`\n\u27e819\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick: method indicatif::ProgressBar::enable_steady_tick - `enable_steady_tick`\n\u27e820\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message: method indicatif::ProgressBar::set_message - `set_message`\n\u27e821\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc: method indicatif::ProgressBar::inc - `inc`\n\u27e822\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position: method indicatif::ProgressBar::set_position - `set_position`\n\u27e823\u27e9 https://docs.rs/indicatif/latest/indicatif/#iterators: \u00a7\n\u27e824\u27e9 https://github.com/tqdm/tqdm: tqdm\n\u27e825\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html: `ProgressIterator`\n\u27e826\u27e9 https://github.com/rayon-rs/rayon: Rayon\n\u27e827\u27e9 https://docs.rs/indicatif/latest/indicatif/: This example is not tested - \u24d8\n\u27e828\u27e9 https://docs.rs/indicatif/latest/indicatif/#templates: \u00a7\n\u27e829\u27e9 https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str: `Style::from_dotted_str`\n\u27e830\u27e9 https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html: trait indicatif::style::ProgressTracker - `ProgressTracker`\n\u27e831\u27e9 https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html: struct indicatif::style::ProgressStyle - `ProgressStyle`\n\u27e832\u27e9 https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting: \u00a7\n\u27e833\u27e9 https://docs.rs/indicatif/latest/indicatif/#feature-flags: \u00a7\n\u27e834\u27e9 https://docs.rs/indicatif/latest/indicatif/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indicatif/latest/indicatif/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indicatif/latest/indicatif/style/index.html: mod indicatif::style - style\n\u27e837\u27e9 https://docs.rs/indicatif/latest/indicatif/#structs: \u00a7\n\u27e838\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html: struct indicatif::FormattedDuration - FormattedDuration\n\u27e839\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html: struct indicatif::InMemoryTerm - InMemoryTerm\n\u27e840\u27e9 https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html: struct vt100::parser::Parser - `vt100::Parser`\n\u27e841\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html: struct indicatif::ProgressBarIter - ProgressBarIter\n\u27e842\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html: struct indicatif::ProgressDrawTarget - ProgressDrawTarget\n\u27e843\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html: struct indicatif::ProgressState - ProgressState\n\u27e844\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html: struct indicatif::WeakProgressBar - WeakProgressBar\n\u27e845\u27e9 https://docs.rs/indicatif/latest/indicatif/#enums: \u00a7\n\u27e846\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html: enum indicatif::MultiProgressAlignment - MultiProgressAlignment\n\u27e847\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html: enum indicatif::ProgressFinish - ProgressFinish\n\u27e848\u27e9 https://docs.rs/indicatif/latest/indicatif/#traits: \u00a7\n\u27e849\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html: trait indicatif::ParallelProgressIterator - ParallelProgressIterator\n\u27e850\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html: trait indicatif::TermLike - TermLike\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 16019,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114010.5181166"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/indicatif",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [48 releases](https://lib.rs/crates/indicatif/versions)\n0.17.11 |  Jan 28, 2025   \n---|---  \n0.17.9 |  Nov 12, 2024   \n0.17.8 |  Feb 10, 2024   \n0.17.7 |  Sep 22, 2023   \n0.6.0 |  Jun 27, 2017   \n#**9** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 988228/week @ 2025-03-09 928549/week @ 2025-03-16 956606/week @ 2025-03-23 947565/week @ 2025-03-30 975674/week @ 2025-04-06 891544/week @ 2025-04-13 875772/week @ 2025-04-20 799722/week @ 2025-04-27 899035/week @ 2025-05-04 917098/week @ 2025-05-11 929119/week @ 2025-05-18 827207/week @ 2025-05-25 958931/week @ 2025-06-01 934014/week @ 2025-06-08 926374/week @ 2025-06-15 1002063/week @ 2025-06-22\n**3,870,163** downloads per month Used in [**3,674** crates (2,346 directly)](https://lib.rs/crates/indicatif/rev)\n**MIT** license \n210KB  4K  SLoC\n# indicatif\n[![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/indicatif/badge.svg)](https://docs.rs/indicatif/) [![Crates.io](https://img.shields.io/crates/v/indicatif.svg)](https://crates.io/crates/indicatif) [![Build status](https://img.gs/czjpqfbdkz/full/https://github.com/console-rs/indicatif/workflows/CI/badge.svg)](https://github.com/console-rs/indicatif/actions/workflows/rust.yml) [![Chat](https://img.shields.io/discord/976380008299917365?logo=discord)](https://discord.gg/YHmNA3De4W)\nA Rust library for indicating progress in command line applications to users.\nThis currently primarily provides progress bars and spinners as well as basic color support, but there are bigger plans for the future of this!\n## Examples\n[examples/yarnish.rs](https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/yarnish.rs) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/yarn.gif?raw=true)\n[examples/download.rs](https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/download.rs) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/download.gif?raw=true)\n[examples/multi.rs](https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/multi.rs) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/multi-progress.gif?raw=true)\n[examples/single.rs](https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/single.rs) ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/single.gif?raw=true)\n## Integrations\nYou can use [indicatif-log-bridge](https://lib.rs/crates/indicatif-log-bridge) to integrate with the [log crate](https://lib.rs/crates/log) and avoid having both fight for your terminal.\nYou can use [tracing-indicatif](https://lib.rs/crates/tracing-indicatif) to integrate with the [tracing crate](https://lib.rs/crates/tracing) with automatic progress bar management for active tracing spans, as well as ensure that tracing log events do not interfere with active progress bars.\n#### Dependencies\n~3\u201311MB  ~115K SLoC\n  * [console](https://lib.rs/crates/console \"0.15\")[+ansi-parsing](https://lib.rs/crates/console/features#feature-ansi-parsing)\n  * [number_prefix](https://lib.rs/crates/number_prefix \"0.4\")\n  * [portable-atomic](https://lib.rs/crates/portable-atomic \"1.0.0\")\n  * [default](https://lib.rs/crates/indicatif/features#feature-default \"default feature\") [unicode-width](https://lib.rs/crates/unicode-width \"new\") 0.2\n  * [futures?](https://lib.rs/crates/indicatif/features#feature-futures \"optional feature\") [futures-core](https://lib.rs/crates/futures-core \"0.3\")\n  * [ optional ](https://lib.rs/crates/indicatif/features#feature-rayon \"rayon is optional feature\") [rayon](https://lib.rs/crates/rayon \"1.1\")\n  * [ optional ](https://lib.rs/crates/indicatif/features#feature-tokio \"tokio is optional feature\") [tokio](https://lib.rs/crates/tokio \"1\")[+io-util](https://lib.rs/crates/tokio/features#feature-io-util)\n  * [improved_unicode?](https://lib.rs/crates/indicatif/features#feature-improved_unicode \"optional feature\") [unicode-segmentation](https://lib.rs/crates/unicode-segmentation \"1\")\n  * [in_memory?](https://lib.rs/crates/indicatif/features#feature-in_memory \"optional feature\") [vt100](https://lib.rs/crates/vt100 \"0.15.1\")\n  * [web-time](https://lib.rs/crates/web-time \"1.1.0\") wasm32\n\n\n  * dev  [clap](https://lib.rs/crates/clap \"new\") 4.0[+color](https://lib.rs/crates/clap/features#feature-color)[+derive](https://lib.rs/crates/clap/features#feature-derive)\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")\n  * dev  [once_cell](https://lib.rs/crates/once_cell \"1\")\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"1.4.0\")\n  * dev  [rand](https://lib.rs/crates/rand \"new\") 0.9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  48 releases\u27e81\u27e9\n0.17.11 |  Jan 28, 2025   \n---|---  \n0.17.9 |  Nov 12, 2024   \n0.17.8 |  Feb 10, 2024   \n0.17.7 |  Sep 22, 2023   \n0.6.0 |  Jun 27, 2017   \n#**9** in Command-line interface\u27e82\u27e9\nDownload history 988228/week @ 2025-03-09 928549/week @ 2025-03-16 956606/week @ 2025-03-23 947565/week @ 2025-03-30 975674/week @ 2025-04-06 891544/week @ 2025-04-13 875772/week @ 2025-04-20 799722/week @ 2025-04-27 899035/week @ 2025-05-04 917098/week @ 2025-05-11 929119/week @ 2025-05-18 827207/week @ 2025-05-25 958931/week @ 2025-06-01 934014/week @ 2025-06-08 926374/week @ 2025-06-15 1002063/week @ 2025-06-22\n**3,870,163** downloads per month Used in **3,674** crates (2,346 directly)\u27e83\u27e9\n**MIT** license \n210KB  4K  SLoC\n# indicatif\n![Documentation\u27e84\u27e9](https://docs.rs/indicatif/) ![Crates.io\u27e85\u27e9](https://crates.io/crates/indicatif) ![Build status\u27e86\u27e9](https://github.com/console-rs/indicatif/actions/workflows/rust.yml) ![Chat\u27e87\u27e9](https://discord.gg/YHmNA3De4W)\nA Rust library for indicating progress in command line applications to users.\nThis currently primarily provides progress bars and spinners as well as basic color support, but there are bigger plans for the future of this!\n## Examples\nexamples/yarnish.rs\u27e88\u27e9 ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/yarn.gif?raw=true)\nexamples/download.rs\u27e89\u27e9 ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/download.gif?raw=true)\nexamples/multi.rs\u27e810\u27e9 ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/multi-progress.gif?raw=true)\nexamples/single.rs\u27e811\u27e9 ![](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/console-rs/indicatif/main/screenshots/single.gif?raw=true)\n## Integrations\nYou can use indicatif-log-bridge\u27e812\u27e9 to integrate with the log crate\u27e813\u27e9 and avoid having both fight for your terminal.\nYou can use tracing-indicatif\u27e814\u27e9 to integrate with the tracing crate\u27e815\u27e9 with automatic progress bar management for active tracing spans, as well as ensure that tracing log events do not interfere with active progress bars.\n#### Dependencies\n~3\u201311MB  ~115K SLoC\n  * console\u27e816\u27e9+ansi-parsing\u27e817\u27e9\n  * number_prefix\u27e818\u27e9\n  * portable-atomic\u27e819\u27e9\n  * default\u27e820\u27e9 unicode-width\u27e821\u27e9 0.2\n  * futures?\u27e822\u27e9 futures-core\u27e823\u27e9\n  *  optional \u27e824\u27e9 rayon\u27e825\u27e9\n  *  optional \u27e826\u27e9 tokio\u27e827\u27e9+io-util\u27e828\u27e9\n  * improved_unicode?\u27e829\u27e9 unicode-segmentation\u27e830\u27e9\n  * in_memory?\u27e831\u27e9 vt100\u27e832\u27e9\n  * web-time\u27e833\u27e9 wasm32\n\n\n  * dev  clap\u27e834\u27e9 4.0+color\u27e835\u27e9+derive\u27e836\u27e9\n  * dev  futures\u27e837\u27e9\n  * dev  once_cell\u27e838\u27e9\n  * dev  pretty_assertions\u27e839\u27e9\n  * dev  rand\u27e840\u27e9 0.9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/indicatif/versions: 48 releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/indicatif/rev: **3,674** crates (2,346 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/indicatif/badge.svg: ![Documentation\n\u27e85\u27e9 https://img.shields.io/crates/v/indicatif.svg: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/console-rs/indicatif/workflows/CI/badge.svg: ![Build status\n\u27e87\u27e9 https://img.shields.io/discord/976380008299917365?logo=discord: ![Chat\n\u27e88\u27e9 https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/yarnish.rs: examples/yarnish.rs\n\u27e89\u27e9 https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/download.rs: examples/download.rs\n\u27e810\u27e9 https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/multi.rs: examples/multi.rs\n\u27e811\u27e9 https://github.com/console-rs/indicatif/blob/fe5900305c80c7210ea7d1029b7cd47cac608d30/examples/single.rs: examples/single.rs\n\u27e812\u27e9 https://lib.rs/crates/indicatif-log-bridge: indicatif-log-bridge\n\u27e813\u27e9 https://lib.rs/crates/log: log crate\n\u27e814\u27e9 https://lib.rs/crates/tracing-indicatif: tracing-indicatif\n\u27e815\u27e9 https://lib.rs/crates/tracing: tracing crate\n\u27e816\u27e9 https://lib.rs/crates/console: 0.15 - console\n\u27e817\u27e9 https://lib.rs/crates/console/features#feature-ansi-parsing: +ansi-parsing\n\u27e818\u27e9 https://lib.rs/crates/number_prefix: 0.4 - number_prefix\n\u27e819\u27e9 https://lib.rs/crates/portable-atomic: 1.0.0 - portable-atomic\n\u27e820\u27e9 https://lib.rs/crates/indicatif/features#feature-default: default feature - default\n\u27e821\u27e9 https://lib.rs/crates/unicode-width: new - unicode-width\n\u27e822\u27e9 https://lib.rs/crates/indicatif/features#feature-futures: optional feature - futures?\n\u27e823\u27e9 https://lib.rs/crates/futures-core: 0.3 - futures-core\n\u27e824\u27e9 https://lib.rs/crates/indicatif/features#feature-rayon: rayon is optional feature -  optional \n\u27e825\u27e9 https://lib.rs/crates/rayon: 1.1 - rayon\n\u27e826\u27e9 https://lib.rs/crates/indicatif/features#feature-tokio: tokio is optional feature -  optional \n\u27e827\u27e9 https://lib.rs/crates/tokio: 1 - tokio\n\u27e828\u27e9 https://lib.rs/crates/tokio/features#feature-io-util: +io-util\n\u27e829\u27e9 https://lib.rs/crates/indicatif/features#feature-improved_unicode: optional feature - improved_unicode?\n\u27e830\u27e9 https://lib.rs/crates/unicode-segmentation: 1 - unicode-segmentation\n\u27e831\u27e9 https://lib.rs/crates/indicatif/features#feature-in_memory: optional feature - in_memory?\n\u27e832\u27e9 https://lib.rs/crates/vt100: 0.15.1 - vt100\n\u27e833\u27e9 https://lib.rs/crates/web-time: 1.1.0 - web-time\n\u27e834\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e835\u27e9 https://lib.rs/crates/clap/features#feature-color: +color\n\u27e836\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e837\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e838\u27e9 https://lib.rs/crates/once_cell: 1 - once_cell\n\u27e839\u27e9 https://lib.rs/crates/pretty_assertions: 1.4.0 - pretty_assertions\n\u27e840\u27e9 https://lib.rs/crates/rand: new - rand\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5037,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114010.882154"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\liblazy_static-2a44d546c3d10d6f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#number_prefix@0.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\number_prefix-0.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "number_prefix",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\number_prefix-0.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libnumber_prefix-f6c4e2ae23daf654.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libunicode_width-911e5fa1d8ca1fe0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.1.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libunicode_width-31c64cf4a2bdb8ec.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#encode_unicode@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encode_unicode-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "encode_unicode",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encode_unicode-0.3.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libencode_unicode-62da6201d00e22cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-2759fafbd1688ab9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-2759fafbd1688ab9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-85614b1aa9e9b894\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-85614b1aa9e9b894\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-841dfe077ca3a868\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-4cd82c49d5a7ae02\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\liblibc-610e3eeab4f24c09.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "portable_atomic",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libportable_atomic-0d2318fc16b87ee8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_UI",
                "Win32_UI_Input",
                "Win32_UI_Input_KeyboardAndMouse",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_sys-c71b4e7aceec58ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#console@0.15.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\console-0.15.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "console",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\console-0.15.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ansi-parsing",
                "unicode-width"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libconsole-54ea586fc802527e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjf0h3gmn/indicatif-0.17.11#indicatif@0.17.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indicatif",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "unicode-width"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libindicatif-5ebdaf43a9c44bf5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-2759fafbd1688ab9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-2759fafbd1688ab9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-85614b1aa9e9b894\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-85614b1aa9e9b894\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\liblazy_static-2a44d546c3d10d6f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#encode_unicode@0.3.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encode_unicode-0.3.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "encode_unicode",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\encode_unicode-0.3.6\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libencode_unicode-62da6201d00e22cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.1.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.14\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libunicode_width-31c64cf4a2bdb8ec.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#number_prefix@0.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\number_prefix-0.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "number_prefix",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\number_prefix-0.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libnumber_prefix-f6c4e2ae23daf654.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "cjk",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libunicode_width-911e5fa1d8ca1fe0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\libc-841dfe077ca3a868\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\build\\portable-atomic-4cd82c49d5a7ae02\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.167",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.167\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\liblibc-610e3eeab4f24c09.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "portable_atomic",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\portable-atomic-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "fallback"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libportable_atomic-0d2318fc16b87ee8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.52.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.52.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_UI",
                "Win32_UI_Input",
                "Win32_UI_Input_KeyboardAndMouse",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libwindows_sys-c71b4e7aceec58ca.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#console@0.15.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\console-0.15.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "console",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\console-0.15.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ansi-parsing",
                "unicode-width"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libconsole-54ea586fc802527e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpjf0h3gmn/indicatif-0.17.11#indicatif@0.17.11",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indicatif",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "unicode-width"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpjf0h3gmn\\indicatif-0.17.11\\target\\debug\\deps\\libindicatif-a0f10eab72666eab.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 100
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.41.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "22cfb5bee7a6a52939ca9224d6ac897bb669134078daa8735560897f69de4d33",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.74",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "indicatif",
          "version": "0.17.11",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\n[Settings](https://docs.rs/indicatif/latest/settings.html)\n[Help](https://docs.rs/indicatif/latest/help.html)\nSummary[Source](https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292)\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * [console](https://docs.rs/console)\n  * [dialoguer](https://docs.rs/dialoguer)\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#crate-contents)Crate Contents\n  * **Progress bars**\n    * [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html) for bars and spinners\n    * [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html) for multiple bars\n  * **Data Formatting**\n    * [`HumanBytes`](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html) for formatting bytes\n    * [`DecimalBytes`](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html) for formatting bytes using SI prefixes\n    * [`BinaryBytes`](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html) for formatting bytes using ISO/IEC prefixes\n    * [`HumanDuration`](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html) for formatting durations\n    * [`HumanCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html) for formatting large counts\n    * [`HumanFloatCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html) for formatting large float counts\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners)Progress Bars and Spinners\nindicatif comes with a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\") type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") and [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\") utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\"), or you can set them up to spin automatically with [`enable_steady_tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick \"method indicatif::ProgressBar::enable_steady_tick\"):\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when [`set_message`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message \"method indicatif::ProgressBar::set_message\"), [`inc`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc \"method indicatif::ProgressBar::inc\"), [`set_position`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position \"method indicatif::ProgressBar::set_position\") or [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") are called. In some situations you might have to call [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#iterators)Iterators\nSimilar to [tqdm](https://github.com/tqdm/tqdm), progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the [`ProgressIterator`](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html) trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with [Rayon](https://github.com/rayon-rs/rayon). In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#templates)Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see [`Style::from_dotted_str`](https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str) for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom [`ProgressTracker`](https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html \"trait indicatif::style::ProgressTracker\") implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a [`ProgressStyle`](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\") and attaching it to the progress bar.\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting)Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#feature-flags)Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports[\u00a7](https://docs.rs/indicatif/latest/indicatif/#reexports)\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules[\u00a7](https://docs.rs/indicatif/latest/indicatif/#modules)\n\n[style](https://docs.rs/indicatif/latest/indicatif/style/index.html \"mod indicatif::style\")\n\n## Structs[\u00a7](https://docs.rs/indicatif/latest/indicatif/#structs)\n\n[BinaryBytes](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html \"struct indicatif::BinaryBytes\")\n    Formats bytes for human readability using ISO/IEC prefixes\n\n[DecimalBytes](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html \"struct indicatif::DecimalBytes\")\n    Formats bytes for human readability using SI prefixes\n\n[FormattedDuration](https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html \"struct indicatif::FormattedDuration\")\n    Wraps an std duration for human basic formatting.\n\n[HumanBytes](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html \"struct indicatif::HumanBytes\")\n    Formats bytes for human readability\n\n[HumanCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html \"struct indicatif::HumanCount\")\n    Formats counts for human readability using commas\n\n[HumanDuration](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html \"struct indicatif::HumanDuration\")\n    Wraps an std duration for human readable formatting.\n\n[HumanFloatCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html \"struct indicatif::HumanFloatCount\")\n    Formats counts for human readability using commas for floats\n\n[InMemoryTerm](https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html \"struct indicatif::InMemoryTerm\")\n    A thin wrapper around [`vt100::Parser`](https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html \"struct vt100::parser::Parser\").\n\n[MultiProgress](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\")\n    Manages multiple progress bars from different threads\n\n[ProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\")\n    A progress bar or spinner\n\n[ProgressBarIter](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html \"struct indicatif::ProgressBarIter\")\n    Wraps an iterator to display its progress.\n\n[ProgressDrawTarget](https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html \"struct indicatif::ProgressDrawTarget\")\n    Target for draw operations\n\n[ProgressState](https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html \"struct indicatif::ProgressState\")\n    The state of a progress bar at a moment in time.\n\n[WeakProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html \"struct indicatif::WeakProgressBar\")\n    A weak reference to a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\").\n## Enums[\u00a7](https://docs.rs/indicatif/latest/indicatif/#enums)\n\n[MultiProgressAlignment](https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html \"enum indicatif::MultiProgressAlignment\")\n    Vertical alignment of a multi progress.\n\n[ProgressFinish](https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html \"enum indicatif::ProgressFinish\")\n    Behavior of a progress bar when it is finished\n## Traits[\u00a7](https://docs.rs/indicatif/latest/indicatif/#traits)\n\n[ParallelProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html \"trait indicatif::ParallelProgressIterator\")\n    Wraps a Rayon parallel iterator.\n\n[ProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html \"trait indicatif::ProgressIterator\")\n    Wraps an iterator to display its progress.\n\n[TermLike](https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html \"trait indicatif::TermLike\")\n    A trait for minimal terminal-like behavior.\n",
            "markdown_with_citations": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * console\u27e84\u27e9\n  * dialoguer\u27e85\u27e9\n\n\n## \u00a7\u27e86\u27e9Crate Contents\n  * **Progress bars**\n    * `ProgressBar`\u27e87\u27e9 for bars and spinners\n    * `MultiProgress`\u27e88\u27e9 for multiple bars\n  * **Data Formatting**\n    * `HumanBytes`\u27e89\u27e9 for formatting bytes\n    * `DecimalBytes`\u27e810\u27e9 for formatting bytes using SI prefixes\n    * `BinaryBytes`\u27e811\u27e9 for formatting bytes using ISO/IEC prefixes\n    * `HumanDuration`\u27e812\u27e9 for formatting durations\n    * `HumanCount`\u27e813\u27e9 for formatting large counts\n    * `HumanFloatCount`\u27e814\u27e9 for formatting large float counts\n\n\n## \u00a7\u27e815\u27e9Progress Bars and Spinners\nindicatif comes with a `ProgressBar`\u27e87\u27e9 type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are `Sync`\u27e816\u27e9 and `Send`\u27e817\u27e9 objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a `MultiProgress`\u27e88\u27e9 utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with `tick`\u27e818\u27e9, or you can set them up to spin automatically with `enable_steady_tick`\u27e819\u27e9:\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when `set_message`\u27e820\u27e9, `inc`\u27e821\u27e9, `set_position`\u27e822\u27e9 or `tick`\u27e818\u27e9 are called. In some situations you might have to call `tick`\u27e818\u27e9 once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## \u00a7\u27e823\u27e9Iterators\nSimilar to tqdm\u27e824\u27e9, progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the `ProgressIterator`\u27e825\u27e9 trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with Rayon\u27e826\u27e9. In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n\u24d8\u27e827\u27e9```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n\u24d8\u27e827\u27e9```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## \u00a7\u27e828\u27e9Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see `Style::from_dotted_str`\u27e829\u27e9 for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom `ProgressTracker`\u27e830\u27e9 implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a `ProgressStyle`\u27e831\u27e9 and attaching it to the progress bar.\n## \u00a7\u27e832\u27e9Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## \u00a7\u27e833\u27e9Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nstyle\u27e836\u27e9\n\n## Structs\u00a7\u27e837\u27e9\n\nBinaryBytes\u27e811\u27e9\n    Formats bytes for human readability using ISO/IEC prefixes\n\nDecimalBytes\u27e810\u27e9\n    Formats bytes for human readability using SI prefixes\n\nFormattedDuration\u27e838\u27e9\n    Wraps an std duration for human basic formatting.\n\nHumanBytes\u27e89\u27e9\n    Formats bytes for human readability\n\nHumanCount\u27e813\u27e9\n    Formats counts for human readability using commas\n\nHumanDuration\u27e812\u27e9\n    Wraps an std duration for human readable formatting.\n\nHumanFloatCount\u27e814\u27e9\n    Formats counts for human readability using commas for floats\n\nInMemoryTerm\u27e839\u27e9\n    A thin wrapper around `vt100::Parser`\u27e840\u27e9.\n\nMultiProgress\u27e88\u27e9\n    Manages multiple progress bars from different threads\n\nProgressBar\u27e87\u27e9\n    A progress bar or spinner\n\nProgressBarIter\u27e841\u27e9\n    Wraps an iterator to display its progress.\n\nProgressDrawTarget\u27e842\u27e9\n    Target for draw operations\n\nProgressState\u27e843\u27e9\n    The state of a progress bar at a moment in time.\n\nWeakProgressBar\u27e844\u27e9\n    A weak reference to a `ProgressBar`\u27e87\u27e9.\n## Enums\u00a7\u27e845\u27e9\n\nMultiProgressAlignment\u27e846\u27e9\n    Vertical alignment of a multi progress.\n\nProgressFinish\u27e847\u27e9\n    Behavior of a progress bar when it is finished\n## Traits\u00a7\u27e848\u27e9\n\nParallelProgressIterator\u27e849\u27e9\n    Wraps a Rayon parallel iterator.\n\nProgressIterator\u27e825\u27e9\n    Wraps an iterator to display its progress.\n\nTermLike\u27e850\u27e9\n    A trait for minimal terminal-like behavior.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indicatif/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indicatif/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292: Source\n\u27e84\u27e9 https://docs.rs/console: console\n\u27e85\u27e9 https://docs.rs/dialoguer: dialoguer\n\u27e86\u27e9 https://docs.rs/indicatif/latest/indicatif/#crate-contents: \u00a7\n\u27e87\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html: `ProgressBar`\n\u27e88\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html: `MultiProgress`\n\u27e89\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html: `HumanBytes`\n\u27e810\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html: `DecimalBytes`\n\u27e811\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html: `BinaryBytes`\n\u27e812\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html: `HumanDuration`\n\u27e813\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html: `HumanCount`\n\u27e814\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html: `HumanFloatCount`\n\u27e815\u27e9 https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e817\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e818\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick: method indicatif::ProgressBar::tick - `tick`\n\u27e819\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick: method indicatif::ProgressBar::enable_steady_tick - `enable_steady_tick`\n\u27e820\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message: method indicatif::ProgressBar::set_message - `set_message`\n\u27e821\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc: method indicatif::ProgressBar::inc - `inc`\n\u27e822\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position: method indicatif::ProgressBar::set_position - `set_position`\n\u27e823\u27e9 https://docs.rs/indicatif/latest/indicatif/#iterators: \u00a7\n\u27e824\u27e9 https://github.com/tqdm/tqdm: tqdm\n\u27e825\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html: `ProgressIterator`\n\u27e826\u27e9 https://github.com/rayon-rs/rayon: Rayon\n\u27e827\u27e9 https://docs.rs/indicatif/latest/indicatif/: This example is not tested - \u24d8\n\u27e828\u27e9 https://docs.rs/indicatif/latest/indicatif/#templates: \u00a7\n\u27e829\u27e9 https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str: `Style::from_dotted_str`\n\u27e830\u27e9 https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html: trait indicatif::style::ProgressTracker - `ProgressTracker`\n\u27e831\u27e9 https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html: struct indicatif::style::ProgressStyle - `ProgressStyle`\n\u27e832\u27e9 https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting: \u00a7\n\u27e833\u27e9 https://docs.rs/indicatif/latest/indicatif/#feature-flags: \u00a7\n\u27e834\u27e9 https://docs.rs/indicatif/latest/indicatif/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indicatif/latest/indicatif/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indicatif/latest/indicatif/style/index.html: mod indicatif::style - style\n\u27e837\u27e9 https://docs.rs/indicatif/latest/indicatif/#structs: \u00a7\n\u27e838\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html: struct indicatif::FormattedDuration - FormattedDuration\n\u27e839\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html: struct indicatif::InMemoryTerm - InMemoryTerm\n\u27e840\u27e9 https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html: struct vt100::parser::Parser - `vt100::Parser`\n\u27e841\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html: struct indicatif::ProgressBarIter - ProgressBarIter\n\u27e842\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html: struct indicatif::ProgressDrawTarget - ProgressDrawTarget\n\u27e843\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html: struct indicatif::ProgressState - ProgressState\n\u27e844\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html: struct indicatif::WeakProgressBar - WeakProgressBar\n\u27e845\u27e9 https://docs.rs/indicatif/latest/indicatif/#enums: \u00a7\n\u27e846\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html: enum indicatif::MultiProgressAlignment - MultiProgressAlignment\n\u27e847\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html: enum indicatif::ProgressFinish - ProgressFinish\n\u27e848\u27e9 https://docs.rs/indicatif/latest/indicatif/#traits: \u00a7\n\u27e849\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html: trait indicatif::ParallelProgressIterator - ParallelProgressIterator\n\u27e850\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html: trait indicatif::TermLike - TermLike\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "indicatif",
          "version": "0.17.11",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\n[Settings](https://docs.rs/indicatif/latest/settings.html)\n[Help](https://docs.rs/indicatif/latest/help.html)\nSummary[Source](https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292)\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * [console](https://docs.rs/console)\n  * [dialoguer](https://docs.rs/dialoguer)\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#crate-contents)Crate Contents\n  * **Progress bars**\n    * [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html) for bars and spinners\n    * [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html) for multiple bars\n  * **Data Formatting**\n    * [`HumanBytes`](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html) for formatting bytes\n    * [`DecimalBytes`](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html) for formatting bytes using SI prefixes\n    * [`BinaryBytes`](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html) for formatting bytes using ISO/IEC prefixes\n    * [`HumanDuration`](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html) for formatting durations\n    * [`HumanCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html) for formatting large counts\n    * [`HumanFloatCount`](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html) for formatting large float counts\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners)Progress Bars and Spinners\nindicatif comes with a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\") type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are [`Sync`](https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html \"trait core::marker::Sync\") and [`Send`](https://doc.rust-lang.org/nightly/core/marker/trait.Send.html \"trait core::marker::Send\") objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a [`MultiProgress`](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\") utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\"), or you can set them up to spin automatically with [`enable_steady_tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick \"method indicatif::ProgressBar::enable_steady_tick\"):\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when [`set_message`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message \"method indicatif::ProgressBar::set_message\"), [`inc`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc \"method indicatif::ProgressBar::inc\"), [`set_position`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position \"method indicatif::ProgressBar::set_position\") or [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") are called. In some situations you might have to call [`tick`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick \"method indicatif::ProgressBar::tick\") once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#iterators)Iterators\nSimilar to [tqdm](https://github.com/tqdm/tqdm), progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the [`ProgressIterator`](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html) trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with [Rayon](https://github.com/rayon-rs/rayon). In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n[\u24d8](https://docs.rs/indicatif/latest/indicatif/ \"This example is not tested\")```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#templates)Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see [`Style::from_dotted_str`](https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str) for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom [`ProgressTracker`](https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html \"trait indicatif::style::ProgressTracker\") implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a [`ProgressStyle`](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\") and attaching it to the progress bar.\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting)Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## [\u00a7](https://docs.rs/indicatif/latest/indicatif/#feature-flags)Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports[\u00a7](https://docs.rs/indicatif/latest/indicatif/#reexports)\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules[\u00a7](https://docs.rs/indicatif/latest/indicatif/#modules)\n\n[style](https://docs.rs/indicatif/latest/indicatif/style/index.html \"mod indicatif::style\")\n\n## Structs[\u00a7](https://docs.rs/indicatif/latest/indicatif/#structs)\n\n[BinaryBytes](https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html \"struct indicatif::BinaryBytes\")\n    Formats bytes for human readability using ISO/IEC prefixes\n\n[DecimalBytes](https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html \"struct indicatif::DecimalBytes\")\n    Formats bytes for human readability using SI prefixes\n\n[FormattedDuration](https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html \"struct indicatif::FormattedDuration\")\n    Wraps an std duration for human basic formatting.\n\n[HumanBytes](https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html \"struct indicatif::HumanBytes\")\n    Formats bytes for human readability\n\n[HumanCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html \"struct indicatif::HumanCount\")\n    Formats counts for human readability using commas\n\n[HumanDuration](https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html \"struct indicatif::HumanDuration\")\n    Wraps an std duration for human readable formatting.\n\n[HumanFloatCount](https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html \"struct indicatif::HumanFloatCount\")\n    Formats counts for human readability using commas for floats\n\n[InMemoryTerm](https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html \"struct indicatif::InMemoryTerm\")\n    A thin wrapper around [`vt100::Parser`](https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html \"struct vt100::parser::Parser\").\n\n[MultiProgress](https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html \"struct indicatif::MultiProgress\")\n    Manages multiple progress bars from different threads\n\n[ProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\")\n    A progress bar or spinner\n\n[ProgressBarIter](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html \"struct indicatif::ProgressBarIter\")\n    Wraps an iterator to display its progress.\n\n[ProgressDrawTarget](https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html \"struct indicatif::ProgressDrawTarget\")\n    Target for draw operations\n\n[ProgressState](https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html \"struct indicatif::ProgressState\")\n    The state of a progress bar at a moment in time.\n\n[WeakProgressBar](https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html \"struct indicatif::WeakProgressBar\")\n    A weak reference to a [`ProgressBar`](https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html \"struct indicatif::ProgressBar\").\n## Enums[\u00a7](https://docs.rs/indicatif/latest/indicatif/#enums)\n\n[MultiProgressAlignment](https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html \"enum indicatif::MultiProgressAlignment\")\n    Vertical alignment of a multi progress.\n\n[ProgressFinish](https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html \"enum indicatif::ProgressFinish\")\n    Behavior of a progress bar when it is finished\n## Traits[\u00a7](https://docs.rs/indicatif/latest/indicatif/#traits)\n\n[ParallelProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html \"trait indicatif::ParallelProgressIterator\")\n    Wraps a Rayon parallel iterator.\n\n[ProgressIterator](https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html \"trait indicatif::ProgressIterator\")\n    Wraps an iterator to display its progress.\n\n[TermLike](https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html \"trait indicatif::TermLike\")\n    A trait for minimal terminal-like behavior.\n",
            "markdown_with_citations": "[](https://docs.rs/indicatif/latest/indicatif/all.html \"show sidebar\")\n# Crate indicatifCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nindicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.\nPlatform support:\n  * Linux\n  * macOS\n  * Windows (colors require Windows 10)\n\n\nBest paired with other libraries in the family:\n  * console\u27e84\u27e9\n  * dialoguer\u27e85\u27e9\n\n\n## \u00a7\u27e86\u27e9Crate Contents\n  * **Progress bars**\n    * `ProgressBar`\u27e87\u27e9 for bars and spinners\n    * `MultiProgress`\u27e88\u27e9 for multiple bars\n  * **Data Formatting**\n    * `HumanBytes`\u27e89\u27e9 for formatting bytes\n    * `DecimalBytes`\u27e810\u27e9 for formatting bytes using SI prefixes\n    * `BinaryBytes`\u27e811\u27e9 for formatting bytes using ISO/IEC prefixes\n    * `HumanDuration`\u27e812\u27e9 for formatting durations\n    * `HumanCount`\u27e813\u27e9 for formatting large counts\n    * `HumanFloatCount`\u27e814\u27e9 for formatting large float counts\n\n\n## \u00a7\u27e815\u27e9Progress Bars and Spinners\nindicatif comes with a `ProgressBar`\u27e87\u27e9 type that supports both bounded progress bar uses as well as unbounded \u201cspinner\u201d type progress reports. Progress bars are `Sync`\u27e816\u27e9 and `Send`\u27e817\u27e9 objects which means that they are internally locked and can be passed from thread to thread.\nAdditionally a `MultiProgress`\u27e88\u27e9 utility is provided that can manage rendering multiple progress bars at once (eg: from multiple threads).\nTo whet your appetite, this is what this can look like:\n![](https://github.com/console-rs/indicatif/raw/main/screenshots/yarn.gif?raw=true)\nProgress bars are manually advanced and by default draw to stderr. When you are done, the progress bar can be finished either visibly (eg: the progress bar stays on the screen) or cleared (the progress bar will be removed).\n```\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new(1000);\nfor _ in 0..1000 {\n  bar.inc(1);\n  // ...\n}\nbar.finish();\n```\n\nSpinners can be manually advanced with `tick`\u27e818\u27e9, or you can set them up to spin automatically with `enable_steady_tick`\u27e819\u27e9:\n```\nuse std::time::Duration;\nuse indicatif::ProgressBar;\nlet bar = ProgressBar::new_spinner();\nbar.enable_steady_tick(Duration::from_millis(100));\n// ... do some work\nbar.finish();\n```\n\nGeneral progress bar behaviors:\n  * if a non terminal is detected the progress bar will be completely hidden. This makes piping programs to logfiles make sense out of the box.\n  * a progress bar only starts drawing when `set_message`\u27e820\u27e9, `inc`\u27e821\u27e9, `set_position`\u27e822\u27e9 or `tick`\u27e818\u27e9 are called. In some situations you might have to call `tick`\u27e818\u27e9 once to draw it.\n  * progress bars should be explicitly finished to reset the rendering for others. Either by also clearing them or by replacing them with a new message / retaining the current message.\n  * the default template renders neither message nor prefix.\n\n\n## \u00a7\u27e823\u27e9Iterators\nSimilar to tqdm\u27e824\u27e9, progress bars can be associated with an iterator. For example:\n```\nuse indicatif::ProgressIterator;\nfor _ in (0..1000).progress() {\n  // ...\n}\n```\n\nSee the `ProgressIterator`\u27e825\u27e9 trait for more methods to configure the number of elements in the iterator or change the progress bar style. Indicatif also has optional support for parallel iterators with Rayon\u27e826\u27e9. In your `Cargo.toml`, use the \u201crayon\u201d feature:\n```\n[dependencies]\nindicatif = {version = \"*\", features = [\"rayon\"]}\n```\n\nAnd then use it like this:\n\u24d8\u27e827\u27e9```\nuse indicatif::ParallelProgressIterator;\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_count(v.len() as u64).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\nOr if you\u2019d like to customize the progress bar:\n\u24d8\u27e827\u27e9```\nuse indicatif::{ProgressBar, ParallelProgressIterator, ProgressStyle};\nuse rayon::iter::{ParallelIterator, IntoParallelRefIterator};\n// Alternatively, use `ProgressBar::new().with_style()`\nlet style = ProgressStyle::default_bar();\nlet v: Vec<_> = (0..100000).collect();\nlet v2: Vec<_> = v.par_iter().progress_with_style(style).map(|i| i + 1).collect();\nassert_eq!(v2[0], 1);\n```\n\n## \u00a7\u27e828\u27e9Templates\nProgress bars can be styled with simple format strings similar to the ones in Rust itself. The format for a placeholder is `{key:options}` where the `options` part is optional. If provided the format is this:\n```\n<^>       for an optional alignment specification (left, center and right respectively)\nWIDTH      an optional width as positive integer\n!        an optional exclamation mark to enable truncation\n.STYLE     an optional dot separated style string\n/STYLE     an optional dot separated alternative style string\n```\n\nFor the style component see `Style::from_dotted_str`\u27e829\u27e9 for more information. Indicatif uses the `console` base crate for all colorization and formatting options.\nSome examples for templates:\n```\n[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\n```\n\nThis sets a progress bar that is 40 characters wide and has cyan as primary style color and blue as alternative style color. Alternative styles are currently only used for progress bars.\nExample configuration:\n```\nbar.set_style(ProgressStyle::with_template(\"[{elapsed_precise}] {bar:40.cyan/blue} {pos:>7}/{len:7} {msg}\")\n  .unwrap()\n  .progress_chars(\"##-\"));\n```\n\nThe following keys exist:\n  * `bar`: renders a progress bar. By default 20 characters wide. The style string is used to color the elapsed part, the alternative style is used for the bar that is yet to render.\n  * `wide_bar`: like `bar` but always fills the remaining space. It should not be used with `wide_msg`.\n  * `spinner`: renders the spinner (current tick string). Note that spinners do not automatically tick by default. You either need to call `enable_steady_tick` or manually call `tick`.\n  * `prefix`: renders the prefix set on the progress bar.\n  * `msg`: renders the currently set message on the progress bar.\n  * `wide_msg`: like `msg` but always fills the remaining space and truncates. It should not be used with `wide_bar`.\n  * `pos`: renders the current position of the bar as integer\n  * `human_pos`: renders the current position of the bar as an integer, with commas as the thousands separator.\n  * `len`: renders the amount of work to be done as an integer\n  * `human_len`: renders the total length of the bar as an integer, with commas as the thousands separator.\n  * `percent`: renders the current position of the bar as a percentage of the total length (as an integer).\n  * `percent_precise`: renders the current position of the bar as a percentage of the total length (with 3 fraction digits).\n  * `bytes`: renders the current position of the bar as bytes (alias of `binary_bytes`).\n  * `total_bytes`: renders the total length of the bar as bytes (alias of `binary_total_bytes`).\n  * `decimal_bytes`: renders the current position of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `decimal_total_bytes`: renders the total length of the bar as bytes using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes`: renders the current position of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `binary_total_bytes`: renders the total length of the bar as bytes using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `elapsed_precise`: renders the elapsed time as `HH:MM:SS`.\n  * `elapsed`: renders the elapsed time as `42s`, `1m` etc.\n  * `per_sec`: renders the speed in steps per second.\n  * `bytes_per_sec`: renders the speed in bytes per second (alias of `binary_bytes_per_sec`).\n  * `decimal_bytes_per_sec`: renders the speed in bytes per second using power-of-10 units, i.e. `MB`, `kB`, etc.\n  * `binary_bytes_per_sec`: renders the speed in bytes per second using power-of-two units, i.e. `MiB`, `KiB`, etc.\n  * `eta_precise`: the remaining time (like `elapsed_precise`).\n  * `eta`: the remaining time (like `elapsed`).\n  * `duration_precise`: the extrapolated total duration (like `elapsed_precise`).\n  * `duration`: the extrapolated total duration time (like `elapsed`).\n\n\nIf the list above does not contain the value you need, consider creating a custom `ProgressTracker`\u27e830\u27e9 implementation.\nThe design of the progress bar can be altered with the integrated template functionality. The template can be set by changing a `ProgressStyle`\u27e831\u27e9 and attaching it to the progress bar.\n## \u00a7\u27e832\u27e9Human Readable Formatting\nThere are some formatting wrappers for showing elapsed time and file sizes for human users:\n```\nuse indicatif::{HumanBytes, HumanCount, HumanDuration, HumanFloatCount};\nassert_eq!(\"3.00 MiB\", HumanBytes(3*1024*1024).to_string());\nassert_eq!(\"8 seconds\", HumanDuration(Duration::from_secs(8)).to_string());\nassert_eq!(\"33,857,009\", HumanCount(33857009).to_string());\nassert_eq!(\"33,857,009.1235\", HumanFloatCount(33857009.123456).to_string());\n```\n\n## \u00a7\u27e833\u27e9Feature Flags\n  * `rayon`: adds rayon support\n  * `improved_unicode`: adds improved unicode support (graphemes, better width calculation)\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::style::ProgressStyle[](https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html \"struct indicatif::style::ProgressStyle\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nstyle\u27e836\u27e9\n\n## Structs\u00a7\u27e837\u27e9\n\nBinaryBytes\u27e811\u27e9\n    Formats bytes for human readability using ISO/IEC prefixes\n\nDecimalBytes\u27e810\u27e9\n    Formats bytes for human readability using SI prefixes\n\nFormattedDuration\u27e838\u27e9\n    Wraps an std duration for human basic formatting.\n\nHumanBytes\u27e89\u27e9\n    Formats bytes for human readability\n\nHumanCount\u27e813\u27e9\n    Formats counts for human readability using commas\n\nHumanDuration\u27e812\u27e9\n    Wraps an std duration for human readable formatting.\n\nHumanFloatCount\u27e814\u27e9\n    Formats counts for human readability using commas for floats\n\nInMemoryTerm\u27e839\u27e9\n    A thin wrapper around `vt100::Parser`\u27e840\u27e9.\n\nMultiProgress\u27e88\u27e9\n    Manages multiple progress bars from different threads\n\nProgressBar\u27e87\u27e9\n    A progress bar or spinner\n\nProgressBarIter\u27e841\u27e9\n    Wraps an iterator to display its progress.\n\nProgressDrawTarget\u27e842\u27e9\n    Target for draw operations\n\nProgressState\u27e843\u27e9\n    The state of a progress bar at a moment in time.\n\nWeakProgressBar\u27e844\u27e9\n    A weak reference to a `ProgressBar`\u27e87\u27e9.\n## Enums\u00a7\u27e845\u27e9\n\nMultiProgressAlignment\u27e846\u27e9\n    Vertical alignment of a multi progress.\n\nProgressFinish\u27e847\u27e9\n    Behavior of a progress bar when it is finished\n## Traits\u00a7\u27e848\u27e9\n\nParallelProgressIterator\u27e849\u27e9\n    Wraps a Rayon parallel iterator.\n\nProgressIterator\u27e825\u27e9\n    Wraps an iterator to display its progress.\n\nTermLike\u27e850\u27e9\n    A trait for minimal terminal-like behavior.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indicatif/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indicatif/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indicatif/latest/src/indicatif/lib.rs.html#1-292: Source\n\u27e84\u27e9 https://docs.rs/console: console\n\u27e85\u27e9 https://docs.rs/dialoguer: dialoguer\n\u27e86\u27e9 https://docs.rs/indicatif/latest/indicatif/#crate-contents: \u00a7\n\u27e87\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html: `ProgressBar`\n\u27e88\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.MultiProgress.html: `MultiProgress`\n\u27e89\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanBytes.html: `HumanBytes`\n\u27e810\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.DecimalBytes.html: `DecimalBytes`\n\u27e811\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.BinaryBytes.html: `BinaryBytes`\n\u27e812\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanDuration.html: `HumanDuration`\n\u27e813\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanCount.html: `HumanCount`\n\u27e814\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.HumanFloatCount.html: `HumanFloatCount`\n\u27e815\u27e9 https://docs.rs/indicatif/latest/indicatif/#progress-bars-and-spinners: \u00a7\n\u27e816\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html: trait core::marker::Sync - `Sync`\n\u27e817\u27e9 https://doc.rust-lang.org/nightly/core/marker/trait.Send.html: trait core::marker::Send - `Send`\n\u27e818\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.tick: method indicatif::ProgressBar::tick - `tick`\n\u27e819\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.enable_steady_tick: method indicatif::ProgressBar::enable_steady_tick - `enable_steady_tick`\n\u27e820\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_message: method indicatif::ProgressBar::set_message - `set_message`\n\u27e821\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.inc: method indicatif::ProgressBar::inc - `inc`\n\u27e822\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBar.html#method.set_position: method indicatif::ProgressBar::set_position - `set_position`\n\u27e823\u27e9 https://docs.rs/indicatif/latest/indicatif/#iterators: \u00a7\n\u27e824\u27e9 https://github.com/tqdm/tqdm: tqdm\n\u27e825\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ProgressIterator.html: `ProgressIterator`\n\u27e826\u27e9 https://github.com/rayon-rs/rayon: Rayon\n\u27e827\u27e9 https://docs.rs/indicatif/latest/indicatif/: This example is not tested - \u24d8\n\u27e828\u27e9 https://docs.rs/indicatif/latest/indicatif/#templates: \u00a7\n\u27e829\u27e9 https://docs.rs/console/0.7.5/console/struct.Style.html#method.from_dotted_str: `Style::from_dotted_str`\n\u27e830\u27e9 https://docs.rs/indicatif/latest/indicatif/style/trait.ProgressTracker.html: trait indicatif::style::ProgressTracker - `ProgressTracker`\n\u27e831\u27e9 https://docs.rs/indicatif/latest/indicatif/style/struct.ProgressStyle.html: struct indicatif::style::ProgressStyle - `ProgressStyle`\n\u27e832\u27e9 https://docs.rs/indicatif/latest/indicatif/#human-readable-formatting: \u00a7\n\u27e833\u27e9 https://docs.rs/indicatif/latest/indicatif/#feature-flags: \u00a7\n\u27e834\u27e9 https://docs.rs/indicatif/latest/indicatif/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indicatif/latest/indicatif/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indicatif/latest/indicatif/style/index.html: mod indicatif::style - style\n\u27e837\u27e9 https://docs.rs/indicatif/latest/indicatif/#structs: \u00a7\n\u27e838\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.FormattedDuration.html: struct indicatif::FormattedDuration - FormattedDuration\n\u27e839\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.InMemoryTerm.html: struct indicatif::InMemoryTerm - InMemoryTerm\n\u27e840\u27e9 https://docs.rs/vt100/0.15.2/x86_64-unknown-linux-gnu/vt100/parser/struct.Parser.html: struct vt100::parser::Parser - `vt100::Parser`\n\u27e841\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressBarIter.html: struct indicatif::ProgressBarIter - ProgressBarIter\n\u27e842\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressDrawTarget.html: struct indicatif::ProgressDrawTarget - ProgressDrawTarget\n\u27e843\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.ProgressState.html: struct indicatif::ProgressState - ProgressState\n\u27e844\u27e9 https://docs.rs/indicatif/latest/indicatif/struct.WeakProgressBar.html: struct indicatif::WeakProgressBar - WeakProgressBar\n\u27e845\u27e9 https://docs.rs/indicatif/latest/indicatif/#enums: \u00a7\n\u27e846\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.MultiProgressAlignment.html: enum indicatif::MultiProgressAlignment - MultiProgressAlignment\n\u27e847\u27e9 https://docs.rs/indicatif/latest/indicatif/enum.ProgressFinish.html: enum indicatif::ProgressFinish - ProgressFinish\n\u27e848\u27e9 https://docs.rs/indicatif/latest/indicatif/#traits: \u00a7\n\u27e849\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.ParallelProgressIterator.html: trait indicatif::ParallelProgressIterator - ParallelProgressIterator\n\u27e850\u27e9 https://docs.rs/indicatif/latest/indicatif/trait.TermLike.html: trait indicatif::TermLike - TermLike\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `indicatif` crate is a versatile library for building command-line interfaces with progress reporting in Rust. It provides customizable progress bars, spinners, and multi-progress management, along with utilities for formatting data like bytes, durations, and counts. Key features include iterator integration (similar to `tqdm`), optional parallel iterator support via Rayon, and flexible styling through templates.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Progress Bar Features  \n\u2705 **Factual:** The `indicatif` crate provides a `ProgressBar` type that supports both bounded progress bars and unbounded spinner-style progress indicators, making it versatile for various CLI applications.  \n\u274c **Counterfactual:** The `indicatif` crate only supports bounded progress bars and does not provide functionality for spinner-style progress indicators.  \n\n---\n\n### Pair 2: Unicode Support  \n\u2705 **Factual:** The `indicatif` crate has an optional `improved_unicode` feature flag that enhances Unicode support, including better grapheme handling and width calculation for progress bar rendering.  \n\u274c **Counterfactual:** The `indicatif` crate natively supports advanced Unicode features like grapheme handling and width calculation without requiring any feature flags.  \n\n---\n\n### Pair 3: Platform Compatibility  \n\u2705 **Factual:** The `indicatif` crate supports Linux, macOS, and Windows, but colored output on Windows requires Windows 10 or later.  \n\u274c **Counterfactual:** The `indicatif` crate supports Linux, macOS, and Windows, with colored output fully functional on all versions of Windows, including Windows 7.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-90e92b63-96687428-1751260219",
      "timestamp": "2025-06-30T05:10:19.811454+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]