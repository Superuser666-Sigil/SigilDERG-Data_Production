[
  {
    "execution_id": "exec-c6130b85-0545c694-1751264412",
    "timestamp": "2025-06-30T06:20:12.244022+00:00",
    "sacred_chain": {
      "input_data": "pbkdf2",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'pbkdf2' -> 'pbkdf2'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "pbkdf2",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/pbkdf2",
            "title": "pbkdf2 v0.12.2",
            "content": {
              "raw_markdown": "#  pbkdf2 v0.12.2\nGeneric implementation of PBKDF2 \n  * [ #crypto ](https://crates.io/keywords/crypto)\n  * [ #hashing ](https://crates.io/keywords/hashing)\n  * [ #password ](https://crates.io/keywords/password)\n  * [ #phf ](https://crates.io/keywords/phf)\n\n\n  * [ Readme ](https://crates.io/crates/pbkdf2)\n  * [ 27 Versions ](https://crates.io/crates/pbkdf2/versions)\n  * [ Dependencies ](https://crates.io/crates/pbkdf2/dependencies)\n  * [ Dependents ](https://crates.io/crates/pbkdf2/reverse_dependencies)\n\n\n## Metadata\nalmost 2 years ago \nv1.60.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n13.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pbkdf2\nOr add the following line to your Cargo.toml:\npbkdf2 = \"0.12.2\"\n## Homepage\n[ github.com/RustCrypto/password-hashes/tree/master/pbkdf2 ](https://github.com/RustCrypto/password-hashes/tree/master/pbkdf2)\n## Documentation\n[ docs.rs/pbkdf2 ](https://docs.rs/pbkdf2)\n## Repository\n[ github.com/RustCrypto/password-hashes ](https://github.com/RustCrypto/password-hashes)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Authentication](https://crates.io/categories/authentication)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=pbkdf2&inquire=crate-violation)\n### Stats Overview\n93,877,929 Downloads all time\n27 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  pbkdf2 v0.12.2\nGeneric implementation of PBKDF2 \n  *  #crypto \u27e81\u27e9\n  *  #hashing \u27e82\u27e9\n  *  #password \u27e83\u27e9\n  *  #phf \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  27 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nalmost 2 years ago \nv1.60.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n13.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pbkdf2\nOr add the following line to your Cargo.toml:\npbkdf2 = \"0.12.2\"\n## Homepage\n github.com/RustCrypto/password-hashes/tree/master/pbkdf2 \u27e811\u27e9\n## Documentation\n docs.rs/pbkdf2 \u27e812\u27e9\n## Repository\n github.com/RustCrypto/password-hashes \u27e813\u27e9\n## Owners\n## Categories\n  * No standard library\u27e814\u27e9\n  * Authentication\u27e815\u27e9\n  * Cryptography\u27e816\u27e9\n\n\n Report crate \u27e817\u27e9\n### Stats Overview\n93,877,929 Downloads all time\n27 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/crypto:  #crypto \n\u27e82\u27e9 https://crates.io/keywords/hashing:  #hashing \n\u27e83\u27e9 https://crates.io/keywords/password:  #password \n\u27e84\u27e9 https://crates.io/keywords/phf:  #phf \n\u27e85\u27e9 https://crates.io/crates/pbkdf2:  Readme \n\u27e86\u27e9 https://crates.io/crates/pbkdf2/versions:  27 Versions \n\u27e87\u27e9 https://crates.io/crates/pbkdf2/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/pbkdf2/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://github.com/RustCrypto/password-hashes/tree/master/pbkdf2:  github.com/RustCrypto/password-hashes/tree/master/pbkdf2 \n\u27e812\u27e9 https://docs.rs/pbkdf2:  docs.rs/pbkdf2 \n\u27e813\u27e9 https://github.com/RustCrypto/password-hashes:  github.com/RustCrypto/password-hashes \n\u27e814\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e815\u27e9 https://crates.io/categories/authentication: Authentication\n\u27e816\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e817\u27e9 https://crates.io/support?crate=pbkdf2&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1595,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118201.9442297"
          },
          "docs_rs": {
            "url": "https://docs.rs/pbkdf2",
            "title": "Crate pbkdf2Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\n[Settings](https://docs.rs/pbkdf2/latest/settings.html)\n[Help](https://docs.rs/pbkdf2/latest/help.html)\nSummary[Source](https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282)\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in [RFC 2898](https://tools.ietf.org/html/rfc2898).\n## [\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#examples)Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") and [`pbkdf2_hmac_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\") functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") and [`pbkdf2_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\") functions.\nThis crates also provides the high-level password-hashing API through the [`Pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\") struct and traits defined in the [`password-hash`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\") crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#structs)\n\n[Params](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html \"struct pbkdf2::Params\")\n    PBKDF2 params\n\n[Pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\")\n    PBKDF2 type for use with [`PasswordHasher`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html \"trait password_hash::traits::PasswordHasher\").\n## Enums[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#enums)\n\n[Algorithm](https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html \"enum pbkdf2::Algorithm\")\n    PBKDF2 variants.\n## Functions[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#functions)\n\n[pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\")\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\n[pbkdf2_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\")\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which returns an array instead of filling an input slice.\n\n[pbkdf2_hmac](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\")`hmac`\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\n[pbkdf2_hmac_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\")`hmac`\n    A variant of the [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") function which returns an array instead of filling an input slice.\n",
              "markdown_with_citations": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in RFC 2898\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use `pbkdf2_hmac`\u27e86\u27e9 and `pbkdf2_hmac_array`\u27e87\u27e9 functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use `pbkdf2`\u27e88\u27e9 and `pbkdf2_array`\u27e89\u27e9 functions.\nThis crates also provides the high-level password-hashing API through the `Pbkdf2`\u27e810\u27e9 struct and traits defined in the `password-hash`\u27e811\u27e9 crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nParams\u27e814\u27e9\n    PBKDF2 params\n\nPbkdf2\u27e810\u27e9\n    PBKDF2 type for use with `PasswordHasher`\u27e815\u27e9.\n## Enums\u00a7\u27e816\u27e9\n\nAlgorithm\u27e817\u27e9\n    PBKDF2 variants.\n## Functions\u00a7\u27e818\u27e9\n\npbkdf2\u27e88\u27e9\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\npbkdf2_array\u27e89\u27e9\n    A variant of the `pbkdf2`\u27e88\u27e9 function which returns an array instead of filling an input slice.\n\npbkdf2_hmac\u27e86\u27e9`hmac`\n    A variant of the `pbkdf2`\u27e88\u27e9 function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\npbkdf2_hmac_array\u27e87\u27e9`hmac`\n    A variant of the `pbkdf2_hmac`\u27e86\u27e9 function which returns an array instead of filling an input slice.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pbkdf2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pbkdf2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282: Source\n\u27e84\u27e9 https://tools.ietf.org/html/rfc2898: RFC 2898\n\u27e85\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html: fn pbkdf2::pbkdf2_hmac - `pbkdf2_hmac`\n\u27e87\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html: fn pbkdf2::pbkdf2_hmac_array - `pbkdf2_hmac_array`\n\u27e88\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html: fn pbkdf2::pbkdf2 - `pbkdf2`\n\u27e89\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html: fn pbkdf2::pbkdf2_array - `pbkdf2_array`\n\u27e810\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html: struct pbkdf2::Pbkdf2 - `Pbkdf2`\n\u27e811\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html: mod password_hash - `password-hash`\n\u27e812\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html: struct pbkdf2::Params - Params\n\u27e815\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html: trait password_hash::traits::PasswordHasher - `PasswordHasher`\n\u27e816\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#enums: \u00a7\n\u27e817\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html: enum pbkdf2::Algorithm - Algorithm\n\u27e818\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#functions: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4901,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118202.7884444"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/pbkdf2",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [18 releases](https://lib.rs/crates/pbkdf2/versions) (10 breaking)\nUses new Rust 2024\n0.13.0-rc.0 |  May 30, 2025   \n---|---  \n0.13.0-pre.1 |  Jul 27, 2024   \n0.13.0-pre.0 |  Feb 8, 2024   \n0.12.2 |  Jul 8, 2023   \n0.0.0 |  ~~Feb 28, 2017~~  \n#**1550** in [Cryptography](https://lib.rs/cryptography \"Algorithms intended for securing data.\")\nDownload history 1032603/week @ 2025-03-09 1022872/week @ 2025-03-16 1057208/week @ 2025-03-23 1153551/week @ 2025-03-30 1333516/week @ 2025-04-06 1103695/week @ 2025-04-13 1061250/week @ 2025-04-20 964504/week @ 2025-04-27 1068885/week @ 2025-05-04 1101000/week @ 2025-05-11 1069092/week @ 2025-05-18 962376/week @ 2025-05-25 1095555/week @ 2025-06-01 1074032/week @ 2025-06-08 1091788/week @ 2025-06-15 1224555/week @ 2025-06-22\n**4,537,379** downloads per month Used in [**4,827** crates (266 directly)](https://lib.rs/crates/pbkdf2/rev)\n**MIT/Apache**\n20KB  285 lines\n# RustCrypto: PBKDF2\n[![crate](https://img.shields.io/crates/v/pbkdf2)](https://crates.io/crates/pbkdf2) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/pbkdf2/badge.svg)](https://docs.rs/pbkdf2/) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.85+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/password-hashes/workflows/pbkdf2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Apbkdf2)\nPure Rust implementation of the [Password-Based Key Derivation Function v2 (PBKDF2)](https://en.wikipedia.org/wiki/PBKDF2).\n## License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.6\u20131.3MB  ~28K SLoC\n  * [digest](https://lib.rs/crates/digest \"new\") 0.11.0-rc.0[+mac](https://lib.rs/crates/digest/features#feature-mac)\n  * [default](https://lib.rs/crates/pbkdf2/features#feature-default \"default feature\") [hmac](https://lib.rs/crates/hmac \"new\") 0.13.0-rc.0\n  * [simple?](https://lib.rs/crates/pbkdf2/features#feature-simple \"optional feature\") [std?](https://lib.rs/crates/pbkdf2/features#feature-std \"optional feature\") [password-hash](https://lib.rs/crates/password-hash \"new\") 0.6.0-rc.0[+rand_core](https://lib.rs/crates/password-hash/features#feature-rand_core)\n  * [simple?](https://lib.rs/crates/pbkdf2/features#feature-simple \"optional feature\") [sha2](https://lib.rs/crates/sha2 \"new\") 0.11.0-rc.0\n  * [parallel?](https://lib.rs/crates/pbkdf2/features#feature-parallel \"optional feature\") [rayon](https://lib.rs/crates/rayon \"1.7\")\n  * [ optional ](https://lib.rs/crates/pbkdf2/features#feature-sha1 \"sha1 is optional feature\") [sha1](https://lib.rs/crates/sha1 \"new\") 0.11.0-rc.0\n\n\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"new\") 1.0\n  * dev  [streebog](https://lib.rs/crates/streebog \"new\") 0.11.0-rc.0\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  18 releases\u27e81\u27e9 (10 breaking)\nUses new Rust 2024\n0.13.0-rc.0 |  May 30, 2025   \n---|---  \n0.13.0-pre.1 |  Jul 27, 2024   \n0.13.0-pre.0 |  Feb 8, 2024   \n0.12.2 |  Jul 8, 2023   \n0.0.0 |  ~~Feb 28, 2017~~  \n#**1550** in Cryptography\u27e82\u27e9\nDownload history 1032603/week @ 2025-03-09 1022872/week @ 2025-03-16 1057208/week @ 2025-03-23 1153551/week @ 2025-03-30 1333516/week @ 2025-04-06 1103695/week @ 2025-04-13 1061250/week @ 2025-04-20 964504/week @ 2025-04-27 1068885/week @ 2025-05-04 1101000/week @ 2025-05-11 1069092/week @ 2025-05-18 962376/week @ 2025-05-25 1095555/week @ 2025-06-01 1074032/week @ 2025-06-08 1091788/week @ 2025-06-15 1224555/week @ 2025-06-22\n**4,537,379** downloads per month Used in **4,827** crates (266 directly)\u27e83\u27e9\n**MIT/Apache**\n20KB  285 lines\n# RustCrypto: PBKDF2\n![crate\u27e84\u27e9](https://crates.io/crates/pbkdf2) ![Docs\u27e85\u27e9](https://docs.rs/pbkdf2/) ![Apache2/MIT licensed\u27e86\u27e9] ![Rust Version\u27e87\u27e9] ![Project Chat\u27e88\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes) ![Build Status\u27e89\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Apbkdf2)\nPure Rust implementation of the Password-Based Key Derivation Function v2 (PBKDF2)\u27e810\u27e9.\n## License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e811\u27e9\n  * MIT license\u27e812\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.6\u20131.3MB  ~28K SLoC\n  * digest\u27e813\u27e9 0.11.0-rc.0+mac\u27e814\u27e9\n  * default\u27e815\u27e9 hmac\u27e816\u27e9 0.13.0-rc.0\n  * simple?\u27e817\u27e9 std?\u27e818\u27e9 password-hash\u27e819\u27e9 0.6.0-rc.0+rand_core\u27e820\u27e9\n  * simple?\u27e817\u27e9 sha2\u27e821\u27e9 0.11.0-rc.0\n  * parallel?\u27e822\u27e9 rayon\u27e823\u27e9\n  *  optional \u27e824\u27e9 sha1\u27e825\u27e9 0.11.0-rc.0\n\n\n  * dev  hex-literal\u27e826\u27e9 1.0\n  * dev  streebog\u27e827\u27e9 0.11.0-rc.0\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/pbkdf2/versions: 18 releases\n\u27e82\u27e9 https://lib.rs/cryptography: Algorithms intended for securing data. - Cryptography\n\u27e83\u27e9 https://lib.rs/crates/pbkdf2/rev: **4,827** crates (266 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/pbkdf2: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/pbkdf2/badge.svg: ![Docs\n\u27e86\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e87\u27e9 https://img.shields.io/badge/rustc-1.85+-blue.svg: Rust Version\n\u27e88\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/password-hashes/workflows/pbkdf2/badge.svg?branch=master&event=push: ![Build Status\n\u27e810\u27e9 https://en.wikipedia.org/wiki/PBKDF2: Password-Based Key Derivation Function v2 (PBKDF2)\n\u27e811\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e812\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e813\u27e9 https://lib.rs/crates/digest: new - digest\n\u27e814\u27e9 https://lib.rs/crates/digest/features#feature-mac: +mac\n\u27e815\u27e9 https://lib.rs/crates/pbkdf2/features#feature-default: default feature - default\n\u27e816\u27e9 https://lib.rs/crates/hmac: new - hmac\n\u27e817\u27e9 https://lib.rs/crates/pbkdf2/features#feature-simple: optional feature - simple?\n\u27e818\u27e9 https://lib.rs/crates/pbkdf2/features#feature-std: optional feature - std?\n\u27e819\u27e9 https://lib.rs/crates/password-hash: new - password-hash\n\u27e820\u27e9 https://lib.rs/crates/password-hash/features#feature-rand_core: +rand_core\n\u27e821\u27e9 https://lib.rs/crates/sha2: new - sha2\n\u27e822\u27e9 https://lib.rs/crates/pbkdf2/features#feature-parallel: optional feature - parallel?\n\u27e823\u27e9 https://lib.rs/crates/rayon: 1.7 - rayon\n\u27e824\u27e9 https://lib.rs/crates/pbkdf2/features#feature-sha1: sha1 is optional feature -  optional \n\u27e825\u27e9 https://lib.rs/crates/sha1: new - sha1\n\u27e826\u27e9 https://lib.rs/crates/hex-literal: new - hex-literal\n\u27e827\u27e9 https://lib.rs/crates/streebog: new - streebog\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3421,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118203.3595797"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libdigest-00f7ee8fd74c8d72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hmac@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hmac",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libhmac-b01742865ce542cd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphh8pg094/pbkdf2-0.13.0-rc.0#pbkdf2@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pbkdf2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "hmac"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libpbkdf2-b6d527d0fcc715cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libdigest-00f7ee8fd74c8d72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hmac@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hmac",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hmac-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libhmac-b01742865ce542cd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphh8pg094/pbkdf2-0.13.0-rc.0#pbkdf2@0.13.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pbkdf2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "hmac"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphh8pg094\\pbkdf2-0.13.0-rc.0\\target\\debug\\deps\\libpbkdf2-d723b1f110aec5c0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 30
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "pbkdf2",
          "version": "0.13.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\n[Settings](https://docs.rs/pbkdf2/latest/settings.html)\n[Help](https://docs.rs/pbkdf2/latest/help.html)\nSummary[Source](https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282)\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in [RFC 2898](https://tools.ietf.org/html/rfc2898).\n## [\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#examples)Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") and [`pbkdf2_hmac_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\") functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") and [`pbkdf2_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\") functions.\nThis crates also provides the high-level password-hashing API through the [`Pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\") struct and traits defined in the [`password-hash`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\") crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#structs)\n\n[Params](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html \"struct pbkdf2::Params\")\n    PBKDF2 params\n\n[Pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\")\n    PBKDF2 type for use with [`PasswordHasher`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html \"trait password_hash::traits::PasswordHasher\").\n## Enums[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#enums)\n\n[Algorithm](https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html \"enum pbkdf2::Algorithm\")\n    PBKDF2 variants.\n## Functions[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#functions)\n\n[pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\")\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\n[pbkdf2_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\")\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which returns an array instead of filling an input slice.\n\n[pbkdf2_hmac](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\")`hmac`\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\n[pbkdf2_hmac_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\")`hmac`\n    A variant of the [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") function which returns an array instead of filling an input slice.\n",
            "markdown_with_citations": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in RFC 2898\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use `pbkdf2_hmac`\u27e86\u27e9 and `pbkdf2_hmac_array`\u27e87\u27e9 functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use `pbkdf2`\u27e88\u27e9 and `pbkdf2_array`\u27e89\u27e9 functions.\nThis crates also provides the high-level password-hashing API through the `Pbkdf2`\u27e810\u27e9 struct and traits defined in the `password-hash`\u27e811\u27e9 crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nParams\u27e814\u27e9\n    PBKDF2 params\n\nPbkdf2\u27e810\u27e9\n    PBKDF2 type for use with `PasswordHasher`\u27e815\u27e9.\n## Enums\u00a7\u27e816\u27e9\n\nAlgorithm\u27e817\u27e9\n    PBKDF2 variants.\n## Functions\u00a7\u27e818\u27e9\n\npbkdf2\u27e88\u27e9\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\npbkdf2_array\u27e89\u27e9\n    A variant of the `pbkdf2`\u27e88\u27e9 function which returns an array instead of filling an input slice.\n\npbkdf2_hmac\u27e86\u27e9`hmac`\n    A variant of the `pbkdf2`\u27e88\u27e9 function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\npbkdf2_hmac_array\u27e87\u27e9`hmac`\n    A variant of the `pbkdf2_hmac`\u27e86\u27e9 function which returns an array instead of filling an input slice.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pbkdf2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pbkdf2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282: Source\n\u27e84\u27e9 https://tools.ietf.org/html/rfc2898: RFC 2898\n\u27e85\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html: fn pbkdf2::pbkdf2_hmac - `pbkdf2_hmac`\n\u27e87\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html: fn pbkdf2::pbkdf2_hmac_array - `pbkdf2_hmac_array`\n\u27e88\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html: fn pbkdf2::pbkdf2 - `pbkdf2`\n\u27e89\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html: fn pbkdf2::pbkdf2_array - `pbkdf2_array`\n\u27e810\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html: struct pbkdf2::Pbkdf2 - `Pbkdf2`\n\u27e811\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html: mod password_hash - `password-hash`\n\u27e812\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html: struct pbkdf2::Params - Params\n\u27e815\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html: trait password_hash::traits::PasswordHasher - `PasswordHasher`\n\u27e816\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#enums: \u00a7\n\u27e817\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html: enum pbkdf2::Algorithm - Algorithm\n\u27e818\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#functions: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "pbkdf2",
          "version": "0.13.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\n[Settings](https://docs.rs/pbkdf2/latest/settings.html)\n[Help](https://docs.rs/pbkdf2/latest/help.html)\nSummary[Source](https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282)\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in [RFC 2898](https://tools.ietf.org/html/rfc2898).\n## [\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#examples)Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") and [`pbkdf2_hmac_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\") functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") and [`pbkdf2_array`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\") functions.\nThis crates also provides the high-level password-hashing API through the [`Pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\") struct and traits defined in the [`password-hash`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\") crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#structs)\n\n[Params](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html \"struct pbkdf2::Params\")\n    PBKDF2 params\n\n[Pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html \"struct pbkdf2::Pbkdf2\")\n    PBKDF2 type for use with [`PasswordHasher`](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html \"trait password_hash::traits::PasswordHasher\").\n## Enums[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#enums)\n\n[Algorithm](https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html \"enum pbkdf2::Algorithm\")\n    PBKDF2 variants.\n## Functions[\u00a7](https://docs.rs/pbkdf2/latest/pbkdf2/#functions)\n\n[pbkdf2](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\")\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\n[pbkdf2_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html \"fn pbkdf2::pbkdf2_array\")\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which returns an array instead of filling an input slice.\n\n[pbkdf2_hmac](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\")`hmac`\n    A variant of the [`pbkdf2`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html \"fn pbkdf2::pbkdf2\") function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\n[pbkdf2_hmac_array](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html \"fn pbkdf2::pbkdf2_hmac_array\")`hmac`\n    A variant of the [`pbkdf2_hmac`](https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html \"fn pbkdf2::pbkdf2_hmac\") function which returns an array instead of filling an input slice.\n",
            "markdown_with_citations": "[](https://docs.rs/pbkdf2/latest/pbkdf2/all.html \"show sidebar\")\n# Crate pbkdf2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate implements the PBKDF2 key derivation function as specified in RFC 2898\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\nPBKDF2 is defined in terms of a keyed pseudo-random function (PRF). Most commonly HMAC is used as this PRF. In such cases you can use `pbkdf2_hmac`\u27e86\u27e9 and `pbkdf2_hmac_array`\u27e87\u27e9 functions. The former accepts a byte slice which gets filled with generated key, while the former returns an array with generated key of requested length.\n```\nuse hex_literal::hex;\nuse pbkdf2::{pbkdf2_hmac, pbkdf2_hmac_array};\nuse sha2::Sha256;\nlet password = b\"password\";\nlet salt = b\"salt\";\n// number of iterations\nlet n = 600_000;\n// Expected value of generated key\nlet expected = hex!(\"669cfe52482116fda1aa2cbe409b2f56c8e45637\");\nlet mut key1 = [0u8; 20];\npbkdf2_hmac::<Sha256>(password, salt, n, &mut key1);\nassert_eq!(key1, expected);\nlet key2 = pbkdf2_hmac_array::<Sha256, 20>(password, salt, n);\nassert_eq!(key2, expected);\n```\n\nIf you want to use a different PRF, then you can use `pbkdf2`\u27e88\u27e9 and `pbkdf2_array`\u27e89\u27e9 functions.\nThis crates also provides the high-level password-hashing API through the `Pbkdf2`\u27e810\u27e9 struct and traits defined in the `password-hash`\u27e811\u27e9 crate.\nAdd the following to your crate\u2019s `Cargo.toml` to import it:\n```\n[dependencies]\npbkdf2 = { version = \"0.12\", features = [\"simple\"] }\nrand_core = { version = \"0.6\", features = [\"std\"] }\n```\n\nThe following example demonstrates the high-level password hashing API:\n```\nuse pbkdf2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Pbkdf2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Hash password to PHC string ($pbkdf2-sha256$...)\nlet password_hash = Pbkdf2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Pbkdf2.verify_password(password, &parsed_hash).is_ok());\n```\n\n## Re-exports\u00a7\u27e812\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``simple`\n\n\n`pub use hmac[](https://docs.rs/hmac/0.12.1/x86_64-unknown-linux-gnu/hmac/index.html \"mod hmac\");`\n\n## Structs\u00a7\u27e813\u27e9\n\nParams\u27e814\u27e9\n    PBKDF2 params\n\nPbkdf2\u27e810\u27e9\n    PBKDF2 type for use with `PasswordHasher`\u27e815\u27e9.\n## Enums\u00a7\u27e816\u27e9\n\nAlgorithm\u27e817\u27e9\n    PBKDF2 variants.\n## Functions\u00a7\u27e818\u27e9\n\npbkdf2\u27e88\u27e9\n    Generic implementation of PBKDF2 algorithm which accepts an arbitrary keyed PRF.\n\npbkdf2_array\u27e89\u27e9\n    A variant of the `pbkdf2`\u27e88\u27e9 function which returns an array instead of filling an input slice.\n\npbkdf2_hmac\u27e86\u27e9`hmac`\n    A variant of the `pbkdf2`\u27e88\u27e9 function which uses HMAC for PRF. It\u2019s generic over (eager) hash functions.\n\npbkdf2_hmac_array\u27e87\u27e9`hmac`\n    A variant of the `pbkdf2_hmac`\u27e86\u27e9 function which returns an array instead of filling an input slice.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pbkdf2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pbkdf2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pbkdf2/latest/src/pbkdf2/lib.rs.html#1-282: Source\n\u27e84\u27e9 https://tools.ietf.org/html/rfc2898: RFC 2898\n\u27e85\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac.html: fn pbkdf2::pbkdf2_hmac - `pbkdf2_hmac`\n\u27e87\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_hmac_array.html: fn pbkdf2::pbkdf2_hmac_array - `pbkdf2_hmac_array`\n\u27e88\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2.html: fn pbkdf2::pbkdf2 - `pbkdf2`\n\u27e89\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/fn.pbkdf2_array.html: fn pbkdf2::pbkdf2_array - `pbkdf2_array`\n\u27e810\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Pbkdf2.html: struct pbkdf2::Pbkdf2 - `Pbkdf2`\n\u27e811\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html: mod password_hash - `password-hash`\n\u27e812\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#reexports: \u00a7\n\u27e813\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/struct.Params.html: struct pbkdf2::Params - Params\n\u27e815\u27e9 https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/traits/trait.PasswordHasher.html: trait password_hash::traits::PasswordHasher - `PasswordHasher`\n\u27e816\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#enums: \u00a7\n\u27e817\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/enum.Algorithm.html: enum pbkdf2::Algorithm - Algorithm\n\u27e818\u27e9 https://docs.rs/pbkdf2/latest/pbkdf2/#functions: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `pbkdf2` crate implements the PBKDF2 key derivation function as specified in RFC 2898, supporting both generic pseudo-random functions (PRFs) and HMAC-based PRFs. It provides flexible APIs for generating derived keys as slices or arrays, as well as a high-level password hashing interface compatible with the `password-hash` crate. Additionally, it includes utilities for secure password verification and supports customization of hashing parameters.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Key Derivation Functions\n\u2705 Factual: The `pbkdf2` crate provides the `pbkdf2_hmac` function, which uses HMAC as the pseudo-random function (PRF) for key derivation, and is generic over hash functions like `Sha256`.  \n\u274c Counterfactual: The `pbkdf2` crate only supports the `Sha256` hash function for its key derivation functions and does not allow other hash algorithms as PRFs.  \n\n---\n\n### Pair 2: Password Hashing API\n\u2705 Factual: The `pbkdf2` crate includes a high-level password hashing API through the `Pbkdf2` struct, which integrates with the `password-hash` crate for secure password storage and verification.  \n\u274c Counterfactual: The `pbkdf2` crate requires manual implementation of password hashing and does not offer integration with any external crates for high-level password management.  \n\n---\n\n### Pair 3: Performance Characteristics\n\u2705 Factual: The `pbkdf2` crate supports configuring the number of iterations for the PBKDF2 algorithm, allowing users to balance security and performance based on their needs.  \n\u274c Counterfactual: The `pbkdf2` crate has a fixed number of iterations for the PBKDF2 algorithm and does not allow customization for different security requirements.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-c6130b85-0545c694-1751264412",
      "timestamp": "2025-06-30T06:20:12.244022+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]