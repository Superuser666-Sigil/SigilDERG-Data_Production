[
  {
    "execution_id": "exec-5335cccc-d5d37fbd-1751258875",
    "timestamp": "2025-06-30T04:47:55.593399+00:00",
    "sacred_chain": {
      "input_data": "pin-project-lite",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'pin-project-lite' -> 'pin-project-lite'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "pin-project-lite",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/pin-project-lite",
            "title": "pin-project-lite v0.2.16",
            "content": {
              "raw_markdown": "#  pin-project-lite v0.2.16\nA lightweight version of pin-project written with declarative macros. \n  * [ #macros ](https://crates.io/keywords/macros)\n  * [ #pin ](https://crates.io/keywords/pin)\n\n\n  * [ Readme ](https://crates.io/crates/pin-project-lite)\n  * [ 30 Versions ](https://crates.io/crates/pin-project-lite/versions)\n  * [ Dependencies ](https://crates.io/crates/pin-project-lite/dependencies)\n  * [ Dependents ](https://crates.io/crates/pin-project-lite/reverse_dependencies)\n\n\n## Metadata\n6 months ago \nv1.37.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n29.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pin-project-lite\nOr add the following line to your Cargo.toml:\npin-project-lite = \"0.2.16\"\n## Repository\n[ github.com/taiki-e/pin-project-lite ](https://github.com/taiki-e/pin-project-lite)\n## Owners\n## Categories\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n\n\n[ Report crate ](https://crates.io/support?crate=pin-project-lite&inquire=crate-violation)\n### Stats Overview\n365,433,050 Downloads all time\n30 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  pin-project-lite v0.2.16\nA lightweight version of pin-project written with declarative macros. \n  *  #macros \u27e81\u27e9\n  *  #pin \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  30 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n6 months ago \nv1.37.0 \n Apache-2.0 \u27e87\u27e9 OR  MIT \u27e88\u27e9\n29.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add pin-project-lite\nOr add the following line to your Cargo.toml:\npin-project-lite = \"0.2.16\"\n## Repository\n github.com/taiki-e/pin-project-lite \u27e89\u27e9\n## Owners\n## Categories\n  * Rust patterns\u27e810\u27e9\n  * No standard library\u27e811\u27e9\n  * No dynamic allocation\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n365,433,050 Downloads all time\n30 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/macros:  #macros \n\u27e82\u27e9 https://crates.io/keywords/pin:  #pin \n\u27e83\u27e9 https://crates.io/crates/pin-project-lite:  Readme \n\u27e84\u27e9 https://crates.io/crates/pin-project-lite/versions:  30 Versions \n\u27e85\u27e9 https://crates.io/crates/pin-project-lite/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/pin-project-lite/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://github.com/taiki-e/pin-project-lite:  github.com/taiki-e/pin-project-lite \n\u27e810\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e811\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e812\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e813\u27e9 https://crates.io/support?crate=pin-project-lite&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1407,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112665.0608372"
          },
          "docs_rs": {
            "url": "https://docs.rs/pin-project-lite",
            "title": "Crate pin_project_liteCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\n[Settings](https://docs.rs/pin-project-lite/latest/settings.html)\n[Help](https://docs.rs/pin-project-lite/latest/help.html)\nSummary[Source](https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766)\nExpand description\nA lightweight version of [pin-project](https://github.com/taiki-e/pin-project) written with declarative macros.\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples)Examples\n[`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use [`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite)[pin-project](https://github.com/taiki-e/pin-project) vs pin-project-lite\nHere are some similarities and differences compared to [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety)Similar: Safety\npin-project-lite guarantees safety in much the same way as [pin-project](https://github.com/taiki-e/pin-project). Both are completely safe unless you write other unsafe code.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design)Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as [pin-project](https://github.com/taiki-e/pin-project) does. If your use case is not already covered, please use [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies)Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between [pin-project](https://github.com/taiki-e/pin-project) and pin-project-lite.)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages)Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to [pin-project](https://github.com/taiki-e/pin-project) to receive a helpful description of the compile error.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation)Different: No support for custom Unpin implementation\npin-project supports this by [`UnsafeUnpin`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin). (`!Unpin` is supported by both [pin-project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin) and [pin-project-lite](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin \"macro pin_project_lite::pin_project\").)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants)Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros[\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros)\n\n[pin_project](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\")\n    A macro that creates a projection type covering all the fields of struct.\n",
              "markdown_with_citations": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA lightweight version of pin-project\u27e84\u27e9 written with declarative macros.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n`pin_project!`\u27e87\u27e9 macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use `pin_project!`\u27e87\u27e9 on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### \u00a7\u27e88\u27e9pin-project\u27e84\u27e9 vs pin-project-lite\nHere are some similarities and differences compared to pin-project\u27e84\u27e9.\n#### \u00a7\u27e89\u27e9Similar: Safety\npin-project-lite guarantees safety in much the same way as pin-project\u27e84\u27e9. Both are completely safe unless you write other unsafe code.\n#### \u00a7\u27e810\u27e9Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as pin-project\u27e84\u27e9 does. If your use case is not already covered, please use pin-project\u27e84\u27e9.\n#### \u00a7\u27e811\u27e9Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between pin-project\u27e84\u27e9 and pin-project-lite.)\n#### \u00a7\u27e812\u27e9Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to pin-project\u27e84\u27e9 to receive a helpful description of the compile error.\n#### \u00a7\u27e813\u27e9Different: No support for custom Unpin implementation\npin-project supports this by `UnsafeUnpin`\u27e814\u27e9. (`!Unpin` is supported by both pin-project\u27e815\u27e9 and pin-project-lite\u27e816\u27e9.)\n#### \u00a7\u27e817\u27e9Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros\u00a7\u27e818\u27e9\n\npin_project\u27e87\u27e9\n    A macro that creates a projection type covering all the fields of struct.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project-lite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project-lite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766: Source\n\u27e84\u27e9 https://github.com/taiki-e/pin-project: pin-project\n\u27e85\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples: \u00a7\n\u27e87\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html: macro pin_project_lite::pin_project - `pin_project!`\n\u27e88\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite: \u00a7\n\u27e89\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety: \u00a7\n\u27e810\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design: \u00a7\n\u27e811\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies: \u00a7\n\u27e812\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation: \u00a7\n\u27e814\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin: `UnsafeUnpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin: pin-project\n\u27e816\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin: macro pin_project_lite::pin_project - pin-project-lite\n\u27e817\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants: \u00a7\n\u27e818\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4846,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112665.7628934"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/pin-project-lite",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [13 releases](https://lib.rs/crates/pin-project-lite/versions)\n0.2.16 |  Jan 6, 2025   \n---|---  \n0.2.15 |  Oct 24, 2024   \n0.2.14 |  Mar 29, 2024   \n0.2.13 |  Aug 25, 2023   \n0.1.1 |  ~~Nov 15, 2019~~  \n#**44** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 3417740/week @ 2025-02-09 3398140/week @ 2025-02-16 3499330/week @ 2025-02-23 3800443/week @ 2025-03-02 3959632/week @ 2025-03-09 4256205/week @ 2025-03-16 4324526/week @ 2025-03-23 3898156/week @ 2025-03-30 4130260/week @ 2025-04-06 3707525/week @ 2025-04-13 3644075/week @ 2025-04-20 3640944/week @ 2025-04-27 3689370/week @ 2025-05-04 3792864/week @ 2025-05-11 3906184/week @ 2025-05-18 3281183/week @ 2025-05-25\n**14,921,571** downloads per month Used in [**52,348** crates (949 directly)](https://lib.rs/crates/pin-project-lite/rev)\n**Apache-2.0 OR MIT**\n70KB  1K  SLoC\n# pin-project-lite\n[![crates.io](https://img.shields.io/crates/v/pin-project-lite?style=flat-square&logo=rust)](https://crates.io/crates/pin-project-lite) [![docs.rs](https://img.shields.io/badge/docs.rs-pin--project--lite-blue?style=flat-square&logo=docs.rs)](https://docs.rs/pin-project-lite) [![license](https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue?style=flat-square)](https://lib.rs/crates/pin-project-lite#readme-license) [![msrv](https://img.shields.io/badge/msrv-1.37-blue?style=flat-square&logo=rust)](https://www.rust-lang.org) [![github actions](https://img.shields.io/github/actions/workflow/status/taiki-e/pin-project-lite/ci.yml?branch=main&style=flat-square&logo=github)](https://github.com/taiki-e/pin-project-lite/actions)\nA lightweight version of [pin-project](https://github.com/taiki-e/pin-project) written with declarative macros.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pin-project-lite ``=` ``\"`0.2`\"``\n``\n```\n\n## Examples\n[``pin_project!``](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html) macro creates a projection type covering all the fields of struct.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project_lite`::``pin_project`;`\n`pin_project!` ``{`\n  ``struct` ````Struct``<`T, U`>`````{`\n    ``#``[``pin``]``\n    `pinned``:` T,\n    `unpinned``:` U,\n  `}``\n```}``\n``impl`````<`T, U`>```` `Struct```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `let` this `=` `self``.``project``(``)``;`\n    `let` `_``:` `Pin`<``&``mut` T`>`` `=` this`.`pinned`;` ``//` Pinned reference to the field`\n    `let` `_``:` `&``mut` U `=` this`.`unpinned`;` ``//` Normal reference to the field`\n  `}``\n```}```\n`\n```\n\nTo use [``pin_project!``](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html) on enums, you need to name the projection type returned from the method.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project_lite`::``pin_project`;`\n`pin_project!` ``{`\n  ``#``[``project` `=` `EnumProj``]``\n  ``enum` `Enum`<T, U> `{`\n    Variant `{` ``#``[``pin``]`` pinned`:` T`,` unpinned`:` U `}``,`\n  `}``\n```}``\n``impl`````<`T, U`>```` `Enum```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `match` `self``.``project``(``)` `{`\n      `EnumProj`::``Variant `{` pinned`,` unpinned `}` `=>` `{`\n        `let` `_``:` `Pin`<``&``mut` T`>`` `=` pinned`;`\n        `let` `_``:` `&``mut` U `=` unpinned`;`\n      `}`\n    `}`\n  `}``\n```}```\n`\n```\n\n## [pin-project](https://github.com/taiki-e/pin-project) vs pin-project-lite\nHere are some similarities and differences compared to [pin-project](https://github.com/taiki-e/pin-project).\n### Similar: Safety\npin-project-lite guarantees safety in much the same way as [pin-project](https://github.com/taiki-e/pin-project). Both are completely safe unless you write other unsafe code.\n### Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as [pin-project](https://github.com/taiki-e/pin-project) does. If your use case is not already covered, please use [pin-project](https://github.com/taiki-e/pin-project).\n### Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate's dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between [pin-project](https://github.com/taiki-e/pin-project) and pin-project-lite.)\n### Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to [pin-project](https://github.com/taiki-e/pin-project) to receive a helpful description of the compile error.\n### Different: No support for custom Unpin implementation\npin-project supports this by [``UnsafeUnpin``](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin). (```!`Unpin`` is supported by both [pin-project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin) and [pin-project-lite](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin).)\n### Different: No support for tuple structs and tuple variants\npin-project supports this.\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/taiki-e/pin-project-lite/blob/cca1e8ae094ceff53e74abbfec8c9f2221ebd202/LICENSE-APACHE) or [MIT license](https://github.com/taiki-e/pin-project-lite/blob/cca1e8ae094ceff53e74abbfec8c9f2221ebd202/LICENSE-MIT) at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### No runtime deps\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1\")\n  * dev  [static_assertions](https://lib.rs/crates/static_assertions \"1\")\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  13 releases\u27e81\u27e9\n0.2.16 |  Jan 6, 2025   \n---|---  \n0.2.15 |  Oct 24, 2024   \n0.2.14 |  Mar 29, 2024   \n0.2.13 |  Aug 25, 2023   \n0.1.1 |  ~~Nov 15, 2019~~  \n#**44** in Rust patterns\u27e82\u27e9\nDownload history 3417740/week @ 2025-02-09 3398140/week @ 2025-02-16 3499330/week @ 2025-02-23 3800443/week @ 2025-03-02 3959632/week @ 2025-03-09 4256205/week @ 2025-03-16 4324526/week @ 2025-03-23 3898156/week @ 2025-03-30 4130260/week @ 2025-04-06 3707525/week @ 2025-04-13 3644075/week @ 2025-04-20 3640944/week @ 2025-04-27 3689370/week @ 2025-05-04 3792864/week @ 2025-05-11 3906184/week @ 2025-05-18 3281183/week @ 2025-05-25\n**14,921,571** downloads per month Used in **52,348** crates (949 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n70KB  1K  SLoC\n# pin-project-lite\n![crates.io\u27e84\u27e9](https://crates.io/crates/pin-project-lite) ![docs.rs\u27e85\u27e9](https://docs.rs/pin-project-lite) ![license\u27e86\u27e9](https://lib.rs/crates/pin-project-lite#readme-license) ![msrv\u27e87\u27e9](https://www.rust-lang.org) ![github actions\u27e88\u27e9](https://github.com/taiki-e/pin-project-lite/actions)\nA lightweight version of pin-project\u27e89\u27e9 written with declarative macros.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`pin-project-lite ``=` ``\"`0.2`\"``\n``\n```\n\n## Examples\n``pin_project!``\u27e810\u27e9 macro creates a projection type covering all the fields of struct.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project_lite`::``pin_project`;`\n`pin_project!` ``{`\n  ``struct` ````Struct``<`T, U`>`````{`\n    ``#``[``pin``]``\n    `pinned``:` T,\n    `unpinned``:` U,\n  `}``\n```}``\n``impl`````<`T, U`>```` `Struct```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `let` this `=` `self``.``project``(``)``;`\n    `let` `_``:` `Pin`<``&``mut` T`>`` `=` this`.`pinned`;` ``//` Pinned reference to the field`\n    `let` `_``:` `&``mut` U `=` this`.`unpinned`;` ``//` Normal reference to the field`\n  `}``\n```}```\n`\n```\n\nTo use ``pin_project!``\u27e810\u27e9 on enums, you need to name the projection type returned from the method.\n```\n``use` `std`::```pin`::``Pin`;`\n`use` `pin_project_lite`::``pin_project`;`\n`pin_project!` ``{`\n  ``#``[``project` `=` `EnumProj``]``\n  ``enum` `Enum`<T, U> `{`\n    Variant `{` ``#``[``pin``]`` pinned`:` T`,` unpinned`:` U `}``,`\n  `}``\n```}``\n``impl`````<`T, U`>```` `Enum```<`T, U`>`` ````{`\n  ``fn` `method`````(``self`: `Pin`<``&``mut` `Self``>`````)`````{`\n    `match` `self``.``project``(``)` `{`\n      `EnumProj`::``Variant `{` pinned`,` unpinned `}` `=>` `{`\n        `let` `_``:` `Pin`<``&``mut` T`>`` `=` pinned`;`\n        `let` `_``:` `&``mut` U `=` unpinned`;`\n      `}`\n    `}`\n  `}``\n```}```\n`\n```\n\n## pin-project\u27e89\u27e9 vs pin-project-lite\nHere are some similarities and differences compared to pin-project\u27e89\u27e9.\n### Similar: Safety\npin-project-lite guarantees safety in much the same way as pin-project\u27e89\u27e9. Both are completely safe unless you write other unsafe code.\n### Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as pin-project\u27e89\u27e9 does. If your use case is not already covered, please use pin-project\u27e89\u27e9.\n### Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate's dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between pin-project\u27e89\u27e9 and pin-project-lite.)\n### Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to pin-project\u27e89\u27e9 to receive a helpful description of the compile error.\n### Different: No support for custom Unpin implementation\npin-project supports this by ``UnsafeUnpin``\u27e811\u27e9. (```!`Unpin`` is supported by both pin-project\u27e812\u27e9 and pin-project-lite\u27e813\u27e9.)\n### Different: No support for tuple structs and tuple variants\npin-project supports this.\n## License\nLicensed under either of Apache License, Version 2.0\u27e814\u27e9 or MIT license\u27e815\u27e9 at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### No runtime deps\n  * dev  rustversion\u27e816\u27e9\n  * dev  static_assertions\u27e817\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/pin-project-lite/versions: 13 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/pin-project-lite/rev: **52,348** crates (949 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/pin-project-lite?style=flat-square&logo=rust: ![crates.io\n\u27e85\u27e9 https://img.shields.io/badge/docs.rs-pin--project--lite-blue?style=flat-square&logo=docs.rs: ![docs.rs\n\u27e86\u27e9 https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue?style=flat-square: ![license\n\u27e87\u27e9 https://img.shields.io/badge/msrv-1.37-blue?style=flat-square&logo=rust: ![msrv\n\u27e88\u27e9 https://img.shields.io/github/actions/workflow/status/taiki-e/pin-project-lite/ci.yml?branch=main&style=flat-square&logo=github: ![github actions\n\u27e89\u27e9 https://github.com/taiki-e/pin-project: pin-project\n\u27e810\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html: ``pin_project!``\n\u27e811\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin: ``UnsafeUnpin``\n\u27e812\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin: pin-project\n\u27e813\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin: pin-project-lite\n\u27e814\u27e9 https://github.com/taiki-e/pin-project-lite/blob/cca1e8ae094ceff53e74abbfec8c9f2221ebd202/LICENSE-APACHE: Apache License, Version 2.0\n\u27e815\u27e9 https://github.com/taiki-e/pin-project-lite/blob/cca1e8ae094ceff53e74abbfec8c9f2221ebd202/LICENSE-MIT: MIT license\n\u27e816\u27e9 https://lib.rs/crates/rustversion: 1 - rustversion\n\u27e817\u27e9 https://lib.rs/crates/static_assertions: 1 - static_assertions\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6108,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112666.6495895"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpzb_jwc0t/pin-project-lite-0.2.16#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\target\\debug\\deps\\libpin_project_lite-f7fcdd66865960d3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpzb_jwc0t/pin-project-lite-0.2.16#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpzb_jwc0t\\pin-project-lite-0.2.16\\target\\debug\\deps\\libpin_project_lite-7e88996d0df700d3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 3
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "pin-project-lite",
          "version": "0.2.16",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\n[Settings](https://docs.rs/pin-project-lite/latest/settings.html)\n[Help](https://docs.rs/pin-project-lite/latest/help.html)\nSummary[Source](https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766)\nExpand description\nA lightweight version of [pin-project](https://github.com/taiki-e/pin-project) written with declarative macros.\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples)Examples\n[`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use [`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite)[pin-project](https://github.com/taiki-e/pin-project) vs pin-project-lite\nHere are some similarities and differences compared to [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety)Similar: Safety\npin-project-lite guarantees safety in much the same way as [pin-project](https://github.com/taiki-e/pin-project). Both are completely safe unless you write other unsafe code.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design)Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as [pin-project](https://github.com/taiki-e/pin-project) does. If your use case is not already covered, please use [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies)Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between [pin-project](https://github.com/taiki-e/pin-project) and pin-project-lite.)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages)Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to [pin-project](https://github.com/taiki-e/pin-project) to receive a helpful description of the compile error.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation)Different: No support for custom Unpin implementation\npin-project supports this by [`UnsafeUnpin`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin). (`!Unpin` is supported by both [pin-project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin) and [pin-project-lite](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin \"macro pin_project_lite::pin_project\").)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants)Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros[\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros)\n\n[pin_project](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\")\n    A macro that creates a projection type covering all the fields of struct.\n",
            "markdown_with_citations": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA lightweight version of pin-project\u27e84\u27e9 written with declarative macros.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n`pin_project!`\u27e87\u27e9 macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use `pin_project!`\u27e87\u27e9 on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### \u00a7\u27e88\u27e9pin-project\u27e84\u27e9 vs pin-project-lite\nHere are some similarities and differences compared to pin-project\u27e84\u27e9.\n#### \u00a7\u27e89\u27e9Similar: Safety\npin-project-lite guarantees safety in much the same way as pin-project\u27e84\u27e9. Both are completely safe unless you write other unsafe code.\n#### \u00a7\u27e810\u27e9Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as pin-project\u27e84\u27e9 does. If your use case is not already covered, please use pin-project\u27e84\u27e9.\n#### \u00a7\u27e811\u27e9Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between pin-project\u27e84\u27e9 and pin-project-lite.)\n#### \u00a7\u27e812\u27e9Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to pin-project\u27e84\u27e9 to receive a helpful description of the compile error.\n#### \u00a7\u27e813\u27e9Different: No support for custom Unpin implementation\npin-project supports this by `UnsafeUnpin`\u27e814\u27e9. (`!Unpin` is supported by both pin-project\u27e815\u27e9 and pin-project-lite\u27e816\u27e9.)\n#### \u00a7\u27e817\u27e9Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros\u00a7\u27e818\u27e9\n\npin_project\u27e87\u27e9\n    A macro that creates a projection type covering all the fields of struct.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project-lite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project-lite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766: Source\n\u27e84\u27e9 https://github.com/taiki-e/pin-project: pin-project\n\u27e85\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples: \u00a7\n\u27e87\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html: macro pin_project_lite::pin_project - `pin_project!`\n\u27e88\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite: \u00a7\n\u27e89\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety: \u00a7\n\u27e810\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design: \u00a7\n\u27e811\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies: \u00a7\n\u27e812\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation: \u00a7\n\u27e814\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin: `UnsafeUnpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin: pin-project\n\u27e816\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin: macro pin_project_lite::pin_project - pin-project-lite\n\u27e817\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants: \u00a7\n\u27e818\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "pin-project-lite",
          "version": "0.2.16",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\n[Settings](https://docs.rs/pin-project-lite/latest/settings.html)\n[Help](https://docs.rs/pin-project-lite/latest/help.html)\nSummary[Source](https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766)\nExpand description\nA lightweight version of [pin-project](https://github.com/taiki-e/pin-project) written with declarative macros.\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples)Examples\n[`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use [`pin_project!`](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\") on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite)[pin-project](https://github.com/taiki-e/pin-project) vs pin-project-lite\nHere are some similarities and differences compared to [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety)Similar: Safety\npin-project-lite guarantees safety in much the same way as [pin-project](https://github.com/taiki-e/pin-project). Both are completely safe unless you write other unsafe code.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design)Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as [pin-project](https://github.com/taiki-e/pin-project) does. If your use case is not already covered, please use [pin-project](https://github.com/taiki-e/pin-project).\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies)Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between [pin-project](https://github.com/taiki-e/pin-project) and pin-project-lite.)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages)Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to [pin-project](https://github.com/taiki-e/pin-project) to receive a helpful description of the compile error.\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation)Different: No support for custom Unpin implementation\npin-project supports this by [`UnsafeUnpin`](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin). (`!Unpin` is supported by both [pin-project](https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin) and [pin-project-lite](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin \"macro pin_project_lite::pin_project\").)\n#### [\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants)Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros[\u00a7](https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros)\n\n[pin_project](https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html \"macro pin_project_lite::pin_project\")\n    A macro that creates a projection type covering all the fields of struct.\n",
            "markdown_with_citations": "[](https://docs.rs/pin-project-lite/latest/pin_project_lite/all.html \"show sidebar\")\n# Crate pin_project_liteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA lightweight version of pin-project\u27e84\u27e9 written with declarative macros.\n### \u00a7\u27e85\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\npin-project-lite = \"0.2\"\n```\n\n### \u00a7\u27e86\u27e9Examples\n`pin_project!`\u27e87\u27e9 macro creates a projection type covering all the fields of struct.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  struct Struct<T, U> {\n    #[pin]\n    pinned: T,\n    unpinned: U,\n  }\n}\nimpl<T, U> Struct<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    let this = self.project();\n    let _: Pin<&mut T> = this.pinned; // Pinned reference to the field\n    let _: &mut U = this.unpinned; // Normal reference to the field\n  }\n}\n```\n\nTo use `pin_project!`\u27e87\u27e9 on enums, you need to name the projection type returned from the method.\n```\nuse std::pin::Pin;\nuse pin_project_lite::pin_project;\npin_project! {\n  #[project = EnumProj]\n  enum Enum<T, U> {\n    Variant { #[pin] pinned: T, unpinned: U },\n  }\n}\nimpl<T, U> Enum<T, U> {\n  fn method(self: Pin<&mut Self>) {\n    match self.project() {\n      EnumProj::Variant { pinned, unpinned } => {\n        let _: Pin<&mut T> = pinned;\n        let _: &mut U = unpinned;\n      }\n    }\n  }\n}\n```\n\n### \u00a7\u27e88\u27e9pin-project\u27e84\u27e9 vs pin-project-lite\nHere are some similarities and differences compared to pin-project\u27e84\u27e9.\n#### \u00a7\u27e89\u27e9Similar: Safety\npin-project-lite guarantees safety in much the same way as pin-project\u27e84\u27e9. Both are completely safe unless you write other unsafe code.\n#### \u00a7\u27e810\u27e9Different: Minimal design\nThis library does not tackle as expansive of a range of use cases as pin-project\u27e84\u27e9 does. If your use case is not already covered, please use pin-project\u27e84\u27e9.\n#### \u00a7\u27e811\u27e9Different: No proc-macro related dependencies\nThis is the **only** reason to use this crate. However, **if you already have proc-macro related dependencies in your crate\u2019s dependency graph, there is no benefit from using this crate.** (Note: There is almost no difference in the amount of code generated between pin-project\u27e84\u27e9 and pin-project-lite.)\n#### \u00a7\u27e812\u27e9Different: No useful error messages\nThis macro does not handle any invalid input. So error messages are not to be useful in most cases. If you do need useful error messages, then upon error you can pass the same input to pin-project\u27e84\u27e9 to receive a helpful description of the compile error.\n#### \u00a7\u27e813\u27e9Different: No support for custom Unpin implementation\npin-project supports this by `UnsafeUnpin`\u27e814\u27e9. (`!Unpin` is supported by both pin-project\u27e815\u27e9 and pin-project-lite\u27e816\u27e9.)\n#### \u00a7\u27e817\u27e9Different: No support for tuple structs and tuple variants\npin-project supports this.\n## Macros\u00a7\u27e818\u27e9\n\npin_project\u27e87\u27e9\n    A macro that creates a projection type covering all the fields of struct.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/pin-project-lite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/pin-project-lite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/pin-project-lite/latest/src/pin_project_lite/lib.rs.html#3-1766: Source\n\u27e84\u27e9 https://github.com/taiki-e/pin-project: pin-project\n\u27e85\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#usage: \u00a7\n\u27e86\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#examples: \u00a7\n\u27e87\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html: macro pin_project_lite::pin_project - `pin_project!`\n\u27e88\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#pin-project-vs-pin-project-lite: \u00a7\n\u27e89\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#similar-safety: \u00a7\n\u27e810\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-minimal-design: \u00a7\n\u27e811\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-proc-macro-related-dependencies: \u00a7\n\u27e812\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-useful-error-messages: \u00a7\n\u27e813\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-custom-unpin-implementation: \u00a7\n\u27e814\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unsafeunpin: `UnsafeUnpin`\n\u27e815\u27e9 https://docs.rs/pin-project/latest/pin_project/attr.pin_project.html#unpin: pin-project\n\u27e816\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/macro.pin_project.html#unpin: macro pin_project_lite::pin_project - pin-project-lite\n\u27e817\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#different-no-support-for-tuple-structs-and-tuple-variants: \u00a7\n\u27e818\u27e9 https://docs.rs/pin-project-lite/latest/pin_project_lite/#macros: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `pin-project-lite` crate provides a lightweight, declarative macro (`pin_project!`) for safely projecting pinned and unpinned fields in structs and enums. It is designed with minimal dependencies, avoiding proc-macro-related overhead, and is ideal for simple use cases where advanced features like custom `Unpin` implementations or support for tuple structs/variants are not required. While it guarantees safety similar to the `pin-project` crate, it lacks detailed error messages and broader functionality.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Safety Guarantees  \n\u2705 Factual: `pin-project-lite` guarantees safety in much the same way as `pin-project`, ensuring that pinning operations are safe unless other unsafe code is introduced.  \n\u274c Counterfactual: `pin-project-lite` requires additional unsafe code to ensure safety when projecting pinned fields.  \n\n---\n\n### Pair 2: Dependencies  \n\u2705 Factual: `pin-project-lite` does not rely on proc-macro-related dependencies, making it a lightweight alternative to `pin-project` for projects without such dependencies.  \n\u274c Counterfactual: `pin-project-lite` requires proc-macro-related dependencies to function, similar to `pin-project`.  \n\n---\n\n### Pair 3: Error Messages  \n\u2705 Factual: `pin-project-lite` does not provide useful error messages for invalid input, making debugging more challenging compared to `pin-project`.  \n\u274c Counterfactual: `pin-project-lite` provides detailed and helpful error messages for invalid input, similar to `pin-project`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-5335cccc-d5d37fbd-1751258875",
      "timestamp": "2025-06-30T04:47:55.593399+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]