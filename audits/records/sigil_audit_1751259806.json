[
  {
    "execution_id": "exec-4bc96d95-42432372-1751259795",
    "timestamp": "2025-06-30T05:03:15.900560+00:00",
    "sacred_chain": {
      "input_data": "derive_more",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'derive_more' -> 'derive_more'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "derive_more",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/derive_more",
            "title": "derive_more v2.0.1",
            "content": {
              "raw_markdown": "#  derive_more v2.0.1\nAdds #[derive(x)] macros for more traits \n  * [ #add ](https://crates.io/keywords/add)\n  * [ #derive ](https://crates.io/keywords/derive)\n  * [ #display ](https://crates.io/keywords/display)\n  * [ #from ](https://crates.io/keywords/from)\n  * [ #intoiterator ](https://crates.io/keywords/intoiterator)\n\n\n  * [ Readme ](https://crates.io/crates/derive_more)\n  * [ 49 Versions ](https://crates.io/crates/derive_more/versions)\n  * [ Dependencies ](https://crates.io/crates/derive_more/dependencies)\n  * [ Dependents ](https://crates.io/crates/derive_more/reverse_dependencies)\n\n\n## Metadata\n5 months ago \nv1.75.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n68.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add derive_more\nOr add the following line to your Cargo.toml:\nderive_more = \"2.0.1\"\n## Documentation\n[ jeltef.github.io/derive_more/derive_more ](https://jeltef.github.io/derive_more/derive_more/)\n## Repository\n[ github.com/JelteF/derive_more ](https://github.com/JelteF/derive_more)\n## Owners\n## Categories\n  * [Procedural macro helpers](https://crates.io/categories/development-tools::procedural-macro-helpers)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Development tools](https://crates.io/categories/development-tools)\n\n\n[ Report crate ](https://crates.io/support?crate=derive_more&inquire=crate-violation)\n### Stats Overview\n146,365,903 Downloads all time\n49 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  derive_more v2.0.1\nAdds #[derive(x)] macros for more traits \n  *  #add \u27e81\u27e9\n  *  #derive \u27e82\u27e9\n  *  #display \u27e83\u27e9\n  *  #from \u27e84\u27e9\n  *  #intoiterator \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  49 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n5 months ago \nv1.75.0 \n MIT \u27e810\u27e9\n68.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add derive_more\nOr add the following line to your Cargo.toml:\nderive_more = \"2.0.1\"\n## Documentation\n jeltef.github.io/derive_more/derive_more \u27e811\u27e9\n## Repository\n github.com/JelteF/derive_more \u27e812\u27e9\n## Owners\n## Categories\n  * Procedural macro helpers\u27e813\u27e9\n  * No standard library\u27e814\u27e9\n  * Development tools\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n146,365,903 Downloads all time\n49 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/add:  #add \n\u27e82\u27e9 https://crates.io/keywords/derive:  #derive \n\u27e83\u27e9 https://crates.io/keywords/display:  #display \n\u27e84\u27e9 https://crates.io/keywords/from:  #from \n\u27e85\u27e9 https://crates.io/keywords/intoiterator:  #intoiterator \n\u27e86\u27e9 https://crates.io/crates/derive_more:  Readme \n\u27e87\u27e9 https://crates.io/crates/derive_more/versions:  49 Versions \n\u27e88\u27e9 https://crates.io/crates/derive_more/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/derive_more/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://jeltef.github.io/derive_more/derive_more/:  jeltef.github.io/derive_more/derive_more \n\u27e812\u27e9 https://github.com/JelteF/derive_more:  github.com/JelteF/derive_more \n\u27e813\u27e9 https://crates.io/categories/development-tools::procedural-macro-helpers: Procedural macro helpers\n\u27e814\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e815\u27e9 https://crates.io/categories/development-tools: Development tools\n\u27e816\u27e9 https://crates.io/support?crate=derive_more&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1572,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113585.429064"
          },
          "docs_rs": {
            "url": "https://docs.rs/derive_more",
            "title": "Crate derive_moreCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\n[Settings](https://docs.rs/derive_more/latest/settings.html)\n[Help](https://docs.rs/derive_more/latest/help.html)\nSummary[Source](https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463)\nExpand description\n## [\u00a7](https://docs.rs/derive_more/latest/derive_more/#derive_more)`derive_more`\n[![Build Status](https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg)](https://github.com/JelteF/derive_more/actions) [![Latest Version](https://img.shields.io/crates/v/derive_more.svg)](https://crates.io/crates/derive_more) [![Rust Documentation](https://docs.rs/derive_more/badge.svg)](https://docs.rs/derive_more) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) [![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) [![Unsafe Forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#example-code)Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits)The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the [`cargo-expand`](https://github.com/dtolnay/cargo-expand) utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#conversion-traits)Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. [`From`](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n  2. [`Into`](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n  3. [`FromStr`](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n  4. [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n  5. [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n  6. [`IntoIterator`](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n  7. [`AsRef`](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\"), [`AsMut`](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html)\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#formatting-traits)Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. [`Debug`](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n  2. [`Display`-like](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\"), contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#error-handling-traits)Error-handling traits\nThese traits are used to define error-types.\n  1. [`Error`](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#operators)Operators\nThese are traits that can be used for operator overloading.\n  1. [`Index`](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n  2. [`Deref`](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n  3. [`Not`-like](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\"), contains `Not` and `Neg`\n  4. [`Add`-like](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\"), contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. [`Mul`-like](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\"), contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. [`Sum`-like](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\"), contains `Sum` and `Product`\n  7. [`IndexMut`](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n  8. [`DerefMut`](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n  9. [`AddAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\"), contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. [`MulAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\"), contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#static-methods)Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. [`Constructor`](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\"), this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the [`derive-new`](https://github.com/nrc/derive-new) crate.\n  2. [`IsVariant`](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\"), for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. [`Unwrap`](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\"), for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\"), for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#re-exports)Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#hygiene)Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#installation)Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example runs with edition 2015\")```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#msrv-policy)[MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) policy\nThis library requires Rust 1.75 or higher.\nChanging [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of [Semantic Versioning](http://semver.org).\n  * So, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are **NOT concerning** for your project, just use the default [caret requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements):\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are concerning for your project, then use the [tilde requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements) to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules[\u00a7](https://docs.rs/derive_more/latest/derive_more/#modules)\n\n[derive](https://docs.rs/derive_more/latest/derive_more/derive/index.html \"mod derive_more::derive\")\n    Module containing derive definitions only, without their corresponding traits.\n\n[with_trait](https://docs.rs/derive_more/latest/derive_more/with_trait/index.html \"mod derive_more::with_trait\")\n    Module containing derive definitions with their corresponding traits along.\n## Structs[\u00a7](https://docs.rs/derive_more/latest/derive_more/#structs)\n\n[FromStrError](https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html \"struct derive_more::FromStrError\")`from_str`\n    Error of parsing an enum value its string representation.\n\n[TryFromReprError](https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html \"struct derive_more::TryFromReprError\")`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\") implementation on enums to convert from their repr.\n\n[TryIntoError](https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html \"struct derive_more::TryIntoError\")`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\") implementation.\n\n[TryUnwrapError](https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html \"struct derive_more::TryUnwrapError\")`try_unwrap`\n    Error returned by the derived [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\") implementation.\n\n[UnitError](https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html \"struct derive_more::UnitError\")`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\n[WrongVariantError](https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html \"struct derive_more::WrongVariantError\")`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums[\u00a7](https://docs.rs/derive_more/latest/derive_more/#enums)\n\n[BinaryError](https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html \"enum derive_more::BinaryError\")`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros[\u00a7](https://docs.rs/derive_more/latest/derive_more/#derives)\n\n[Add](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\")\n    What `#[derive(Add)]` generates\n\n[AddAssign](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[AsMut](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html \"derive derive_more::AsMut\")\n    What `#[derive(AsRef)]` generates\n\n[AsRef](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\")\n    What `#[derive(AsRef)]` generates\n\n[Binary](https://docs.rs/derive_more/latest/derive_more/derive.Binary.html \"derive derive_more::Binary\")\n    What `#[derive(Display)]` generates\n\n[BitAnd](https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html \"derive derive_more::BitAnd\")\n    What `#[derive(Add)]` generates\n\n[BitAndAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html \"derive derive_more::BitAndAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitOr](https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html \"derive derive_more::BitOr\")\n    What `#[derive(Add)]` generates\n\n[BitOrAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html \"derive derive_more::BitOrAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitXor](https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html \"derive derive_more::BitXor\")\n    What `#[derive(Add)]` generates\n\n[BitXorAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html \"derive derive_more::BitXorAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Constructor](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\")\n    What `#[derive(Constructor)]` generates\n\n[Debug](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n    What `#[derive(Debug)]` generates\n\n[Deref](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n    Using `#[derive(Deref)]`\n\n[DerefMut](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n    What `#[derive(DerefMut)]` generates\n\n[Display](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\")\n    What `#[derive(Display)]` generates\n\n[Div](https://docs.rs/derive_more/latest/derive_more/derive.Div.html \"derive derive_more::Div\")\n    What `#[derive(Mul)]` generates\n\n[DivAssign](https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html \"derive derive_more::DivAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Error](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n    Using `#[derive(Error)]`\n\n[From](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n    What `#[derive(From)]` generates\n\n[FromStr](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n    What `#[derive(FromStr)]` generates\n\n[Index](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n    What `#[derive(Index)]` generates\n\n[IndexMut](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n    What `#[derive(IndexMut)]` generates\n\n[Into](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n    What `#[derive(Into)]` generates\n\n[IntoIterator](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n    Using `#[derive(IntoIterator)]`\n\n[IsVariant](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\")\n    What `#[derive(IsVariant)]` generates\n\n[LowerExp](https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html \"derive derive_more::LowerExp\")\n    What `#[derive(Display)]` generates\n\n[LowerHex](https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html \"derive derive_more::LowerHex\")\n    What `#[derive(Display)]` generates\n\n[Mul](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\")\n    What `#[derive(Mul)]` generates\n\n[MulAssign](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Neg](https://docs.rs/derive_more/latest/derive_more/derive.Neg.html \"derive derive_more::Neg\")\n    What `#[derive(Not)]` generates\n\n[Not](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\")\n    What `#[derive(Not)]` generates\n\n[Octal](https://docs.rs/derive_more/latest/derive_more/derive.Octal.html \"derive derive_more::Octal\")\n    What `#[derive(Display)]` generates\n\n[Pointer](https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html \"derive derive_more::Pointer\")\n    What `#[derive(Display)]` generates\n\n[Product](https://docs.rs/derive_more/latest/derive_more/derive.Product.html \"derive derive_more::Product\")\n    Using `#[derive(Sum)]`\n\n[Rem](https://docs.rs/derive_more/latest/derive_more/derive.Rem.html \"derive derive_more::Rem\")\n    What `#[derive(Mul)]` generates\n\n[RemAssign](https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html \"derive derive_more::RemAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shl](https://docs.rs/derive_more/latest/derive_more/derive.Shl.html \"derive derive_more::Shl\")\n    What `#[derive(Mul)]` generates\n\n[ShlAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html \"derive derive_more::ShlAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shr](https://docs.rs/derive_more/latest/derive_more/derive.Shr.html \"derive derive_more::Shr\")\n    What `#[derive(Mul)]` generates\n\n[ShrAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html \"derive derive_more::ShrAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Sub](https://docs.rs/derive_more/latest/derive_more/derive.Sub.html \"derive derive_more::Sub\")\n    What `#[derive(Add)]` generates\n\n[SubAssign](https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html \"derive derive_more::SubAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Sum](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\")\n    Using `#[derive(Sum)]`\n\n[TryFrom](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n    What `#[derive(TryFrom)]` generates\n\n[TryInto](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n    What `#[derive(TryInto)]` generates\n\n[TryUnwrap](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\")\n    What `#[derive(TryUnwrap)]` generates\n\n[Unwrap](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\")\n    What `#[derive(Unwrap)]` generates\n\n[UpperExp](https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html \"derive derive_more::UpperExp\")\n    What `#[derive(Display)]` generates\n\n[UpperHex](https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html \"derive derive_more::UpperHex\")\n    What `#[derive(Display)]` generates\n",
              "markdown_with_citations": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9`derive_more`\n![Build Status\u27e85\u27e9](https://github.com/JelteF/derive_more/actions) ![Latest Version\u27e86\u27e9](https://crates.io/crates/derive_more) ![Rust Documentation\u27e87\u27e9](https://docs.rs/derive_more) ![GitHub license\u27e88\u27e9](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) ![Rust 1.75+\u27e89\u27e9](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) ![Unsafe Forbidden\u27e810\u27e9](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### \u00a7\u27e811\u27e9Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### \u00a7\u27e812\u27e9The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the `cargo-expand`\u27e813\u27e9 utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### \u00a7\u27e814\u27e9Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. `From`\u27e815\u27e9\n  2. `Into`\u27e816\u27e9\n  3. `FromStr`\u27e817\u27e9\n  4. `TryFrom`\u27e818\u27e9\n  5. `TryInto`\u27e819\u27e9\n  6. `IntoIterator`\u27e820\u27e9\n  7. `AsRef`\u27e821\u27e9, `AsMut`\u27e822\u27e9\n\n\n#### \u00a7\u27e823\u27e9Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. `Debug`\u27e824\u27e9\n  2. `Display`-like\u27e825\u27e9, contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### \u00a7\u27e826\u27e9Error-handling traits\nThese traits are used to define error-types.\n  1. `Error`\u27e827\u27e9\n\n\n#### \u00a7\u27e828\u27e9Operators\nThese are traits that can be used for operator overloading.\n  1. `Index`\u27e829\u27e9\n  2. `Deref`\u27e830\u27e9\n  3. `Not`-like\u27e831\u27e9, contains `Not` and `Neg`\n  4. `Add`-like\u27e832\u27e9, contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. `Mul`-like\u27e833\u27e9, contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. `Sum`-like\u27e834\u27e9, contains `Sum` and `Product`\n  7. `IndexMut`\u27e835\u27e9\n  8. `DerefMut`\u27e836\u27e9\n  9. `AddAssign`-like\u27e837\u27e9, contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. `MulAssign`-like\u27e838\u27e9, contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### \u00a7\u27e839\u27e9Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. `Constructor`\u27e840\u27e9, this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the `derive-new`\u27e841\u27e9 crate.\n  2. `IsVariant`\u27e842\u27e9, for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. `Unwrap`\u27e843\u27e9, for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. `TryUnwrap`\u27e844\u27e9, for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### \u00a7\u27e845\u27e9Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### \u00a7\u27e846\u27e9Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n\u24d8\u27e847\u27e9```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n\u24d8\u27e847\u27e9```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### \u00a7\u27e848\u27e9Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n\u24d8\u27e847\u27e9```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### \u00a7\u27e849\u27e9MSRV\u27e850\u27e9 policy\nThis library requires Rust 1.75 or higher.\nChanging MSRV\u27e850\u27e9 (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of Semantic Versioning\u27e851\u27e9.\n  * So, if MSRV\u27e850\u27e9 changes are **NOT concerning** for your project, just use the default caret requirement\u27e852\u27e9:\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if MSRV\u27e850\u27e9 changes are concerning for your project, then use the tilde requirement\u27e853\u27e9 to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules\u00a7\u27e854\u27e9\n\nderive\u27e855\u27e9\n    Module containing derive definitions only, without their corresponding traits.\n\nwith_trait\u27e856\u27e9\n    Module containing derive definitions with their corresponding traits along.\n## Structs\u00a7\u27e857\u27e9\n\nFromStrError\u27e858\u27e9`from_str`\n    Error of parsing an enum value its string representation.\n\nTryFromReprError\u27e859\u27e9`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived `TryFrom`\u27e818\u27e9 implementation on enums to convert from their repr.\n\nTryIntoError\u27e860\u27e9`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived `TryInto`\u27e819\u27e9 implementation.\n\nTryUnwrapError\u27e861\u27e9`try_unwrap`\n    Error returned by the derived `TryUnwrap`\u27e844\u27e9 implementation.\n\nUnitError\u27e862\u27e9`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\nWrongVariantError\u27e863\u27e9`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums\u00a7\u27e864\u27e9\n\nBinaryError\u27e865\u27e9`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros\u00a7\u27e866\u27e9\n\nAdd\u27e832\u27e9\n    What `#[derive(Add)]` generates\n\nAddAssign\u27e837\u27e9\n    What `#[derive(AddAssign)]` generates\n\nAsMut\u27e822\u27e9\n    What `#[derive(AsRef)]` generates\n\nAsRef\u27e821\u27e9\n    What `#[derive(AsRef)]` generates\n\nBinary\u27e867\u27e9\n    What `#[derive(Display)]` generates\n\nBitAnd\u27e868\u27e9\n    What `#[derive(Add)]` generates\n\nBitAndAssign\u27e869\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitOr\u27e870\u27e9\n    What `#[derive(Add)]` generates\n\nBitOrAssign\u27e871\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitXor\u27e872\u27e9\n    What `#[derive(Add)]` generates\n\nBitXorAssign\u27e873\u27e9\n    What `#[derive(AddAssign)]` generates\n\nConstructor\u27e840\u27e9\n    What `#[derive(Constructor)]` generates\n\nDebug\u27e824\u27e9\n    What `#[derive(Debug)]` generates\n\nDeref\u27e830\u27e9\n    Using `#[derive(Deref)]`\n\nDerefMut\u27e836\u27e9\n    What `#[derive(DerefMut)]` generates\n\nDisplay\u27e825\u27e9\n    What `#[derive(Display)]` generates\n\nDiv\u27e874\u27e9\n    What `#[derive(Mul)]` generates\n\nDivAssign\u27e875\u27e9\n    What `#[derive(MulAssign)]` generates\n\nError\u27e827\u27e9\n    Using `#[derive(Error)]`\n\nFrom\u27e815\u27e9\n    What `#[derive(From)]` generates\n\nFromStr\u27e817\u27e9\n    What `#[derive(FromStr)]` generates\n\nIndex\u27e829\u27e9\n    What `#[derive(Index)]` generates\n\nIndexMut\u27e835\u27e9\n    What `#[derive(IndexMut)]` generates\n\nInto\u27e816\u27e9\n    What `#[derive(Into)]` generates\n\nIntoIterator\u27e820\u27e9\n    Using `#[derive(IntoIterator)]`\n\nIsVariant\u27e842\u27e9\n    What `#[derive(IsVariant)]` generates\n\nLowerExp\u27e876\u27e9\n    What `#[derive(Display)]` generates\n\nLowerHex\u27e877\u27e9\n    What `#[derive(Display)]` generates\n\nMul\u27e833\u27e9\n    What `#[derive(Mul)]` generates\n\nMulAssign\u27e838\u27e9\n    What `#[derive(MulAssign)]` generates\n\nNeg\u27e878\u27e9\n    What `#[derive(Not)]` generates\n\nNot\u27e831\u27e9\n    What `#[derive(Not)]` generates\n\nOctal\u27e879\u27e9\n    What `#[derive(Display)]` generates\n\nPointer\u27e880\u27e9\n    What `#[derive(Display)]` generates\n\nProduct\u27e881\u27e9\n    Using `#[derive(Sum)]`\n\nRem\u27e882\u27e9\n    What `#[derive(Mul)]` generates\n\nRemAssign\u27e883\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShl\u27e884\u27e9\n    What `#[derive(Mul)]` generates\n\nShlAssign\u27e885\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShr\u27e886\u27e9\n    What `#[derive(Mul)]` generates\n\nShrAssign\u27e887\u27e9\n    What `#[derive(MulAssign)]` generates\n\nSub\u27e888\u27e9\n    What `#[derive(Add)]` generates\n\nSubAssign\u27e889\u27e9\n    What `#[derive(AddAssign)]` generates\n\nSum\u27e834\u27e9\n    Using `#[derive(Sum)]`\n\nTryFrom\u27e818\u27e9\n    What `#[derive(TryFrom)]` generates\n\nTryInto\u27e819\u27e9\n    What `#[derive(TryInto)]` generates\n\nTryUnwrap\u27e844\u27e9\n    What `#[derive(TryUnwrap)]` generates\n\nUnwrap\u27e843\u27e9\n    What `#[derive(Unwrap)]` generates\n\nUpperExp\u27e890\u27e9\n    What `#[derive(Display)]` generates\n\nUpperHex\u27e891\u27e9\n    What `#[derive(Display)]` generates\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/derive_more/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/derive_more/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463: Source\n\u27e84\u27e9 https://docs.rs/derive_more/latest/derive_more/#derive_more: \u00a7\n\u27e85\u27e9 https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/derive_more.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/derive_more/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![GitHub license\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.75+-lightgray.svg: ![Rust 1.75+\n\u27e810\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![Unsafe Forbidden\n\u27e811\u27e9 https://docs.rs/derive_more/latest/derive_more/#example-code: \u00a7\n\u27e812\u27e9 https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits: \u00a7\n\u27e813\u27e9 https://github.com/dtolnay/cargo-expand: `cargo-expand`\n\u27e814\u27e9 https://docs.rs/derive_more/latest/derive_more/#conversion-traits: \u00a7\n\u27e815\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.From.html: derive derive_more::From - `From`\n\u27e816\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Into.html: derive derive_more::Into - `Into`\n\u27e817\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html: derive derive_more::FromStr - `FromStr`\n\u27e818\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html: derive derive_more::TryFrom - `TryFrom`\n\u27e819\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html: derive derive_more::TryInto - `TryInto`\n\u27e820\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html: derive derive_more::IntoIterator - `IntoIterator`\n\u27e821\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html: derive derive_more::AsRef - `AsRef`\n\u27e822\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html: `AsMut`\n\u27e823\u27e9 https://docs.rs/derive_more/latest/derive_more/#formatting-traits: \u00a7\n\u27e824\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Debug.html: derive derive_more::Debug - `Debug`\n\u27e825\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Display.html: derive derive_more::Display - `Display`-like\n\u27e826\u27e9 https://docs.rs/derive_more/latest/derive_more/#error-handling-traits: \u00a7\n\u27e827\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Error.html: derive derive_more::Error - `Error`\n\u27e828\u27e9 https://docs.rs/derive_more/latest/derive_more/#operators: \u00a7\n\u27e829\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Index.html: derive derive_more::Index - `Index`\n\u27e830\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Deref.html: derive derive_more::Deref - `Deref`\n\u27e831\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Not.html: derive derive_more::Not - `Not`-like\n\u27e832\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Add.html: derive derive_more::Add - `Add`-like\n\u27e833\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Mul.html: derive derive_more::Mul - `Mul`-like\n\u27e834\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sum.html: derive derive_more::Sum - `Sum`-like\n\u27e835\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html: derive derive_more::IndexMut - `IndexMut`\n\u27e836\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html: derive derive_more::DerefMut - `DerefMut`\n\u27e837\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html: derive derive_more::AddAssign - `AddAssign`-like\n\u27e838\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html: derive derive_more::MulAssign - `MulAssign`-like\n\u27e839\u27e9 https://docs.rs/derive_more/latest/derive_more/#static-methods: \u00a7\n\u27e840\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html: derive derive_more::Constructor - `Constructor`\n\u27e841\u27e9 https://github.com/nrc/derive-new: `derive-new`\n\u27e842\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html: derive derive_more::IsVariant - `IsVariant`\n\u27e843\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html: derive derive_more::Unwrap - `Unwrap`\n\u27e844\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html: derive derive_more::TryUnwrap - `TryUnwrap`\n\u27e845\u27e9 https://docs.rs/derive_more/latest/derive_more/#re-exports: \u00a7\n\u27e846\u27e9 https://docs.rs/derive_more/latest/derive_more/#hygiene: \u00a7\n\u27e847\u27e9 https://docs.rs/derive_more/latest/derive_more/: This example is not tested - \u24d8\n\u27e848\u27e9 https://docs.rs/derive_more/latest/derive_more/#installation: \u00a7\n\u27e849\u27e9 https://docs.rs/derive_more/latest/derive_more/#msrv-policy: \u00a7\n\u27e850\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field: MSRV\n\u27e851\u27e9 http://semver.org: Semantic Versioning\n\u27e852\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements: caret requirement\n\u27e853\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements: tilde requirement\n\u27e854\u27e9 https://docs.rs/derive_more/latest/derive_more/#modules: \u00a7\n\u27e855\u27e9 https://docs.rs/derive_more/latest/derive_more/derive/index.html: mod derive_more::derive - derive\n\u27e856\u27e9 https://docs.rs/derive_more/latest/derive_more/with_trait/index.html: mod derive_more::with_trait - with_trait\n\u27e857\u27e9 https://docs.rs/derive_more/latest/derive_more/#structs: \u00a7\n\u27e858\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html: struct derive_more::FromStrError - FromStrError\n\u27e859\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html: struct derive_more::TryFromReprError - TryFromReprError\n\u27e860\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html: struct derive_more::TryIntoError - TryIntoError\n\u27e861\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html: struct derive_more::TryUnwrapError - TryUnwrapError\n\u27e862\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html: struct derive_more::UnitError - UnitError\n\u27e863\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html: struct derive_more::WrongVariantError - WrongVariantError\n\u27e864\u27e9 https://docs.rs/derive_more/latest/derive_more/#enums: \u00a7\n\u27e865\u27e9 https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html: enum derive_more::BinaryError - BinaryError\n\u27e866\u27e9 https://docs.rs/derive_more/latest/derive_more/#derives: \u00a7\n\u27e867\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Binary.html: derive derive_more::Binary - Binary\n\u27e868\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html: derive derive_more::BitAnd - BitAnd\n\u27e869\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html: derive derive_more::BitAndAssign - BitAndAssign\n\u27e870\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html: derive derive_more::BitOr - BitOr\n\u27e871\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html: derive derive_more::BitOrAssign - BitOrAssign\n\u27e872\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html: derive derive_more::BitXor - BitXor\n\u27e873\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html: derive derive_more::BitXorAssign - BitXorAssign\n\u27e874\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Div.html: derive derive_more::Div - Div\n\u27e875\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html: derive derive_more::DivAssign - DivAssign\n\u27e876\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html: derive derive_more::LowerExp - LowerExp\n\u27e877\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html: derive derive_more::LowerHex - LowerHex\n\u27e878\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Neg.html: derive derive_more::Neg - Neg\n\u27e879\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Octal.html: derive derive_more::Octal - Octal\n\u27e880\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html: derive derive_more::Pointer - Pointer\n\u27e881\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Product.html: derive derive_more::Product - Product\n\u27e882\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Rem.html: derive derive_more::Rem - Rem\n\u27e883\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html: derive derive_more::RemAssign - RemAssign\n\u27e884\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shl.html: derive derive_more::Shl - Shl\n\u27e885\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html: derive derive_more::ShlAssign - ShlAssign\n\u27e886\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shr.html: derive derive_more::Shr - Shr\n\u27e887\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html: derive derive_more::ShrAssign - ShrAssign\n\u27e888\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sub.html: derive derive_more::Sub - Sub\n\u27e889\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html: derive derive_more::SubAssign - SubAssign\n\u27e890\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html: derive derive_more::UpperExp - UpperExp\n\u27e891\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html: derive derive_more::UpperHex - UpperHex\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 21934,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113586.0363912"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/derive_more",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [47 releases](https://lib.rs/crates/derive_more/versions) (3 stable)\n2.0.1 |  Feb 3, 2025   \n---|---  \n1.0.0 |  Aug 7, 2024   \n1.0.0-beta.6 |  Oct 19, 2023   \n1.0.0-beta.2 |  Jul 24, 2023   \n0.1.0 |  Mar 28, 2016   \n#**4** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 2136513/week @ 2025-03-09 2642917/week @ 2025-03-16 3166008/week @ 2025-03-23 2164987/week @ 2025-03-30 2452116/week @ 2025-04-06 2103256/week @ 2025-04-13 2047792/week @ 2025-04-20 1934401/week @ 2025-04-27 2069221/week @ 2025-05-04 2134105/week @ 2025-05-11 2197241/week @ 2025-05-18 2037433/week @ 2025-05-25 2191256/week @ 2025-06-01 2168707/week @ 2025-06-08 2332076/week @ 2025-06-15 2388516/week @ 2025-06-22\n**9,199,492** downloads per month Used in [**11,443** crates (2,286 directly)](https://lib.rs/crates/derive_more/rev)\n**MIT** license \n105KB  1.5K  SLoC\n# ``derive_more``\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg)](https://github.com/JelteF/derive_more/actions) [![Latest Version](https://img.shields.io/crates/v/derive_more.svg)](https://crates.io/crates/derive_more) [![Rust Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/derive_more/badge.svg)](https://docs.rs/derive_more) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) [![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) [![Unsafe Forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as ``Add``, ``Not``, ```From``` or ``Display``. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. ``MyInt`(``i32``)```).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n## Example code\nBy using this library the following code just works:\n```\n``use` `derive_more`::````{`Add`,` Display`,` `From``,` `Into````}```;`\n``#``[``derive```(```PartialEq`,` From`,` Add```)```]``\n``struct` ```MyInt````(``i32``)```;`\n``#``[``derive```(```PartialEq`,` From`,` Into```)```]``\n``struct` ```Point2D` ````{`\n  `x``:` `i32`,\n  `y``:` `i32`,\n```}```\n``#``[``derive```(```PartialEq`,` From`,` Add`,` Display```)```]``\n``enum` `MyEnum` ``{`\n  ``#``[``display```(`````\"`int: {_0}`\"`````)```]``\n  Int`(``i32``)``,`\n  Uint`(``u32``)``,`\n  ``#``[``display```(`````\"`nothing`\"`````)```]``\n  Nothing`,`\n```}```\n`assert!``(`MyInt`(``11``)` `==` MyInt`(``5``)` `+` `6.``into``(``)``)``;`\n`assert!``(``(``5``,` `6``)` `==` Point2D ``{` x`:` `5``,` y`:` `6` ```}```.``into``(``)``)``;`\n`assert!``(``MyEnum`::``Int`(``15``)` `==` `(``MyEnum`::``Int`(``8``)` `+` `7.``into``(``)``)``.``unwrap``(``)``)``;`\n`assert!``(``MyEnum`::``Int`(``15``)``.``to_string``(``)` `==` ``\"`int: 15`\"```)``;`\n`assert!``(``MyEnum`::``Uint`(``42``)``.``to_string``(``)` `==` ``\"`42`\"```)``;`\n`assert!``(``MyEnum`::``Nothing`.``to_string``(``)` `==` ``\"`nothing`\"```)``;`\n`\n```\n\n## The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \"-like\" suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the [``cargo-expand``](https://github.com/dtolnay/cargo-expand) utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So ````#``[``derive```(```Mul```)```]```` doesn't automatically derive ``Div`` as well. To derive both you should do ````#``[``derive```(```Mul`,` Div```)```]````\n### Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. [```From```](https://docs.rs/derive_more/latest/derive_more/derive.From.html)\n  2. [```Into```](https://docs.rs/derive_more/latest/derive_more/derive.Into.html)\n  3. [``FromStr``](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html)\n  4. [``TryFrom``](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html)\n  5. [``TryInto``](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html)\n  6. [```IntoIterator```](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html)\n  7. [```AsRef```](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html), [```AsMut```](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html)\n\n\n### Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. [``Debug``](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html)\n  2. [``Display``-like](https://docs.rs/derive_more/latest/derive_more/derive.Display.html), contains ``Display``, ``Binary``, ``Octal``, ``LowerHex``, ``UpperHex``, ``LowerExp``, ``UpperExp``, ``Pointer``\n\n\n### Error-handling traits\nThese traits are used to define error-types.\n  1. [``Error``](https://docs.rs/derive_more/latest/derive_more/derive.Error.html)\n\n\n### Operators\nThese are traits that can be used for operator overloading.\n  1. [``Index``](https://docs.rs/derive_more/latest/derive_more/derive.Index.html)\n  2. [``Deref``](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html)\n  3. [``Not``-like](https://docs.rs/derive_more/latest/derive_more/derive.Not.html), contains ``Not`` and ``Neg``\n  4. [``Add``-like](https://docs.rs/derive_more/latest/derive_more/derive.Add.html), contains ``Add``, ``Sub``, ``BitAnd``, ``BitOr``, ``BitXor``\n  5. [``Mul``-like](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html), contains ``Mul``, ``Div``, ``Rem``, ``Shr`` and ``Shl``\n  6. [``Sum``-like](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html), contains ``Sum`` and ``Product``\n  7. [``IndexMut``](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html)\n  8. [``DerefMut``](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html)\n  9. [``AddAssign``-like](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html), contains ``AddAssign``, ``SubAssign``, ``BitAndAssign``, ``BitOrAssign`` and ``BitXorAssign``\n  10. [``MulAssign``-like](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html), contains ``MulAssign``, ``DivAssign``, ``RemAssign``, ``ShrAssign`` and ``ShlAssign``\n\n\n### Static methods\nThese don't derive traits, but derive static methods instead.\n  1. [``Constructor``](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html), this derives a ``new`` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the [``derive-new``](https://github.com/nrc/derive-new) crate.\n  2. [``IsVariant``](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html), for each variant ``foo`` of an enum type, derives a ``is_foo`` method.\n  3. [``Unwrap``](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html), for each variant ``foo`` of an enum type, derives an ``unwrap_foo`` method.\n  4. [``TryUnwrap``](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html), for each variant ``foo`` of an enum type, derives an ``try_unwrap_foo`` method.\n\n\n### Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the ``with_trait`` module. So, both the ``Display`` derive and the ``Display`` trait will be in scope when you add the following code:\n```\n``use` `derive_more`::```with_trait`::``Display`;` ``//` also imports `core::fmt::Display``\n`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate's root (or from the ``derive`` module):\n```\n``use` `derive_more`::``Display`;`  ``//` imports macro only`\n`use` `derive_more`::```derive`::```*``;` ``//` imports all macros only`\n`\n```\n\n#### Hygiene\nFor hygiene purposes, macros use ```derive_more`::```*``` absolute paths in their expansions. This might introduce a trouble, if you want to re-export ``derive_more`` macros in your own crate without using the ``derive_more`` as a direct dependency in downstream crates:\n```\n``use` `my_lib`::``Display`;` ``//` re-exported in `my_lib` crate`\n``#``[``derive```(```Display```)```]`` ``//` error: could not find `derive_more` in the list of imported crates`\n``struct` ```MyInt````(``i32``)```;`\n`\n```\n\nIn such case, you should re-export the ``derive_more`` module too:\n```\n``use` `my_lib`::````{`derive_more`,` Display```}```;` ``//` re-exported in `my_lib` crate`\n``#``[``derive```(```Display```)```]`` ``//` works fine now!`\n``struct` ```MyInt````(``i32``)```;`\n`\n```\n\n## Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in ``Cargo.toml``:\n```\n```[``dependencies``]`\n``# You can specify the types of derives that you need for less time spent``\n``# compiling. For the full list of features see this crate its `Cargo.toml`.``\n`derive_more = { version = \"2\", features ``=` ``[```\"`from`\"``, ``\"`add`\"``, ``\"`into_iterator`\"```]`` }\n``\n```\n```\n```[``dependencies``]`\n``# If you don't care much about compilation times and simply want to have``\n``# support for all the possible derives, you can use the \"full\" feature.``\n`derive_more = { version = \"2\", features ``=` ``[```\"`full`\"```]`` }\n``\n```\n```\n```[``dependencies``]`\n``# If you run in a `no_std` environment you should disable the default features,``\n``# because the only default feature is the \"std\" feature.``\n``# NOTE: You can combine this with \"full\" feature to get support for all the``\n``#    possible derives in a `no_std` environment.``\n`derive_more = { version = \"2\", default-features ``=` `false` }\n``\n```\n\nAnd this to the top of your Rust file:\n```\n```//` use the derives that you want in the file`\n`use` `derive_more`::````{`Add`,` Display`,` `From````}```;`\n`\n```\n\nIf you're still using Rust 2015, add this instead:\n```\n``extern` `crate` core`;`\n``#``[``macro_use``]``\n`extern` `crate` derive_more`;`\n`#` ``fn` `main`````(````)``````{````}``` ``//` omit wrapping statements above into `main()` in tests`\n`\n```\n\n## [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) policy\nThis library requires Rust 1.75 or higher.\nChanging [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of [Semantic Versioning](http://semver.org).\n  * So, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are **NOT concerning** for your project, just use the default [caret requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements): ```\n```[``dependencies``]`\n`derive_more ``=` ``\"`2`\"`` ``# or \"2.0\", or \"^2.0\"``\n``\n```\n\n  * However, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are concerning for your project, then use the [tilde requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements) to **pin to a specific minor version** : ```\n```[``dependencies``]`\n`derive_more ``=` ``\"`~2.0`\"`` ``# or \"~2.0.0\"``\n``\n```\n\n\n\n#### Dependencies\n~185\u2013680KB  ~15K SLoC\n  * [derive_more-impl](https://lib.rs/crates/derive_more-impl \"new\") =2.0.1\n\n\n  * build  [testing-helpers?](https://lib.rs/crates/derive_more/features#feature-testing-helpers \"optional feature\") [rustc_version](https://lib.rs/crates/rustc_version \"new\") 0.4\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0\")\n  * dev  [static_assertions](https://lib.rs/crates/static_assertions \"1.1\")\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.56\")\n\n\n#### [Other features](https://lib.rs/crates/derive_more/features)\n  * [add](https://lib.rs/crates/derive_more/features#feature-add)\n  * [add_assign](https://lib.rs/crates/derive_more/features#feature-add_assign)\n  * [as_ref](https://lib.rs/crates/derive_more/features#feature-as_ref)\n  * [constructor](https://lib.rs/crates/derive_more/features#feature-constructor)\n  * [debug](https://lib.rs/crates/derive_more/features#feature-debug)\n  * [deref](https://lib.rs/crates/derive_more/features#feature-deref)\n  * [deref_mut](https://lib.rs/crates/derive_more/features#feature-deref_mut)\n  * [display](https://lib.rs/crates/derive_more/features#feature-display)\n  * [error](https://lib.rs/crates/derive_more/features#feature-error)\n  * [from](https://lib.rs/crates/derive_more/features#feature-from)\n  * [from_str](https://lib.rs/crates/derive_more/features#feature-from_str)\n  * [full](https://lib.rs/crates/derive_more/features#feature-full)\n  * [index](https://lib.rs/crates/derive_more/features#feature-index)\n  * [index_mut](https://lib.rs/crates/derive_more/features#feature-index_mut)\n  * [into](https://lib.rs/crates/derive_more/features#feature-into)\n  * [into_iterator](https://lib.rs/crates/derive_more/features#feature-into_iterator)\n  * [is_variant](https://lib.rs/crates/derive_more/features#feature-is_variant)\n  * [mul](https://lib.rs/crates/derive_more/features#feature-mul)\n  * [mul_assign](https://lib.rs/crates/derive_more/features#feature-mul_assign)\n  * [not](https://lib.rs/crates/derive_more/features#feature-not)\n  * [and more](https://lib.rs/crates/derive_more/features)\u2026\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  47 releases\u27e81\u27e9 (3 stable)\n2.0.1 |  Feb 3, 2025   \n---|---  \n1.0.0 |  Aug 7, 2024   \n1.0.0-beta.6 |  Oct 19, 2023   \n1.0.0-beta.2 |  Jul 24, 2023   \n0.1.0 |  Mar 28, 2016   \n#**4** in Rust patterns\u27e82\u27e9\nDownload history 2136513/week @ 2025-03-09 2642917/week @ 2025-03-16 3166008/week @ 2025-03-23 2164987/week @ 2025-03-30 2452116/week @ 2025-04-06 2103256/week @ 2025-04-13 2047792/week @ 2025-04-20 1934401/week @ 2025-04-27 2069221/week @ 2025-05-04 2134105/week @ 2025-05-11 2197241/week @ 2025-05-18 2037433/week @ 2025-05-25 2191256/week @ 2025-06-01 2168707/week @ 2025-06-08 2332076/week @ 2025-06-15 2388516/week @ 2025-06-22\n**9,199,492** downloads per month Used in **11,443** crates (2,286 directly)\u27e83\u27e9\n**MIT** license \n105KB  1.5K  SLoC\n# ``derive_more``\n![Build Status\u27e84\u27e9](https://github.com/JelteF/derive_more/actions) ![Latest Version\u27e85\u27e9](https://crates.io/crates/derive_more) ![Rust Documentation\u27e86\u27e9](https://docs.rs/derive_more) ![GitHub license\u27e87\u27e9](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) ![Rust 1.75+\u27e88\u27e9](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) ![Unsafe Forbidden\u27e89\u27e9](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as ``Add``, ``Not``, ```From``` or ``Display``. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. ``MyInt`(``i32``)```).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n## Example code\nBy using this library the following code just works:\n```\n``use` `derive_more`::````{`Add`,` Display`,` `From``,` `Into````}```;`\n``#``[``derive```(```PartialEq`,` From`,` Add```)```]``\n``struct` ```MyInt````(``i32``)```;`\n``#``[``derive```(```PartialEq`,` From`,` Into```)```]``\n``struct` ```Point2D` ````{`\n  `x``:` `i32`,\n  `y``:` `i32`,\n```}```\n``#``[``derive```(```PartialEq`,` From`,` Add`,` Display```)```]``\n``enum` `MyEnum` ``{`\n  ``#``[``display```(`````\"`int: {_0}`\"`````)```]``\n  Int`(``i32``)``,`\n  Uint`(``u32``)``,`\n  ``#``[``display```(`````\"`nothing`\"`````)```]``\n  Nothing`,`\n```}```\n`assert!``(`MyInt`(``11``)` `==` MyInt`(``5``)` `+` `6.``into``(``)``)``;`\n`assert!``(``(``5``,` `6``)` `==` Point2D ``{` x`:` `5``,` y`:` `6` ```}```.``into``(``)``)``;`\n`assert!``(``MyEnum`::``Int`(``15``)` `==` `(``MyEnum`::``Int`(``8``)` `+` `7.``into``(``)``)``.``unwrap``(``)``)``;`\n`assert!``(``MyEnum`::``Int`(``15``)``.``to_string``(``)` `==` ``\"`int: 15`\"```)``;`\n`assert!``(``MyEnum`::``Uint`(``42``)``.``to_string``(``)` `==` ``\"`42`\"```)``;`\n`assert!``(``MyEnum`::``Nothing`.``to_string``(``)` `==` ``\"`nothing`\"```)``;`\n`\n```\n\n## The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \"-like\" suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the ``cargo-expand``\u27e810\u27e9 utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So ````#``[``derive```(```Mul```)```]```` doesn't automatically derive ``Div`` as well. To derive both you should do ````#``[``derive```(```Mul`,` Div```)```]````\n### Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. ```From```\u27e811\u27e9\n  2. ```Into```\u27e812\u27e9\n  3. ``FromStr``\u27e813\u27e9\n  4. ``TryFrom``\u27e814\u27e9\n  5. ``TryInto``\u27e815\u27e9\n  6. ```IntoIterator```\u27e816\u27e9\n  7. ```AsRef```\u27e817\u27e9, ```AsMut```\u27e818\u27e9\n\n\n### Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. ``Debug``\u27e819\u27e9\n  2. ``Display``-like\u27e820\u27e9, contains ``Display``, ``Binary``, ``Octal``, ``LowerHex``, ``UpperHex``, ``LowerExp``, ``UpperExp``, ``Pointer``\n\n\n### Error-handling traits\nThese traits are used to define error-types.\n  1. ``Error``\u27e821\u27e9\n\n\n### Operators\nThese are traits that can be used for operator overloading.\n  1. ``Index``\u27e822\u27e9\n  2. ``Deref``\u27e823\u27e9\n  3. ``Not``-like\u27e824\u27e9, contains ``Not`` and ``Neg``\n  4. ``Add``-like\u27e825\u27e9, contains ``Add``, ``Sub``, ``BitAnd``, ``BitOr``, ``BitXor``\n  5. ``Mul``-like\u27e826\u27e9, contains ``Mul``, ``Div``, ``Rem``, ``Shr`` and ``Shl``\n  6. ``Sum``-like\u27e827\u27e9, contains ``Sum`` and ``Product``\n  7. ``IndexMut``\u27e828\u27e9\n  8. ``DerefMut``\u27e829\u27e9\n  9. ``AddAssign``-like\u27e830\u27e9, contains ``AddAssign``, ``SubAssign``, ``BitAndAssign``, ``BitOrAssign`` and ``BitXorAssign``\n  10. ``MulAssign``-like\u27e831\u27e9, contains ``MulAssign``, ``DivAssign``, ``RemAssign``, ``ShrAssign`` and ``ShlAssign``\n\n\n### Static methods\nThese don't derive traits, but derive static methods instead.\n  1. ``Constructor``\u27e832\u27e9, this derives a ``new`` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the ``derive-new``\u27e833\u27e9 crate.\n  2. ``IsVariant``\u27e834\u27e9, for each variant ``foo`` of an enum type, derives a ``is_foo`` method.\n  3. ``Unwrap``\u27e835\u27e9, for each variant ``foo`` of an enum type, derives an ``unwrap_foo`` method.\n  4. ``TryUnwrap``\u27e836\u27e9, for each variant ``foo`` of an enum type, derives an ``try_unwrap_foo`` method.\n\n\n### Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the ``with_trait`` module. So, both the ``Display`` derive and the ``Display`` trait will be in scope when you add the following code:\n```\n``use` `derive_more`::```with_trait`::``Display`;` ``//` also imports `core::fmt::Display``\n`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate's root (or from the ``derive`` module):\n```\n``use` `derive_more`::``Display`;`  ``//` imports macro only`\n`use` `derive_more`::```derive`::```*``;` ``//` imports all macros only`\n`\n```\n\n#### Hygiene\nFor hygiene purposes, macros use ```derive_more`::```*``` absolute paths in their expansions. This might introduce a trouble, if you want to re-export ``derive_more`` macros in your own crate without using the ``derive_more`` as a direct dependency in downstream crates:\n```\n``use` `my_lib`::``Display`;` ``//` re-exported in `my_lib` crate`\n``#``[``derive```(```Display```)```]`` ``//` error: could not find `derive_more` in the list of imported crates`\n``struct` ```MyInt````(``i32``)```;`\n`\n```\n\nIn such case, you should re-export the ``derive_more`` module too:\n```\n``use` `my_lib`::````{`derive_more`,` Display```}```;` ``//` re-exported in `my_lib` crate`\n``#``[``derive```(```Display```)```]`` ``//` works fine now!`\n``struct` ```MyInt````(``i32``)```;`\n`\n```\n\n## Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in ``Cargo.toml``:\n```\n```[``dependencies``]`\n``# You can specify the types of derives that you need for less time spent``\n``# compiling. For the full list of features see this crate its `Cargo.toml`.``\n`derive_more = { version = \"2\", features ``=` ``[```\"`from`\"``, ``\"`add`\"``, ``\"`into_iterator`\"```]`` }\n``\n```\n```\n```[``dependencies``]`\n``# If you don't care much about compilation times and simply want to have``\n``# support for all the possible derives, you can use the \"full\" feature.``\n`derive_more = { version = \"2\", features ``=` ``[```\"`full`\"```]`` }\n``\n```\n```\n```[``dependencies``]`\n``# If you run in a `no_std` environment you should disable the default features,``\n``# because the only default feature is the \"std\" feature.``\n``# NOTE: You can combine this with \"full\" feature to get support for all the``\n``#    possible derives in a `no_std` environment.``\n`derive_more = { version = \"2\", default-features ``=` `false` }\n``\n```\n\nAnd this to the top of your Rust file:\n```\n```//` use the derives that you want in the file`\n`use` `derive_more`::````{`Add`,` Display`,` `From````}```;`\n`\n```\n\nIf you're still using Rust 2015, add this instead:\n```\n``extern` `crate` core`;`\n``#``[``macro_use``]``\n`extern` `crate` derive_more`;`\n`#` ``fn` `main`````(````)``````{````}``` ``//` omit wrapping statements above into `main()` in tests`\n`\n```\n\n## MSRV\u27e837\u27e9 policy\nThis library requires Rust 1.75 or higher.\nChanging MSRV\u27e837\u27e9 (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of Semantic Versioning\u27e838\u27e9.\n  * So, if MSRV\u27e837\u27e9 changes are **NOT concerning** for your project, just use the default caret requirement\u27e839\u27e9: ```\n```[``dependencies``]`\n`derive_more ``=` ``\"`2`\"`` ``# or \"2.0\", or \"^2.0\"``\n``\n```\n\n  * However, if MSRV\u27e837\u27e9 changes are concerning for your project, then use the tilde requirement\u27e840\u27e9 to **pin to a specific minor version** : ```\n```[``dependencies``]`\n`derive_more ``=` ``\"`~2.0`\"`` ``# or \"~2.0.0\"``\n``\n```\n\n\n\n#### Dependencies\n~185\u2013680KB  ~15K SLoC\n  * derive_more-impl\u27e841\u27e9 =2.0.1\n\n\n  * build  testing-helpers?\u27e842\u27e9 rustc_version\u27e843\u27e9 0.4\n  * dev  rustversion\u27e844\u27e9\n  * dev  static_assertions\u27e845\u27e9\n  * dev  trybuild\u27e846\u27e9\n\n\n#### Other features\u27e847\u27e9\n  * add\u27e848\u27e9\n  * add_assign\u27e849\u27e9\n  * as_ref\u27e850\u27e9\n  * constructor\u27e851\u27e9\n  * debug\u27e852\u27e9\n  * deref\u27e853\u27e9\n  * deref_mut\u27e854\u27e9\n  * display\u27e855\u27e9\n  * error\u27e856\u27e9\n  * from\u27e857\u27e9\n  * from_str\u27e858\u27e9\n  * full\u27e859\u27e9\n  * index\u27e860\u27e9\n  * index_mut\u27e861\u27e9\n  * into\u27e862\u27e9\n  * into_iterator\u27e863\u27e9\n  * is_variant\u27e864\u27e9\n  * mul\u27e865\u27e9\n  * mul_assign\u27e866\u27e9\n  * not\u27e867\u27e9\n  * and more\u27e847\u27e9\u2026\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/derive_more/versions: 47 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/derive_more/rev: **11,443** crates (2,286 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/derive_more.svg: ![Latest Version\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/derive_more/badge.svg: ![Rust Documentation\n\u27e87\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![GitHub license\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.75+-lightgray.svg: ![Rust 1.75+\n\u27e89\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![Unsafe Forbidden\n\u27e810\u27e9 https://github.com/dtolnay/cargo-expand: ``cargo-expand``\n\u27e811\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.From.html: ```From```\n\u27e812\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Into.html: ```Into```\n\u27e813\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html: ``FromStr``\n\u27e814\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html: ``TryFrom``\n\u27e815\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html: ``TryInto``\n\u27e816\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html: ```IntoIterator```\n\u27e817\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html: ```AsRef```\n\u27e818\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html: ```AsMut```\n\u27e819\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Debug.html: ``Debug``\n\u27e820\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Display.html: ``Display``-like\n\u27e821\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Error.html: ``Error``\n\u27e822\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Index.html: ``Index``\n\u27e823\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Deref.html: ``Deref``\n\u27e824\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Not.html: ``Not``-like\n\u27e825\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Add.html: ``Add``-like\n\u27e826\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Mul.html: ``Mul``-like\n\u27e827\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sum.html: ``Sum``-like\n\u27e828\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html: ``IndexMut``\n\u27e829\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html: ``DerefMut``\n\u27e830\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html: ``AddAssign``-like\n\u27e831\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html: ``MulAssign``-like\n\u27e832\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html: ``Constructor``\n\u27e833\u27e9 https://github.com/nrc/derive-new: ``derive-new``\n\u27e834\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html: ``IsVariant``\n\u27e835\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html: ``Unwrap``\n\u27e836\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html: ``TryUnwrap``\n\u27e837\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field: MSRV\n\u27e838\u27e9 http://semver.org: Semantic Versioning\n\u27e839\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements: caret requirement\n\u27e840\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements: tilde requirement\n\u27e841\u27e9 https://lib.rs/crates/derive_more-impl: new - derive_more-impl\n\u27e842\u27e9 https://lib.rs/crates/derive_more/features#feature-testing-helpers: optional feature - testing-helpers?\n\u27e843\u27e9 https://lib.rs/crates/rustc_version: new - rustc_version\n\u27e844\u27e9 https://lib.rs/crates/rustversion: 1.0 - rustversion\n\u27e845\u27e9 https://lib.rs/crates/static_assertions: 1.1 - static_assertions\n\u27e846\u27e9 https://lib.rs/crates/trybuild: 1.0.56 - trybuild\n\u27e847\u27e9 https://lib.rs/crates/derive_more/features: Other features\n\u27e848\u27e9 https://lib.rs/crates/derive_more/features#feature-add: add\n\u27e849\u27e9 https://lib.rs/crates/derive_more/features#feature-add_assign: add_assign\n\u27e850\u27e9 https://lib.rs/crates/derive_more/features#feature-as_ref: as_ref\n\u27e851\u27e9 https://lib.rs/crates/derive_more/features#feature-constructor: constructor\n\u27e852\u27e9 https://lib.rs/crates/derive_more/features#feature-debug: debug\n\u27e853\u27e9 https://lib.rs/crates/derive_more/features#feature-deref: deref\n\u27e854\u27e9 https://lib.rs/crates/derive_more/features#feature-deref_mut: deref_mut\n\u27e855\u27e9 https://lib.rs/crates/derive_more/features#feature-display: display\n\u27e856\u27e9 https://lib.rs/crates/derive_more/features#feature-error: error\n\u27e857\u27e9 https://lib.rs/crates/derive_more/features#feature-from: from\n\u27e858\u27e9 https://lib.rs/crates/derive_more/features#feature-from_str: from_str\n\u27e859\u27e9 https://lib.rs/crates/derive_more/features#feature-full: full\n\u27e860\u27e9 https://lib.rs/crates/derive_more/features#feature-index: index\n\u27e861\u27e9 https://lib.rs/crates/derive_more/features#feature-index_mut: index_mut\n\u27e862\u27e9 https://lib.rs/crates/derive_more/features#feature-into: into\n\u27e863\u27e9 https://lib.rs/crates/derive_more/features#feature-into_iterator: into_iterator\n\u27e864\u27e9 https://lib.rs/crates/derive_more/features#feature-is_variant: is_variant\n\u27e865\u27e9 https://lib.rs/crates/derive_more/features#feature-mul: mul\n\u27e866\u27e9 https://lib.rs/crates/derive_more/features#feature-mul_assign: mul_assign\n\u27e867\u27e9 https://lib.rs/crates/derive_more/features#feature-not: not\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14240,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113586.9666104"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libunicode_ident-269f979d8059c70e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libunicode_ident-269f979d8059c70e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-1a24be1f21ba5a9f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libproc_macro2-8ced9d37ebfd44c1.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libproc_macro2-8ced9d37ebfd44c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libquote-a519d164f351d5cd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libquote-a519d164f351d5cd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.98",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libsyn-a9792e31813600bd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libsyn-a9792e31813600bd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#derive_more-impl@2.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_more-impl-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "derive_more_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_more-impl-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp99r9rqx5/derive_more-2.0.1#derive_more@2.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "derive_more",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: at least one derive feature must be enabled (or the \"full\" feature enabling all the derives)\n   --> src\\lib.rs:461:1\n    |\n461 | / compile_error!(\n462 | |     \"at least one derive feature must be enabled (or the \\\"full\\\" feature enabling all the derives)\"\n463 | | );\n    | |_^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "at least one derive feature must be enabled (or the \"full\" feature enabling all the derives)",
                "spans": [
                  {
                    "byte_end": 14124,
                    "byte_start": 14006,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 463,
                    "line_start": 461,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "compile_error!("
                      },
                      {
                        "highlight_end": 101,
                        "highlight_start": 1,
                        "text": "    \"at least one derive feature must be enabled (or the \\\"full\\\" feature enabling all the derives)\""
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": ");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\build\\proc-macro2-1a24be1f21ba5a9f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libunicode_ident-269f979d8059c70e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libunicode_ident-269f979d8059c70e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libproc_macro2-8ced9d37ebfd44c1.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libproc_macro2-8ced9d37ebfd44c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libquote-a519d164f351d5cd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libquote-a519d164f351d5cd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.98",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libsyn-a9792e31813600bd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\libsyn-a9792e31813600bd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#derive_more-impl@2.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_more-impl-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "derive_more_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\derive_more-impl-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\target\\debug\\deps\\derive_more_impl-791263b652d0216c.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp99r9rqx5/derive_more-2.0.1#derive_more@2.0.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "derive_more",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99r9rqx5\\derive_more-2.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: at least one derive feature must be enabled (or the \"full\" feature enabling all the derives)\n   --> src\\lib.rs:461:1\n    |\n461 | / compile_error!(\n462 | |     \"at least one derive feature must be enabled (or the \\\"full\\\" feature enabling all the derives)\"\n463 | | );\n    | |_^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "at least one derive feature must be enabled (or the \"full\" feature enabling all the derives)",
                "spans": [
                  {
                    "byte_end": 14124,
                    "byte_start": 14006,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 463,
                    "line_start": 461,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "compile_error!("
                      },
                      {
                        "highlight_end": 101,
                        "highlight_start": 1,
                        "text": "    \"at least one derive feature must be enabled (or the \\\"full\\\" feature enabling all the derives)\""
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": ");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 42
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "derive_more",
          "version": "2.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\n[Settings](https://docs.rs/derive_more/latest/settings.html)\n[Help](https://docs.rs/derive_more/latest/help.html)\nSummary[Source](https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463)\nExpand description\n## [\u00a7](https://docs.rs/derive_more/latest/derive_more/#derive_more)`derive_more`\n[![Build Status](https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg)](https://github.com/JelteF/derive_more/actions) [![Latest Version](https://img.shields.io/crates/v/derive_more.svg)](https://crates.io/crates/derive_more) [![Rust Documentation](https://docs.rs/derive_more/badge.svg)](https://docs.rs/derive_more) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) [![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) [![Unsafe Forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#example-code)Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits)The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the [`cargo-expand`](https://github.com/dtolnay/cargo-expand) utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#conversion-traits)Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. [`From`](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n  2. [`Into`](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n  3. [`FromStr`](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n  4. [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n  5. [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n  6. [`IntoIterator`](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n  7. [`AsRef`](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\"), [`AsMut`](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html)\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#formatting-traits)Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. [`Debug`](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n  2. [`Display`-like](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\"), contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#error-handling-traits)Error-handling traits\nThese traits are used to define error-types.\n  1. [`Error`](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#operators)Operators\nThese are traits that can be used for operator overloading.\n  1. [`Index`](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n  2. [`Deref`](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n  3. [`Not`-like](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\"), contains `Not` and `Neg`\n  4. [`Add`-like](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\"), contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. [`Mul`-like](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\"), contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. [`Sum`-like](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\"), contains `Sum` and `Product`\n  7. [`IndexMut`](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n  8. [`DerefMut`](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n  9. [`AddAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\"), contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. [`MulAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\"), contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#static-methods)Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. [`Constructor`](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\"), this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the [`derive-new`](https://github.com/nrc/derive-new) crate.\n  2. [`IsVariant`](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\"), for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. [`Unwrap`](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\"), for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\"), for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#re-exports)Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#hygiene)Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#installation)Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example runs with edition 2015\")```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#msrv-policy)[MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) policy\nThis library requires Rust 1.75 or higher.\nChanging [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of [Semantic Versioning](http://semver.org).\n  * So, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are **NOT concerning** for your project, just use the default [caret requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements):\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are concerning for your project, then use the [tilde requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements) to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules[\u00a7](https://docs.rs/derive_more/latest/derive_more/#modules)\n\n[derive](https://docs.rs/derive_more/latest/derive_more/derive/index.html \"mod derive_more::derive\")\n    Module containing derive definitions only, without their corresponding traits.\n\n[with_trait](https://docs.rs/derive_more/latest/derive_more/with_trait/index.html \"mod derive_more::with_trait\")\n    Module containing derive definitions with their corresponding traits along.\n## Structs[\u00a7](https://docs.rs/derive_more/latest/derive_more/#structs)\n\n[FromStrError](https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html \"struct derive_more::FromStrError\")`from_str`\n    Error of parsing an enum value its string representation.\n\n[TryFromReprError](https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html \"struct derive_more::TryFromReprError\")`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\") implementation on enums to convert from their repr.\n\n[TryIntoError](https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html \"struct derive_more::TryIntoError\")`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\") implementation.\n\n[TryUnwrapError](https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html \"struct derive_more::TryUnwrapError\")`try_unwrap`\n    Error returned by the derived [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\") implementation.\n\n[UnitError](https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html \"struct derive_more::UnitError\")`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\n[WrongVariantError](https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html \"struct derive_more::WrongVariantError\")`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums[\u00a7](https://docs.rs/derive_more/latest/derive_more/#enums)\n\n[BinaryError](https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html \"enum derive_more::BinaryError\")`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros[\u00a7](https://docs.rs/derive_more/latest/derive_more/#derives)\n\n[Add](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\")\n    What `#[derive(Add)]` generates\n\n[AddAssign](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[AsMut](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html \"derive derive_more::AsMut\")\n    What `#[derive(AsRef)]` generates\n\n[AsRef](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\")\n    What `#[derive(AsRef)]` generates\n\n[Binary](https://docs.rs/derive_more/latest/derive_more/derive.Binary.html \"derive derive_more::Binary\")\n    What `#[derive(Display)]` generates\n\n[BitAnd](https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html \"derive derive_more::BitAnd\")\n    What `#[derive(Add)]` generates\n\n[BitAndAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html \"derive derive_more::BitAndAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitOr](https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html \"derive derive_more::BitOr\")\n    What `#[derive(Add)]` generates\n\n[BitOrAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html \"derive derive_more::BitOrAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitXor](https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html \"derive derive_more::BitXor\")\n    What `#[derive(Add)]` generates\n\n[BitXorAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html \"derive derive_more::BitXorAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Constructor](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\")\n    What `#[derive(Constructor)]` generates\n\n[Debug](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n    What `#[derive(Debug)]` generates\n\n[Deref](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n    Using `#[derive(Deref)]`\n\n[DerefMut](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n    What `#[derive(DerefMut)]` generates\n\n[Display](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\")\n    What `#[derive(Display)]` generates\n\n[Div](https://docs.rs/derive_more/latest/derive_more/derive.Div.html \"derive derive_more::Div\")\n    What `#[derive(Mul)]` generates\n\n[DivAssign](https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html \"derive derive_more::DivAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Error](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n    Using `#[derive(Error)]`\n\n[From](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n    What `#[derive(From)]` generates\n\n[FromStr](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n    What `#[derive(FromStr)]` generates\n\n[Index](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n    What `#[derive(Index)]` generates\n\n[IndexMut](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n    What `#[derive(IndexMut)]` generates\n\n[Into](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n    What `#[derive(Into)]` generates\n\n[IntoIterator](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n    Using `#[derive(IntoIterator)]`\n\n[IsVariant](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\")\n    What `#[derive(IsVariant)]` generates\n\n[LowerExp](https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html \"derive derive_more::LowerExp\")\n    What `#[derive(Display)]` generates\n\n[LowerHex](https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html \"derive derive_more::LowerHex\")\n    What `#[derive(Display)]` generates\n\n[Mul](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\")\n    What `#[derive(Mul)]` generates\n\n[MulAssign](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Neg](https://docs.rs/derive_more/latest/derive_more/derive.Neg.html \"derive derive_more::Neg\")\n    What `#[derive(Not)]` generates\n\n[Not](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\")\n    What `#[derive(Not)]` generates\n\n[Octal](https://docs.rs/derive_more/latest/derive_more/derive.Octal.html \"derive derive_more::Octal\")\n    What `#[derive(Display)]` generates\n\n[Pointer](https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html \"derive derive_more::Pointer\")\n    What `#[derive(Display)]` generates\n\n[Product](https://docs.rs/derive_more/latest/derive_more/derive.Product.html \"derive derive_more::Product\")\n    Using `#[derive(Sum)]`\n\n[Rem](https://docs.rs/derive_more/latest/derive_more/derive.Rem.html \"derive derive_more::Rem\")\n    What `#[derive(Mul)]` generates\n\n[RemAssign](https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html \"derive derive_more::RemAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shl](https://docs.rs/derive_more/latest/derive_more/derive.Shl.html \"derive derive_more::Shl\")\n    What `#[derive(Mul)]` generates\n\n[ShlAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html \"derive derive_more::ShlAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shr](https://docs.rs/derive_more/latest/derive_more/derive.Shr.html \"derive derive_more::Shr\")\n    What `#[derive(Mul)]` generates\n\n[ShrAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html \"derive derive_more::ShrAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Sub](https://docs.rs/derive_more/latest/derive_more/derive.Sub.html \"derive derive_more::Sub\")\n    What `#[derive(Add)]` generates\n\n[SubAssign](https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html \"derive derive_more::SubAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Sum](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\")\n    Using `#[derive(Sum)]`\n\n[TryFrom](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n    What `#[derive(TryFrom)]` generates\n\n[TryInto](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n    What `#[derive(TryInto)]` generates\n\n[TryUnwrap](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\")\n    What `#[derive(TryUnwrap)]` generates\n\n[Unwrap](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\")\n    What `#[derive(Unwrap)]` generates\n\n[UpperExp](https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html \"derive derive_more::UpperExp\")\n    What `#[derive(Display)]` generates\n\n[UpperHex](https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html \"derive derive_more::UpperHex\")\n    What `#[derive(Display)]` generates\n",
            "markdown_with_citations": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9`derive_more`\n![Build Status\u27e85\u27e9](https://github.com/JelteF/derive_more/actions) ![Latest Version\u27e86\u27e9](https://crates.io/crates/derive_more) ![Rust Documentation\u27e87\u27e9](https://docs.rs/derive_more) ![GitHub license\u27e88\u27e9](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) ![Rust 1.75+\u27e89\u27e9](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) ![Unsafe Forbidden\u27e810\u27e9](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### \u00a7\u27e811\u27e9Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### \u00a7\u27e812\u27e9The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the `cargo-expand`\u27e813\u27e9 utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### \u00a7\u27e814\u27e9Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. `From`\u27e815\u27e9\n  2. `Into`\u27e816\u27e9\n  3. `FromStr`\u27e817\u27e9\n  4. `TryFrom`\u27e818\u27e9\n  5. `TryInto`\u27e819\u27e9\n  6. `IntoIterator`\u27e820\u27e9\n  7. `AsRef`\u27e821\u27e9, `AsMut`\u27e822\u27e9\n\n\n#### \u00a7\u27e823\u27e9Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. `Debug`\u27e824\u27e9\n  2. `Display`-like\u27e825\u27e9, contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### \u00a7\u27e826\u27e9Error-handling traits\nThese traits are used to define error-types.\n  1. `Error`\u27e827\u27e9\n\n\n#### \u00a7\u27e828\u27e9Operators\nThese are traits that can be used for operator overloading.\n  1. `Index`\u27e829\u27e9\n  2. `Deref`\u27e830\u27e9\n  3. `Not`-like\u27e831\u27e9, contains `Not` and `Neg`\n  4. `Add`-like\u27e832\u27e9, contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. `Mul`-like\u27e833\u27e9, contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. `Sum`-like\u27e834\u27e9, contains `Sum` and `Product`\n  7. `IndexMut`\u27e835\u27e9\n  8. `DerefMut`\u27e836\u27e9\n  9. `AddAssign`-like\u27e837\u27e9, contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. `MulAssign`-like\u27e838\u27e9, contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### \u00a7\u27e839\u27e9Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. `Constructor`\u27e840\u27e9, this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the `derive-new`\u27e841\u27e9 crate.\n  2. `IsVariant`\u27e842\u27e9, for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. `Unwrap`\u27e843\u27e9, for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. `TryUnwrap`\u27e844\u27e9, for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### \u00a7\u27e845\u27e9Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### \u00a7\u27e846\u27e9Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n\u24d8\u27e847\u27e9```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n\u24d8\u27e847\u27e9```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### \u00a7\u27e848\u27e9Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n\u24d8\u27e847\u27e9```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### \u00a7\u27e849\u27e9MSRV\u27e850\u27e9 policy\nThis library requires Rust 1.75 or higher.\nChanging MSRV\u27e850\u27e9 (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of Semantic Versioning\u27e851\u27e9.\n  * So, if MSRV\u27e850\u27e9 changes are **NOT concerning** for your project, just use the default caret requirement\u27e852\u27e9:\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if MSRV\u27e850\u27e9 changes are concerning for your project, then use the tilde requirement\u27e853\u27e9 to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules\u00a7\u27e854\u27e9\n\nderive\u27e855\u27e9\n    Module containing derive definitions only, without their corresponding traits.\n\nwith_trait\u27e856\u27e9\n    Module containing derive definitions with their corresponding traits along.\n## Structs\u00a7\u27e857\u27e9\n\nFromStrError\u27e858\u27e9`from_str`\n    Error of parsing an enum value its string representation.\n\nTryFromReprError\u27e859\u27e9`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived `TryFrom`\u27e818\u27e9 implementation on enums to convert from their repr.\n\nTryIntoError\u27e860\u27e9`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived `TryInto`\u27e819\u27e9 implementation.\n\nTryUnwrapError\u27e861\u27e9`try_unwrap`\n    Error returned by the derived `TryUnwrap`\u27e844\u27e9 implementation.\n\nUnitError\u27e862\u27e9`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\nWrongVariantError\u27e863\u27e9`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums\u00a7\u27e864\u27e9\n\nBinaryError\u27e865\u27e9`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros\u00a7\u27e866\u27e9\n\nAdd\u27e832\u27e9\n    What `#[derive(Add)]` generates\n\nAddAssign\u27e837\u27e9\n    What `#[derive(AddAssign)]` generates\n\nAsMut\u27e822\u27e9\n    What `#[derive(AsRef)]` generates\n\nAsRef\u27e821\u27e9\n    What `#[derive(AsRef)]` generates\n\nBinary\u27e867\u27e9\n    What `#[derive(Display)]` generates\n\nBitAnd\u27e868\u27e9\n    What `#[derive(Add)]` generates\n\nBitAndAssign\u27e869\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitOr\u27e870\u27e9\n    What `#[derive(Add)]` generates\n\nBitOrAssign\u27e871\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitXor\u27e872\u27e9\n    What `#[derive(Add)]` generates\n\nBitXorAssign\u27e873\u27e9\n    What `#[derive(AddAssign)]` generates\n\nConstructor\u27e840\u27e9\n    What `#[derive(Constructor)]` generates\n\nDebug\u27e824\u27e9\n    What `#[derive(Debug)]` generates\n\nDeref\u27e830\u27e9\n    Using `#[derive(Deref)]`\n\nDerefMut\u27e836\u27e9\n    What `#[derive(DerefMut)]` generates\n\nDisplay\u27e825\u27e9\n    What `#[derive(Display)]` generates\n\nDiv\u27e874\u27e9\n    What `#[derive(Mul)]` generates\n\nDivAssign\u27e875\u27e9\n    What `#[derive(MulAssign)]` generates\n\nError\u27e827\u27e9\n    Using `#[derive(Error)]`\n\nFrom\u27e815\u27e9\n    What `#[derive(From)]` generates\n\nFromStr\u27e817\u27e9\n    What `#[derive(FromStr)]` generates\n\nIndex\u27e829\u27e9\n    What `#[derive(Index)]` generates\n\nIndexMut\u27e835\u27e9\n    What `#[derive(IndexMut)]` generates\n\nInto\u27e816\u27e9\n    What `#[derive(Into)]` generates\n\nIntoIterator\u27e820\u27e9\n    Using `#[derive(IntoIterator)]`\n\nIsVariant\u27e842\u27e9\n    What `#[derive(IsVariant)]` generates\n\nLowerExp\u27e876\u27e9\n    What `#[derive(Display)]` generates\n\nLowerHex\u27e877\u27e9\n    What `#[derive(Display)]` generates\n\nMul\u27e833\u27e9\n    What `#[derive(Mul)]` generates\n\nMulAssign\u27e838\u27e9\n    What `#[derive(MulAssign)]` generates\n\nNeg\u27e878\u27e9\n    What `#[derive(Not)]` generates\n\nNot\u27e831\u27e9\n    What `#[derive(Not)]` generates\n\nOctal\u27e879\u27e9\n    What `#[derive(Display)]` generates\n\nPointer\u27e880\u27e9\n    What `#[derive(Display)]` generates\n\nProduct\u27e881\u27e9\n    Using `#[derive(Sum)]`\n\nRem\u27e882\u27e9\n    What `#[derive(Mul)]` generates\n\nRemAssign\u27e883\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShl\u27e884\u27e9\n    What `#[derive(Mul)]` generates\n\nShlAssign\u27e885\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShr\u27e886\u27e9\n    What `#[derive(Mul)]` generates\n\nShrAssign\u27e887\u27e9\n    What `#[derive(MulAssign)]` generates\n\nSub\u27e888\u27e9\n    What `#[derive(Add)]` generates\n\nSubAssign\u27e889\u27e9\n    What `#[derive(AddAssign)]` generates\n\nSum\u27e834\u27e9\n    Using `#[derive(Sum)]`\n\nTryFrom\u27e818\u27e9\n    What `#[derive(TryFrom)]` generates\n\nTryInto\u27e819\u27e9\n    What `#[derive(TryInto)]` generates\n\nTryUnwrap\u27e844\u27e9\n    What `#[derive(TryUnwrap)]` generates\n\nUnwrap\u27e843\u27e9\n    What `#[derive(Unwrap)]` generates\n\nUpperExp\u27e890\u27e9\n    What `#[derive(Display)]` generates\n\nUpperHex\u27e891\u27e9\n    What `#[derive(Display)]` generates\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/derive_more/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/derive_more/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463: Source\n\u27e84\u27e9 https://docs.rs/derive_more/latest/derive_more/#derive_more: \u00a7\n\u27e85\u27e9 https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/derive_more.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/derive_more/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![GitHub license\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.75+-lightgray.svg: ![Rust 1.75+\n\u27e810\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![Unsafe Forbidden\n\u27e811\u27e9 https://docs.rs/derive_more/latest/derive_more/#example-code: \u00a7\n\u27e812\u27e9 https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits: \u00a7\n\u27e813\u27e9 https://github.com/dtolnay/cargo-expand: `cargo-expand`\n\u27e814\u27e9 https://docs.rs/derive_more/latest/derive_more/#conversion-traits: \u00a7\n\u27e815\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.From.html: derive derive_more::From - `From`\n\u27e816\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Into.html: derive derive_more::Into - `Into`\n\u27e817\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html: derive derive_more::FromStr - `FromStr`\n\u27e818\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html: derive derive_more::TryFrom - `TryFrom`\n\u27e819\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html: derive derive_more::TryInto - `TryInto`\n\u27e820\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html: derive derive_more::IntoIterator - `IntoIterator`\n\u27e821\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html: derive derive_more::AsRef - `AsRef`\n\u27e822\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html: `AsMut`\n\u27e823\u27e9 https://docs.rs/derive_more/latest/derive_more/#formatting-traits: \u00a7\n\u27e824\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Debug.html: derive derive_more::Debug - `Debug`\n\u27e825\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Display.html: derive derive_more::Display - `Display`-like\n\u27e826\u27e9 https://docs.rs/derive_more/latest/derive_more/#error-handling-traits: \u00a7\n\u27e827\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Error.html: derive derive_more::Error - `Error`\n\u27e828\u27e9 https://docs.rs/derive_more/latest/derive_more/#operators: \u00a7\n\u27e829\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Index.html: derive derive_more::Index - `Index`\n\u27e830\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Deref.html: derive derive_more::Deref - `Deref`\n\u27e831\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Not.html: derive derive_more::Not - `Not`-like\n\u27e832\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Add.html: derive derive_more::Add - `Add`-like\n\u27e833\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Mul.html: derive derive_more::Mul - `Mul`-like\n\u27e834\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sum.html: derive derive_more::Sum - `Sum`-like\n\u27e835\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html: derive derive_more::IndexMut - `IndexMut`\n\u27e836\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html: derive derive_more::DerefMut - `DerefMut`\n\u27e837\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html: derive derive_more::AddAssign - `AddAssign`-like\n\u27e838\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html: derive derive_more::MulAssign - `MulAssign`-like\n\u27e839\u27e9 https://docs.rs/derive_more/latest/derive_more/#static-methods: \u00a7\n\u27e840\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html: derive derive_more::Constructor - `Constructor`\n\u27e841\u27e9 https://github.com/nrc/derive-new: `derive-new`\n\u27e842\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html: derive derive_more::IsVariant - `IsVariant`\n\u27e843\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html: derive derive_more::Unwrap - `Unwrap`\n\u27e844\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html: derive derive_more::TryUnwrap - `TryUnwrap`\n\u27e845\u27e9 https://docs.rs/derive_more/latest/derive_more/#re-exports: \u00a7\n\u27e846\u27e9 https://docs.rs/derive_more/latest/derive_more/#hygiene: \u00a7\n\u27e847\u27e9 https://docs.rs/derive_more/latest/derive_more/: This example is not tested - \u24d8\n\u27e848\u27e9 https://docs.rs/derive_more/latest/derive_more/#installation: \u00a7\n\u27e849\u27e9 https://docs.rs/derive_more/latest/derive_more/#msrv-policy: \u00a7\n\u27e850\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field: MSRV\n\u27e851\u27e9 http://semver.org: Semantic Versioning\n\u27e852\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements: caret requirement\n\u27e853\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements: tilde requirement\n\u27e854\u27e9 https://docs.rs/derive_more/latest/derive_more/#modules: \u00a7\n\u27e855\u27e9 https://docs.rs/derive_more/latest/derive_more/derive/index.html: mod derive_more::derive - derive\n\u27e856\u27e9 https://docs.rs/derive_more/latest/derive_more/with_trait/index.html: mod derive_more::with_trait - with_trait\n\u27e857\u27e9 https://docs.rs/derive_more/latest/derive_more/#structs: \u00a7\n\u27e858\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html: struct derive_more::FromStrError - FromStrError\n\u27e859\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html: struct derive_more::TryFromReprError - TryFromReprError\n\u27e860\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html: struct derive_more::TryIntoError - TryIntoError\n\u27e861\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html: struct derive_more::TryUnwrapError - TryUnwrapError\n\u27e862\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html: struct derive_more::UnitError - UnitError\n\u27e863\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html: struct derive_more::WrongVariantError - WrongVariantError\n\u27e864\u27e9 https://docs.rs/derive_more/latest/derive_more/#enums: \u00a7\n\u27e865\u27e9 https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html: enum derive_more::BinaryError - BinaryError\n\u27e866\u27e9 https://docs.rs/derive_more/latest/derive_more/#derives: \u00a7\n\u27e867\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Binary.html: derive derive_more::Binary - Binary\n\u27e868\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html: derive derive_more::BitAnd - BitAnd\n\u27e869\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html: derive derive_more::BitAndAssign - BitAndAssign\n\u27e870\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html: derive derive_more::BitOr - BitOr\n\u27e871\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html: derive derive_more::BitOrAssign - BitOrAssign\n\u27e872\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html: derive derive_more::BitXor - BitXor\n\u27e873\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html: derive derive_more::BitXorAssign - BitXorAssign\n\u27e874\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Div.html: derive derive_more::Div - Div\n\u27e875\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html: derive derive_more::DivAssign - DivAssign\n\u27e876\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html: derive derive_more::LowerExp - LowerExp\n\u27e877\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html: derive derive_more::LowerHex - LowerHex\n\u27e878\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Neg.html: derive derive_more::Neg - Neg\n\u27e879\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Octal.html: derive derive_more::Octal - Octal\n\u27e880\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html: derive derive_more::Pointer - Pointer\n\u27e881\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Product.html: derive derive_more::Product - Product\n\u27e882\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Rem.html: derive derive_more::Rem - Rem\n\u27e883\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html: derive derive_more::RemAssign - RemAssign\n\u27e884\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shl.html: derive derive_more::Shl - Shl\n\u27e885\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html: derive derive_more::ShlAssign - ShlAssign\n\u27e886\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shr.html: derive derive_more::Shr - Shr\n\u27e887\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html: derive derive_more::ShrAssign - ShrAssign\n\u27e888\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sub.html: derive derive_more::Sub - Sub\n\u27e889\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html: derive derive_more::SubAssign - SubAssign\n\u27e890\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html: derive derive_more::UpperExp - UpperExp\n\u27e891\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html: derive derive_more::UpperHex - UpperHex\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "derive_more",
          "version": "2.0.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\n[Settings](https://docs.rs/derive_more/latest/settings.html)\n[Help](https://docs.rs/derive_more/latest/help.html)\nSummary[Source](https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463)\nExpand description\n## [\u00a7](https://docs.rs/derive_more/latest/derive_more/#derive_more)`derive_more`\n[![Build Status](https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg)](https://github.com/JelteF/derive_more/actions) [![Latest Version](https://img.shields.io/crates/v/derive_more.svg)](https://crates.io/crates/derive_more) [![Rust Documentation](https://docs.rs/derive_more/badge.svg)](https://docs.rs/derive_more) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) [![Rust 1.75+](https://img.shields.io/badge/rustc-1.75+-lightgray.svg)](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) [![Unsafe Forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#example-code)Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits)The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the [`cargo-expand`](https://github.com/dtolnay/cargo-expand) utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#conversion-traits)Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. [`From`](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n  2. [`Into`](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n  3. [`FromStr`](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n  4. [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n  5. [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n  6. [`IntoIterator`](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n  7. [`AsRef`](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\"), [`AsMut`](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html)\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#formatting-traits)Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. [`Debug`](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n  2. [`Display`-like](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\"), contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#error-handling-traits)Error-handling traits\nThese traits are used to define error-types.\n  1. [`Error`](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#operators)Operators\nThese are traits that can be used for operator overloading.\n  1. [`Index`](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n  2. [`Deref`](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n  3. [`Not`-like](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\"), contains `Not` and `Neg`\n  4. [`Add`-like](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\"), contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. [`Mul`-like](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\"), contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. [`Sum`-like](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\"), contains `Sum` and `Product`\n  7. [`IndexMut`](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n  8. [`DerefMut`](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n  9. [`AddAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\"), contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. [`MulAssign`-like](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\"), contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#static-methods)Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. [`Constructor`](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\"), this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the [`derive-new`](https://github.com/nrc/derive-new) crate.\n  2. [`IsVariant`](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\"), for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. [`Unwrap`](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\"), for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\"), for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#re-exports)Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#hygiene)Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example is not tested\")```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#installation)Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n[\u24d8](https://docs.rs/derive_more/latest/derive_more/ \"This example runs with edition 2015\")```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### [\u00a7](https://docs.rs/derive_more/latest/derive_more/#msrv-policy)[MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) policy\nThis library requires Rust 1.75 or higher.\nChanging [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of [Semantic Versioning](http://semver.org).\n  * So, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are **NOT concerning** for your project, just use the default [caret requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements):\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if [MSRV](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) changes are concerning for your project, then use the [tilde requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements) to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules[\u00a7](https://docs.rs/derive_more/latest/derive_more/#modules)\n\n[derive](https://docs.rs/derive_more/latest/derive_more/derive/index.html \"mod derive_more::derive\")\n    Module containing derive definitions only, without their corresponding traits.\n\n[with_trait](https://docs.rs/derive_more/latest/derive_more/with_trait/index.html \"mod derive_more::with_trait\")\n    Module containing derive definitions with their corresponding traits along.\n## Structs[\u00a7](https://docs.rs/derive_more/latest/derive_more/#structs)\n\n[FromStrError](https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html \"struct derive_more::FromStrError\")`from_str`\n    Error of parsing an enum value its string representation.\n\n[TryFromReprError](https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html \"struct derive_more::TryFromReprError\")`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryFrom`](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\") implementation on enums to convert from their repr.\n\n[TryIntoError](https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html \"struct derive_more::TryIntoError\")`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived [`TryInto`](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\") implementation.\n\n[TryUnwrapError](https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html \"struct derive_more::TryUnwrapError\")`try_unwrap`\n    Error returned by the derived [`TryUnwrap`](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\") implementation.\n\n[UnitError](https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html \"struct derive_more::UnitError\")`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\n[WrongVariantError](https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html \"struct derive_more::WrongVariantError\")`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums[\u00a7](https://docs.rs/derive_more/latest/derive_more/#enums)\n\n[BinaryError](https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html \"enum derive_more::BinaryError\")`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros[\u00a7](https://docs.rs/derive_more/latest/derive_more/#derives)\n\n[Add](https://docs.rs/derive_more/latest/derive_more/derive.Add.html \"derive derive_more::Add\")\n    What `#[derive(Add)]` generates\n\n[AddAssign](https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html \"derive derive_more::AddAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[AsMut](https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html \"derive derive_more::AsMut\")\n    What `#[derive(AsRef)]` generates\n\n[AsRef](https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html \"derive derive_more::AsRef\")\n    What `#[derive(AsRef)]` generates\n\n[Binary](https://docs.rs/derive_more/latest/derive_more/derive.Binary.html \"derive derive_more::Binary\")\n    What `#[derive(Display)]` generates\n\n[BitAnd](https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html \"derive derive_more::BitAnd\")\n    What `#[derive(Add)]` generates\n\n[BitAndAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html \"derive derive_more::BitAndAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitOr](https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html \"derive derive_more::BitOr\")\n    What `#[derive(Add)]` generates\n\n[BitOrAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html \"derive derive_more::BitOrAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[BitXor](https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html \"derive derive_more::BitXor\")\n    What `#[derive(Add)]` generates\n\n[BitXorAssign](https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html \"derive derive_more::BitXorAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Constructor](https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html \"derive derive_more::Constructor\")\n    What `#[derive(Constructor)]` generates\n\n[Debug](https://docs.rs/derive_more/latest/derive_more/derive.Debug.html \"derive derive_more::Debug\")\n    What `#[derive(Debug)]` generates\n\n[Deref](https://docs.rs/derive_more/latest/derive_more/derive.Deref.html \"derive derive_more::Deref\")\n    Using `#[derive(Deref)]`\n\n[DerefMut](https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html \"derive derive_more::DerefMut\")\n    What `#[derive(DerefMut)]` generates\n\n[Display](https://docs.rs/derive_more/latest/derive_more/derive.Display.html \"derive derive_more::Display\")\n    What `#[derive(Display)]` generates\n\n[Div](https://docs.rs/derive_more/latest/derive_more/derive.Div.html \"derive derive_more::Div\")\n    What `#[derive(Mul)]` generates\n\n[DivAssign](https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html \"derive derive_more::DivAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Error](https://docs.rs/derive_more/latest/derive_more/derive.Error.html \"derive derive_more::Error\")\n    Using `#[derive(Error)]`\n\n[From](https://docs.rs/derive_more/latest/derive_more/derive.From.html \"derive derive_more::From\")\n    What `#[derive(From)]` generates\n\n[FromStr](https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html \"derive derive_more::FromStr\")\n    What `#[derive(FromStr)]` generates\n\n[Index](https://docs.rs/derive_more/latest/derive_more/derive.Index.html \"derive derive_more::Index\")\n    What `#[derive(Index)]` generates\n\n[IndexMut](https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html \"derive derive_more::IndexMut\")\n    What `#[derive(IndexMut)]` generates\n\n[Into](https://docs.rs/derive_more/latest/derive_more/derive.Into.html \"derive derive_more::Into\")\n    What `#[derive(Into)]` generates\n\n[IntoIterator](https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html \"derive derive_more::IntoIterator\")\n    Using `#[derive(IntoIterator)]`\n\n[IsVariant](https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html \"derive derive_more::IsVariant\")\n    What `#[derive(IsVariant)]` generates\n\n[LowerExp](https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html \"derive derive_more::LowerExp\")\n    What `#[derive(Display)]` generates\n\n[LowerHex](https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html \"derive derive_more::LowerHex\")\n    What `#[derive(Display)]` generates\n\n[Mul](https://docs.rs/derive_more/latest/derive_more/derive.Mul.html \"derive derive_more::Mul\")\n    What `#[derive(Mul)]` generates\n\n[MulAssign](https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html \"derive derive_more::MulAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Neg](https://docs.rs/derive_more/latest/derive_more/derive.Neg.html \"derive derive_more::Neg\")\n    What `#[derive(Not)]` generates\n\n[Not](https://docs.rs/derive_more/latest/derive_more/derive.Not.html \"derive derive_more::Not\")\n    What `#[derive(Not)]` generates\n\n[Octal](https://docs.rs/derive_more/latest/derive_more/derive.Octal.html \"derive derive_more::Octal\")\n    What `#[derive(Display)]` generates\n\n[Pointer](https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html \"derive derive_more::Pointer\")\n    What `#[derive(Display)]` generates\n\n[Product](https://docs.rs/derive_more/latest/derive_more/derive.Product.html \"derive derive_more::Product\")\n    Using `#[derive(Sum)]`\n\n[Rem](https://docs.rs/derive_more/latest/derive_more/derive.Rem.html \"derive derive_more::Rem\")\n    What `#[derive(Mul)]` generates\n\n[RemAssign](https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html \"derive derive_more::RemAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shl](https://docs.rs/derive_more/latest/derive_more/derive.Shl.html \"derive derive_more::Shl\")\n    What `#[derive(Mul)]` generates\n\n[ShlAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html \"derive derive_more::ShlAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Shr](https://docs.rs/derive_more/latest/derive_more/derive.Shr.html \"derive derive_more::Shr\")\n    What `#[derive(Mul)]` generates\n\n[ShrAssign](https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html \"derive derive_more::ShrAssign\")\n    What `#[derive(MulAssign)]` generates\n\n[Sub](https://docs.rs/derive_more/latest/derive_more/derive.Sub.html \"derive derive_more::Sub\")\n    What `#[derive(Add)]` generates\n\n[SubAssign](https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html \"derive derive_more::SubAssign\")\n    What `#[derive(AddAssign)]` generates\n\n[Sum](https://docs.rs/derive_more/latest/derive_more/derive.Sum.html \"derive derive_more::Sum\")\n    Using `#[derive(Sum)]`\n\n[TryFrom](https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html \"derive derive_more::TryFrom\")\n    What `#[derive(TryFrom)]` generates\n\n[TryInto](https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html \"derive derive_more::TryInto\")\n    What `#[derive(TryInto)]` generates\n\n[TryUnwrap](https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html \"derive derive_more::TryUnwrap\")\n    What `#[derive(TryUnwrap)]` generates\n\n[Unwrap](https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html \"derive derive_more::Unwrap\")\n    What `#[derive(Unwrap)]` generates\n\n[UpperExp](https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html \"derive derive_more::UpperExp\")\n    What `#[derive(Display)]` generates\n\n[UpperHex](https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html \"derive derive_more::UpperHex\")\n    What `#[derive(Display)]` generates\n",
            "markdown_with_citations": "[](https://docs.rs/derive_more/latest/derive_more/all.html \"show sidebar\")\n# Crate derive_moreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9`derive_more`\n![Build Status\u27e85\u27e9](https://github.com/JelteF/derive_more/actions) ![Latest Version\u27e86\u27e9](https://crates.io/crates/derive_more) ![Rust Documentation\u27e87\u27e9](https://docs.rs/derive_more) ![GitHub license\u27e88\u27e9](https://raw.githubusercontent.com/JelteF/derive_more/master/LICENSE) ![Rust 1.75+\u27e89\u27e9](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html) ![Unsafe Forbidden\u27e810\u27e9](https://github.com/rust-secure-code/safety-dance)\nRust has lots of builtin traits that are implemented for its basic types, such as `Add`, `Not`, `From` or `Display`. However, when wrapping these types inside your own structs or enums you lose the implementations of these traits and are required to recreate them. This is especially annoying when your own structures are very simple, such as when using the commonly advised newtype pattern (e.g. `MyInt(i32)`).\nThis library tries to remove these annoyances and the corresponding boilerplate code. It does this by allowing you to derive lots of commonly used traits for both structs and enums.\n### \u00a7\u27e811\u27e9Example code\nBy using this library the following code just works:\n```\nuse derive_more::{Add, Display, From, Into};\n#[derive(PartialEq, From, Add)]\nstruct MyInt(i32);\n#[derive(PartialEq, From, Into)]\nstruct Point2D {\n  x: i32,\n  y: i32,\n}\n#[derive(PartialEq, From, Add, Display)]\nenum MyEnum {\n  #[display(\"int: {_0}\")]\n  Int(i32),\n  Uint(u32),\n  #[display(\"nothing\")]\n  Nothing,\n}\nassert!(MyInt(11) == MyInt(5) + 6.into());\nassert!((5, 6) == Point2D { x: 5, y: 6 }.into());\nassert!(MyEnum::Int(15) == (MyEnum::Int(8) + 7.into()).unwrap());\nassert!(MyEnum::Int(15).to_string() == \"int: 15\");\nassert!(MyEnum::Uint(42).to_string() == \"42\");\nassert!(MyEnum::Nothing.to_string() == \"nothing\");\n```\n\n### \u00a7\u27e812\u27e9The derivable traits\nBelow are all the traits that you can derive using this library. Some trait derivations are so similar that the further documentation will only show a single one of them. You can recognize these by the \u201c-like\u201d suffix in their name. The trait name before that will be the only one that is used throughout the further documentation.\nIt is important to understand what code gets generated when using one of the derives from this crate. That is why the links below explain what code gets generated for a trait for each group from before.\nYou can use the `cargo-expand`\u27e813\u27e9 utility to see the exact code that is generated for your specific type. This will show you your code with all macros and derives expanded.\n**NOTE** : You still have to derive each trait separately. So `#[derive(Mul)]` doesn\u2019t automatically derive `Div` as well. To derive both you should do `#[derive(Mul, Div)]`\n#### \u00a7\u27e814\u27e9Conversion traits\nThese are traits that are used to convert automatically between types.\n  1. `From`\u27e815\u27e9\n  2. `Into`\u27e816\u27e9\n  3. `FromStr`\u27e817\u27e9\n  4. `TryFrom`\u27e818\u27e9\n  5. `TryInto`\u27e819\u27e9\n  6. `IntoIterator`\u27e820\u27e9\n  7. `AsRef`\u27e821\u27e9, `AsMut`\u27e822\u27e9\n\n\n#### \u00a7\u27e823\u27e9Formatting traits\nThese traits are used for converting a struct to a string in different ways.\n  1. `Debug`\u27e824\u27e9\n  2. `Display`-like\u27e825\u27e9, contains `Display`, `Binary`, `Octal`, `LowerHex`, `UpperHex`, `LowerExp`, `UpperExp`, `Pointer`\n\n\n#### \u00a7\u27e826\u27e9Error-handling traits\nThese traits are used to define error-types.\n  1. `Error`\u27e827\u27e9\n\n\n#### \u00a7\u27e828\u27e9Operators\nThese are traits that can be used for operator overloading.\n  1. `Index`\u27e829\u27e9\n  2. `Deref`\u27e830\u27e9\n  3. `Not`-like\u27e831\u27e9, contains `Not` and `Neg`\n  4. `Add`-like\u27e832\u27e9, contains `Add`, `Sub`, `BitAnd`, `BitOr`, `BitXor`\n  5. `Mul`-like\u27e833\u27e9, contains `Mul`, `Div`, `Rem`, `Shr` and `Shl`\n  6. `Sum`-like\u27e834\u27e9, contains `Sum` and `Product`\n  7. `IndexMut`\u27e835\u27e9\n  8. `DerefMut`\u27e836\u27e9\n  9. `AddAssign`-like\u27e837\u27e9, contains `AddAssign`, `SubAssign`, `BitAndAssign`, `BitOrAssign` and `BitXorAssign`\n  10. `MulAssign`-like\u27e838\u27e9, contains `MulAssign`, `DivAssign`, `RemAssign`, `ShrAssign` and `ShlAssign`\n\n\n#### \u00a7\u27e839\u27e9Static methods\nThese don\u2019t derive traits, but derive static methods instead.\n  1. `Constructor`\u27e840\u27e9, this derives a `new` method that can be used as a constructor. This is very basic if you need more customization for your constructor, check out the `derive-new`\u27e841\u27e9 crate.\n  2. `IsVariant`\u27e842\u27e9, for each variant `foo` of an enum type, derives a `is_foo` method.\n  3. `Unwrap`\u27e843\u27e9, for each variant `foo` of an enum type, derives an `unwrap_foo` method.\n  4. `TryUnwrap`\u27e844\u27e9, for each variant `foo` of an enum type, derives an `try_unwrap_foo` method.\n\n\n#### \u00a7\u27e845\u27e9Re-exports\nThis crate also re-exports all the standard library traits, that it adds derives for, in the `with_trait` module. So, both the `Display` derive and the `Display` trait will be in scope when you add the following code:\n```\nuse derive_more::with_trait::Display; // also imports `core::fmt::Display`\n```\n\nBy default, derive macros only, without the corresponding traits, are imported from the crate\u2019s root (or from the `derive` module):\n```\nuse derive_more::Display;  // imports macro only\nuse derive_more::derive::*; // imports all macros only\n```\n\n##### \u00a7\u27e846\u27e9Hygiene\nFor hygiene purposes, macros use `derive_more::*` absolute paths in their expansions. This might introduce a trouble, if you want to re-export `derive_more` macros in your own crate without using the `derive_more` as a direct dependency in downstream crates:\n\u24d8\u27e847\u27e9```\nuse my_lib::Display; // re-exported in `my_lib` crate\n#[derive(Display)] // error: could not find `derive_more` in the list of imported crates\nstruct MyInt(i32);\n```\n\nIn such case, you should re-export the `derive_more` module too:\n\u24d8\u27e847\u27e9```\nuse my_lib::{derive_more, Display}; // re-exported in `my_lib` crate\n#[derive(Display)] // works fine now!\nstruct MyInt(i32);\n```\n\n### \u00a7\u27e848\u27e9Installation\nTo avoid redundant compilation times, by default no derives are supported. You have to enable each type of derive as a feature in `Cargo.toml`:\n```\n[dependencies]\n# You can specify the types of derives that you need for less time spent\n# compiling. For the full list of features see this crate its `Cargo.toml`.\nderive_more = { version = \"2\", features = [\"from\", \"add\", \"into_iterator\"] }\n```\n\n```\n[dependencies]\n# If you don't care much about compilation times and simply want to have\n# support for all the possible derives, you can use the \"full\" feature.\nderive_more = { version = \"2\", features = [\"full\"] }\n```\n\n```\n[dependencies]\n# If you run in a `no_std` environment you should disable the default features,\n# because the only default feature is the \"std\" feature.\n# NOTE: You can combine this with \"full\" feature to get support for all the\n#    possible derives in a `no_std` environment.\nderive_more = { version = \"2\", default-features = false }\n```\n\nAnd this to the top of your Rust file:\n```\n// use the derives that you want in the file\nuse derive_more::{Add, Display, From};\n```\n\nIf you\u2019re still using Rust 2015, add this instead:\n\u24d8\u27e847\u27e9```\nextern crate core;\n#[macro_use]\nextern crate derive_more;\n```\n\n### \u00a7\u27e849\u27e9MSRV\u27e850\u27e9 policy\nThis library requires Rust 1.75 or higher.\nChanging MSRV\u27e850\u27e9 (minimum supported Rust version) of this crate is treated as a **minor version change** in terms of Semantic Versioning\u27e851\u27e9.\n  * So, if MSRV\u27e850\u27e9 changes are **NOT concerning** for your project, just use the default caret requirement\u27e852\u27e9:\n```\n[dependencies]\nderive_more = \"2\" # or \"2.0\", or \"^2.0\"\n```\n\n  * However, if MSRV\u27e850\u27e9 changes are concerning for your project, then use the tilde requirement\u27e853\u27e9 to **pin to a specific minor version** :\n```\n[dependencies]\nderive_more = \"~2.0\" # or \"~2.0.0\"\n```\n\n\n\n## Modules\u00a7\u27e854\u27e9\n\nderive\u27e855\u27e9\n    Module containing derive definitions only, without their corresponding traits.\n\nwith_trait\u27e856\u27e9\n    Module containing derive definitions with their corresponding traits along.\n## Structs\u00a7\u27e857\u27e9\n\nFromStrError\u27e858\u27e9`from_str`\n    Error of parsing an enum value its string representation.\n\nTryFromReprError\u27e859\u27e9`try_from` and (`try_into` or `try_from`)\n    Error returned by the derived `TryFrom`\u27e818\u27e9 implementation on enums to convert from their repr.\n\nTryIntoError\u27e860\u27e9`try_into` and (`try_into` or `try_from`)\n    Error returned by the derived `TryInto`\u27e819\u27e9 implementation.\n\nTryUnwrapError\u27e861\u27e9`try_unwrap`\n    Error returned by the derived `TryUnwrap`\u27e844\u27e9 implementation.\n\nUnitError\u27e862\u27e9`add` or `not`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on a unit-like variant of an enum.\n\nWrongVariantError\u27e863\u27e9`add`\n    Error returned by the derived implementations when an arithmetic or logic operation is invoked on mismatched enum variants.\n## Enums\u00a7\u27e864\u27e9\n\nBinaryError\u27e865\u27e9`add`\n    Possible errors returned by the derived implementations of binary arithmetic or logic operations.\n## Derive Macros\u00a7\u27e866\u27e9\n\nAdd\u27e832\u27e9\n    What `#[derive(Add)]` generates\n\nAddAssign\u27e837\u27e9\n    What `#[derive(AddAssign)]` generates\n\nAsMut\u27e822\u27e9\n    What `#[derive(AsRef)]` generates\n\nAsRef\u27e821\u27e9\n    What `#[derive(AsRef)]` generates\n\nBinary\u27e867\u27e9\n    What `#[derive(Display)]` generates\n\nBitAnd\u27e868\u27e9\n    What `#[derive(Add)]` generates\n\nBitAndAssign\u27e869\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitOr\u27e870\u27e9\n    What `#[derive(Add)]` generates\n\nBitOrAssign\u27e871\u27e9\n    What `#[derive(AddAssign)]` generates\n\nBitXor\u27e872\u27e9\n    What `#[derive(Add)]` generates\n\nBitXorAssign\u27e873\u27e9\n    What `#[derive(AddAssign)]` generates\n\nConstructor\u27e840\u27e9\n    What `#[derive(Constructor)]` generates\n\nDebug\u27e824\u27e9\n    What `#[derive(Debug)]` generates\n\nDeref\u27e830\u27e9\n    Using `#[derive(Deref)]`\n\nDerefMut\u27e836\u27e9\n    What `#[derive(DerefMut)]` generates\n\nDisplay\u27e825\u27e9\n    What `#[derive(Display)]` generates\n\nDiv\u27e874\u27e9\n    What `#[derive(Mul)]` generates\n\nDivAssign\u27e875\u27e9\n    What `#[derive(MulAssign)]` generates\n\nError\u27e827\u27e9\n    Using `#[derive(Error)]`\n\nFrom\u27e815\u27e9\n    What `#[derive(From)]` generates\n\nFromStr\u27e817\u27e9\n    What `#[derive(FromStr)]` generates\n\nIndex\u27e829\u27e9\n    What `#[derive(Index)]` generates\n\nIndexMut\u27e835\u27e9\n    What `#[derive(IndexMut)]` generates\n\nInto\u27e816\u27e9\n    What `#[derive(Into)]` generates\n\nIntoIterator\u27e820\u27e9\n    Using `#[derive(IntoIterator)]`\n\nIsVariant\u27e842\u27e9\n    What `#[derive(IsVariant)]` generates\n\nLowerExp\u27e876\u27e9\n    What `#[derive(Display)]` generates\n\nLowerHex\u27e877\u27e9\n    What `#[derive(Display)]` generates\n\nMul\u27e833\u27e9\n    What `#[derive(Mul)]` generates\n\nMulAssign\u27e838\u27e9\n    What `#[derive(MulAssign)]` generates\n\nNeg\u27e878\u27e9\n    What `#[derive(Not)]` generates\n\nNot\u27e831\u27e9\n    What `#[derive(Not)]` generates\n\nOctal\u27e879\u27e9\n    What `#[derive(Display)]` generates\n\nPointer\u27e880\u27e9\n    What `#[derive(Display)]` generates\n\nProduct\u27e881\u27e9\n    Using `#[derive(Sum)]`\n\nRem\u27e882\u27e9\n    What `#[derive(Mul)]` generates\n\nRemAssign\u27e883\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShl\u27e884\u27e9\n    What `#[derive(Mul)]` generates\n\nShlAssign\u27e885\u27e9\n    What `#[derive(MulAssign)]` generates\n\nShr\u27e886\u27e9\n    What `#[derive(Mul)]` generates\n\nShrAssign\u27e887\u27e9\n    What `#[derive(MulAssign)]` generates\n\nSub\u27e888\u27e9\n    What `#[derive(Add)]` generates\n\nSubAssign\u27e889\u27e9\n    What `#[derive(AddAssign)]` generates\n\nSum\u27e834\u27e9\n    Using `#[derive(Sum)]`\n\nTryFrom\u27e818\u27e9\n    What `#[derive(TryFrom)]` generates\n\nTryInto\u27e819\u27e9\n    What `#[derive(TryInto)]` generates\n\nTryUnwrap\u27e844\u27e9\n    What `#[derive(TryUnwrap)]` generates\n\nUnwrap\u27e843\u27e9\n    What `#[derive(Unwrap)]` generates\n\nUpperExp\u27e890\u27e9\n    What `#[derive(Display)]` generates\n\nUpperHex\u27e891\u27e9\n    What `#[derive(Display)]` generates\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/derive_more/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/derive_more/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/derive_more/latest/src/derive_more/lib.rs.html#3-463: Source\n\u27e84\u27e9 https://docs.rs/derive_more/latest/derive_more/#derive_more: \u00a7\n\u27e85\u27e9 https://github.com/JelteF/derive_more/actions/workflows/ci.yml/badge.svg: ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/derive_more.svg: ![Latest Version\n\u27e87\u27e9 https://docs.rs/derive_more/badge.svg: ![Rust Documentation\n\u27e88\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![GitHub license\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.75+-lightgray.svg: ![Rust 1.75+\n\u27e810\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![Unsafe Forbidden\n\u27e811\u27e9 https://docs.rs/derive_more/latest/derive_more/#example-code: \u00a7\n\u27e812\u27e9 https://docs.rs/derive_more/latest/derive_more/#the-derivable-traits: \u00a7\n\u27e813\u27e9 https://github.com/dtolnay/cargo-expand: `cargo-expand`\n\u27e814\u27e9 https://docs.rs/derive_more/latest/derive_more/#conversion-traits: \u00a7\n\u27e815\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.From.html: derive derive_more::From - `From`\n\u27e816\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Into.html: derive derive_more::Into - `Into`\n\u27e817\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.FromStr.html: derive derive_more::FromStr - `FromStr`\n\u27e818\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryFrom.html: derive derive_more::TryFrom - `TryFrom`\n\u27e819\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryInto.html: derive derive_more::TryInto - `TryInto`\n\u27e820\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IntoIterator.html: derive derive_more::IntoIterator - `IntoIterator`\n\u27e821\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsRef.html: derive derive_more::AsRef - `AsRef`\n\u27e822\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AsMut.html: `AsMut`\n\u27e823\u27e9 https://docs.rs/derive_more/latest/derive_more/#formatting-traits: \u00a7\n\u27e824\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Debug.html: derive derive_more::Debug - `Debug`\n\u27e825\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Display.html: derive derive_more::Display - `Display`-like\n\u27e826\u27e9 https://docs.rs/derive_more/latest/derive_more/#error-handling-traits: \u00a7\n\u27e827\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Error.html: derive derive_more::Error - `Error`\n\u27e828\u27e9 https://docs.rs/derive_more/latest/derive_more/#operators: \u00a7\n\u27e829\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Index.html: derive derive_more::Index - `Index`\n\u27e830\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Deref.html: derive derive_more::Deref - `Deref`\n\u27e831\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Not.html: derive derive_more::Not - `Not`-like\n\u27e832\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Add.html: derive derive_more::Add - `Add`-like\n\u27e833\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Mul.html: derive derive_more::Mul - `Mul`-like\n\u27e834\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sum.html: derive derive_more::Sum - `Sum`-like\n\u27e835\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IndexMut.html: derive derive_more::IndexMut - `IndexMut`\n\u27e836\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DerefMut.html: derive derive_more::DerefMut - `DerefMut`\n\u27e837\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.AddAssign.html: derive derive_more::AddAssign - `AddAssign`-like\n\u27e838\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.MulAssign.html: derive derive_more::MulAssign - `MulAssign`-like\n\u27e839\u27e9 https://docs.rs/derive_more/latest/derive_more/#static-methods: \u00a7\n\u27e840\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Constructor.html: derive derive_more::Constructor - `Constructor`\n\u27e841\u27e9 https://github.com/nrc/derive-new: `derive-new`\n\u27e842\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.IsVariant.html: derive derive_more::IsVariant - `IsVariant`\n\u27e843\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Unwrap.html: derive derive_more::Unwrap - `Unwrap`\n\u27e844\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.TryUnwrap.html: derive derive_more::TryUnwrap - `TryUnwrap`\n\u27e845\u27e9 https://docs.rs/derive_more/latest/derive_more/#re-exports: \u00a7\n\u27e846\u27e9 https://docs.rs/derive_more/latest/derive_more/#hygiene: \u00a7\n\u27e847\u27e9 https://docs.rs/derive_more/latest/derive_more/: This example is not tested - \u24d8\n\u27e848\u27e9 https://docs.rs/derive_more/latest/derive_more/#installation: \u00a7\n\u27e849\u27e9 https://docs.rs/derive_more/latest/derive_more/#msrv-policy: \u00a7\n\u27e850\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field: MSRV\n\u27e851\u27e9 http://semver.org: Semantic Versioning\n\u27e852\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#caret-requirements: caret requirement\n\u27e853\u27e9 https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#tilde-requirements: tilde requirement\n\u27e854\u27e9 https://docs.rs/derive_more/latest/derive_more/#modules: \u00a7\n\u27e855\u27e9 https://docs.rs/derive_more/latest/derive_more/derive/index.html: mod derive_more::derive - derive\n\u27e856\u27e9 https://docs.rs/derive_more/latest/derive_more/with_trait/index.html: mod derive_more::with_trait - with_trait\n\u27e857\u27e9 https://docs.rs/derive_more/latest/derive_more/#structs: \u00a7\n\u27e858\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.FromStrError.html: struct derive_more::FromStrError - FromStrError\n\u27e859\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryFromReprError.html: struct derive_more::TryFromReprError - TryFromReprError\n\u27e860\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryIntoError.html: struct derive_more::TryIntoError - TryIntoError\n\u27e861\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.TryUnwrapError.html: struct derive_more::TryUnwrapError - TryUnwrapError\n\u27e862\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.UnitError.html: struct derive_more::UnitError - UnitError\n\u27e863\u27e9 https://docs.rs/derive_more/latest/derive_more/struct.WrongVariantError.html: struct derive_more::WrongVariantError - WrongVariantError\n\u27e864\u27e9 https://docs.rs/derive_more/latest/derive_more/#enums: \u00a7\n\u27e865\u27e9 https://docs.rs/derive_more/latest/derive_more/enum.BinaryError.html: enum derive_more::BinaryError - BinaryError\n\u27e866\u27e9 https://docs.rs/derive_more/latest/derive_more/#derives: \u00a7\n\u27e867\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Binary.html: derive derive_more::Binary - Binary\n\u27e868\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAnd.html: derive derive_more::BitAnd - BitAnd\n\u27e869\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitAndAssign.html: derive derive_more::BitAndAssign - BitAndAssign\n\u27e870\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOr.html: derive derive_more::BitOr - BitOr\n\u27e871\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitOrAssign.html: derive derive_more::BitOrAssign - BitOrAssign\n\u27e872\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXor.html: derive derive_more::BitXor - BitXor\n\u27e873\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.BitXorAssign.html: derive derive_more::BitXorAssign - BitXorAssign\n\u27e874\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Div.html: derive derive_more::Div - Div\n\u27e875\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.DivAssign.html: derive derive_more::DivAssign - DivAssign\n\u27e876\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerExp.html: derive derive_more::LowerExp - LowerExp\n\u27e877\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.LowerHex.html: derive derive_more::LowerHex - LowerHex\n\u27e878\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Neg.html: derive derive_more::Neg - Neg\n\u27e879\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Octal.html: derive derive_more::Octal - Octal\n\u27e880\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Pointer.html: derive derive_more::Pointer - Pointer\n\u27e881\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Product.html: derive derive_more::Product - Product\n\u27e882\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Rem.html: derive derive_more::Rem - Rem\n\u27e883\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.RemAssign.html: derive derive_more::RemAssign - RemAssign\n\u27e884\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shl.html: derive derive_more::Shl - Shl\n\u27e885\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShlAssign.html: derive derive_more::ShlAssign - ShlAssign\n\u27e886\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Shr.html: derive derive_more::Shr - Shr\n\u27e887\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.ShrAssign.html: derive derive_more::ShrAssign - ShrAssign\n\u27e888\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.Sub.html: derive derive_more::Sub - Sub\n\u27e889\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.SubAssign.html: derive derive_more::SubAssign - SubAssign\n\u27e890\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperExp.html: derive derive_more::UpperExp - UpperExp\n\u27e891\u27e9 https://docs.rs/derive_more/latest/derive_more/derive.UpperHex.html: derive derive_more::UpperHex - UpperHex\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `derive_more` crate simplifies boilerplate code by enabling automatic derivation of common traits for structs and enums, such as conversion traits (`From`, `Into`), formatting traits (`Display`, `Debug`), error-handling (`Error`), and operator overloading (`Add`, `Mul`, etc.). It supports a wide range of traits, making it particularly useful for newtype patterns and reducing manual implementation effort. The crate also offers a \"full\" feature for comprehensive trait support.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Trait Derivation\n\u2705 Factual: The `derive_more` crate allows you to derive commonly used traits like `Add`, `Display`, `From`, and `Into` for both structs and enums, reducing boilerplate code.  \n\u274c Counterfactual: The `derive_more` crate automatically derives all traits for a type when you specify a single derive macro, such as `#[derive(Add)]`.\n\n---\n\n### Pair 2: Feature Flags\n\u2705 Factual: The \"full\" feature of the `derive_more` crate enables support for all possible derivable traits, which can be useful if you don't mind slightly increased compilation times.  \n\u274c Counterfactual: The \"full\" feature is enabled by default, meaning all derivable traits are always available without additional configuration.\n\n---\n\n### Pair 3: Conversion Traits\n\u2705 Factual: The crate supports conversion traits such as `From`, `Into`, `TryFrom`, and `TryInto`, enabling seamless type conversions for your custom structs and enums.  \n\u274c Counterfactual: The crate automatically derives both `From` and `Into` traits when you derive one of them, without requiring explicit specification of both traits.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-4bc96d95-42432372-1751259795",
      "timestamp": "2025-06-30T05:03:15.900560+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]