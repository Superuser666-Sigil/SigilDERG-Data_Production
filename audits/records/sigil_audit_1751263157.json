[
  {
    "execution_id": "exec-a4d391e9-665f7353-1751263133",
    "timestamp": "2025-06-30T05:58:53.648888+00:00",
    "sacred_chain": {
      "input_data": "futures-concurrency",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'futures-concurrency' -> 'futures-concurrency'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "futures-concurrency",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/futures-concurrency",
            "title": "futures-concurrency v7.6.3",
            "content": {
              "raw_markdown": "#  futures-concurrency v7.6.3\nStructured concurrency operations for async Rust \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #concurrency ](https://crates.io/keywords/concurrency)\n\n\n  * [ Readme ](https://crates.io/crates/futures-concurrency)\n  * [ 29 Versions ](https://crates.io/crates/futures-concurrency/versions)\n  * [ Dependencies ](https://crates.io/crates/futures-concurrency/dependencies)\n  * [ Dependents ](https://crates.io/crates/futures-concurrency/reverse_dependencies)\n\n\n## Metadata\n5 months ago \nv1.75.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n78.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-concurrency\nOr add the following line to your Cargo.toml:\nfutures-concurrency = \"7.6.3\"\n## Documentation\n[ docs.rs/futures-concurrency ](https://docs.rs/futures-concurrency)\n## Repository\n[ github.com/yoshuawuyts/futures-concurrency ](https://github.com/yoshuawuyts/futures-concurrency)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Concurrency](https://crates.io/categories/concurrency)\n\n\n[ Report crate ](https://crates.io/support?crate=futures-concurrency&inquire=crate-violation)\n### Stats Overview\n2,174,645 Downloads all time\n29 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  futures-concurrency v7.6.3\nStructured concurrency operations for async Rust \n  *  #async \u27e81\u27e9\n  *  #concurrency \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  29 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n5 months ago \nv1.75.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n78.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-concurrency\nOr add the following line to your Cargo.toml:\nfutures-concurrency = \"7.6.3\"\n## Documentation\n docs.rs/futures-concurrency \u27e89\u27e9\n## Repository\n github.com/yoshuawuyts/futures-concurrency \u27e810\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e811\u27e9\n  * Concurrency\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n2,174,645 Downloads all time\n29 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/concurrency:  #concurrency \n\u27e83\u27e9 https://crates.io/crates/futures-concurrency:  Readme \n\u27e84\u27e9 https://crates.io/crates/futures-concurrency/versions:  29 Versions \n\u27e85\u27e9 https://crates.io/crates/futures-concurrency/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/futures-concurrency/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/futures-concurrency:  docs.rs/futures-concurrency \n\u27e810\u27e9 https://github.com/yoshuawuyts/futures-concurrency:  github.com/yoshuawuyts/futures-concurrency \n\u27e811\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e812\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e813\u27e9 https://crates.io/support?crate=futures-concurrency&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1440,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116923.4767353"
          },
          "docs_rs": {
            "url": "https://docs.rs/futures-concurrency",
            "title": "Crate futures_concurrencyCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\n[Settings](https://docs.rs/futures-concurrency/latest/settings.html)\n[Help](https://docs.rs/futures-concurrency/latest/help.html)\nSummary[Source](https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203)\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples)Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from[`std::thread::scope`](https://doc.rust-lang.org/std/thread/fn.scope.html)._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations)Operations\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures)Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * [`FutureGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html \"struct futures_concurrency::future::FutureGroup\"): A growable group of futures which operate as a single unit.\n  * `tuple`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\) \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\) \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\) \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\) \"trait futures_concurrency::future::RaceOk\")\n  * `array`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::RaceOk\")\n  * `Vec`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E \"trait futures_concurrency::future::RaceOk\")\n\n\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams)Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * [`StreamGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html \"struct futures_concurrency::stream::StreamGroup\"): A growable group of streams which operate as a single unit.\n  * [`ConcurrentStream`](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html \"trait futures_concurrency::concurrent_stream::ConcurrentStream\"): A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\) \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\) \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\) \"trait futures_concurrency::stream::Zip\")\n  * `array`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Zip\")\n  * `Vec`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Zip\")\n\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support)Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags)Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading)Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * [Futures Concurrency I: Introduction](https://blog.yoshuawuyts.com/futures-concurrency/)\n  * [Futures Concurrency II: A Trait Approach](https://blog.yoshuawuyts.com/futures-concurrency-2/)\n  * [Futures Concurrency III: `select!`](https://blog.yoshuawuyts.com/futures-concurrency-3/)\n  * [Futures Concurrency IV: Join Semantics](https://blog.yoshuawuyts.com/futures-concurrency-4/)\n\n\n## Modules[\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules)\n\n[array](https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html \"mod futures_concurrency::array\")\n    Helper functions and types for fixed-length arrays.\n\n[concurrent_stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html \"mod futures_concurrency::concurrent_stream\")\n    Concurrent execution of streams\n\n[future](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html \"mod futures_concurrency::future\")\n    Asynchronous basic functionality.\n\n[prelude](https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html \"mod futures_concurrency::prelude\")\n    The futures concurrency prelude.\n\n[stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html \"mod futures_concurrency::stream\")\n    Composable asynchronous iteration.\n\n[vec](https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html \"mod futures_concurrency::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/std/vec/index.html) (`Vec<T>`)\n",
              "markdown_with_citations": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## \u00a7\u27e84\u27e9Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from`std::thread::scope`\u27e85\u27e9._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## \u00a7\u27e86\u27e9Operations\n### \u00a7\u27e87\u27e9Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * `FutureGroup`\u27e88\u27e9: A growable group of futures which operate as a single unit.\n  * `tuple`: `join`\u27e89\u27e9 \"trait futures_concurrency::future::Join\"), `try_join`\u27e810\u27e9 \"trait futures_concurrency::future::TryJoin\"), `race`\u27e811\u27e9 \"trait futures_concurrency::future::Race\"), `race_ok`\u27e812\u27e9 \"trait futures_concurrency::future::RaceOk\")\n  * `array`: `join`\u27e813\u27e9, `try_join`\u27e814\u27e9, `race`\u27e815\u27e9, `race_ok`\u27e816\u27e9\n  * `Vec`: `join`\u27e817\u27e9, `try_join`\u27e818\u27e9, `race`\u27e819\u27e9, `race_ok`\u27e820\u27e9\n\n\n### \u00a7\u27e821\u27e9Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * `StreamGroup`\u27e822\u27e9: A growable group of streams which operate as a single unit.\n  * `ConcurrentStream`\u27e823\u27e9: A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: `chain`\u27e824\u27e9 \"trait futures_concurrency::stream::Chain\"), `merge`\u27e825\u27e9 \"trait futures_concurrency::stream::Merge\"), `zip`\u27e826\u27e9 \"trait futures_concurrency::stream::Zip\")\n  * `array`: `chain`\u27e827\u27e9, `merge`\u27e828\u27e9, `zip`\u27e829\u27e9\n  * `Vec`: `chain`\u27e830\u27e9, `merge`\u27e831\u27e9, `zip`\u27e832\u27e9\n\n\n## \u00a7\u27e833\u27e9Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## \u00a7\u27e834\u27e9Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## \u00a7\u27e835\u27e9Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * Futures Concurrency I: Introduction\u27e836\u27e9\n  * Futures Concurrency II: A Trait Approach\u27e837\u27e9\n  * Futures Concurrency III: `select!`\u27e838\u27e9\n  * Futures Concurrency IV: Join Semantics\u27e839\u27e9\n\n\n## Modules\u00a7\u27e840\u27e9\n\narray\u27e841\u27e9\n    Helper functions and types for fixed-length arrays.\n\nconcurrent_stream\u27e842\u27e9\n    Concurrent execution of streams\n\nfuture\u27e843\u27e9\n    Asynchronous basic functionality.\n\nprelude\u27e844\u27e9\n    The futures concurrency prelude.\n\nstream\u27e845\u27e9\n    Composable asynchronous iteration.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-concurrency/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-concurrency/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203: Source\n\u27e84\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples: \u00a7\n\u27e85\u27e9 https://doc.rust-lang.org/std/thread/fn.scope.html: `std::thread::scope`\n\u27e86\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations: \u00a7\n\u27e87\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures: \u00a7\n\u27e88\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html: struct futures_concurrency::future::FutureGroup - `FutureGroup`\n\u27e89\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\: `join`\n\u27e810\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\: `try_join`\n\u27e811\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\: `race`\n\u27e812\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\: `race_ok`\n\u27e813\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Join - `join`\n\u27e814\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e815\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Race - `race`\n\u27e816\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e817\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E: trait futures_concurrency::future::Join - `join`\n\u27e818\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e819\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E: trait futures_concurrency::future::Race - `race`\n\u27e820\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e821\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams: \u00a7\n\u27e822\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html: struct futures_concurrency::stream::StreamGroup - `StreamGroup`\n\u27e823\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html: trait futures_concurrency::concurrent_stream::ConcurrentStream - `ConcurrentStream`\n\u27e824\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\: `chain`\n\u27e825\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\: `merge`\n\u27e826\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\: `zip`\n\u27e827\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Chain - `chain`\n\u27e828\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Merge - `merge`\n\u27e829\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Zip - `zip`\n\u27e830\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E: trait futures_concurrency::stream::Chain - `chain`\n\u27e831\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E: trait futures_concurrency::stream::Merge - `merge`\n\u27e832\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E: trait futures_concurrency::stream::Zip - `zip`\n\u27e833\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support: \u00a7\n\u27e834\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags: \u00a7\n\u27e835\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading: \u00a7\n\u27e836\u27e9 https://blog.yoshuawuyts.com/futures-concurrency/: Futures Concurrency I: Introduction\n\u27e837\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-2/: Futures Concurrency II: A Trait Approach\n\u27e838\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-3/: Futures Concurrency III: `select!`\n\u27e839\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-4/: Futures Concurrency IV: Join Semantics\n\u27e840\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules: \u00a7\n\u27e841\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html: mod futures_concurrency::array - array\n\u27e842\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html: mod futures_concurrency::concurrent_stream - concurrent_stream\n\u27e843\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html: mod futures_concurrency::future - future\n\u27e844\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html: mod futures_concurrency::prelude - prelude\n\u27e845\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html: mod futures_concurrency::stream - stream\n\u27e846\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html: mod futures_concurrency::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/std/vec/index.html: vectors\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11085,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116924.3334122"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/futures-concurrency",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [29 stable releases](https://lib.rs/crates/futures-concurrency/versions) (6 major)\n7.6.3 |  Jan 29, 2025   \n---|---  \n7.6.2 |  Oct 24, 2024   \n7.6.1 |  Jun 9, 2024   \n7.5.0 |  Mar 11, 2024   \n1.1.0 |  Oct 19, 2021   \n#**24** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 33209/week @ 2025-02-12 32966/week @ 2025-02-19 30179/week @ 2025-02-26 32685/week @ 2025-03-05 42383/week @ 2025-03-12 37143/week @ 2025-03-19 33632/week @ 2025-03-26 36978/week @ 2025-04-02 33863/week @ 2025-04-09 27956/week @ 2025-04-16 29486/week @ 2025-04-23 28138/week @ 2025-04-30 25540/week @ 2025-05-07 24603/week @ 2025-05-14 22660/week @ 2025-05-21 20745/week @ 2025-05-28\n**98,289** downloads per month Used in [**129** crates (22 directly)](https://lib.rs/crates/futures-concurrency/rev)\n**MIT/Apache**\n305KB  6.5K  SLoC\n# futures-concurrency\n**Structured concurrency operations for async Rust**\n[ ![Crates.io version](https://img.shields.io/crates/v/futures-concurrency.svg?style=flat-square) ](https://crates.io/crates/futures-concurrency) [ ![Download](https://img.shields.io/crates/d/futures-concurrency.svg?style=flat-square) ](https://crates.io/crates/futures-concurrency) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/futures-concurrency)\n###  [ API Docs ](https://docs.rs/futures-concurrency) |  [ Releases ](https://github.com/yoshuawuyts/futures-concurrency/releases) |  [ Contributing ](https://github.com/yoshuawuyts/futures-concurrency/blob/master.github/CONTRIBUTING.md)\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n``futures-concurrency`` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## Examples\n**Await multiple futures of different types**\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`use` `std`::``future`;`\n`let` a `=` `future`::``ready`(``1``u8``)``;`\n`let` b `=` `future`::``ready`(```\"`hello`\"```)``;`\n`let` c `=` `future`::``ready`(``3``u16``)``;`\n`assert_eq!``(``(`a`,` b`,` c`)``.``join``(``)``.`await`,` `(``1``,` ``\"`hello`\"```,` `3``)``)``;`\n`\n```\n\n**Concurrently process items in a stream**\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`let` v`:` ``Vec``<``_``>`` `=` `vec!``[```\"`chashu`\"```,` ``\"`nori`\"```]`\n  `.``into_co_stream``(``)`\n  `.``map``(````|``````msg``|`` ``async `move` ``{` `format!``(```\"`hello `{msg}``\"```)` ```}````)`\n  `.``collect``(``)`\n  `.`await`;`\n`assert_eq!``(`v`,` `&``[```\"`hello chashu`\"```,` ``\"`hello nori`\"```]``)``;`\n`\n```\n\n**Access stack data outside the futures' scope**\n_Adapted from[```std`::```thread`::``scope``](https://doc.rust-lang.org/std/thread/fn.scope.html)._\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`let` `mut` container `=` `vec!``[``1``,` `2``,` `3``]``;`\n`let` `mut` num `=` `0``;`\n`let` a `=` async ``{`\n  `println!``(```\"`hello from the first future`\"```)``;`\n  `dbg!``(``&`container`)``;`\n```}```;`\n`let` b `=` async ``{`\n  `println!``(```\"`hello from the second future`\"```)``;`\n  num `+=` container`[``0``]` `+` container`[``2``]``;`\n```}```;`\n`println!``(```\"`hello from the main future`\"```)``;`\n`let` `_` `=` `(`a`,` b`)``.``join``(``)``.`await`;`\ncontainer`.``push``(``4``)``;`\n`assert_eq!``(`num`,` container`.``len``(``)``)``;`\n`\n```\n\n## Installation\n```\n```$``` cargo add futures-concurrency`\n`\n```\n\n## Contributing\nWant to join us? Check out our [\"Contributing\" guide](https://github.com/yoshuawuyts/futures-concurrency/blob/master.github/CONTRIBUTING.md) and take a look at some of these issues:\n  * [Issues labeled \"good first issue\"](https://github.com/yoshuawuyts/futures-concurrency/labels/good%20first%20issue)\n  * [Issues labeled \"help wanted\"](https://github.com/yoshuawuyts/futures-concurrency/labels/help%20wanted)\n\n\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/yoshuawuyts/futures-concurrency/blob/1795a1ceda76c3c1c933e8fa848b7c328f66c620/LICENSE-APACHE) or [MIT license](https://github.com/yoshuawuyts/futures-concurrency/blob/1795a1ceda76c3c1c933e8fa848b7c328f66c620/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~1\u201320MB  ~320K SLoC\n  * [alloc](https://lib.rs/crates/futures-concurrency/features#feature-alloc \"default feature\") [fixedbitset](https://lib.rs/crates/fixedbitset \"new\") 0.5.7\n  * [alloc](https://lib.rs/crates/futures-concurrency/features#feature-alloc \"default feature\") [slab](https://lib.rs/crates/slab \"0.4.9\")\n  * [alloc](https://lib.rs/crates/futures-concurrency/features#feature-alloc \"default feature\") [smallvec](https://lib.rs/crates/smallvec \"1.13\")\n  * [futures-buffered](https://lib.rs/crates/futures-buffered \"0.2.9\")\n  * [futures-core](https://lib.rs/crates/futures-core \"0.3\")\n  * [futures-lite](https://lib.rs/crates/futures-lite \"new\") 2.5\n  * [pin-project](https://lib.rs/crates/pin-project \"1.1\")\n\n\n  * dev  [async-io](https://lib.rs/crates/async-io \"2.4\")\n  * dev  [async-std](https://lib.rs/crates/async-std \"outdated\") 1.13[+attributes](https://lib.rs/crates/async-std/features#feature-attributes)\n  * dev  [criterion](https://lib.rs/crates/criterion \"outdated\") 0.5[+async](https://lib.rs/crates/criterion/features#feature-async)[+async_futures](https://lib.rs/crates/criterion/features#feature-async_futures)[+html_reports](https://lib.rs/crates/criterion/features#feature-html_reports)\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")\n  * dev  [futures-time](https://lib.rs/crates/futures-time \"3.0.0\")\n  * dev  [itertools](https://lib.rs/crates/itertools \"obsolete\") 0.13\n  * dev  [lending-stream](https://lib.rs/crates/lending-stream \"1.0.1\")\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8.5\n  * dev  [tokio](https://lib.rs/crates/tokio \"1.41\")[+macros](https://lib.rs/crates/tokio/features#feature-macros)[+time](https://lib.rs/crates/tokio/features#feature-time)[+rt-multi-thread](https://lib.rs/crates/tokio/features#feature-rt-multi-thread)\n\n\n#### [Other feature](https://lib.rs/crates/futures-concurrency/features)\n  * [std](https://lib.rs/crates/futures-concurrency/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  29 stable releases\u27e81\u27e9 (6 major)\n7.6.3 |  Jan 29, 2025   \n---|---  \n7.6.2 |  Oct 24, 2024   \n7.6.1 |  Jun 9, 2024   \n7.5.0 |  Mar 11, 2024   \n1.1.0 |  Oct 19, 2021   \n#**24** in Asynchronous\u27e82\u27e9\nDownload history 33209/week @ 2025-02-12 32966/week @ 2025-02-19 30179/week @ 2025-02-26 32685/week @ 2025-03-05 42383/week @ 2025-03-12 37143/week @ 2025-03-19 33632/week @ 2025-03-26 36978/week @ 2025-04-02 33863/week @ 2025-04-09 27956/week @ 2025-04-16 29486/week @ 2025-04-23 28138/week @ 2025-04-30 25540/week @ 2025-05-07 24603/week @ 2025-05-14 22660/week @ 2025-05-21 20745/week @ 2025-05-28\n**98,289** downloads per month Used in **129** crates (22 directly)\u27e83\u27e9\n**MIT/Apache**\n305KB  6.5K  SLoC\n# futures-concurrency\n**Structured concurrency operations for async Rust**\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/futures-concurrency)  ![Download\u27e85\u27e9 ](https://crates.io/crates/futures-concurrency)  ![docs.rs docs\u27e86\u27e9 ](https://docs.rs/futures-concurrency)\n###   API Docs \u27e87\u27e9 |   Releases \u27e88\u27e9 |   Contributing \u27e89\u27e9\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n``futures-concurrency`` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## Examples\n**Await multiple futures of different types**\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`use` `std`::``future`;`\n`let` a `=` `future`::``ready`(``1``u8``)``;`\n`let` b `=` `future`::``ready`(```\"`hello`\"```)``;`\n`let` c `=` `future`::``ready`(``3``u16``)``;`\n`assert_eq!``(``(`a`,` b`,` c`)``.``join``(``)``.`await`,` `(``1``,` ``\"`hello`\"```,` `3``)``)``;`\n`\n```\n\n**Concurrently process items in a stream**\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`let` v`:` ``Vec``<``_``>`` `=` `vec!``[```\"`chashu`\"```,` ``\"`nori`\"```]`\n  `.``into_co_stream``(``)`\n  `.``map``(````|``````msg``|`` ``async `move` ``{` `format!``(```\"`hello `{msg}``\"```)` ```}````)`\n  `.``collect``(``)`\n  `.`await`;`\n`assert_eq!``(`v`,` `&``[```\"`hello chashu`\"```,` ``\"`hello nori`\"```]``)``;`\n`\n```\n\n**Access stack data outside the futures' scope**\n_Adapted from```std`::```thread`::``scope``\u27e810\u27e9._\n```\n``use` `futures_concurrency`::```prelude`::```*``;`\n`let` `mut` container `=` `vec!``[``1``,` `2``,` `3``]``;`\n`let` `mut` num `=` `0``;`\n`let` a `=` async ``{`\n  `println!``(```\"`hello from the first future`\"```)``;`\n  `dbg!``(``&`container`)``;`\n```}```;`\n`let` b `=` async ``{`\n  `println!``(```\"`hello from the second future`\"```)``;`\n  num `+=` container`[``0``]` `+` container`[``2``]``;`\n```}```;`\n`println!``(```\"`hello from the main future`\"```)``;`\n`let` `_` `=` `(`a`,` b`)``.``join``(``)``.`await`;`\ncontainer`.``push``(``4``)``;`\n`assert_eq!``(`num`,` container`.``len``(``)``)``;`\n`\n```\n\n## Installation\n```\n```$``` cargo add futures-concurrency`\n`\n```\n\n## Contributing\nWant to join us? Check out our \"Contributing\" guide\u27e89\u27e9 and take a look at some of these issues:\n  * Issues labeled \"good first issue\"\u27e811\u27e9\n  * Issues labeled \"help wanted\"\u27e812\u27e9\n\n\n## License\nLicensed under either of Apache License, Version 2.0\u27e813\u27e9 or MIT license\u27e814\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~1\u201320MB  ~320K SLoC\n  * alloc\u27e815\u27e9 fixedbitset\u27e816\u27e9 0.5.7\n  * alloc\u27e815\u27e9 slab\u27e817\u27e9\n  * alloc\u27e815\u27e9 smallvec\u27e818\u27e9\n  * futures-buffered\u27e819\u27e9\n  * futures-core\u27e820\u27e9\n  * futures-lite\u27e821\u27e9 2.5\n  * pin-project\u27e822\u27e9\n\n\n  * dev  async-io\u27e823\u27e9\n  * dev  async-std\u27e824\u27e9 1.13+attributes\u27e825\u27e9\n  * dev  criterion\u27e826\u27e9 0.5+async\u27e827\u27e9+async_futures\u27e828\u27e9+html_reports\u27e829\u27e9\n  * dev  futures\u27e830\u27e9\n  * dev  futures-time\u27e831\u27e9\n  * dev  itertools\u27e832\u27e9 0.13\n  * dev  lending-stream\u27e833\u27e9\n  * dev  rand\u27e834\u27e9 0.8.5\n  * dev  tokio\u27e835\u27e9+macros\u27e836\u27e9+time\u27e837\u27e9+rt-multi-thread\u27e838\u27e9\n\n\n#### Other feature\u27e839\u27e9\n  * std\u27e840\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/futures-concurrency/versions: 29 stable releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/futures-concurrency/rev: **129** crates (22 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/futures-concurrency.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/crates/d/futures-concurrency.svg?style=flat-square:  ![Download\n\u27e86\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e87\u27e9 https://docs.rs/futures-concurrency:  API Docs \n\u27e88\u27e9 https://github.com/yoshuawuyts/futures-concurrency/releases:  Releases \n\u27e89\u27e9 https://github.com/yoshuawuyts/futures-concurrency/blob/master.github/CONTRIBUTING.md:  Contributing \n\u27e810\u27e9 https://doc.rust-lang.org/std/thread/fn.scope.html: ```std`::```thread`::``scope``\n\u27e811\u27e9 https://github.com/yoshuawuyts/futures-concurrency/labels/good%20first%20issue: Issues labeled \"good first issue\"\n\u27e812\u27e9 https://github.com/yoshuawuyts/futures-concurrency/labels/help%20wanted: Issues labeled \"help wanted\"\n\u27e813\u27e9 https://github.com/yoshuawuyts/futures-concurrency/blob/1795a1ceda76c3c1c933e8fa848b7c328f66c620/LICENSE-APACHE: Apache License, Version 2.0\n\u27e814\u27e9 https://github.com/yoshuawuyts/futures-concurrency/blob/1795a1ceda76c3c1c933e8fa848b7c328f66c620/LICENSE-MIT: MIT license\n\u27e815\u27e9 https://lib.rs/crates/futures-concurrency/features#feature-alloc: default feature - alloc\n\u27e816\u27e9 https://lib.rs/crates/fixedbitset: new - fixedbitset\n\u27e817\u27e9 https://lib.rs/crates/slab: 0.4.9 - slab\n\u27e818\u27e9 https://lib.rs/crates/smallvec: 1.13 - smallvec\n\u27e819\u27e9 https://lib.rs/crates/futures-buffered: 0.2.9 - futures-buffered\n\u27e820\u27e9 https://lib.rs/crates/futures-core: 0.3 - futures-core\n\u27e821\u27e9 https://lib.rs/crates/futures-lite: new - futures-lite\n\u27e822\u27e9 https://lib.rs/crates/pin-project: 1.1 - pin-project\n\u27e823\u27e9 https://lib.rs/crates/async-io: 2.4 - async-io\n\u27e824\u27e9 https://lib.rs/crates/async-std: outdated - async-std\n\u27e825\u27e9 https://lib.rs/crates/async-std/features#feature-attributes: +attributes\n\u27e826\u27e9 https://lib.rs/crates/criterion: outdated - criterion\n\u27e827\u27e9 https://lib.rs/crates/criterion/features#feature-async: +async\n\u27e828\u27e9 https://lib.rs/crates/criterion/features#feature-async_futures: +async_futures\n\u27e829\u27e9 https://lib.rs/crates/criterion/features#feature-html_reports: +html_reports\n\u27e830\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e831\u27e9 https://lib.rs/crates/futures-time: 3.0.0 - futures-time\n\u27e832\u27e9 https://lib.rs/crates/itertools: obsolete - itertools\n\u27e833\u27e9 https://lib.rs/crates/lending-stream: 1.0.1 - lending-stream\n\u27e834\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e835\u27e9 https://lib.rs/crates/tokio: 1.41 - tokio\n\u27e836\u27e9 https://lib.rs/crates/tokio/features#feature-macros: +macros\n\u27e837\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e838\u27e9 https://lib.rs/crates/tokio/features#feature-rt-multi-thread: +rt-multi-thread\n\u27e839\u27e9 https://lib.rs/crates/futures-concurrency/features: Other feature\n\u27e840\u27e9 https://lib.rs/crates/futures-concurrency/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6767,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "116924.7509655"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libpin_project_lite-4dd5ab2ce21e5adf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_io-fcac8efe115eb96e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libunicode_ident-f178eba5a4c48d29.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libunicode_ident-f178eba5a4c48d29.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_core-39d51e67a6184e72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#diatomic-waker@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diatomic-waker-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "diatomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diatomic-waker-0.2.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libdiatomic_waker-280b7301fe1814ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfastrand-9a202b9734689a2d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsmallvec-25de0ffaa5ec55c5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fixedbitset@0.5.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fixedbitset-0.5.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fixedbitset",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fixedbitset-0.5.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfixedbitset-177fb9c7b2d31e24.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cordyceps@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cordyceps-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cordyceps",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cordyceps-0.3.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libcordyceps-42aaca23202c5db0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6ea9d069dada2b66\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6ea9d069dada2b66\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6621ff9a97360b7c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-buffered@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-buffered-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_buffered",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-buffered-0.2.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_buffered-7dbbf10b390e7b55.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "fastrand",
                "futures-io",
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_lite-1f4b05f4d8b013fe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libproc_macro2-2fdadf25b0491f44.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libproc_macro2-2fdadf25b0491f44.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libquote-d8b7acc3e8148669.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libquote-d8b7acc3e8148669.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.28",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.28\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.28\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsyn-4fa543b6867078a4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsyn-4fa543b6867078a4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libpin_project-a27e6f466947e6c5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpt4uewgyd/futures-concurrency-7.6.3#futures-concurrency@7.6.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_concurrency",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variable does not need to be mutable\n  --> src\\concurrent_stream\\from_stream.rs:31:29\n   |\n31 |     async fn drive<C>(self, mut consumer: C) -> C::Output\n   |                             ----^^^^^^^^\n   |                             |\n   |                             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unused_mut)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this `mut`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 648,
                        "byte_start": 644,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\concurrent_stream\\from_stream.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 31,
                        "line_start": 31,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "    async fn drive<C>(self, mut consumer: C) -> C::Output"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unused_mut",
                  "explanation": null
                },
                "level": "warning",
                "message": "variable does not need to be mutable",
                "spans": [
                  {
                    "byte_end": 656,
                    "byte_start": 644,
                    "column_end": 41,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\concurrent_stream\\from_stream.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 29,
                        "text": "    async fn drive<C>(self, mut consumer: C) -> C::Output"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpt4uewgyd/futures-concurrency-7.6.3#futures-concurrency@7.6.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_concurrency",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_concurrency-16897cccdb52b864.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6ea9d069dada2b66\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6ea9d069dada2b66\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\proc-macro2-6621ff9a97360b7c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libunicode_ident-f178eba5a4c48d29.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libunicode_ident-f178eba5a4c48d29.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_core-39d51e67a6184e72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libpin_project_lite-4dd5ab2ce21e5adf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cordyceps@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cordyceps-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cordyceps",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cordyceps-0.3.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libcordyceps-42aaca23202c5db0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#diatomic-waker@0.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diatomic-waker-0.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "diatomic_waker",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\diatomic-waker-0.2.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libdiatomic_waker-280b7301fe1814ca.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfastrand-9a202b9734689a2d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_io-fcac8efe115eb96e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fixedbitset@0.5.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fixedbitset-0.5.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fixedbitset",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fixedbitset-0.5.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfixedbitset-177fb9c7b2d31e24.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsmallvec-25de0ffaa5ec55c5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.66",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.66\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libproc_macro2-2fdadf25b0491f44.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libproc_macro2-2fdadf25b0491f44.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-9a5b9a832999ed1f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-lite@2.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-lite-2.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "fastrand",
                "futures-io",
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_lite-1f4b05f4d8b013fe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-buffered@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-buffered-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_buffered",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-buffered-0.2.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_buffered-7dbbf10b390e7b55.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libquote-d8b7acc3e8148669.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libquote-d8b7acc3e8148669.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\build\\slab-c0dc3ddbdda7012f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.28",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.28\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.28\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsyn-4fa543b6867078a4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libsyn-4fa543b6867078a4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libslab-fbece453fa7637dd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\pin_project_internal-ff7155405bd84cb7.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libpin_project-a27e6f466947e6c5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpt4uewgyd/futures-concurrency-7.6.3#futures-concurrency@7.6.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_concurrency",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variable does not need to be mutable\n  --> src\\concurrent_stream\\from_stream.rs:31:29\n   |\n31 |     async fn drive<C>(self, mut consumer: C) -> C::Output\n   |                             ----^^^^^^^^\n   |                             |\n   |                             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unused_mut)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this `mut`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 648,
                        "byte_start": 644,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\concurrent_stream\\from_stream.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 31,
                        "line_start": 31,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "    async fn drive<C>(self, mut consumer: C) -> C::Output"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unused_mut",
                  "explanation": null
                },
                "level": "warning",
                "message": "variable does not need to be mutable",
                "spans": [
                  {
                    "byte_end": 656,
                    "byte_start": 644,
                    "column_end": 41,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\concurrent_stream\\from_stream.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 29,
                        "text": "    async fn drive<C>(self, mut consumer: C) -> C::Output"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpt4uewgyd/futures-concurrency-7.6.3#futures-concurrency@7.6.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_concurrency",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\future\\mod.rs:69:5\n   |\n69 | //!    complete, or return an `Err` if *no* futures complete successfully.\n   |     ^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n   = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2715,
                        "byte_start": 2712,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\future\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 69,
                        "line_start": 69,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    complete, or return an `Err` if *no* futures complete successfully."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2715,
                    "byte_start": 2712,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\future\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    complete, or return an `Err` if *no* futures complete successfully."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpt4uewgyd/futures-concurrency-7.6.3#futures-concurrency@7.6.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_concurrency",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpt4uewgyd\\futures-concurrency-7.6.3\\target\\debug\\deps\\libfutures_concurrency-086ad36139bd6f89.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 187
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.43.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3d61fa4ffa3de412bfea335c6ecff681de2b609ba3c77ef3e00e521813a9ed9e",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.69",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.30",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48",
                    "dependencies": [
                      {
                        "name": "futures-channel",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-io",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-macro",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "futures-concurrency",
          "version": "7.6.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\n[Settings](https://docs.rs/futures-concurrency/latest/settings.html)\n[Help](https://docs.rs/futures-concurrency/latest/help.html)\nSummary[Source](https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203)\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples)Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from[`std::thread::scope`](https://doc.rust-lang.org/std/thread/fn.scope.html)._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations)Operations\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures)Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * [`FutureGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html \"struct futures_concurrency::future::FutureGroup\"): A growable group of futures which operate as a single unit.\n  * `tuple`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\) \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\) \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\) \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\) \"trait futures_concurrency::future::RaceOk\")\n  * `array`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::RaceOk\")\n  * `Vec`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E \"trait futures_concurrency::future::RaceOk\")\n\n\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams)Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * [`StreamGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html \"struct futures_concurrency::stream::StreamGroup\"): A growable group of streams which operate as a single unit.\n  * [`ConcurrentStream`](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html \"trait futures_concurrency::concurrent_stream::ConcurrentStream\"): A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\) \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\) \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\) \"trait futures_concurrency::stream::Zip\")\n  * `array`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Zip\")\n  * `Vec`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Zip\")\n\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support)Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags)Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading)Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * [Futures Concurrency I: Introduction](https://blog.yoshuawuyts.com/futures-concurrency/)\n  * [Futures Concurrency II: A Trait Approach](https://blog.yoshuawuyts.com/futures-concurrency-2/)\n  * [Futures Concurrency III: `select!`](https://blog.yoshuawuyts.com/futures-concurrency-3/)\n  * [Futures Concurrency IV: Join Semantics](https://blog.yoshuawuyts.com/futures-concurrency-4/)\n\n\n## Modules[\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules)\n\n[array](https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html \"mod futures_concurrency::array\")\n    Helper functions and types for fixed-length arrays.\n\n[concurrent_stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html \"mod futures_concurrency::concurrent_stream\")\n    Concurrent execution of streams\n\n[future](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html \"mod futures_concurrency::future\")\n    Asynchronous basic functionality.\n\n[prelude](https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html \"mod futures_concurrency::prelude\")\n    The futures concurrency prelude.\n\n[stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html \"mod futures_concurrency::stream\")\n    Composable asynchronous iteration.\n\n[vec](https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html \"mod futures_concurrency::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/std/vec/index.html) (`Vec<T>`)\n",
            "markdown_with_citations": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## \u00a7\u27e84\u27e9Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from`std::thread::scope`\u27e85\u27e9._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## \u00a7\u27e86\u27e9Operations\n### \u00a7\u27e87\u27e9Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * `FutureGroup`\u27e88\u27e9: A growable group of futures which operate as a single unit.\n  * `tuple`: `join`\u27e89\u27e9 \"trait futures_concurrency::future::Join\"), `try_join`\u27e810\u27e9 \"trait futures_concurrency::future::TryJoin\"), `race`\u27e811\u27e9 \"trait futures_concurrency::future::Race\"), `race_ok`\u27e812\u27e9 \"trait futures_concurrency::future::RaceOk\")\n  * `array`: `join`\u27e813\u27e9, `try_join`\u27e814\u27e9, `race`\u27e815\u27e9, `race_ok`\u27e816\u27e9\n  * `Vec`: `join`\u27e817\u27e9, `try_join`\u27e818\u27e9, `race`\u27e819\u27e9, `race_ok`\u27e820\u27e9\n\n\n### \u00a7\u27e821\u27e9Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * `StreamGroup`\u27e822\u27e9: A growable group of streams which operate as a single unit.\n  * `ConcurrentStream`\u27e823\u27e9: A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: `chain`\u27e824\u27e9 \"trait futures_concurrency::stream::Chain\"), `merge`\u27e825\u27e9 \"trait futures_concurrency::stream::Merge\"), `zip`\u27e826\u27e9 \"trait futures_concurrency::stream::Zip\")\n  * `array`: `chain`\u27e827\u27e9, `merge`\u27e828\u27e9, `zip`\u27e829\u27e9\n  * `Vec`: `chain`\u27e830\u27e9, `merge`\u27e831\u27e9, `zip`\u27e832\u27e9\n\n\n## \u00a7\u27e833\u27e9Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## \u00a7\u27e834\u27e9Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## \u00a7\u27e835\u27e9Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * Futures Concurrency I: Introduction\u27e836\u27e9\n  * Futures Concurrency II: A Trait Approach\u27e837\u27e9\n  * Futures Concurrency III: `select!`\u27e838\u27e9\n  * Futures Concurrency IV: Join Semantics\u27e839\u27e9\n\n\n## Modules\u00a7\u27e840\u27e9\n\narray\u27e841\u27e9\n    Helper functions and types for fixed-length arrays.\n\nconcurrent_stream\u27e842\u27e9\n    Concurrent execution of streams\n\nfuture\u27e843\u27e9\n    Asynchronous basic functionality.\n\nprelude\u27e844\u27e9\n    The futures concurrency prelude.\n\nstream\u27e845\u27e9\n    Composable asynchronous iteration.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-concurrency/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-concurrency/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203: Source\n\u27e84\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples: \u00a7\n\u27e85\u27e9 https://doc.rust-lang.org/std/thread/fn.scope.html: `std::thread::scope`\n\u27e86\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations: \u00a7\n\u27e87\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures: \u00a7\n\u27e88\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html: struct futures_concurrency::future::FutureGroup - `FutureGroup`\n\u27e89\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\: `join`\n\u27e810\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\: `try_join`\n\u27e811\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\: `race`\n\u27e812\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\: `race_ok`\n\u27e813\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Join - `join`\n\u27e814\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e815\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Race - `race`\n\u27e816\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e817\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E: trait futures_concurrency::future::Join - `join`\n\u27e818\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e819\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E: trait futures_concurrency::future::Race - `race`\n\u27e820\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e821\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams: \u00a7\n\u27e822\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html: struct futures_concurrency::stream::StreamGroup - `StreamGroup`\n\u27e823\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html: trait futures_concurrency::concurrent_stream::ConcurrentStream - `ConcurrentStream`\n\u27e824\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\: `chain`\n\u27e825\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\: `merge`\n\u27e826\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\: `zip`\n\u27e827\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Chain - `chain`\n\u27e828\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Merge - `merge`\n\u27e829\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Zip - `zip`\n\u27e830\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E: trait futures_concurrency::stream::Chain - `chain`\n\u27e831\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E: trait futures_concurrency::stream::Merge - `merge`\n\u27e832\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E: trait futures_concurrency::stream::Zip - `zip`\n\u27e833\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support: \u00a7\n\u27e834\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags: \u00a7\n\u27e835\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading: \u00a7\n\u27e836\u27e9 https://blog.yoshuawuyts.com/futures-concurrency/: Futures Concurrency I: Introduction\n\u27e837\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-2/: Futures Concurrency II: A Trait Approach\n\u27e838\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-3/: Futures Concurrency III: `select!`\n\u27e839\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-4/: Futures Concurrency IV: Join Semantics\n\u27e840\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules: \u00a7\n\u27e841\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html: mod futures_concurrency::array - array\n\u27e842\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html: mod futures_concurrency::concurrent_stream - concurrent_stream\n\u27e843\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html: mod futures_concurrency::future - future\n\u27e844\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html: mod futures_concurrency::prelude - prelude\n\u27e845\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html: mod futures_concurrency::stream - stream\n\u27e846\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html: mod futures_concurrency::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/std/vec/index.html: vectors\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "futures-concurrency",
          "version": "7.6.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\n[Settings](https://docs.rs/futures-concurrency/latest/settings.html)\n[Help](https://docs.rs/futures-concurrency/latest/help.html)\nSummary[Source](https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203)\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples)Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from[`std::thread::scope`](https://doc.rust-lang.org/std/thread/fn.scope.html)._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations)Operations\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures)Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * [`FutureGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html \"struct futures_concurrency::future::FutureGroup\"): A growable group of futures which operate as a single unit.\n  * `tuple`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\) \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\) \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\) \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\) \"trait futures_concurrency::future::RaceOk\")\n  * `array`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::future::RaceOk\")\n  * `Vec`: [`join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E \"trait futures_concurrency::future::Join\"), [`try_join`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E \"trait futures_concurrency::future::TryJoin\"), [`race`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E \"trait futures_concurrency::future::Race\"), [`race_ok`](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E \"trait futures_concurrency::future::RaceOk\")\n\n\n### [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams)Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * [`StreamGroup`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html \"struct futures_concurrency::stream::StreamGroup\"): A growable group of streams which operate as a single unit.\n  * [`ConcurrentStream`](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html \"trait futures_concurrency::concurrent_stream::ConcurrentStream\"): A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\) \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\) \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\) \"trait futures_concurrency::stream::Zip\")\n  * `array`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D \"trait futures_concurrency::stream::Zip\")\n  * `Vec`: [`chain`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Chain\"), [`merge`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Merge\"), [`zip`](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E \"trait futures_concurrency::stream::Zip\")\n\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support)Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags)Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## [\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading)Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * [Futures Concurrency I: Introduction](https://blog.yoshuawuyts.com/futures-concurrency/)\n  * [Futures Concurrency II: A Trait Approach](https://blog.yoshuawuyts.com/futures-concurrency-2/)\n  * [Futures Concurrency III: `select!`](https://blog.yoshuawuyts.com/futures-concurrency-3/)\n  * [Futures Concurrency IV: Join Semantics](https://blog.yoshuawuyts.com/futures-concurrency-4/)\n\n\n## Modules[\u00a7](https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules)\n\n[array](https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html \"mod futures_concurrency::array\")\n    Helper functions and types for fixed-length arrays.\n\n[concurrent_stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html \"mod futures_concurrency::concurrent_stream\")\n    Concurrent execution of streams\n\n[future](https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html \"mod futures_concurrency::future\")\n    Asynchronous basic functionality.\n\n[prelude](https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html \"mod futures_concurrency::prelude\")\n    The futures concurrency prelude.\n\n[stream](https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html \"mod futures_concurrency::stream\")\n    Composable asynchronous iteration.\n\n[vec](https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html \"mod futures_concurrency::vec\")\n    Parallel iterator types for [vectors](https://doc.rust-lang.org/std/vec/index.html) (`Vec<T>`)\n",
            "markdown_with_citations": "[](https://docs.rs/futures-concurrency/latest/futures_concurrency/all.html \"show sidebar\")\n# Crate futures_concurrencyCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nPerformant, portable, structured concurrency operations for async Rust. It works with any runtime, does not erase lifetimes, always handles cancellation, and always returns output to the caller.\n`futures-concurrency` provides concurrency operations for both groups of futures and streams. Both for bounded and unbounded sets of futures and streams. In both cases performance should be on par with, if not exceed conventional executor implementations.\n## \u00a7\u27e84\u27e9Examples\n**Await multiple futures of different types**\n```\nuse futures_concurrency::prelude::*;\nuse std::future;\nlet a = future::ready(1u8);\nlet b = future::ready(\"hello\");\nlet c = future::ready(3u16);\nassert_eq!((a, b, c).join().await, (1, \"hello\", 3));\n```\n\n**Concurrently process items in a collection**\n```\nuse futures_concurrency::prelude::*;\nlet v: Vec<_> = vec![\"chashu\", \"nori\"]\n  .into_co_stream()\n  .map(|msg| async move { format!(\"hello {msg}\") })\n  .collect()\n  .await;\nassert_eq!(v, &[\"hello chashu\", \"hello nori\"]);\n```\n\n**Access stack data outside the futures\u2019 scope**\n_Adapted from`std::thread::scope`\u27e85\u27e9._\n```\nuse futures_concurrency::prelude::*;\nlet mut container = vec![1, 2, 3];\nlet mut num = 0;\nlet a = async {\n  println!(\"hello from the first future\");\n  dbg!(&container);\n};\nlet b = async {\n  println!(\"hello from the second future\");\n  num += container[0] + container[2];\n};\nprintln!(\"hello from the main future\");\nlet _ = (a, b).join().await;\ncontainer.push(4);\nassert_eq!(num, container.len());\n```\n\n## \u00a7\u27e86\u27e9Operations\n### \u00a7\u27e87\u27e9Futures\nFor futures which return a regular type `T` only the `join` and `race` operations are available. `join` waits for all futures to complete, while `race` will wait for the first future to complete. However for futures which return a `Try<Output = T>` two additional operations are available. The following table describes the behavior of concurrency operations for fallible futures:\n| **Wait for all outputs**| **Wait for first output**  \n---|---|---  \n**Continue on error**| `Future::join`| `Future::race_ok`  \n**Short-circuit on error**| `Future::try_join`| `Future::race`  \nThe following futures implementations are provided by `futures-concurrency`:\n  * `FutureGroup`\u27e88\u27e9: A growable group of futures which operate as a single unit.\n  * `tuple`: `join`\u27e89\u27e9 \"trait futures_concurrency::future::Join\"), `try_join`\u27e810\u27e9 \"trait futures_concurrency::future::TryJoin\"), `race`\u27e811\u27e9 \"trait futures_concurrency::future::Race\"), `race_ok`\u27e812\u27e9 \"trait futures_concurrency::future::RaceOk\")\n  * `array`: `join`\u27e813\u27e9, `try_join`\u27e814\u27e9, `race`\u27e815\u27e9, `race_ok`\u27e816\u27e9\n  * `Vec`: `join`\u27e817\u27e9, `try_join`\u27e818\u27e9, `race`\u27e819\u27e9, `race_ok`\u27e820\u27e9\n\n\n### \u00a7\u27e821\u27e9Streams\nStreams yield outputs one-by-one, which means that deciding to stop iterating is the same for fallible and infallible streams. The operations provided for streams can be categorized based on whether their inputs can be concurrently evaluated, and whether their outputs can be concurrently processed.\nSpecifically in the case of `merge`, it takes `N` streams in, and yields items one-by-one as soon as any are available. This enables the output of individual streams to be concurrently processed by further operations later on.\n| **Sequential output processing**| **Concurrent output processing**  \n---|---|---  \n**Sequential input evaluation**| `Stream::chain`|  _not yet available_ \u2021  \n**Concurrent input evaluation**| `Stream::zip`| `Stream::merge`  \n\u2021: _This could be addressed by a hypothetical`Stream::unzip` operation, however because we aspire for semantic compatibility with `std::iter::Iterator` in our operations, the path to adding it is currently unclear_.\nThe following streams implementations are provided by `futures-concurrency`:\n  * `StreamGroup`\u27e822\u27e9: A growable group of streams which operate as a single unit.\n  * `ConcurrentStream`\u27e823\u27e9: A trait for asynchronous streams which can concurrently process items.\n  * `tuple`: `chain`\u27e824\u27e9 \"trait futures_concurrency::stream::Chain\"), `merge`\u27e825\u27e9 \"trait futures_concurrency::stream::Merge\"), `zip`\u27e826\u27e9 \"trait futures_concurrency::stream::Zip\")\n  * `array`: `chain`\u27e827\u27e9, `merge`\u27e828\u27e9, `zip`\u27e829\u27e9\n  * `Vec`: `chain`\u27e830\u27e9, `merge`\u27e831\u27e9, `zip`\u27e832\u27e9\n\n\n## \u00a7\u27e833\u27e9Runtime Support\n`futures-concurrency` does not depend on any runtime executor being present. This enables it to work out of the box with any async runtime, including: `tokio`, `async-std`, `smol`, `glommio`, and `monoio`. It also supports `#[no_std]` environments, allowing it to be used with embedded async runtimes such as `embassy`.\n## \u00a7\u27e834\u27e9Feature Flags\nThe `std` feature flag is enabled by default. To target `alloc` or `no_std` environments, you can enable the following configuration:\n```\n[dependencies]\n# no_std\nfutures-concurrency = { version = \"7.5.0\", default-features = false }\n# alloc\nfutures-concurrency = { version = \"7.5.0\", default-features = false, features = [\"alloc\"] }\n```\n\n## \u00a7\u27e835\u27e9Further Reading\n`futures-concurrency` has been developed over the span of several years. It is primarily maintained by Yosh Wuyts, a member of the Rust Async WG. You can read more about the development and ideas behind `futures-concurrency` here:\n  * Futures Concurrency I: Introduction\u27e836\u27e9\n  * Futures Concurrency II: A Trait Approach\u27e837\u27e9\n  * Futures Concurrency III: `select!`\u27e838\u27e9\n  * Futures Concurrency IV: Join Semantics\u27e839\u27e9\n\n\n## Modules\u00a7\u27e840\u27e9\n\narray\u27e841\u27e9\n    Helper functions and types for fixed-length arrays.\n\nconcurrent_stream\u27e842\u27e9\n    Concurrent execution of streams\n\nfuture\u27e843\u27e9\n    Asynchronous basic functionality.\n\nprelude\u27e844\u27e9\n    The futures concurrency prelude.\n\nstream\u27e845\u27e9\n    Composable asynchronous iteration.\n\nvec\u27e846\u27e9\n    Parallel iterator types for vectors\u27e847\u27e9 (`Vec<T>`)\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-concurrency/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-concurrency/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-concurrency/latest/src/futures_concurrency/lib.rs.html#1-203: Source\n\u27e84\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#examples: \u00a7\n\u27e85\u27e9 https://doc.rust-lang.org/std/thread/fn.scope.html: `std::thread::scope`\n\u27e86\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#operations: \u00a7\n\u27e87\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#futures: \u00a7\n\u27e88\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/struct.FutureGroup.html: struct futures_concurrency::future::FutureGroup - `FutureGroup`\n\u27e89\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-\\(A,+B\\: `join`\n\u27e810\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-\\(A,+B\\: `try_join`\n\u27e811\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-\\(A,+B\\: `race`\n\u27e812\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-\\(A,+B\\: `race_ok`\n\u27e813\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Join - `join`\n\u27e814\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e815\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::Race - `race`\n\u27e816\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e817\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Join.html#impl-Join-for-Vec%3CFut%3E: trait futures_concurrency::future::Join - `join`\n\u27e818\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.TryJoin.html#impl-TryJoin-for-Vec%3CFut%3E: trait futures_concurrency::future::TryJoin - `try_join`\n\u27e819\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.Race.html#impl-Race-for-Vec%3CFut%3E: trait futures_concurrency::future::Race - `race`\n\u27e820\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/trait.RaceOk.html#impl-RaceOk-for-Vec%3CFut%3E: trait futures_concurrency::future::RaceOk - `race_ok`\n\u27e821\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#streams: \u00a7\n\u27e822\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/struct.StreamGroup.html: struct futures_concurrency::stream::StreamGroup - `StreamGroup`\n\u27e823\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/trait.ConcurrentStream.html: trait futures_concurrency::concurrent_stream::ConcurrentStream - `ConcurrentStream`\n\u27e824\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-\\(A,+B\\: `chain`\n\u27e825\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-\\(A,+B\\: `merge`\n\u27e826\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-\\(A,+B\\: `zip`\n\u27e827\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Chain - `chain`\n\u27e828\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Merge - `merge`\n\u27e829\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-%5C%5BFut;+N%5C%5D: trait futures_concurrency::stream::Zip - `zip`\n\u27e830\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Chain.html#impl-Chain-for-Vec%3CFut%3E: trait futures_concurrency::stream::Chain - `chain`\n\u27e831\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Merge.html#impl-Merge-for-Vec%3CFut%3E: trait futures_concurrency::stream::Merge - `merge`\n\u27e832\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/trait.Zip.html#impl-Zip-for-Vec%3CFut%3E: trait futures_concurrency::stream::Zip - `zip`\n\u27e833\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#runtime-support: \u00a7\n\u27e834\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#feature-flags: \u00a7\n\u27e835\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#further-reading: \u00a7\n\u27e836\u27e9 https://blog.yoshuawuyts.com/futures-concurrency/: Futures Concurrency I: Introduction\n\u27e837\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-2/: Futures Concurrency II: A Trait Approach\n\u27e838\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-3/: Futures Concurrency III: `select!`\n\u27e839\u27e9 https://blog.yoshuawuyts.com/futures-concurrency-4/: Futures Concurrency IV: Join Semantics\n\u27e840\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/#modules: \u00a7\n\u27e841\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/array/index.html: mod futures_concurrency::array - array\n\u27e842\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/concurrent_stream/index.html: mod futures_concurrency::concurrent_stream - concurrent_stream\n\u27e843\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/future/index.html: mod futures_concurrency::future - future\n\u27e844\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/prelude/index.html: mod futures_concurrency::prelude - prelude\n\u27e845\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/stream/index.html: mod futures_concurrency::stream - stream\n\u27e846\u27e9 https://docs.rs/futures-concurrency/latest/futures_concurrency/vec/index.html: mod futures_concurrency::vec - vec\n\u27e847\u27e9 https://doc.rust-lang.org/std/vec/index.html: vectors\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `futures-concurrency` crate provides performant and structured concurrency utilities for async Rust, enabling operations on groups of futures and streams with support for cancellation and output handling. It offers features like `join`, `race`, `try_join`, and `merge` for concurrent processing, supports both bounded and unbounded collections, and works seamlessly across any runtime without erasing lifetimes. Additionally, it facilitates concurrent evaluation and processing of inputs and outputs, making it ideal for advanced async workflows.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Feature Flags and Environment Support\n\u2705 Factual: The `std` feature flag is enabled by default in `futures-concurrency`, but it can be configured to target `alloc` or `no_std` environments for compatibility with embedded systems or minimal runtime environments.  \n\u274c Counterfactual: The `std` feature flag must always be enabled in `futures-concurrency`, making it incompatible with `no_std` environments.\n\n---\n\n### Pair 2: Concurrency Operations\n\u2705 Factual: `futures-concurrency` provides structured concurrency operations such as `join` and `race` for both bounded and unbounded sets of futures and streams, ensuring high performance comparable to or exceeding conventional executor implementations.  \n\u274c Counterfactual: `futures-concurrency` only supports `join` operations for bounded sets of futures, and does not provide functionality for unbounded sets or stream-based concurrency.\n\n---\n\n### Pair 3: Error Handling in Futures\n\u2705 Factual: For futures that return `Try<Output = T>`, `futures-concurrency` offers specialized operations like `try_join` (short-circuit on error) and `race_ok` (continue on error), enabling flexible error-handling strategies during concurrency.  \n\u274c Counterfactual: `futures-concurrency` does not support error handling for futures, requiring developers to implement custom logic for managing errors during concurrent operations.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-a4d391e9-665f7353-1751263133",
      "timestamp": "2025-06-30T05:58:53.648888+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]