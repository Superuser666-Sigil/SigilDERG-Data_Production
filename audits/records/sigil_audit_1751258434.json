[
  {
    "execution_id": "exec-0465be30-286590db-1751258422",
    "timestamp": "2025-06-30T04:40:22.834462+00:00",
    "sacred_chain": {
      "input_data": "async-trait",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-trait' -> 'async-trait'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-trait",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-trait",
            "title": "async-trait v0.1.88",
            "content": {
              "raw_markdown": "#  async-trait v0.1.88\nType erasure for async trait methods \n  * [ #async ](https://crates.io/keywords/async)\n\n\n  * [ Readme ](https://crates.io/crates/async-trait)\n  * [ 89 Versions ](https://crates.io/crates/async-trait/versions)\n  * [ Dependencies ](https://crates.io/crates/async-trait/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-trait/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n31.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-trait\nOr add the following line to your Cargo.toml:\nasync-trait = \"0.1.88\"\n## Documentation\n[ docs.rs/async-trait ](https://docs.rs/async-trait)\n## Repository\n[ github.com/dtolnay/async-trait ](https://github.com/dtolnay/async-trait)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=async-trait&inquire=crate-violation)\n### Stats Overview\n252,628,477 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async-trait v0.1.88\nType erasure for async trait methods \n  *  #async \u27e81\u27e9\n\n\n  *  Readme \u27e82\u27e9\n  *  89 Versions \u27e83\u27e9\n  *  Dependencies \u27e84\u27e9\n  *  Dependents \u27e85\u27e9\n\n\n## Metadata\n4 months ago \nv1.56.0 \n MIT \u27e86\u27e9 OR  Apache-2.0 \u27e87\u27e9\n31.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-trait\nOr add the following line to your Cargo.toml:\nasync-trait = \"0.1.88\"\n## Documentation\n docs.rs/async-trait \u27e88\u27e9\n## Repository\n github.com/dtolnay/async-trait \u27e89\u27e9\n## Owners\n## Categories\n  * No standard library\u27e810\u27e9\n  * Asynchronous\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n252,628,477 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/crates/async-trait:  Readme \n\u27e83\u27e9 https://crates.io/crates/async-trait/versions:  89 Versions \n\u27e84\u27e9 https://crates.io/crates/async-trait/dependencies:  Dependencies \n\u27e85\u27e9 https://crates.io/crates/async-trait/reverse_dependencies:  Dependents \n\u27e86\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e87\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e88\u27e9 https://docs.rs/async-trait:  docs.rs/async-trait \n\u27e89\u27e9 https://github.com/dtolnay/async-trait:  github.com/dtolnay/async-trait \n\u27e810\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e811\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e812\u27e9 https://crates.io/support?crate=async-trait&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1270,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112212.7797938"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-trait",
            "title": "Crate async_traitCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\n[Settings](https://docs.rs/async-trait/latest/settings.html)\n[Help](https://docs.rs/async-trait/latest/help.html)\nSummary[Source](https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/async-trait) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/async-trait) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to [_why async fn in traits are hard_](https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/) for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#example)Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#supported-features)Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#explanation)Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures)Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes)Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros[\u00a7](https://docs.rs/async-trait/latest/async_trait/#attributes)\n\n[async_trait](https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html \"attr async_trait::async_trait\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/async-trait) ![crates-io\u27e85\u27e9](https://crates.io/crates/async-trait) ![docs-rs\u27e86\u27e9](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n\u24d8\u27e87\u27e9```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to _why async fn in traits are hard_\u27e88\u27e9 for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## \u00a7\u27e89\u27e9Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## \u00a7\u27e810\u27e9Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## \u00a7\u27e811\u27e9Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## \u00a7\u27e812\u27e9Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## \u00a7\u27e813\u27e9Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n\u24d8\u27e87\u27e9```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros\u00a7\u27e814\u27e9\n\nasync_trait\u27e815\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-trait/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-trait/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/async-trait/latest/async_trait/: This example deliberately fails to compile - \u24d8\n\u27e88\u27e9 https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/: _why async fn in traits are hard_\n\u27e89\u27e9 https://docs.rs/async-trait/latest/async_trait/#example: \u00a7\n\u27e810\u27e9 https://docs.rs/async-trait/latest/async_trait/#supported-features: \u00a7\n\u27e811\u27e9 https://docs.rs/async-trait/latest/async_trait/#explanation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures: \u00a7\n\u27e813\u27e9 https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes: \u00a7\n\u27e814\u27e9 https://docs.rs/async-trait/latest/async_trait/#attributes: \u00a7\n\u27e815\u27e9 https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html: attr async_trait::async_trait - async_trait\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6044,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112213.3705733"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-trait",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [89 releases](https://lib.rs/crates/async-trait/versions)\n0.1.88 |  Mar 15, 2025   \n---|---  \n0.1.86 |  Feb 1, 2025   \n0.1.83 |  Sep 24, 2024   \n0.1.81 |  Jul 7, 2024   \n0.1.6 |  Jul 27, 2019   \n#**133** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 3032087/week @ 2025-03-08 3315177/week @ 2025-03-15 3507476/week @ 2025-03-22 2864050/week @ 2025-03-29 2983800/week @ 2025-04-05 2663311/week @ 2025-04-12 2638791/week @ 2025-04-19 2514445/week @ 2025-04-26 2577064/week @ 2025-05-03 2641873/week @ 2025-05-10 2680735/week @ 2025-05-17 2418999/week @ 2025-05-24 2684262/week @ 2025-05-31 2755250/week @ 2025-06-07 2915003/week @ 2025-06-14 3092350/week @ 2025-06-21\n**11,902,518** downloads per month Used in [**21,823** crates (8,284 directly)](https://lib.rs/crates/async-trait/rev)\n**MIT/Apache**\n49KB  839 lines\n# Async trait methods\n[![github](https://img.shields.io/badge/github-dtolnay/async--trait-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/async-trait) [![crates.io](https://img.shields.io/crates/v/async-trait.svg?style=for-the-badge&color=fc8d62&logo=rust)](https://crates.io/crates/async-trait) [![docs.rs](https://img.shields.io/badge/docs.rs-async--trait-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/async-trait) [![build status](https://img.shields.io/github/actions/workflow/status/dtolnay/async-trait/ci.yml?branch=master&style=for-the-badge)](https://github.com/dtolnay/async-trait/actions?query=branch%3Amaster)\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as ``dyn Trait``. Trying to use dyn with an async trait produces the following error:\n```\n```pub` `trait` `Trait` ``{`\n  async ``fn` `f`````(``&``self````)````;`\n```}```\n``pub` `fn` `make`````(````)```` ``->` ``Box``<`dyn Trait`>``` ````{`\n  `unimplemented!``(``)`\n```}```\n`\n```\n```\n```error[E0038]:``` the trait `````Trait````` is not dyn compatible`\n ``--````>` src/main.rs:5:22\n` `|`\n``5`` `|` ``pub``` fn make(`) ``-````>` Box`<`dyn Trait`>` `{`\n |           ^^^^^^^^^ `````Trait````` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information`,` visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait `{`\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `````f````` is `````async`````\n = help: consider moving `````f````` to another trait\n``\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to [_why async fn in traits are hard_](https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/) for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an ````#``[``async_trait``]```` macro on top of traits and trait impls that contain async fn, and then they work. We get to have ````Vec``<``Box``<`dyn Advertisement `+` `Sync``>``>```` or ```&``[``&`dyn Advertisement`]```, for example.\n```\n``use` `async_trait`::``async_trait`;`\n``#``[``async_trait``]``\n``trait` `Advertisement` ``{`\n  async ``fn` `run`````(``&``self````)````;`\n```}```\n``struct` ```Modal```;`\n``#``[``async_trait``]``\n``impl` ``Advertisement `for``` `Modal` ````{`\n  async ``fn` `run`````(``&``self````)`````{`\n    `self``.``render_fullscreen``(``)``.`await`;`\n    `for` `_` `in` `0``..``4``u16` `{`\n      `remind_user_to_join_mailing_list``(``)``.`await`;`\n    `}`\n    `self``.``hide_for_now``(``)``.`await`;`\n  `}``\n```}```\n``struct` ```AutoplayingVideo` ````{`\n  `media_url``:` String,\n```}```\n``#``[``async_trait``]``\n``impl` ``Advertisement `for``` `AutoplayingVideo` ````{`\n  async ``fn` `run`````(``&``self````)`````{`\n    `let` stream `=` `connect``(``&``self``.`media_url`)``.`await`;`\n    stream`.``play``(``)``.`await`;`\n    ``//` Video probably persuaded user to join our mailing list!`\n    Modal`.``run``(``)``.`await`;`\n  `}``\n```}```\n`\n```\n\n## Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. _Please file an issue if you see unexpected borrow checker errors, type errors, or warnings._ There is no use of ```unsafe``` in the expanded code, so rest assured that if your code compiles it can't be that badly broken.\n  * \ud83d\udc4d Self by value, by reference, by mut reference, or no self;\n  * \ud83d\udc4d Any number of arguments, any return value;\n  * \ud83d\udc4d Generic type parameters and lifetime parameters;\n  * \ud83d\udc4d Associated types;\n  * \ud83d\udc4d Having async and non-async functions in the same trait;\n  * \ud83d\udc4d Default implementations provided by the trait;\n  * \ud83d\udc4d Elided lifetimes.\n\n\n## Explanation\nAsync fns get transformed into methods that return ```Pin`<``Box``<`dyn Future `+` `Send` `+` `'async_trait``>``>```` and delegate to an async block.\nFor example the ````impl` ``Advertisement `for``` `AutoplayingVideo```` above would be expanded as:\n```\n```impl` ``Advertisement `for``` `AutoplayingVideo` ````{`\n  ``fn` `run````<``'async_trait``>`````(`\n    `&``'async_trait` `self`,\n  ```)```` ``->` `Pin`<``Box``<`dyn `std`::```future`::``Future`<`Output = `(``)``>` `+` `Send` `+` `'async_trait``>``>``\n  ````where`\n    `Self``:` Sync + `'async_trait`,\n  ```{`\n    `Box```::``pin`(`async `move` `{`\n      ``/*` the original method body `*/``\n    `}``)`\n  `}``\n```}```\n`\n```\n\n## Non-threadsafe futures\nNot all async traits need futures that are ``dyn Future `+` `Send```. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as ````#``[``async_trait```(```?Send```)```]```` on both the trait and the impl blocks.\n## Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of ```&``` and ```&``mut``` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder ```'``_```.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n```\n``type` `Elided``<``'a``>` `=` `&``'a` `usize``;`\n``#``[``async_trait``]``\n``trait` `Test` ``{`\n  async ``fn` `test`````(``not_okay``:` Elided, `okay``:` `&``usize````)`````{``}``\n```}```\n`\n```\n```\n```error[E0726]:``` implicit elided lifetime not allowed here`\n ``--````>` src/main.rs:9:29\n` `|`\n``9`` `|`   ``async``` fn test(not_okay: Elided, okay:` `&```usize``) ``{``}\n `|`               ``^^^^^^-``` help: indicate the anonymous lifetime: ````<```'`_>`\n```\n```\n\nThe fix is to name the lifetime or use ```'``_```.\n```\n```#``[``async_trait``]``\n``trait` `Test` ``{`\n  ``//` either`\n  async ``fn` `test````<``'e``>`````(``elided``:` `Elided`<``'e``>`````)`````{``}``\n  ``//` or`\n  async ``fn` `test`````(``elided``:` `Elided`<`'`_``>`````)`````{``}``\n```}```\n`\n```\n\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/dtolnay/async-trait/blob/b3a59195c29c5b336490cec1bac23cff8d3e4483/LICENSE-APACHE) or [MIT license](https://github.com/dtolnay/async-trait/blob/b3a59195c29c5b336490cec1bac23cff8d3e4483/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * [proc-macro2](https://lib.rs/crates/proc-macro2 \"1.0.74\")\n  * [quote](https://lib.rs/crates/quote \"1.0.35\")\n  * [syn](https://lib.rs/crates/syn \"2.0.46\")[+clone-impls](https://lib.rs/crates/syn/features#feature-clone-impls)[+full](https://lib.rs/crates/syn/features#feature-full)[+parsing](https://lib.rs/crates/syn/features#feature-parsing)[+printing](https://lib.rs/crates/syn/features#feature-printing)[+proc-macro](https://lib.rs/crates/syn/features#feature-proc-macro)[+visit-mut](https://lib.rs/crates/syn/features#feature-visit-mut)\n\n\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.30\")\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0.13\")\n  * dev  [tracing](https://lib.rs/crates/tracing \"0.1.40\")\n  * dev  [tracing-attributes](https://lib.rs/crates/tracing-attributes \"0.1.27\")\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.81\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  89 releases\u27e81\u27e9\n0.1.88 |  Mar 15, 2025   \n---|---  \n0.1.86 |  Feb 1, 2025   \n0.1.83 |  Sep 24, 2024   \n0.1.81 |  Jul 7, 2024   \n0.1.6 |  Jul 27, 2019   \n#**133** in Rust patterns\u27e82\u27e9\nDownload history 3032087/week @ 2025-03-08 3315177/week @ 2025-03-15 3507476/week @ 2025-03-22 2864050/week @ 2025-03-29 2983800/week @ 2025-04-05 2663311/week @ 2025-04-12 2638791/week @ 2025-04-19 2514445/week @ 2025-04-26 2577064/week @ 2025-05-03 2641873/week @ 2025-05-10 2680735/week @ 2025-05-17 2418999/week @ 2025-05-24 2684262/week @ 2025-05-31 2755250/week @ 2025-06-07 2915003/week @ 2025-06-14 3092350/week @ 2025-06-21\n**11,902,518** downloads per month Used in **21,823** crates (8,284 directly)\u27e83\u27e9\n**MIT/Apache**\n49KB  839 lines\n# Async trait methods\n![github\u27e84\u27e9](https://github.com/dtolnay/async-trait) ![crates.io\u27e85\u27e9](https://crates.io/crates/async-trait) ![docs.rs\u27e86\u27e9](https://docs.rs/async-trait) ![build status\u27e87\u27e9](https://github.com/dtolnay/async-trait/actions?query=branch%3Amaster)\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as ``dyn Trait``. Trying to use dyn with an async trait produces the following error:\n```\n```pub` `trait` `Trait` ``{`\n  async ``fn` `f`````(``&``self````)````;`\n```}```\n``pub` `fn` `make`````(````)```` ``->` ``Box``<`dyn Trait`>``` ````{`\n  `unimplemented!``(``)`\n```}```\n`\n```\n```\n```error[E0038]:``` the trait `````Trait````` is not dyn compatible`\n ``--````>` src/main.rs:5:22\n` `|`\n``5`` `|` ``pub``` fn make(`) ``-````>` Box`<`dyn Trait`>` `{`\n |           ^^^^^^^^^ `````Trait````` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information`,` visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait `{`\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `````f````` is `````async`````\n = help: consider moving `````f````` to another trait\n``\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to _why async fn in traits are hard_\u27e88\u27e9 for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an ````#``[``async_trait``]```` macro on top of traits and trait impls that contain async fn, and then they work. We get to have ````Vec``<``Box``<`dyn Advertisement `+` `Sync``>``>```` or ```&``[``&`dyn Advertisement`]```, for example.\n```\n``use` `async_trait`::``async_trait`;`\n``#``[``async_trait``]``\n``trait` `Advertisement` ``{`\n  async ``fn` `run`````(``&``self````)````;`\n```}```\n``struct` ```Modal```;`\n``#``[``async_trait``]``\n``impl` ``Advertisement `for``` `Modal` ````{`\n  async ``fn` `run`````(``&``self````)`````{`\n    `self``.``render_fullscreen``(``)``.`await`;`\n    `for` `_` `in` `0``..``4``u16` `{`\n      `remind_user_to_join_mailing_list``(``)``.`await`;`\n    `}`\n    `self``.``hide_for_now``(``)``.`await`;`\n  `}``\n```}```\n``struct` ```AutoplayingVideo` ````{`\n  `media_url``:` String,\n```}```\n``#``[``async_trait``]``\n``impl` ``Advertisement `for``` `AutoplayingVideo` ````{`\n  async ``fn` `run`````(``&``self````)`````{`\n    `let` stream `=` `connect``(``&``self``.`media_url`)``.`await`;`\n    stream`.``play``(``)``.`await`;`\n    ``//` Video probably persuaded user to join our mailing list!`\n    Modal`.``run``(``)``.`await`;`\n  `}``\n```}```\n`\n```\n\n## Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. _Please file an issue if you see unexpected borrow checker errors, type errors, or warnings._ There is no use of ```unsafe``` in the expanded code, so rest assured that if your code compiles it can't be that badly broken.\n  * \ud83d\udc4d Self by value, by reference, by mut reference, or no self;\n  * \ud83d\udc4d Any number of arguments, any return value;\n  * \ud83d\udc4d Generic type parameters and lifetime parameters;\n  * \ud83d\udc4d Associated types;\n  * \ud83d\udc4d Having async and non-async functions in the same trait;\n  * \ud83d\udc4d Default implementations provided by the trait;\n  * \ud83d\udc4d Elided lifetimes.\n\n\n## Explanation\nAsync fns get transformed into methods that return ```Pin`<``Box``<`dyn Future `+` `Send` `+` `'async_trait``>``>```` and delegate to an async block.\nFor example the ````impl` ``Advertisement `for``` `AutoplayingVideo```` above would be expanded as:\n```\n```impl` ``Advertisement `for``` `AutoplayingVideo` ````{`\n  ``fn` `run````<``'async_trait``>`````(`\n    `&``'async_trait` `self`,\n  ```)```` ``->` `Pin`<``Box``<`dyn `std`::```future`::``Future`<`Output = `(``)``>` `+` `Send` `+` `'async_trait``>``>``\n  ````where`\n    `Self``:` Sync + `'async_trait`,\n  ```{`\n    `Box```::``pin`(`async `move` `{`\n      ``/*` the original method body `*/``\n    `}``)`\n  `}``\n```}```\n`\n```\n\n## Non-threadsafe futures\nNot all async traits need futures that are ``dyn Future `+` `Send```. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as ````#``[``async_trait```(```?Send```)```]```` on both the trait and the impl blocks.\n## Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of ```&``` and ```&``mut``` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder ```'``_```.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n```\n``type` `Elided``<``'a``>` `=` `&``'a` `usize``;`\n``#``[``async_trait``]``\n``trait` `Test` ``{`\n  async ``fn` `test`````(``not_okay``:` Elided, `okay``:` `&``usize````)`````{``}``\n```}```\n`\n```\n```\n```error[E0726]:``` implicit elided lifetime not allowed here`\n ``--````>` src/main.rs:9:29\n` `|`\n``9`` `|`   ``async``` fn test(not_okay: Elided, okay:` `&```usize``) ``{``}\n `|`               ``^^^^^^-``` help: indicate the anonymous lifetime: ````<```'`_>`\n```\n```\n\nThe fix is to name the lifetime or use ```'``_```.\n```\n```#``[``async_trait``]``\n``trait` `Test` ``{`\n  ``//` either`\n  async ``fn` `test````<``'e``>`````(``elided``:` `Elided`<``'e``>`````)`````{``}``\n  ``//` or`\n  async ``fn` `test`````(``elided``:` `Elided`<`'`_``>`````)`````{``}``\n```}```\n`\n```\n\n#### License\nLicensed under either of Apache License, Version 2.0\u27e89\u27e9 or MIT license\u27e810\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * proc-macro2\u27e811\u27e9\n  * quote\u27e812\u27e9\n  * syn\u27e813\u27e9+clone-impls\u27e814\u27e9+full\u27e815\u27e9+parsing\u27e816\u27e9+printing\u27e817\u27e9+proc-macro\u27e818\u27e9+visit-mut\u27e819\u27e9\n\n\n  * dev  futures\u27e820\u27e9\n  * dev  rustversion\u27e821\u27e9\n  * dev  tracing\u27e822\u27e9\n  * dev  tracing-attributes\u27e823\u27e9\n  * dev  trybuild\u27e824\u27e9+diff\u27e825\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/async-trait/versions: 89 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/async-trait/rev: **21,823** crates (8,284 directly)\n\u27e84\u27e9 https://img.shields.io/badge/github-dtolnay/async--trait-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/crates/v/async-trait.svg?style=for-the-badge&color=fc8d62&logo=rust: ![crates.io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-async--trait-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dtolnay/async-trait/ci.yml?branch=master&style=for-the-badge: ![build status\n\u27e88\u27e9 https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/: _why async fn in traits are hard_\n\u27e89\u27e9 https://github.com/dtolnay/async-trait/blob/b3a59195c29c5b336490cec1bac23cff8d3e4483/LICENSE-APACHE: Apache License, Version 2.0\n\u27e810\u27e9 https://github.com/dtolnay/async-trait/blob/b3a59195c29c5b336490cec1bac23cff8d3e4483/LICENSE-MIT: MIT license\n\u27e811\u27e9 https://lib.rs/crates/proc-macro2: 1.0.74 - proc-macro2\n\u27e812\u27e9 https://lib.rs/crates/quote: 1.0.35 - quote\n\u27e813\u27e9 https://lib.rs/crates/syn: 2.0.46 - syn\n\u27e814\u27e9 https://lib.rs/crates/syn/features#feature-clone-impls: +clone-impls\n\u27e815\u27e9 https://lib.rs/crates/syn/features#feature-full: +full\n\u27e816\u27e9 https://lib.rs/crates/syn/features#feature-parsing: +parsing\n\u27e817\u27e9 https://lib.rs/crates/syn/features#feature-printing: +printing\n\u27e818\u27e9 https://lib.rs/crates/syn/features#feature-proc-macro: +proc-macro\n\u27e819\u27e9 https://lib.rs/crates/syn/features#feature-visit-mut: +visit-mut\n\u27e820\u27e9 https://lib.rs/crates/futures: 0.3.30 - futures\n\u27e821\u27e9 https://lib.rs/crates/rustversion: 1.0.13 - rustversion\n\u27e822\u27e9 https://lib.rs/crates/tracing: 0.1.40 - tracing\n\u27e823\u27e9 https://lib.rs/crates/tracing-attributes: 0.1.27 - tracing-attributes\n\u27e824\u27e9 https://lib.rs/crates/trybuild: 1.0.81 - trybuild\n\u27e825\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8696,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112213.8853664"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libproc_macro2-1e34549bab105f57.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libquote-b5795e0de5ad930d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libsyn-185880f42c84f277.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpksn264_e/async-trait-0.1.88#async-trait@0.1.88",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libasync_trait-d09eae2f849b87d4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libproc_macro2-1e34549bab105f57.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libquote-b5795e0de5ad930d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libsyn-185880f42c84f277.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpksn264_e/async-trait-0.1.88#async-trait@0.1.88",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpksn264_e\\async-trait-0.1.88\\target\\debug\\deps\\libasync_trait-6873f455a5d5aaf1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 53
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "async-trait",
          "version": "0.1.88",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\n[Settings](https://docs.rs/async-trait/latest/settings.html)\n[Help](https://docs.rs/async-trait/latest/help.html)\nSummary[Source](https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/async-trait) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/async-trait) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to [_why async fn in traits are hard_](https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/) for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#example)Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#supported-features)Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#explanation)Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures)Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes)Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros[\u00a7](https://docs.rs/async-trait/latest/async_trait/#attributes)\n\n[async_trait](https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html \"attr async_trait::async_trait\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/async-trait) ![crates-io\u27e85\u27e9](https://crates.io/crates/async-trait) ![docs-rs\u27e86\u27e9](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n\u24d8\u27e87\u27e9```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to _why async fn in traits are hard_\u27e88\u27e9 for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## \u00a7\u27e89\u27e9Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## \u00a7\u27e810\u27e9Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## \u00a7\u27e811\u27e9Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## \u00a7\u27e812\u27e9Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## \u00a7\u27e813\u27e9Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n\u24d8\u27e87\u27e9```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros\u00a7\u27e814\u27e9\n\nasync_trait\u27e815\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-trait/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-trait/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/async-trait/latest/async_trait/: This example deliberately fails to compile - \u24d8\n\u27e88\u27e9 https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/: _why async fn in traits are hard_\n\u27e89\u27e9 https://docs.rs/async-trait/latest/async_trait/#example: \u00a7\n\u27e810\u27e9 https://docs.rs/async-trait/latest/async_trait/#supported-features: \u00a7\n\u27e811\u27e9 https://docs.rs/async-trait/latest/async_trait/#explanation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures: \u00a7\n\u27e813\u27e9 https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes: \u00a7\n\u27e814\u27e9 https://docs.rs/async-trait/latest/async_trait/#attributes: \u00a7\n\u27e815\u27e9 https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html: attr async_trait::async_trait - async_trait\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-trait",
          "version": "0.1.88",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\n[Settings](https://docs.rs/async-trait/latest/settings.html)\n[Help](https://docs.rs/async-trait/latest/help.html)\nSummary[Source](https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/async-trait) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/async-trait) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to [_why async fn in traits are hard_](https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/) for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#example)Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#supported-features)Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#explanation)Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures)Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## [\u00a7](https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes)Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n[\u24d8](https://docs.rs/async-trait/latest/async_trait/ \"This example deliberately fails to compile\")```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros[\u00a7](https://docs.rs/async-trait/latest/async_trait/#attributes)\n\n[async_trait](https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html \"attr async_trait::async_trait\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/async-trait/latest/async_trait/all.html \"show sidebar\")\n# Crate async_traitCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/async-trait) ![crates-io\u27e85\u27e9](https://crates.io/crates/async-trait) ![docs-rs\u27e86\u27e9](https://docs.rs/async-trait)\n#### Type erasure for async trait methods\nThe stabilization of async functions in traits in Rust 1.75 did not include support for using traits containing async functions as `dyn Trait`. Trying to use dyn with an async trait produces the following error:\n\u24d8\u27e87\u27e9```\npub trait Trait {\n  async fn f(&self);\n}\npub fn make() -> Box<dyn Trait> {\n  unimplemented!()\n}\n```\n\n```\nerror[E0038]: the trait `Trait` is not dyn compatible\n --> src/main.rs:5:22\n |\n5 | pub fn make() -> Box<dyn Trait> {\n |           ^^^^^^^^^ `Trait` is not dyn compatible\n |\nnote: for a trait to be dyn compatible it needs to allow building a vtable\n   for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>\n --> src/main.rs:2:14\n |\n1 | pub trait Trait {\n |      ----- this trait is not dyn compatible...\n2 |   async fn f(&self);\n |       ^ ...because method `f` is `async`\n = help: consider moving `f` to another trait\n```\n\nThis crate provides an attribute macro to make async fn in traits work with dyn traits.\nPlease refer to _why async fn in traits are hard_\u27e88\u27e9 for a deeper analysis of how this implementation differs from what the compiler and language deliver natively.\n## \u00a7\u27e89\u27e9Example\nThis example implements the core of a highly effective advertising platform using async fn in a trait.\nThe only thing to notice here is that we write an `#[async_trait]` macro on top of traits and trait impls that contain async fn, and then they work. We get to have `Vec<Box<dyn Advertisement + Sync>>` or `&[&dyn Advertisement]`, for example.\n```\nuse async_trait::async_trait;\n#[async_trait]\ntrait Advertisement {\n  async fn run(&self);\n}\nstruct Modal;\n#[async_trait]\nimpl Advertisement for Modal {\n  async fn run(&self) {\n    self.render_fullscreen().await;\n    for _ in 0..4u16 {\n      remind_user_to_join_mailing_list().await;\n    }\n    self.hide_for_now().await;\n  }\n}\nstruct AutoplayingVideo {\n  media_url: String,\n}\n#[async_trait]\nimpl Advertisement for AutoplayingVideo {\n  async fn run(&self) {\n    let stream = connect(&self.media_url).await;\n    stream.play().await;\n    // Video probably persuaded user to join our mailing list!\n    Modal.run().await;\n  }\n}\n```\n\n## \u00a7\u27e810\u27e9Supported features\nIt is the intention that all features of Rust traits should work nicely with #[async_trait], but the edge cases are numerous. Please file an issue if you see unexpected borrow checker errors, type errors, or warnings. There is no use of `unsafe` in the expanded code, so rest assured that if your code compiles it can\u2019t be that badly broken.\n> \u2611 Self by value, by reference, by mut reference, or no self; \u2611 Any number of arguments, any return value; \u2611 Generic type parameters and lifetime parameters; \u2611 Associated types; \u2611 Having async and non-async functions in the same trait; \u2611 Default implementations provided by the trait; \u2611 Elided lifetimes.\n## \u00a7\u27e811\u27e9Explanation\nAsync fns get transformed into methods that return `Pin<Box<dyn Future + Send + 'async_trait>>` and delegate to an async block.\nFor example the `impl Advertisement for AutoplayingVideo` above would be expanded as:\n```\nimpl Advertisement for AutoplayingVideo {\n  fn run<'async_trait>(\n    &'async_trait self,\n  ) -> Pin<Box<dyn core::future::Future<Output = ()> + Send + 'async_trait>>\n  where\n    Self: Sync + 'async_trait,\n  {\n    Box::pin(async move {\n      /* the original method body */\n    })\n  }\n}\n```\n\n## \u00a7\u27e812\u27e9Non-threadsafe futures\nNot all async traits need futures that are `dyn Future + Send`. To avoid having Send and Sync bounds placed on the async trait methods, invoke the async trait macro as `#[async_trait(?Send)]` on both the trait and the impl blocks.\n## \u00a7\u27e813\u27e9Elided lifetimes\nBe aware that async fn syntax does not allow lifetime elision outside of `&` and `&mut` references. (This is true even when not using #[async_trait].) Lifetimes must be named or marked by the placeholder `'_`.\nFortunately the compiler is able to diagnose missing lifetimes with a good error message.\n\u24d8\u27e87\u27e9```\ntype Elided<'a> = &'a usize;\n#[async_trait]\ntrait Test {\n  async fn test(not_okay: Elided, okay: &usize) {}\n}\n```\n\n```\nerror[E0726]: implicit elided lifetime not allowed here\n --> src/main.rs:9:29\n |\n9 |   async fn test(not_okay: Elided, okay: &usize) {}\n |               ^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n```\n\nThe fix is to name the lifetime or use `'_`.\n```\n#[async_trait]\ntrait Test {\n  // either\n  async fn test<'e>(elided: Elided<'e>) {}\n  // or\n  async fn test(elided: Elided<'_>) {}\n}\n```\n\n## Attribute Macros\u00a7\u27e814\u27e9\n\nasync_trait\u27e815\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-trait/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-trait/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-trait/latest/src/async_trait/lib.rs.html#1-257: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/async-trait/latest/async_trait/: This example deliberately fails to compile - \u24d8\n\u27e88\u27e9 https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/: _why async fn in traits are hard_\n\u27e89\u27e9 https://docs.rs/async-trait/latest/async_trait/#example: \u00a7\n\u27e810\u27e9 https://docs.rs/async-trait/latest/async_trait/#supported-features: \u00a7\n\u27e811\u27e9 https://docs.rs/async-trait/latest/async_trait/#explanation: \u00a7\n\u27e812\u27e9 https://docs.rs/async-trait/latest/async_trait/#non-threadsafe-futures: \u00a7\n\u27e813\u27e9 https://docs.rs/async-trait/latest/async_trait/#elided-lifetimes: \u00a7\n\u27e814\u27e9 https://docs.rs/async-trait/latest/async_trait/#attributes: \u00a7\n\u27e815\u27e9 https://docs.rs/async-trait/latest/async_trait/attr.async_trait.html: attr async_trait::async_trait - async_trait\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-trait` crate enables the use of `async fn` in Rust traits, addressing the limitation that traits with async methods are not `dyn` compatible. It provides an `#[async_trait]` macro to transform async methods into `Pin<Box<dyn Future + Send>>`, supporting features like generics, lifetimes, associated types, default implementations, and mixed async/non-async methods. Additionally, it offers flexibility for non-threadsafe futures with `#[async_trait(?Send)]` and ensures safety by avoiding `unsafe` code.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Type Erasure and `dyn Trait` Compatibility\n\u2705 **Factual**: The `async-trait` crate provides an attribute macro that enables async functions in traits to work with `dyn Trait`, overcoming the limitation that async functions in traits are not natively compatible with dynamic dispatch in Rust.  \n\u274c **Counterfactual**: The `async-trait` crate allows async functions in traits to work with `dyn Trait` by modifying the Rust compiler's internals to natively support async functions in traits.  \n\n---\n\n### Pair 2: Thread Safety of Futures\n\u2705 **Factual**: The `async-trait` crate supports non-threadsafe futures by using the `#[async_trait(?Send)]` macro, which removes the `Send` and `Sync` bounds from async trait methods.  \n\u274c **Counterfactual**: The `async-trait` crate requires all futures generated by async trait methods to be thread-safe (`Send`), even when using the `#[async_trait(?Send)]` macro.  \n\n---\n\n### Pair 3: Lifetime Elision Rules\n\u2705 **Factual**: The `async-trait` crate adheres to Rust's rules for lifetime elision, requiring explicit lifetimes in async trait methods outside of `&` and `&mut` references, as lifetime elision is not supported for other types.  \n\u274c **Counterfactual**: The `async-trait` crate automatically infers",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-0465be30-286590db-1751258422",
      "timestamp": "2025-06-30T04:40:22.834462+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]