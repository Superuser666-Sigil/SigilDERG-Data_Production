[
  {
    "execution_id": "exec-1a2ba1a6-0c1b88c5-1751263317",
    "timestamp": "2025-06-30T06:01:57.851083+00:00",
    "sacred_chain": {
      "input_data": "tarpc",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'tarpc' -> 'tarpc'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "tarpc",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/tarpc",
            "title": "tarpc v0.36.0",
            "content": {
              "raw_markdown": "#  tarpc v0.36.0\nAn RPC framework for Rust with a focus on ease of use. \n  * [ #api ](https://crates.io/keywords/api)\n  * [ #microservices ](https://crates.io/keywords/microservices)\n  * [ #network ](https://crates.io/keywords/network)\n  * [ #rpc ](https://crates.io/keywords/rpc)\n  * [ #server ](https://crates.io/keywords/server)\n\n\n  * [ Readme ](https://crates.io/crates/tarpc)\n  * [ 49 Versions ](https://crates.io/crates/tarpc/versions)\n  * [ Dependencies ](https://crates.io/crates/tarpc/dependencies)\n  * [ Dependents ](https://crates.io/crates/tarpc/reverse_dependencies)\n\n\n## Metadata\n3 months ago \nv1.65.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n79.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tarpc\nOr add the following line to your Cargo.toml:\ntarpc = \"0.36.0\"\n## Documentation\n[ docs.rs/tarpc ](https://docs.rs/tarpc)\n## Repository\n[ github.com/google/tarpc ](https://github.com/google/tarpc)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=tarpc&inquire=crate-violation)\n### Stats Overview\n5,057,020 Downloads all time\n49 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  tarpc v0.36.0\nAn RPC framework for Rust with a focus on ease of use. \n  *  #api \u27e81\u27e9\n  *  #microservices \u27e82\u27e9\n  *  #network \u27e83\u27e9\n  *  #rpc \u27e84\u27e9\n  *  #server \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  49 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n3 months ago \nv1.65.0 \n MIT \u27e810\u27e9\n79.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tarpc\nOr add the following line to your Cargo.toml:\ntarpc = \"0.36.0\"\n## Documentation\n docs.rs/tarpc \u27e811\u27e9\n## Repository\n github.com/google/tarpc \u27e812\u27e9\n## Owners\n## Categories\n  * Network programming\u27e813\u27e9\n  * Asynchronous\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n5,057,020 Downloads all time\n49 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/api:  #api \n\u27e82\u27e9 https://crates.io/keywords/microservices:  #microservices \n\u27e83\u27e9 https://crates.io/keywords/network:  #network \n\u27e84\u27e9 https://crates.io/keywords/rpc:  #rpc \n\u27e85\u27e9 https://crates.io/keywords/server:  #server \n\u27e86\u27e9 https://crates.io/crates/tarpc:  Readme \n\u27e87\u27e9 https://crates.io/crates/tarpc/versions:  49 Versions \n\u27e88\u27e9 https://crates.io/crates/tarpc/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/tarpc/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/tarpc:  docs.rs/tarpc \n\u27e812\u27e9 https://github.com/google/tarpc:  github.com/google/tarpc \n\u27e813\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e814\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e815\u27e9 https://crates.io/support?crate=tarpc&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1369,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117107.5636189"
          },
          "docs_rs": {
            "url": "https://docs.rs/tarpc",
            "title": "Crate tarpcCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\n[Settings](https://docs.rs/tarpc/latest/settings.html)\n[Help](https://docs.rs/tarpc/latest/help.html)\nSummary[Source](https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557)\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\n[Documentation](https://docs.rs/crate/tarpc/)\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework)What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are [gRPC](http://www.grpc.io) and [Cap\u2019n Proto](https://capnproto.org/).\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with [tracing](https://github.com/tokio-rs/tracing) primitives extended with [OpenTelemetry](https://opentelemetry.io/) traces. Using a compatible tracing subscriber like [OTLP](https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp), each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like [env_logger](https://github.com/env-logger-rs/env_logger/).\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#usage)Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#example)Example\nThis example uses [tokio](https://tokio.rs), so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see [example-service](https://docs.rs/tarpc/latest/tarpc/example-service).\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an [in-process channel](https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html \"mod tarpc::transport::channel\"), tarpc also ships a generic [`serde_transport`](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\") behind the `serde-transport` feature, with additional [TCP](https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html \"mod tarpc::serde_transport::tcp\") functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#service-documentation)Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports[\u00a7](https://docs.rs/tarpc/latest/tarpc/#reexports)\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules[\u00a7](https://docs.rs/tarpc/latest/tarpc/#modules)\n\n[client](https://docs.rs/tarpc/latest/tarpc/client/index.html \"mod tarpc::client\")\n    Provides a client that connects to a server and sends multiplexed requests.\n\n[context](https://docs.rs/tarpc/latest/tarpc/context/index.html \"mod tarpc::context\")\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\n[serde_transport](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\")`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\n[server](https://docs.rs/tarpc/latest/tarpc/server/index.html \"mod tarpc::server\")\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\n[trace](https://docs.rs/tarpc/latest/tarpc/trace/index.html \"mod tarpc::trace\")\n    Provides building blocks for tracing distributed programs.\n\n[transport](https://docs.rs/tarpc/latest/tarpc/transport/index.html \"mod tarpc::transport\")\n    Provides a [`Transport`](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\") trait as well as implementations.\n## Structs[\u00a7](https://docs.rs/tarpc/latest/tarpc/#structs)\n\n[Request](https://docs.rs/tarpc/latest/tarpc/struct.Request.html \"struct tarpc::Request\")\n    A request from a client to a server.\n\n[Response](https://docs.rs/tarpc/latest/tarpc/struct.Response.html \"struct tarpc::Response\")\n    A response from a server to a client.\n\n[ServerError](https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html \"struct tarpc::ServerError\")\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums[\u00a7](https://docs.rs/tarpc/latest/tarpc/#enums)\n\n[ChannelError](https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html \"enum tarpc::ChannelError\")\n    Critical errors that result in a Channel disconnecting.\n\n[ClientMessage](https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html \"enum tarpc::ClientMessage\")\n    A message from a client to a server.\n## Traits[\u00a7](https://docs.rs/tarpc/latest/tarpc/#traits)\n\n[RequestName](https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html \"trait tarpc::RequestName\")\n    Implemented by the request types generated by tarpc::service.\n\n[Transport](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\")\n    A bidirectional stream ([`Sink`](https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html \"trait futures_sink::Sink\") + [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\")) of messages.\n## Attribute Macros[\u00a7](https://docs.rs/tarpc/latest/tarpc/#attributes)\n\n[derive_serde](https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html \"attr tarpc::derive_serde\")\n    A helper attribute to avoid a direct dependency on Serde.\n\n[service](https://docs.rs/tarpc/latest/tarpc/attr.service.html \"attr tarpc::service\")\n    The main macro that creates RPC services.\n",
              "markdown_with_citations": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\nDocumentation\u27e84\u27e9\n### \u00a7\u27e85\u27e9What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are gRPC\u27e86\u27e9 and Cap\u2019n Proto\u27e87\u27e9.\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with tracing\u27e88\u27e9 primitives extended with OpenTelemetry\u27e89\u27e9 traces. Using a compatible tracing subscriber like OTLP\u27e810\u27e9, each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like env_logger\u27e811\u27e9.\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### \u00a7\u27e812\u27e9Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### \u00a7\u27e813\u27e9Example\nThis example uses tokio\u27e814\u27e9, so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see example-service\u27e815\u27e9.\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an in-process channel\u27e816\u27e9, tarpc also ships a generic `serde_transport`\u27e817\u27e9 behind the `serde-transport` feature, with additional TCP\u27e818\u27e9 functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### \u00a7\u27e819\u27e9Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports\u00a7\u27e820\u27e9\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules\u00a7\u27e821\u27e9\n\nclient\u27e822\u27e9\n    Provides a client that connects to a server and sends multiplexed requests.\n\ncontext\u27e823\u27e9\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\nserde_transport\u27e817\u27e9`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\nserver\u27e824\u27e9\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\ntrace\u27e825\u27e9\n    Provides building blocks for tracing distributed programs.\n\ntransport\u27e826\u27e9\n    Provides a `Transport`\u27e827\u27e9 trait as well as implementations.\n## Structs\u00a7\u27e828\u27e9\n\nRequest\u27e829\u27e9\n    A request from a client to a server.\n\nResponse\u27e830\u27e9\n    A response from a server to a client.\n\nServerError\u27e831\u27e9\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums\u00a7\u27e832\u27e9\n\nChannelError\u27e833\u27e9\n    Critical errors that result in a Channel disconnecting.\n\nClientMessage\u27e834\u27e9\n    A message from a client to a server.\n## Traits\u00a7\u27e835\u27e9\n\nRequestName\u27e836\u27e9\n    Implemented by the request types generated by tarpc::service.\n\nTransport\u27e827\u27e9\n    A bidirectional stream (`Sink`\u27e837\u27e9 + `Stream`\u27e838\u27e9) of messages.\n## Attribute Macros\u00a7\u27e839\u27e9\n\nderive_serde\u27e840\u27e9\n    A helper attribute to avoid a direct dependency on Serde.\n\nservice\u27e841\u27e9\n    The main macro that creates RPC services.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tarpc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tarpc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557: Source\n\u27e84\u27e9 https://docs.rs/crate/tarpc/: Documentation\n\u27e85\u27e9 https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework: \u00a7\n\u27e86\u27e9 http://www.grpc.io: gRPC\n\u27e87\u27e9 https://capnproto.org/: Cap\u2019n Proto\n\u27e88\u27e9 https://github.com/tokio-rs/tracing: tracing\n\u27e89\u27e9 https://opentelemetry.io/: OpenTelemetry\n\u27e810\u27e9 https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp: OTLP\n\u27e811\u27e9 https://github.com/env-logger-rs/env_logger/: env_logger\n\u27e812\u27e9 https://docs.rs/tarpc/latest/tarpc/#usage: \u00a7\n\u27e813\u27e9 https://docs.rs/tarpc/latest/tarpc/#example: \u00a7\n\u27e814\u27e9 https://tokio.rs: tokio\n\u27e815\u27e9 https://docs.rs/tarpc/latest/tarpc/example-service: example-service\n\u27e816\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html: mod tarpc::transport::channel - in-process channel\n\u27e817\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html: mod tarpc::serde_transport - `serde_transport`\n\u27e818\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html: mod tarpc::serde_transport::tcp - TCP\n\u27e819\u27e9 https://docs.rs/tarpc/latest/tarpc/#service-documentation: \u00a7\n\u27e820\u27e9 https://docs.rs/tarpc/latest/tarpc/#reexports: \u00a7\n\u27e821\u27e9 https://docs.rs/tarpc/latest/tarpc/#modules: \u00a7\n\u27e822\u27e9 https://docs.rs/tarpc/latest/tarpc/client/index.html: mod tarpc::client - client\n\u27e823\u27e9 https://docs.rs/tarpc/latest/tarpc/context/index.html: mod tarpc::context - context\n\u27e824\u27e9 https://docs.rs/tarpc/latest/tarpc/server/index.html: mod tarpc::server - server\n\u27e825\u27e9 https://docs.rs/tarpc/latest/tarpc/trace/index.html: mod tarpc::trace - trace\n\u27e826\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/index.html: mod tarpc::transport - transport\n\u27e827\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.Transport.html: trait tarpc::Transport - `Transport`\n\u27e828\u27e9 https://docs.rs/tarpc/latest/tarpc/#structs: \u00a7\n\u27e829\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Request.html: struct tarpc::Request - Request\n\u27e830\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Response.html: struct tarpc::Response - Response\n\u27e831\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html: struct tarpc::ServerError - ServerError\n\u27e832\u27e9 https://docs.rs/tarpc/latest/tarpc/#enums: \u00a7\n\u27e833\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html: enum tarpc::ChannelError - ChannelError\n\u27e834\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html: enum tarpc::ClientMessage - ClientMessage\n\u27e835\u27e9 https://docs.rs/tarpc/latest/tarpc/#traits: \u00a7\n\u27e836\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html: trait tarpc::RequestName - RequestName\n\u27e837\u27e9 https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html: trait futures_sink::Sink - `Sink`\n\u27e838\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html: trait futures_core::stream::Stream - `Stream`\n\u27e839\u27e9 https://docs.rs/tarpc/latest/tarpc/#attributes: \u00a7\n\u27e840\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html: attr tarpc::derive_serde - derive_serde\n\u27e841\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.service.html: attr tarpc::service - service\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 10590,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117108.370137"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/tarpc",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [45 releases](https://lib.rs/crates/tarpc/versions) (breaking)\n0.36.0 |  Mar 27, 2025   \n---|---  \n0.35.0 |  Oct 27, 2024   \n0.34.0 |  Dec 30, 2023   \n0.33.0 |  Apr 3, 2023   \n0.3.0 |  Feb 20, 2016   \n#**30** in [Network programming](https://lib.rs/network-programming \"Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP.\")\nDownload history 42638/week @ 2025-03-08 36592/week @ 2025-03-15 47600/week @ 2025-03-22 35419/week @ 2025-03-29 38656/week @ 2025-04-05 35044/week @ 2025-04-12 35183/week @ 2025-04-19 36465/week @ 2025-04-26 37443/week @ 2025-05-03 34086/week @ 2025-05-10 28083/week @ 2025-05-17 31564/week @ 2025-05-24 41990/week @ 2025-05-31 40068/week @ 2025-06-07 36878/week @ 2025-06-14 41614/week @ 2025-06-21\n**166,228** downloads per month Used in [**339** crates (69 directly)](https://lib.rs/crates/tarpc/rev)\n**MIT** license \n255KB  5.5K  SLoC\n[![Crates.io](https://img.shields.io/crates/v/tarpc.svg)](https://crates.io/crates/tarpc) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/LICENSE) [![Build status](https://img.gs/czjpqfbdkz/full/https://github.com/google/tarpc/workflows/Continuous%20Integration/badge.svg)](https://github.com/google/tarpc/actions?query=workflow%3A%22Continuous+Integration%22) [![Discord chat](https://img.shields.io/discord/647529123996237854.svg?logo=discord&style=flat-square)](https://discord.gg/gXwpdSt)\n# tarpc\n_Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\n[Documentation](https://docs.rs/crate/tarpc/)\n## What is an RPC framework?\n\"RPC\" stands for \"Remote Procedure Call,\" a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are [gRPC](http://www.grpc.io) and [Cap'n Proto](https://capnproto.org/).\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there's no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing ```Stream`<`Item = Request`>`` `+` `Sink`<`Response`>```` can be used as a transport to connect the client and server.\n  * ```Send` `+` `'static``` optional: if the transport doesn't require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with [tracing](https://github.com/tokio-rs/tracing) primitives extended with [OpenTelemetry](https://opentelemetry.io/) traces. Using a compatible tracing subscriber like [Jaeger](https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-jaeger), each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like [env_logger](https://github.com/env-logger-rs/env_logger/).\n  * Serde serialization: enabling the ``serde1`` Cargo feature will make service requests and responses ``Serialize `+` Deserialize``. It's entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn't have to be paid when it's not needed.\n\n\n## Usage\nAdd to your ``Cargo.toml`` dependencies:\n```\n`tarpc = \"0.36\"\n`\n```\n\nThe ```tarpc`::``service`` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you're off to the races!\n## Example\nThis example uses [tokio](https://tokio.rs), so add the following dependencies to your ``Cargo.toml``:\n```\n`anyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"rt-multi-thread\", \"macros\"] }\n`\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see [example-service](https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/example-service).\nFirst, let's set up the dependencies and service definition.\n```\n``use` `futures`::```prelude`::```*``;`\n`use` `tarpc`::````{`\n  client`,` context`,`\n  `server`::```{``self``,` Channel`}``,`\n```}```;`\n``//` This is the service definition. It looks a lot like a trait definition.`\n``//` It defines one RPC, hello, which takes one arg, name, and returns a String.`\n``#``[``tarpc`::`service``]``\n``trait` `World` ``{`\n  ``///` Returns a greeting for name.`\n  async ``fn` `hello`````(``name``:` String```)```` ``->` String```;`\n```}```\n`\n```\n\nThis service definition generates a trait called ``World``. Next we need to implement it for our Server struct.\n```\n```//` This is the type that implements the generated World trait. It is the business logic`\n``//` and is used to start the server.`\n``#``[``derive```(```Clone```)```]``\n``struct` ```HelloServer```;`\n``impl` ``World `for``` `HelloServer` ````{`\n  async ``fn` `hello`````(``self`, `_`: `context`::``Context, `name``:` String```)```` ``->` String` ```{`\n    `format!``(```\"`Hello, `{name}`!`\"```)`\n  `}``\n```}```\n`\n```\n\nLastly let's write our ``main`` that will start the server. While this example uses an in-process channel, tarpc also ships a generic [``serde_transport``](https://docs.rs/tarpc/latest/tarpc/?search=serde_transport \"`serde_transport`\") behind the ``serde-transport`` feature, with additional [TCP](https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/serde_transport::tcp) functionality available behind the ``tcp`` feature.\n```\n```#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)```` ``->` `anyhow`::````Result``<``(``)``>``` ````{`\n  `let` `(`client_transport`,` server_transport`)` `=` `tarpc`::```transport`::```channel`::``unbounded`(``)``;`\n  `let` server `=` `server`::```BaseChannel`::``with_defaults`(`server_transport`)``;`\n  `tokio`::``spawn`(`\n    server`.``execute``(`HelloServer`.``serve``(``)``)`\n      ``//` Handle all requests concurrently.`\n      `.``for_each``(````|``````response``|`` ``async `move` `{`\n        `tokio`::``spawn`(`response`)``;`\n      `}```)``)``;`\n  ``//` WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new``\n  ``//` that takes a config and any Transport as input.`\n  `let` `mut` client `=` `WorldClient`::``new`(``client`::```Config`::``default`(``)``,` client_transport`)``.``spawn``(``)``;`\n  ``//` The client has an RPC method for each RPC defined in the annotated trait. It takes the same`\n  ``//` args as defined, with the addition of a Context, which is always the first arg. The Context`\n  ``//` specifies a deadline and trace information which can be helpful in debugging requests.`\n  `let` hello `=` client`.``hello``(``context`::``current`(``)``,` ``\"`Stim`\"```.``to_string``(``)``)``.`await`?``;`\n  `println!``(```\"``{hello}``\"```)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n## Service Documentation\nUse ````cargo``` doc``` as you normally would to see the documentation created for all items expanded by a ``service!`` invocation.\nLicense: MIT\n#### Dependencies\n~8\u201318MB  ~215K SLoC\n  * [anyhow](https://lib.rs/crates/anyhow \"1.0\")\n  * [fnv](https://lib.rs/crates/fnv \"1.0\")\n  * [futures](https://lib.rs/crates/futures \"0.3\")\n  * [humantime](https://lib.rs/crates/humantime \"2.0\")\n  * [opentelemetry](https://lib.rs/crates/opentelemetry \"obsolete\") 0.26\n  * [opentelemetry-semantic-conventions](https://lib.rs/crates/opentelemetry-semantic-conventions \"obsolete\") 0.16\n  * [pin-project](https://lib.rs/crates/pin-project \"1.0\")\n  * [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * [serde1?](https://lib.rs/crates/tarpc/features#feature-serde1 \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [static_assertions](https://lib.rs/crates/static_assertions \"1.1.0\")\n  * [tarpc-plugins](https://lib.rs/crates/tarpc-plugins \"new\") 0.14\n  * [thiserror](https://lib.rs/crates/thiserror \"new\") 2.0\n  * [tokio](https://lib.rs/crates/tokio \"1\")[+time](https://lib.rs/crates/tokio/features#feature-time)\n  * [serde-transport?](https://lib.rs/crates/tarpc/features#feature-serde-transport \"optional feature\") [serde-transport-bincode?](https://lib.rs/crates/tarpc/features#feature-serde-transport-bincode \"optional feature\") [serde-transport-json?](https://lib.rs/crates/tarpc/features#feature-serde-transport-json \"optional feature\") [tokio-serde](https://lib.rs/crates/tokio-serde \"new\") 0.9\n  * [tokio-util](https://lib.rs/crates/tokio-util \"0.7.3\")[+time](https://lib.rs/crates/tokio-util/features#feature-time)\n  * [tracing](https://lib.rs/crates/tracing \"0.1\")[+attributes](https://lib.rs/crates/tracing/features#feature-attributes)[+log](https://lib.rs/crates/tracing/features#feature-log)\n  * [tracing-opentelemetry](https://lib.rs/crates/tracing-opentelemetry \"obsolete\") 0.27\n\n\n  * dev  [assert_matches](https://lib.rs/crates/assert_matches \"1.4\")\n  * dev  [bincode](https://lib.rs/crates/bincode \"1.3\")\n  * dev  [bytes](https://lib.rs/crates/bytes \"1\")[+serde](https://lib.rs/crates/bytes/features#feature-serde)\n  * dev  [console-subscriber](https://lib.rs/crates/console-subscriber \"new\") 0.4\n  * dev  [flate2](https://lib.rs/crates/flate2 \"1.0\")\n  * dev  [futures-test](https://lib.rs/crates/futures-test \"0.3\")\n  * dev  [opentelemetry-otlp](https://lib.rs/crates/opentelemetry-otlp \"obsolete\") 0.26\n  * dev  [opentelemetry_sdk](https://lib.rs/crates/opentelemetry_sdk \"obsolete\") 0.26[+rt-tokio](https://lib.rs/crates/opentelemetry_sdk/features#feature-rt-tokio)\n  * dev  [pin-utils](https://lib.rs/crates/pin-utils \"0.1.0\")\n  * dev  [rustls-pemfile](https://lib.rs/crates/rustls-pemfile \"new\") 2.0\n  * dev  [serde_bytes](https://lib.rs/crates/serde_bytes \"0.11\")\n  * dev  [tokio-rustls](https://lib.rs/crates/tokio-rustls \"new\") 0.26\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0\")\n\n\n#### [Other features](https://lib.rs/crates/tarpc/features)\n  * [full](https://lib.rs/crates/tarpc/features#feature-full)\n  * [tcp](https://lib.rs/crates/tarpc/features#feature-tcp)\n  * [tokio1](https://lib.rs/crates/tarpc/features#feature-tokio1)\n  * [unix](https://lib.rs/crates/tarpc/features#feature-unix)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  45 releases\u27e81\u27e9 (breaking)\n0.36.0 |  Mar 27, 2025   \n---|---  \n0.35.0 |  Oct 27, 2024   \n0.34.0 |  Dec 30, 2023   \n0.33.0 |  Apr 3, 2023   \n0.3.0 |  Feb 20, 2016   \n#**30** in Network programming\u27e82\u27e9\nDownload history 42638/week @ 2025-03-08 36592/week @ 2025-03-15 47600/week @ 2025-03-22 35419/week @ 2025-03-29 38656/week @ 2025-04-05 35044/week @ 2025-04-12 35183/week @ 2025-04-19 36465/week @ 2025-04-26 37443/week @ 2025-05-03 34086/week @ 2025-05-10 28083/week @ 2025-05-17 31564/week @ 2025-05-24 41990/week @ 2025-05-31 40068/week @ 2025-06-07 36878/week @ 2025-06-14 41614/week @ 2025-06-21\n**166,228** downloads per month Used in **339** crates (69 directly)\u27e83\u27e9\n**MIT** license \n255KB  5.5K  SLoC\n![Crates.io\u27e84\u27e9](https://crates.io/crates/tarpc) ![MIT licensed\u27e85\u27e9](https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/LICENSE) ![Build status\u27e86\u27e9](https://github.com/google/tarpc/actions?query=workflow%3A%22Continuous+Integration%22) ![Discord chat\u27e87\u27e9](https://discord.gg/gXwpdSt)\n# tarpc\n_Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\nDocumentation\u27e88\u27e9\n## What is an RPC framework?\n\"RPC\" stands for \"Remote Procedure Call,\" a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are gRPC\u27e89\u27e9 and Cap'n Proto\u27e810\u27e9.\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there's no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing ```Stream`<`Item = Request`>`` `+` `Sink`<`Response`>```` can be used as a transport to connect the client and server.\n  * ```Send` `+` `'static``` optional: if the transport doesn't require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with tracing\u27e811\u27e9 primitives extended with OpenTelemetry\u27e812\u27e9 traces. Using a compatible tracing subscriber like Jaeger\u27e813\u27e9, each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like env_logger\u27e814\u27e9.\n  * Serde serialization: enabling the ``serde1`` Cargo feature will make service requests and responses ``Serialize `+` Deserialize``. It's entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn't have to be paid when it's not needed.\n\n\n## Usage\nAdd to your ``Cargo.toml`` dependencies:\n```\n`tarpc = \"0.36\"\n`\n```\n\nThe ```tarpc`::``service`` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you're off to the races!\n## Example\nThis example uses tokio\u27e815\u27e9, so add the following dependencies to your ``Cargo.toml``:\n```\n`anyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"rt-multi-thread\", \"macros\"] }\n`\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see example-service\u27e816\u27e9.\nFirst, let's set up the dependencies and service definition.\n```\n``use` `futures`::```prelude`::```*``;`\n`use` `tarpc`::````{`\n  client`,` context`,`\n  `server`::```{``self``,` Channel`}``,`\n```}```;`\n``//` This is the service definition. It looks a lot like a trait definition.`\n``//` It defines one RPC, hello, which takes one arg, name, and returns a String.`\n``#``[``tarpc`::`service``]``\n``trait` `World` ``{`\n  ``///` Returns a greeting for name.`\n  async ``fn` `hello`````(``name``:` String```)```` ``->` String```;`\n```}```\n`\n```\n\nThis service definition generates a trait called ``World``. Next we need to implement it for our Server struct.\n```\n```//` This is the type that implements the generated World trait. It is the business logic`\n``//` and is used to start the server.`\n``#``[``derive```(```Clone```)```]``\n``struct` ```HelloServer```;`\n``impl` ``World `for``` `HelloServer` ````{`\n  async ``fn` `hello`````(``self`, `_`: `context`::``Context, `name``:` String```)```` ``->` String` ```{`\n    `format!``(```\"`Hello, `{name}`!`\"```)`\n  `}``\n```}```\n`\n```\n\nLastly let's write our ``main`` that will start the server. While this example uses an in-process channel, tarpc also ships a generic ``serde_transport``\u27e817\u27e9 behind the ``serde-transport`` feature, with additional TCP\u27e818\u27e9 functionality available behind the ``tcp`` feature.\n```\n```#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)```` ``->` `anyhow`::````Result``<``(``)``>``` ````{`\n  `let` `(`client_transport`,` server_transport`)` `=` `tarpc`::```transport`::```channel`::``unbounded`(``)``;`\n  `let` server `=` `server`::```BaseChannel`::``with_defaults`(`server_transport`)``;`\n  `tokio`::``spawn`(`\n    server`.``execute``(`HelloServer`.``serve``(``)``)`\n      ``//` Handle all requests concurrently.`\n      `.``for_each``(````|``````response``|`` ``async `move` `{`\n        `tokio`::``spawn`(`response`)``;`\n      `}```)``)``;`\n  ``//` WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new``\n  ``//` that takes a config and any Transport as input.`\n  `let` `mut` client `=` `WorldClient`::``new`(``client`::```Config`::``default`(``)``,` client_transport`)``.``spawn``(``)``;`\n  ``//` The client has an RPC method for each RPC defined in the annotated trait. It takes the same`\n  ``//` args as defined, with the addition of a Context, which is always the first arg. The Context`\n  ``//` specifies a deadline and trace information which can be helpful in debugging requests.`\n  `let` hello `=` client`.``hello``(``context`::``current`(``)``,` ``\"`Stim`\"```.``to_string``(``)``)``.`await`?``;`\n  `println!``(```\"``{hello}``\"```)``;`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n## Service Documentation\nUse ````cargo``` doc``` as you normally would to see the documentation created for all items expanded by a ``service!`` invocation.\nLicense: MIT\n#### Dependencies\n~8\u201318MB  ~215K SLoC\n  * anyhow\u27e819\u27e9\n  * fnv\u27e820\u27e9\n  * futures\u27e821\u27e9\n  * humantime\u27e822\u27e9\n  * opentelemetry\u27e823\u27e9 0.26\n  * opentelemetry-semantic-conventions\u27e824\u27e9 0.16\n  * pin-project\u27e825\u27e9\n  * rand\u27e826\u27e9 0.8\n  * serde1?\u27e827\u27e9 serde\u27e828\u27e9+derive\u27e829\u27e9\n  * static_assertions\u27e830\u27e9\n  * tarpc-plugins\u27e831\u27e9 0.14\n  * thiserror\u27e832\u27e9 2.0\n  * tokio\u27e833\u27e9+time\u27e834\u27e9\n  * serde-transport?\u27e835\u27e9 serde-transport-bincode?\u27e836\u27e9 serde-transport-json?\u27e837\u27e9 tokio-serde\u27e838\u27e9 0.9\n  * tokio-util\u27e839\u27e9+time\u27e840\u27e9\n  * tracing\u27e841\u27e9+attributes\u27e842\u27e9+log\u27e843\u27e9\n  * tracing-opentelemetry\u27e844\u27e9 0.27\n\n\n  * dev  assert_matches\u27e845\u27e9\n  * dev  bincode\u27e846\u27e9\n  * dev  bytes\u27e847\u27e9+serde\u27e848\u27e9\n  * dev  console-subscriber\u27e849\u27e9 0.4\n  * dev  flate2\u27e850\u27e9\n  * dev  futures-test\u27e851\u27e9\n  * dev  opentelemetry-otlp\u27e852\u27e9 0.26\n  * dev  opentelemetry_sdk\u27e853\u27e9 0.26+rt-tokio\u27e854\u27e9\n  * dev  pin-utils\u27e855\u27e9\n  * dev  rustls-pemfile\u27e856\u27e9 2.0\n  * dev  serde_bytes\u27e857\u27e9\n  * dev  tokio-rustls\u27e858\u27e9 0.26\n  * dev  tracing-subscriber\u27e859\u27e9+env-filter\u27e860\u27e9\n  * dev  trybuild\u27e861\u27e9\n\n\n#### Other features\u27e862\u27e9\n  * full\u27e863\u27e9\n  * tcp\u27e864\u27e9\n  * tokio1\u27e865\u27e9\n  * unix\u27e866\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/tarpc/versions: 45 releases\n\u27e82\u27e9 https://lib.rs/network-programming: Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP. - Network programming\n\u27e83\u27e9 https://lib.rs/crates/tarpc/rev: **339** crates (69 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/tarpc.svg: ![Crates.io\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/google/tarpc/workflows/Continuous%20Integration/badge.svg: ![Build status\n\u27e87\u27e9 https://img.shields.io/discord/647529123996237854.svg?logo=discord&style=flat-square: ![Discord chat\n\u27e88\u27e9 https://docs.rs/crate/tarpc/: Documentation\n\u27e89\u27e9 http://www.grpc.io: gRPC\n\u27e810\u27e9 https://capnproto.org/: Cap'n Proto\n\u27e811\u27e9 https://github.com/tokio-rs/tracing: tracing\n\u27e812\u27e9 https://opentelemetry.io/: OpenTelemetry\n\u27e813\u27e9 https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-jaeger: Jaeger\n\u27e814\u27e9 https://github.com/env-logger-rs/env_logger/: env_logger\n\u27e815\u27e9 https://tokio.rs: tokio\n\u27e816\u27e9 https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/example-service: example-service\n\u27e817\u27e9 https://docs.rs/tarpc/latest/tarpc/?search=serde_transport: `serde_transport` - ``serde_transport``\n\u27e818\u27e9 https://github.com/google/tarpc/blob/49e12bb6eb41aaaccc941767911c1a4eb13ac48d/tarpc/serde_transport::tcp: TCP\n\u27e819\u27e9 https://lib.rs/crates/anyhow: 1.0 - anyhow\n\u27e820\u27e9 https://lib.rs/crates/fnv: 1.0 - fnv\n\u27e821\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e822\u27e9 https://lib.rs/crates/humantime: 2.0 - humantime\n\u27e823\u27e9 https://lib.rs/crates/opentelemetry: obsolete - opentelemetry\n\u27e824\u27e9 https://lib.rs/crates/opentelemetry-semantic-conventions: obsolete - opentelemetry-semantic-conventions\n\u27e825\u27e9 https://lib.rs/crates/pin-project: 1.0 - pin-project\n\u27e826\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e827\u27e9 https://lib.rs/crates/tarpc/features#feature-serde1: optional feature - serde1?\n\u27e828\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e829\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e830\u27e9 https://lib.rs/crates/static_assertions: 1.1.0 - static_assertions\n\u27e831\u27e9 https://lib.rs/crates/tarpc-plugins: new - tarpc-plugins\n\u27e832\u27e9 https://lib.rs/crates/thiserror: new - thiserror\n\u27e833\u27e9 https://lib.rs/crates/tokio: 1 - tokio\n\u27e834\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e835\u27e9 https://lib.rs/crates/tarpc/features#feature-serde-transport: optional feature - serde-transport?\n\u27e836\u27e9 https://lib.rs/crates/tarpc/features#feature-serde-transport-bincode: optional feature - serde-transport-bincode?\n\u27e837\u27e9 https://lib.rs/crates/tarpc/features#feature-serde-transport-json: optional feature - serde-transport-json?\n\u27e838\u27e9 https://lib.rs/crates/tokio-serde: new - tokio-serde\n\u27e839\u27e9 https://lib.rs/crates/tokio-util: 0.7.3 - tokio-util\n\u27e840\u27e9 https://lib.rs/crates/tokio-util/features#feature-time: +time\n\u27e841\u27e9 https://lib.rs/crates/tracing: 0.1 - tracing\n\u27e842\u27e9 https://lib.rs/crates/tracing/features#feature-attributes: +attributes\n\u27e843\u27e9 https://lib.rs/crates/tracing/features#feature-log: +log\n\u27e844\u27e9 https://lib.rs/crates/tracing-opentelemetry: obsolete - tracing-opentelemetry\n\u27e845\u27e9 https://lib.rs/crates/assert_matches: 1.4 - assert_matches\n\u27e846\u27e9 https://lib.rs/crates/bincode: 1.3 - bincode\n\u27e847\u27e9 https://lib.rs/crates/bytes: 1 - bytes\n\u27e848\u27e9 https://lib.rs/crates/bytes/features#feature-serde: +serde\n\u27e849\u27e9 https://lib.rs/crates/console-subscriber: new - console-subscriber\n\u27e850\u27e9 https://lib.rs/crates/flate2: 1.0 - flate2\n\u27e851\u27e9 https://lib.rs/crates/futures-test: 0.3 - futures-test\n\u27e852\u27e9 https://lib.rs/crates/opentelemetry-otlp: obsolete - opentelemetry-otlp\n\u27e853\u27e9 https://lib.rs/crates/opentelemetry_sdk: obsolete - opentelemetry_sdk\n\u27e854\u27e9 https://lib.rs/crates/opentelemetry_sdk/features#feature-rt-tokio: +rt-tokio\n\u27e855\u27e9 https://lib.rs/crates/pin-utils: 0.1.0 - pin-utils\n\u27e856\u27e9 https://lib.rs/crates/rustls-pemfile: new - rustls-pemfile\n\u27e857\u27e9 https://lib.rs/crates/serde_bytes: 0.11 - serde_bytes\n\u27e858\u27e9 https://lib.rs/crates/tokio-rustls: new - tokio-rustls\n\u27e859\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e860\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e861\u27e9 https://lib.rs/crates/trybuild: 1.0 - trybuild\n\u27e862\u27e9 https://lib.rs/crates/tarpc/features: Other features\n\u27e863\u27e9 https://lib.rs/crates/tarpc/features#feature-full: full\n\u27e864\u27e9 https://lib.rs/crates/tarpc/features#feature-tcp: tcp\n\u27e865\u27e9 https://lib.rs/crates/tarpc/features#feature-tokio1: tokio1\n\u27e866\u27e9 https://lib.rs/crates/tarpc/features#feature-unix: unix\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11875,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117108.9550328"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\liblazy_static-2a44d546c3d10d6f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_sink-39699e5e37bf0478.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_io-76ff1e12022b56d6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libgetrandom-76a7c1f034b56ee0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libbyteorder-0ff5a2bbb0a25f50.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libonce_cell-aee3b9768c8bcaf5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "static_assertions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libstatic_assertions-d4c248694dbc366f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_channel-574737b99960bb16.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#humantime@2.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "humantime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libhumantime-d46682a896cfa27e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "getrandom",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand_core-49237eda3e682635.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-46c8c1961f98189d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-46c8c1961f98189d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry-semantic-conventions@0.16.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-semantic-conventions-0.16.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry_semantic_conventions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-semantic-conventions-0.16.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry_semantic_conventions-7cec3532d038932b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthread_local-88087cda12d9af62.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-cac46b9e024602a1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-cac46b9e024602a1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-68c527dc29a51c8d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-68c527dc29a51c8d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-c68d73fbcc4cf0fc\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libbytes-1cd10b4e16f0232c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "std_backtrace"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-397e613eb0d16c65\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-254ca81020df5d5a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_core-daa1ed26a32027b7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-3fa685af315ea699\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-3fa685af315ea699\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sharded_slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsharded_slab-7ab0a8de3ecd9bae.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-ad85cae5ab0b1648\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "anyhow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libanyhow-da8a1b60b8e8ef1b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libslab-f2a6797c9ae73fcb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libquote-42171f68d588a2b8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libquote-42171f68d588a2b8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_subscriber",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "registry",
                "sharded-slab",
                "std",
                "thread_local"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_subscriber-54f4b08ce2c7efbe.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.41.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "sync",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtokio-fa3a0e561d3d164b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "slab",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtokio_util-c86d6266bece4d65.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsyn-8968d234a0039968.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsyn-8968d234a0039968.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tarpc-plugins@0.14.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tarpc-plugins-0.14.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tarpc_plugins",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tarpc-plugins-0.14.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.7.35",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.7.35\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "zerocopy_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.7.35\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.83",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.65\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_project-bb7c59864145c269.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthiserror-922309b0e4758e0a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthiserror-0e41222b50675114.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "log",
                "std",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing-a888e588e4d13ad2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.7.35",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "byteorder",
                "default",
                "derive",
                "simd",
                "zerocopy-derive"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libzerocopy-775a8d42b8948fe9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.20\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libppv_lite86-b44dfd423ebe701c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry@0.26.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-0.26.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-0.26.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "logs",
                "metrics",
                "pin-project-lite",
                "trace"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry-079530201c72c601.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand_chacha-e161ef0b7f99388e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "getrandom",
                "libc",
                "rand_chacha",
                "small_rng",
                "std",
                "std_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand-9e18aad37b29b977.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "channel",
                "futures-channel",
                "futures-io",
                "futures-macro",
                "futures-sink",
                "io",
                "memchr",
                "sink",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_util-0ab34a04ef3ade28.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_executor-a8b6862466e5ec93.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "default",
                "executor",
                "futures-executor",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures-f8a2764be837a249.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry_sdk@0.26.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry_sdk-0.26.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry_sdk",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry_sdk-0.26.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "async-trait",
                "percent-encoding",
                "rand",
                "trace"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry_sdk-f63dbd55a6f29dde.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-opentelemetry@0.27.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-opentelemetry-0.27.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_opentelemetry",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-opentelemetry-0.27.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_opentelemetry-7e8c8785ffcd3930.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxex6c875/tarpc-0.36.0#tarpc@0.36.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tarpc",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtarpc-b51cc4647f8faac2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-e1ee9ee3dd80fd20\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\proc-macro2-26ba5a0b8e9c4cd4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libautocfg-962de8d6b4bbcb9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_project_lite-4072af2875183aba.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_core-308f9a7b9ba0908e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_sink-39699e5e37bf0478.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.20.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libonce_cell-aee3b9768c8bcaf5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libbyteorder-0ff5a2bbb0a25f50.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-46c8c1961f98189d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-46c8c1961f98189d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_io-76ff1e12022b56d6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.5.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\liblazy_static-2a44d546c3d10d6f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-68c527dc29a51c8d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-68c527dc29a51c8d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.94\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libproc_macro2-e08c126dc248a797.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-3fa685af315ea699\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-3fa685af315ea699\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_channel-574737b99960bb16.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libgetrandom-76a7c1f034b56ee0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-c68d73fbcc4cf0fc\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "once_cell",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_core-daa1ed26a32027b7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sharded_slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsharded_slab-7ab0a8de3ecd9bae.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthread_local-88087cda12d9af62.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "percent_encoding",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\percent-encoding-2.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpercent_encoding-3e311531e44ed010.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-cac46b9e024602a1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-cac46b9e024602a1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\liblog-e1e9087e6a7c95fb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\thiserror-254ca81020df5d5a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio@1.41.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-1.41.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "sync",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtokio-fa3a0e561d3d164b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@1.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-1.8.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libbytes-1cd10b4e16f0232c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fnv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fnv-1.0.7\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfnv-da722296a25cad98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "static_assertions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\static_assertions-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libstatic_assertions-d4c248694dbc366f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libquote-42171f68d588a2b8.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libquote-42171f68d588a2b8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\slab-ad85cae5ab0b1648\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.6.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "getrandom",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand_core-49237eda3e682635.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "std_backtrace"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\build\\anyhow-397e613eb0d16c65\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_subscriber",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "registry",
                "sharded-slab",
                "std",
                "thread_local"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_subscriber-54f4b08ce2c7efbe.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry-semantic-conventions@0.16.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-semantic-conventions-0.16.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry_semantic_conventions",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-semantic-conventions-0.16.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry_semantic_conventions-7cec3532d038932b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#humantime@2.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "humantime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\humantime-2.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libhumantime-d46682a896cfa27e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.100",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.100\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsyn-8968d234a0039968.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libsyn-8968d234a0039968.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libslab-f2a6797c9ae73fcb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.91",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "anyhow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\anyhow-1.0.91\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libanyhow-da8a1b60b8e8ef1b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.7.35",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.7.35\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "zerocopy_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-derive-0.7.35\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\zerocopy_derive-f8df19de1cc9d717.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\futures_macro-0fb3bc8d12222f92.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-1.0.65\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-bc584faba0aa882a.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tracing_attributes-09df65c0bee9a9c7.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.83",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "async_trait",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\async-trait-0.1.83\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\async_trait-d88b46283ed6b0ce.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\thiserror_impl-b69f9802e000f11d.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "pin_project_internal",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-internal-1.1.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\pin_project_internal-7d58d43ddbdeab90.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-util-0.7.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "slab",
                "time"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtokio_util-c86d6266bece4d65.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tarpc-plugins@0.14.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tarpc-plugins-0.14.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tarpc_plugins",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tarpc-plugins-0.14.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\tarpc_plugins-ac074faf4639cb6b.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.7.35",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.7.35\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "byteorder",
                "default",
                "derive",
                "simd",
                "zerocopy-derive"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libzerocopy-775a8d42b8948fe9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "channel",
                "futures-channel",
                "futures-io",
                "futures-macro",
                "futures-sink",
                "io",
                "memchr",
                "sink",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_util-0ab34a04ef3ade28.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.65",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-1.0.65\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthiserror-922309b0e4758e0a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "log",
                "std",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing-a888e588e4d13ad2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-1.1.7\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libpin_project-bb7c59864145c269.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libthiserror-0e41222b50675114.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.20\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libppv_lite86-b44dfd423ebe701c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures_executor-a8b6862466e5ec93.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry@0.26.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-0.26.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry-0.26.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "logs",
                "metrics",
                "pin-project-lite",
                "trace"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry-079530201c72c601.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.3.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand_chacha-e161ef0b7f99388e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "default",
                "executor",
                "futures-executor",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libfutures-f8a2764be837a249.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.8.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "getrandom",
                "libc",
                "rand_chacha",
                "small_rng",
                "std",
                "std_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\librand-9e18aad37b29b977.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#opentelemetry_sdk@0.26.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry_sdk-0.26.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "opentelemetry_sdk",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\opentelemetry_sdk-0.26.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "async-trait",
                "percent-encoding",
                "rand",
                "trace"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libopentelemetry_sdk-f63dbd55a6f29dde.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-opentelemetry@0.27.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-opentelemetry-0.27.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_opentelemetry",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-opentelemetry-0.27.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtracing_opentelemetry-7e8c8785ffcd3930.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxex6c875/tarpc-0.36.0#tarpc@0.36.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tarpc",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxex6c875\\tarpc-0.36.0\\target\\debug\\deps\\libtarpc-fd8c6d3e20c790eb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 218
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 4,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0024",
                    "package": "crossbeam-channel",
                    "title": "crossbeam-channel: double free on Drop",
                    "description": "The internal `Channel` type's `Drop` method has a race\nwhich could, in some circumstances, lead to a double-free.\nThis could result in memory corruption.\n\nQuoting from the\n[upstream description in merge request \\#1187](https://github.com/crossbeam-rs/crossbeam/pull/1187#issue-2980761131):\n\n> The problem lies in the fact that `dicard_all_messages` contained two paths that could lead to `head.block` being read but only one of them would swap the value. This meant that `dicard_all_messages` could end up observing a non-null block pointer (and therefore attempting to free it) without setting `head.block` to null. This would then lead to `Channel::drop` making a second attempt at dropping the same pointer.\n\nThe bug was introduced while fixing a memory leak, in\nupstream [MR \\#1084](https://github.com/crossbeam-rs/crossbeam/pull/1084),\nfirst published in 0.5.12.\n\nThe fix is in\nupstream [MR \\#1187](https://github.com/crossbeam-rs/crossbeam/pull/1187)\nand has been published in 0.5.15",
                    "date": "2025-04-08",
                    "aliases": [
                      "TROVE-2025-013"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "race"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/1187",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.5.15"
                    ],
                    "unaffected": [
                      "<=0.5.11"
                    ]
                  },
                  "affected": null,
                  "package": {
                    "name": "crossbeam-channel",
                    "version": "0.5.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2",
                    "dependencies": [
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0402",
                    "package": "hashbrown",
                    "title": "Borsh serialization of HashMap is non-canonical",
                    "description": "The borsh serialization of the HashMap did not follow the borsh specification.\nIt potentially produced non-canonical encodings dependent on insertion order.\nIt also did not perform canonicty checks on decoding.\n\nThis can result in consensus splits and cause equivalent objects to be\nconsidered distinct.\n\nThis was patched in 0.15.1.",
                    "date": "2024-10-11",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "borsh"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-lang/hashbrown/issues/576",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.15.1"
                    ],
                    "unaffected": [
                      "<0.15.0"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "hashbrown::HashMap::borsh_serialize": [
                        "=0.15.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "hashbrown",
                    "version": "0.15.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1e087f84d4f86bf4b218b927129862374b72199ae7d8657835f1e89000eea4fb",
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0009",
                    "package": "ring",
                    "title": "Some AES functions may panic when overflow checking is enabled.",
                    "description": "`ring::aead::quic::HeaderProtectionKey::new_mask()` may panic when overflow\nchecking is enabled. In the QUIC protocol, an attacker can induce this panic by\nsending a specially-crafted packet. Even unintentionally it is likely to occur\nin 1 out of every 2**32 packets sent and/or received.\n\nOn 64-bit targets operations using `ring::aead::{AES_128_GCM, AES_256_GCM}` may\npanic when overflow checking is enabled, when encrypting/decrypting approximately\n68,719,476,700 bytes (about 64 gigabytes) of data in a single chunk. Protocols\nlike TLS and SSH are not affected by this because those protocols break large\namounts of data into small chunks. Similarly, most applications will not\nattempt to encrypt/decrypt 64GB of data in one chunk.\n\nOverflow checking is not enabled in release mode by default, but\n`RUSTFLAGS=\"-C overflow-checks\"` or `overflow-checks = true` in the Cargo.toml\nprofile can override this. Overflow checking is usually enabled by default in\ndebug mode.",
                    "date": "2025-03-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.17.12"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "ring",
                    "version": "0.17.8",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.1.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "getrandom",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.9.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0399",
                    "package": "rustls",
                    "title": "rustls network-reachable panic in `Acceptor::accept`",
                    "description": "A bug introduced in rustls 0.23.13 leads to a panic if the received\nTLS ClientHello is fragmented.  Only servers that use\n`rustls::server::Acceptor::accept()` are affected.\n\nServers that use `tokio-rustls`'s `LazyConfigAcceptor` API are affected.\n\nServers that use `tokio-rustls`'s `TlsAcceptor` API are not affected.\n\nServers that use `rustls-ffi`'s `rustls_acceptor_accept` API are affected.",
                    "date": "2024-11-22",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustls/rustls/issues/2227",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.23.18"
                    ],
                    "unaffected": [
                      ">=0.23, <0.23.13",
                      "<0.23"
                    ]
                  },
                  "affected": null,
                  "package": {
                    "name": "rustls",
                    "version": "0.23.15",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5fbb44d7acc4e873d613422379f69f237a1b141928c02f6bc6ccfddddc2d7993",
                    "dependencies": [
                      {
                        "name": "aws-lc-rs",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.4.22",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.20.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-pki-types",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-webpki",
                        "version": "0.102.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "subtle",
                        "version": "2.6.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "zeroize",
                        "version": "1.8.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "paste",
                    "version": "1.0.15",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0436",
                    "package": "paste",
                    "title": "paste - no longer maintained",
                    "description": "The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository",
                    "date": "2024-10-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dtolnay/paste",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.41.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "145f3413504347a2be84393cc8a7d2fb4d863b375909ea59f2158261aa258bbb",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.74",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.8.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.161",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "1.0.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "parking_lot",
                        "version": "0.12.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "signal-hook-registry",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "socket2",
                        "version": "0.5.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tracing",
                        "version": "0.1.40",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.52.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-channel",
                    "version": "0.5.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2",
                    "dependencies": [
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "tarpc",
          "version": "0.36.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\n[Settings](https://docs.rs/tarpc/latest/settings.html)\n[Help](https://docs.rs/tarpc/latest/help.html)\nSummary[Source](https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557)\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\n[Documentation](https://docs.rs/crate/tarpc/)\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework)What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are [gRPC](http://www.grpc.io) and [Cap\u2019n Proto](https://capnproto.org/).\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with [tracing](https://github.com/tokio-rs/tracing) primitives extended with [OpenTelemetry](https://opentelemetry.io/) traces. Using a compatible tracing subscriber like [OTLP](https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp), each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like [env_logger](https://github.com/env-logger-rs/env_logger/).\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#usage)Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#example)Example\nThis example uses [tokio](https://tokio.rs), so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see [example-service](https://docs.rs/tarpc/latest/tarpc/example-service).\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an [in-process channel](https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html \"mod tarpc::transport::channel\"), tarpc also ships a generic [`serde_transport`](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\") behind the `serde-transport` feature, with additional [TCP](https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html \"mod tarpc::serde_transport::tcp\") functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#service-documentation)Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports[\u00a7](https://docs.rs/tarpc/latest/tarpc/#reexports)\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules[\u00a7](https://docs.rs/tarpc/latest/tarpc/#modules)\n\n[client](https://docs.rs/tarpc/latest/tarpc/client/index.html \"mod tarpc::client\")\n    Provides a client that connects to a server and sends multiplexed requests.\n\n[context](https://docs.rs/tarpc/latest/tarpc/context/index.html \"mod tarpc::context\")\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\n[serde_transport](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\")`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\n[server](https://docs.rs/tarpc/latest/tarpc/server/index.html \"mod tarpc::server\")\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\n[trace](https://docs.rs/tarpc/latest/tarpc/trace/index.html \"mod tarpc::trace\")\n    Provides building blocks for tracing distributed programs.\n\n[transport](https://docs.rs/tarpc/latest/tarpc/transport/index.html \"mod tarpc::transport\")\n    Provides a [`Transport`](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\") trait as well as implementations.\n## Structs[\u00a7](https://docs.rs/tarpc/latest/tarpc/#structs)\n\n[Request](https://docs.rs/tarpc/latest/tarpc/struct.Request.html \"struct tarpc::Request\")\n    A request from a client to a server.\n\n[Response](https://docs.rs/tarpc/latest/tarpc/struct.Response.html \"struct tarpc::Response\")\n    A response from a server to a client.\n\n[ServerError](https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html \"struct tarpc::ServerError\")\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums[\u00a7](https://docs.rs/tarpc/latest/tarpc/#enums)\n\n[ChannelError](https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html \"enum tarpc::ChannelError\")\n    Critical errors that result in a Channel disconnecting.\n\n[ClientMessage](https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html \"enum tarpc::ClientMessage\")\n    A message from a client to a server.\n## Traits[\u00a7](https://docs.rs/tarpc/latest/tarpc/#traits)\n\n[RequestName](https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html \"trait tarpc::RequestName\")\n    Implemented by the request types generated by tarpc::service.\n\n[Transport](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\")\n    A bidirectional stream ([`Sink`](https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html \"trait futures_sink::Sink\") + [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\")) of messages.\n## Attribute Macros[\u00a7](https://docs.rs/tarpc/latest/tarpc/#attributes)\n\n[derive_serde](https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html \"attr tarpc::derive_serde\")\n    A helper attribute to avoid a direct dependency on Serde.\n\n[service](https://docs.rs/tarpc/latest/tarpc/attr.service.html \"attr tarpc::service\")\n    The main macro that creates RPC services.\n",
            "markdown_with_citations": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\nDocumentation\u27e84\u27e9\n### \u00a7\u27e85\u27e9What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are gRPC\u27e86\u27e9 and Cap\u2019n Proto\u27e87\u27e9.\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with tracing\u27e88\u27e9 primitives extended with OpenTelemetry\u27e89\u27e9 traces. Using a compatible tracing subscriber like OTLP\u27e810\u27e9, each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like env_logger\u27e811\u27e9.\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### \u00a7\u27e812\u27e9Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### \u00a7\u27e813\u27e9Example\nThis example uses tokio\u27e814\u27e9, so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see example-service\u27e815\u27e9.\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an in-process channel\u27e816\u27e9, tarpc also ships a generic `serde_transport`\u27e817\u27e9 behind the `serde-transport` feature, with additional TCP\u27e818\u27e9 functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### \u00a7\u27e819\u27e9Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports\u00a7\u27e820\u27e9\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules\u00a7\u27e821\u27e9\n\nclient\u27e822\u27e9\n    Provides a client that connects to a server and sends multiplexed requests.\n\ncontext\u27e823\u27e9\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\nserde_transport\u27e817\u27e9`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\nserver\u27e824\u27e9\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\ntrace\u27e825\u27e9\n    Provides building blocks for tracing distributed programs.\n\ntransport\u27e826\u27e9\n    Provides a `Transport`\u27e827\u27e9 trait as well as implementations.\n## Structs\u00a7\u27e828\u27e9\n\nRequest\u27e829\u27e9\n    A request from a client to a server.\n\nResponse\u27e830\u27e9\n    A response from a server to a client.\n\nServerError\u27e831\u27e9\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums\u00a7\u27e832\u27e9\n\nChannelError\u27e833\u27e9\n    Critical errors that result in a Channel disconnecting.\n\nClientMessage\u27e834\u27e9\n    A message from a client to a server.\n## Traits\u00a7\u27e835\u27e9\n\nRequestName\u27e836\u27e9\n    Implemented by the request types generated by tarpc::service.\n\nTransport\u27e827\u27e9\n    A bidirectional stream (`Sink`\u27e837\u27e9 + `Stream`\u27e838\u27e9) of messages.\n## Attribute Macros\u00a7\u27e839\u27e9\n\nderive_serde\u27e840\u27e9\n    A helper attribute to avoid a direct dependency on Serde.\n\nservice\u27e841\u27e9\n    The main macro that creates RPC services.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tarpc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tarpc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557: Source\n\u27e84\u27e9 https://docs.rs/crate/tarpc/: Documentation\n\u27e85\u27e9 https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework: \u00a7\n\u27e86\u27e9 http://www.grpc.io: gRPC\n\u27e87\u27e9 https://capnproto.org/: Cap\u2019n Proto\n\u27e88\u27e9 https://github.com/tokio-rs/tracing: tracing\n\u27e89\u27e9 https://opentelemetry.io/: OpenTelemetry\n\u27e810\u27e9 https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp: OTLP\n\u27e811\u27e9 https://github.com/env-logger-rs/env_logger/: env_logger\n\u27e812\u27e9 https://docs.rs/tarpc/latest/tarpc/#usage: \u00a7\n\u27e813\u27e9 https://docs.rs/tarpc/latest/tarpc/#example: \u00a7\n\u27e814\u27e9 https://tokio.rs: tokio\n\u27e815\u27e9 https://docs.rs/tarpc/latest/tarpc/example-service: example-service\n\u27e816\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html: mod tarpc::transport::channel - in-process channel\n\u27e817\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html: mod tarpc::serde_transport - `serde_transport`\n\u27e818\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html: mod tarpc::serde_transport::tcp - TCP\n\u27e819\u27e9 https://docs.rs/tarpc/latest/tarpc/#service-documentation: \u00a7\n\u27e820\u27e9 https://docs.rs/tarpc/latest/tarpc/#reexports: \u00a7\n\u27e821\u27e9 https://docs.rs/tarpc/latest/tarpc/#modules: \u00a7\n\u27e822\u27e9 https://docs.rs/tarpc/latest/tarpc/client/index.html: mod tarpc::client - client\n\u27e823\u27e9 https://docs.rs/tarpc/latest/tarpc/context/index.html: mod tarpc::context - context\n\u27e824\u27e9 https://docs.rs/tarpc/latest/tarpc/server/index.html: mod tarpc::server - server\n\u27e825\u27e9 https://docs.rs/tarpc/latest/tarpc/trace/index.html: mod tarpc::trace - trace\n\u27e826\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/index.html: mod tarpc::transport - transport\n\u27e827\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.Transport.html: trait tarpc::Transport - `Transport`\n\u27e828\u27e9 https://docs.rs/tarpc/latest/tarpc/#structs: \u00a7\n\u27e829\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Request.html: struct tarpc::Request - Request\n\u27e830\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Response.html: struct tarpc::Response - Response\n\u27e831\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html: struct tarpc::ServerError - ServerError\n\u27e832\u27e9 https://docs.rs/tarpc/latest/tarpc/#enums: \u00a7\n\u27e833\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html: enum tarpc::ChannelError - ChannelError\n\u27e834\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html: enum tarpc::ClientMessage - ClientMessage\n\u27e835\u27e9 https://docs.rs/tarpc/latest/tarpc/#traits: \u00a7\n\u27e836\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html: trait tarpc::RequestName - RequestName\n\u27e837\u27e9 https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html: trait futures_sink::Sink - `Sink`\n\u27e838\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html: trait futures_core::stream::Stream - `Stream`\n\u27e839\u27e9 https://docs.rs/tarpc/latest/tarpc/#attributes: \u00a7\n\u27e840\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html: attr tarpc::derive_serde - derive_serde\n\u27e841\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.service.html: attr tarpc::service - service\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "tarpc",
          "version": "0.36.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\n[Settings](https://docs.rs/tarpc/latest/settings.html)\n[Help](https://docs.rs/tarpc/latest/help.html)\nSummary[Source](https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557)\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\n[Documentation](https://docs.rs/crate/tarpc/)\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework)What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are [gRPC](http://www.grpc.io) and [Cap\u2019n Proto](https://capnproto.org/).\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with [tracing](https://github.com/tokio-rs/tracing) primitives extended with [OpenTelemetry](https://opentelemetry.io/) traces. Using a compatible tracing subscriber like [OTLP](https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp), each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like [env_logger](https://github.com/env-logger-rs/env_logger/).\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#usage)Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#example)Example\nThis example uses [tokio](https://tokio.rs), so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see [example-service](https://docs.rs/tarpc/latest/tarpc/example-service).\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an [in-process channel](https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html \"mod tarpc::transport::channel\"), tarpc also ships a generic [`serde_transport`](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\") behind the `serde-transport` feature, with additional [TCP](https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html \"mod tarpc::serde_transport::tcp\") functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### [\u00a7](https://docs.rs/tarpc/latest/tarpc/#service-documentation)Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports[\u00a7](https://docs.rs/tarpc/latest/tarpc/#reexports)\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules[\u00a7](https://docs.rs/tarpc/latest/tarpc/#modules)\n\n[client](https://docs.rs/tarpc/latest/tarpc/client/index.html \"mod tarpc::client\")\n    Provides a client that connects to a server and sends multiplexed requests.\n\n[context](https://docs.rs/tarpc/latest/tarpc/context/index.html \"mod tarpc::context\")\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\n[serde_transport](https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html \"mod tarpc::serde_transport\")`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\n[server](https://docs.rs/tarpc/latest/tarpc/server/index.html \"mod tarpc::server\")\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\n[trace](https://docs.rs/tarpc/latest/tarpc/trace/index.html \"mod tarpc::trace\")\n    Provides building blocks for tracing distributed programs.\n\n[transport](https://docs.rs/tarpc/latest/tarpc/transport/index.html \"mod tarpc::transport\")\n    Provides a [`Transport`](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\") trait as well as implementations.\n## Structs[\u00a7](https://docs.rs/tarpc/latest/tarpc/#structs)\n\n[Request](https://docs.rs/tarpc/latest/tarpc/struct.Request.html \"struct tarpc::Request\")\n    A request from a client to a server.\n\n[Response](https://docs.rs/tarpc/latest/tarpc/struct.Response.html \"struct tarpc::Response\")\n    A response from a server to a client.\n\n[ServerError](https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html \"struct tarpc::ServerError\")\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums[\u00a7](https://docs.rs/tarpc/latest/tarpc/#enums)\n\n[ChannelError](https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html \"enum tarpc::ChannelError\")\n    Critical errors that result in a Channel disconnecting.\n\n[ClientMessage](https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html \"enum tarpc::ClientMessage\")\n    A message from a client to a server.\n## Traits[\u00a7](https://docs.rs/tarpc/latest/tarpc/#traits)\n\n[RequestName](https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html \"trait tarpc::RequestName\")\n    Implemented by the request types generated by tarpc::service.\n\n[Transport](https://docs.rs/tarpc/latest/tarpc/trait.Transport.html \"trait tarpc::Transport\")\n    A bidirectional stream ([`Sink`](https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html \"trait futures_sink::Sink\") + [`Stream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html \"trait futures_core::stream::Stream\")) of messages.\n## Attribute Macros[\u00a7](https://docs.rs/tarpc/latest/tarpc/#attributes)\n\n[derive_serde](https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html \"attr tarpc::derive_serde\")\n    A helper attribute to avoid a direct dependency on Serde.\n\n[service](https://docs.rs/tarpc/latest/tarpc/attr.service.html \"attr tarpc::service\")\n    The main macro that creates RPC services.\n",
            "markdown_with_citations": "[](https://docs.rs/tarpc/latest/tarpc/all.html \"show sidebar\")\n# Crate tarpcCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n _Disclaimer_ : This is not an official Google product.\ntarpc is an RPC framework for rust with a focus on ease of use. Defining a service can be done in just a few lines of code, and most of the boilerplate of writing a server is taken care of for you.\nDocumentation\u27e84\u27e9\n### \u00a7\u27e85\u27e9What is an RPC framework?\n\u201cRPC\u201d stands for \u201cRemote Procedure Call,\u201d a function call where the work of producing the return value is being done somewhere else. When an rpc function is invoked, behind the scenes the function contacts some other process somewhere and asks them to evaluate the function instead. The original function then returns the value produced by the other process.\nRPC frameworks are a fundamental building block of most microservices-oriented architectures. Two well-known ones are gRPC\u27e86\u27e9 and Cap\u2019n Proto\u27e87\u27e9.\ntarpc differentiates itself from other RPC frameworks by defining the schema in code, rather than in a separate language such as .proto. This means there\u2019s no separate compilation process, and no context switching between different languages.\nSome other features of tarpc:\n  * Pluggable transport: any type implementing `Stream<Item = Request> + Sink<Response>` can be used as a transport to connect the client and server.\n  * `Send + 'static` optional: if the transport doesn\u2019t require it, neither does tarpc!\n  * Cascading cancellation: dropping a request will send a cancellation message to the server. The server will cease any unfinished work on the request, subsequently cancelling any of its own requests, repeating for the entire chain of transitive dependencies.\n  * Configurable deadlines and deadline propagation: request deadlines default to 10s if unspecified. The server will automatically cease work when the deadline has passed. Any requests sent by the server that use the request context will propagate the request deadline. For example, if a server is handling a request with a 10s deadline, does 2s of work, then sends a request to another server, that server will see an 8s deadline.\n  * Distributed tracing: tarpc is instrumented with tracing\u27e88\u27e9 primitives extended with OpenTelemetry\u27e89\u27e9 traces. Using a compatible tracing subscriber like OTLP\u27e810\u27e9, each RPC can be traced through the client, server, and other dependencies downstream of the server. Even for applications not connected to a distributed tracing collector, the instrumentation can also be ingested by regular loggers like env_logger\u27e811\u27e9.\n  * Serde serialization: enabling the `serde1` Cargo feature will make service requests and responses `Serialize + Deserialize`. It\u2019s entirely optional, though: in-memory transports can be used, as well, so the price of serialization doesn\u2019t have to be paid when it\u2019s not needed.\n\n\n### \u00a7\u27e812\u27e9Usage\nAdd to your `Cargo.toml` dependencies:\n```\ntarpc = \"0.36\"\n```\n\nThe `tarpc::service` attribute expands to a collection of items that form an rpc service. These generated types make it easy and ergonomic to write servers with less boilerplate. Simply implement the generated service trait, and you\u2019re off to the races!\n### \u00a7\u27e813\u27e9Example\nThis example uses tokio\u27e814\u27e9, so add the following dependencies to your `Cargo.toml`:\n```\nanyhow = \"1.0\"\nfutures = \"0.3\"\ntarpc = { version = \"0.36\", features = [\"tokio1\"] }\ntokio = { version = \"1.0\", features = [\"macros\"] }\n```\n\nIn the following example, we use an in-process channel for communication between client and server. In real code, you will likely communicate over the network. For a more real-world example, see example-service\u27e815\u27e9.\nFirst, let\u2019s set up the dependencies and service definition.\n```\n\nuse futures::{\n  prelude::*,\n};\nuse tarpc::{\n  client, context,\n  server::{self, incoming::Incoming, Channel},\n};\n// This is the service definition. It looks a lot like a trait definition.\n// It defines one RPC, hello, which takes one arg, name, and returns a String.\n#[tarpc::service]\ntrait World {\n  /// Returns a greeting for name.\n  async fn hello(name: String) -> String;\n}\n```\n\nThis service definition generates a trait called `World`. Next we need to implement it for our Server struct.\n```\n// This is the type that implements the generated World trait. It is the business logic\n// and is used to start the server.\n#[derive(Clone)]\nstruct HelloServer;\nimpl World for HelloServer {\n  // Each defined rpc generates an async fn that serves the RPC\n  async fn hello(self, _: context::Context, name: String) -> String {\n    format!(\"Hello, {name}!\")\n  }\n}\n```\n\nLastly let\u2019s write our `main` that will start the server. While this example uses an in-process channel\u27e816\u27e9, tarpc also ships a generic `serde_transport`\u27e817\u27e9 behind the `serde-transport` feature, with additional TCP\u27e818\u27e9 functionality available behind the `tcp` feature.\n```\n  // Each defined rpc generates an async fn that serves the RPC\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n  let (client_transport, server_transport) = tarpc::transport::channel::unbounded();\n  let server = server::BaseChannel::with_defaults(server_transport);\n  tokio::spawn(\n    server.execute(HelloServer.serve())\n      // Handle all requests concurrently.\n      .for_each(|response| async move {\n        tokio::spawn(response);\n      }));\n  // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`\n  // that takes a config and any Transport as input.\n  let mut client = WorldClient::new(client::Config::default(), client_transport).spawn();\n  // The client has an RPC method for each RPC defined in the annotated trait. It takes the same\n  // args as defined, with the addition of a Context, which is always the first arg. The Context\n  // specifies a deadline and trace information which can be helpful in debugging requests.\n  let hello = client.hello(context::current(), \"Stim\".to_string()).await?;\n  println!(\"{hello}\");\n  Ok(())\n}\n```\n\n### \u00a7\u27e819\u27e9Service Documentation\nUse `cargo doc` as you normally would to see the documentation created for all items expanded by a `service!` invocation.\n## Re-exports\u00a7\u27e820\u27e9\n\n`pub use tokio_serde[](https://docs.rs/tokio-serde/0.9.0/x86_64-unknown-linux-gnu/tokio_serde/index.html \"mod tokio_serde\");`\n\n\n`pub use tokio_util[](https://docs.rs/tokio-util/0.7.15/x86_64-unknown-linux-gnu/tokio_util/index.html \"mod tokio_util\");`\n\n## Modules\u00a7\u27e821\u27e9\n\nclient\u27e822\u27e9\n    Provides a client that connects to a server and sends multiplexed requests.\n\ncontext\u27e823\u27e9\n    Provides a request context that carries a deadline and trace context. This context is sent from client to server and is used by the server to enforce response deadlines.\n\nserde_transport\u27e817\u27e9`serde-transport`\n    A generic Serde-based `Transport` that can serialize anything supported by `tokio-serde` via any medium that implements `AsyncRead` and `AsyncWrite`.\n\nserver\u27e824\u27e9\n    Provides a server that concurrently handles many connections sending multiplexed requests.\n\ntrace\u27e825\u27e9\n    Provides building blocks for tracing distributed programs.\n\ntransport\u27e826\u27e9\n    Provides a `Transport`\u27e827\u27e9 trait as well as implementations.\n## Structs\u00a7\u27e828\u27e9\n\nRequest\u27e829\u27e9\n    A request from a client to a server.\n\nResponse\u27e830\u27e9\n    A response from a server to a client.\n\nServerError\u27e831\u27e9\n    An error indicating the server aborted the request early, e.g., due to request throttling.\n## Enums\u00a7\u27e832\u27e9\n\nChannelError\u27e833\u27e9\n    Critical errors that result in a Channel disconnecting.\n\nClientMessage\u27e834\u27e9\n    A message from a client to a server.\n## Traits\u00a7\u27e835\u27e9\n\nRequestName\u27e836\u27e9\n    Implemented by the request types generated by tarpc::service.\n\nTransport\u27e827\u27e9\n    A bidirectional stream (`Sink`\u27e837\u27e9 + `Stream`\u27e838\u27e9) of messages.\n## Attribute Macros\u00a7\u27e839\u27e9\n\nderive_serde\u27e840\u27e9\n    A helper attribute to avoid a direct dependency on Serde.\n\nservice\u27e841\u27e9\n    The main macro that creates RPC services.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tarpc/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tarpc/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tarpc/latest/src/tarpc/lib.rs.html#6-557: Source\n\u27e84\u27e9 https://docs.rs/crate/tarpc/: Documentation\n\u27e85\u27e9 https://docs.rs/tarpc/latest/tarpc/#what-is-an-rpc-framework: \u00a7\n\u27e86\u27e9 http://www.grpc.io: gRPC\n\u27e87\u27e9 https://capnproto.org/: Cap\u2019n Proto\n\u27e88\u27e9 https://github.com/tokio-rs/tracing: tracing\n\u27e89\u27e9 https://opentelemetry.io/: OpenTelemetry\n\u27e810\u27e9 https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp: OTLP\n\u27e811\u27e9 https://github.com/env-logger-rs/env_logger/: env_logger\n\u27e812\u27e9 https://docs.rs/tarpc/latest/tarpc/#usage: \u00a7\n\u27e813\u27e9 https://docs.rs/tarpc/latest/tarpc/#example: \u00a7\n\u27e814\u27e9 https://tokio.rs: tokio\n\u27e815\u27e9 https://docs.rs/tarpc/latest/tarpc/example-service: example-service\n\u27e816\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/channel/index.html: mod tarpc::transport::channel - in-process channel\n\u27e817\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/index.html: mod tarpc::serde_transport - `serde_transport`\n\u27e818\u27e9 https://docs.rs/tarpc/latest/tarpc/serde_transport/tcp/index.html: mod tarpc::serde_transport::tcp - TCP\n\u27e819\u27e9 https://docs.rs/tarpc/latest/tarpc/#service-documentation: \u00a7\n\u27e820\u27e9 https://docs.rs/tarpc/latest/tarpc/#reexports: \u00a7\n\u27e821\u27e9 https://docs.rs/tarpc/latest/tarpc/#modules: \u00a7\n\u27e822\u27e9 https://docs.rs/tarpc/latest/tarpc/client/index.html: mod tarpc::client - client\n\u27e823\u27e9 https://docs.rs/tarpc/latest/tarpc/context/index.html: mod tarpc::context - context\n\u27e824\u27e9 https://docs.rs/tarpc/latest/tarpc/server/index.html: mod tarpc::server - server\n\u27e825\u27e9 https://docs.rs/tarpc/latest/tarpc/trace/index.html: mod tarpc::trace - trace\n\u27e826\u27e9 https://docs.rs/tarpc/latest/tarpc/transport/index.html: mod tarpc::transport - transport\n\u27e827\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.Transport.html: trait tarpc::Transport - `Transport`\n\u27e828\u27e9 https://docs.rs/tarpc/latest/tarpc/#structs: \u00a7\n\u27e829\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Request.html: struct tarpc::Request - Request\n\u27e830\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.Response.html: struct tarpc::Response - Response\n\u27e831\u27e9 https://docs.rs/tarpc/latest/tarpc/struct.ServerError.html: struct tarpc::ServerError - ServerError\n\u27e832\u27e9 https://docs.rs/tarpc/latest/tarpc/#enums: \u00a7\n\u27e833\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ChannelError.html: enum tarpc::ChannelError - ChannelError\n\u27e834\u27e9 https://docs.rs/tarpc/latest/tarpc/enum.ClientMessage.html: enum tarpc::ClientMessage - ClientMessage\n\u27e835\u27e9 https://docs.rs/tarpc/latest/tarpc/#traits: \u00a7\n\u27e836\u27e9 https://docs.rs/tarpc/latest/tarpc/trait.RequestName.html: trait tarpc::RequestName - RequestName\n\u27e837\u27e9 https://docs.rs/futures-sink/0.3.31/x86_64-unknown-linux-gnu/futures_sink/trait.Sink.html: trait futures_sink::Sink - `Sink`\n\u27e838\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.Stream.html: trait futures_core::stream::Stream - `Stream`\n\u27e839\u27e9 https://docs.rs/tarpc/latest/tarpc/#attributes: \u00a7\n\u27e840\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.derive_serde.html: attr tarpc::derive_serde - derive_serde\n\u27e841\u27e9 https://docs.rs/tarpc/latest/tarpc/attr.service.html: attr tarpc::service - service\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `tarpc` crate is a user-friendly RPC framework for Rust that simplifies server and client implementation by generating service traits directly from annotated code, eliminating the need for separate schema files. It supports pluggable transports, cascading cancellation, configurable deadlines, and distributed tracing with OpenTelemetry integration. Optional Serde serialization enables efficient communication, and it is compatible with both in-memory and network-based transports.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Service Definition and Code Integration\n\u2705 Factual: The `tarpc::service` attribute generates a service trait directly in Rust code, eliminating the need for external schema files like `.proto` used in frameworks such as gRPC.  \n\u274c Counterfactual: The `tarpc::service` attribute requires a separate compilation step to convert `.proto` files into Rust code before the service trait can be used.\n\n---\n\n### Pair 2: Transport Flexibility\n\u2705 Factual: tarpc supports pluggable transports, meaning any type implementing `Stream<Item = Request> + Sink<Response>` can be used to connect the client and server, including custom transport implementations.  \n\u274c Counterfactual: tarpc requires the use of its built-in TCP transport and does not support custom transport implementations.\n\n---\n\n### Pair 3: Cancellation Mechanism\n\u2705 Factual: tarpc provides cascading cancellation, where dropping a request on the client side sends a cancellation message to the server, allowing it to stop processing the request and cancel dependent operations.  \n\u274c Counterfactual: tarpc does not support request cancellation, and once a request is sent to the server, it will always be processed to completion regardless of client-side actions.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-1a2ba1a6-0c1b88c5-1751263317",
      "timestamp": "2025-06-30T06:01:57.851083+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]