[
  {
    "execution_id": "exec-88999e5f-4b88e642-1751264041",
    "timestamp": "2025-06-30T06:14:01.831189+00:00",
    "sacred_chain": {
      "input_data": "enum-iterator",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'enum-iterator' -> 'enum-iterator'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "enum-iterator",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/enum-iterator",
            "title": "enum-iterator v2.1.0",
            "content": {
              "raw_markdown": "#  enum-iterator v2.1.0\nTools to iterate over all values of a type (e.g. all variants of an enumeration) \n  * [ #enumerate ](https://crates.io/keywords/enumerate)\n  * [ #cardinality ](https://crates.io/keywords/cardinality)\n  * [ #enum ](https://crates.io/keywords/enum)\n  * [ #variants ](https://crates.io/keywords/variants)\n  * [ #iterator ](https://crates.io/keywords/iterator)\n\n\n  * [ Readme ](https://crates.io/crates/enum-iterator)\n  * [ 24 Versions ](https://crates.io/crates/enum-iterator/versions)\n  * [ Dependencies ](https://crates.io/crates/enum-iterator/dependencies)\n  * [ Dependents ](https://crates.io/crates/enum-iterator/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \n2021 edition \n[ 0BSD ](https://choosealicense.com/licenses/0bsd)\n7.49 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add enum-iterator\nOr add the following line to your Cargo.toml:\nenum-iterator = \"2.1.0\"\n## Documentation\n[ docs.rs/enum-iterator ](https://docs.rs/enum-iterator)\n## Repository\n[ github.com/stephaneyfx/enum-iterator ](https://github.com/stephaneyfx/enum-iterator.git)\n## Owners\n[ Report crate ](https://crates.io/support?crate=enum-iterator&inquire=crate-violation)\n### Stats Overview\n28,656,017 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  enum-iterator v2.1.0\nTools to iterate over all values of a type (e.g. all variants of an enumeration) \n  *  #enumerate \u27e81\u27e9\n  *  #cardinality \u27e82\u27e9\n  *  #enum \u27e83\u27e9\n  *  #variants \u27e84\u27e9\n  *  #iterator \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  24 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 year ago \n2021 edition \n 0BSD \u27e810\u27e9\n7.49 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add enum-iterator\nOr add the following line to your Cargo.toml:\nenum-iterator = \"2.1.0\"\n## Documentation\n docs.rs/enum-iterator \u27e811\u27e9\n## Repository\n github.com/stephaneyfx/enum-iterator \u27e812\u27e9\n## Owners\n Report crate \u27e813\u27e9\n### Stats Overview\n28,656,017 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/enumerate:  #enumerate \n\u27e82\u27e9 https://crates.io/keywords/cardinality:  #cardinality \n\u27e83\u27e9 https://crates.io/keywords/enum:  #enum \n\u27e84\u27e9 https://crates.io/keywords/variants:  #variants \n\u27e85\u27e9 https://crates.io/keywords/iterator:  #iterator \n\u27e86\u27e9 https://crates.io/crates/enum-iterator:  Readme \n\u27e87\u27e9 https://crates.io/crates/enum-iterator/versions:  24 Versions \n\u27e88\u27e9 https://crates.io/crates/enum-iterator/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/enum-iterator/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/0bsd:  0BSD \n\u27e811\u27e9 https://docs.rs/enum-iterator:  docs.rs/enum-iterator \n\u27e812\u27e9 https://github.com/stephaneyfx/enum-iterator.git:  github.com/stephaneyfx/enum-iterator \n\u27e813\u27e9 https://crates.io/support?crate=enum-iterator&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1377,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117831.8943697"
          },
          "docs_rs": {
            "url": "https://docs.rs/enum-iterator",
            "title": "Crate enum_iteratorCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\n[Settings](https://docs.rs/enum-iterator/latest/settings.html)\n[Help](https://docs.rs/enum-iterator/latest/help.html)\nSummary[Source](https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069)\nExpand description\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#overview)Overview\n  * [\ud83d\udce6 crates.io](https://crates.io/crates/enum-iterator)\n  * [\ud83d\udcd6 Documentation](https://docs.rs/enum-iterator)\n  * [\u2696 0BSD license](https://spdx.org/licenses/0BSD.html)\n\n\nTools to iterate over the values of a type.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#examples)Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version)Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#contribute)Contribute\nAll contributions shall be licensed under the [0BSD license](https://spdx.org/licenses/0BSD.html).\n## Structs[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#structs)\n\n[All](https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html \"struct enum_iterator::All\")\n    Iterator over the values of type `T`.\n\n[ReverseAll](https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html \"struct enum_iterator::ReverseAll\")\n    Iterator over the values of type `T` in reverse order.\n## Traits[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#traits)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html \"trait enum_iterator::Sequence\")\n    Trait to iterate over the values of a type.\n## Functions[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#functions)\n\n[all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\")\n    Returns an iterator over all values of type `T`.\n\n[cardinality](https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html \"fn enum_iterator::cardinality\")\n    Returns the cardinality (number of values) of `T`\n\n[first](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\")\n    Returns the first value of type `T`.\n\n[last](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\")\n    Returns the last value of type `T`.\n\n[next](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html \"fn enum_iterator::next\")\n    Returns the next value of type `T` or `None` if this was the end.\n\n[next_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html \"fn enum_iterator::next_cycle\")\n    Returns the next value of type `T` or [`first()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\") if this was the end.\n\n[previous](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html \"fn enum_iterator::previous\")\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\n[previous_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html \"fn enum_iterator::previous_cycle\")\n    Returns the previous value of type `T` or [`last()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\") if this was the beginning.\n\n[reverse_all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html \"fn enum_iterator::reverse_all\")\n    Returns an iterator over all values of type `T` in the reverse order of [`all`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\").\n## Derive Macros[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#derives)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html \"derive enum_iterator::Sequence\")\n    Derives `Sequence`.\n",
              "markdown_with_citations": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Overview\n  * \ud83d\udce6 crates.io\u27e85\u27e9\n  * \ud83d\udcd6 Documentation\u27e86\u27e9\n  * \u2696 0BSD license\u27e87\u27e9\n\n\nTools to iterate over the values of a type.\n## \u00a7\u27e88\u27e9Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## \u00a7\u27e89\u27e9Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## \u00a7\u27e810\u27e9Contribute\nAll contributions shall be licensed under the 0BSD license\u27e87\u27e9.\n## Structs\u00a7\u27e811\u27e9\n\nAll\u27e812\u27e9\n    Iterator over the values of type `T`.\n\nReverseAll\u27e813\u27e9\n    Iterator over the values of type `T` in reverse order.\n## Traits\u00a7\u27e814\u27e9\n\nSequence\u27e815\u27e9\n    Trait to iterate over the values of a type.\n## Functions\u00a7\u27e816\u27e9\n\nall\u27e817\u27e9\n    Returns an iterator over all values of type `T`.\n\ncardinality\u27e818\u27e9\n    Returns the cardinality (number of values) of `T`\n\nfirst\u27e819\u27e9\n    Returns the first value of type `T`.\n\nlast\u27e820\u27e9\n    Returns the last value of type `T`.\n\nnext\u27e821\u27e9\n    Returns the next value of type `T` or `None` if this was the end.\n\nnext_cycle\u27e822\u27e9\n    Returns the next value of type `T` or `first()`\u27e819\u27e9 if this was the end.\n\nprevious\u27e823\u27e9\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\nprevious_cycle\u27e824\u27e9\n    Returns the previous value of type `T` or `last()`\u27e820\u27e9 if this was the beginning.\n\nreverse_all\u27e825\u27e9\n    Returns an iterator over all values of type `T` in the reverse order of `all`\u27e817\u27e9.\n## Derive Macros\u00a7\u27e826\u27e9\n\nSequence\u27e827\u27e9\n    Derives `Sequence`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/enum-iterator/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/enum-iterator/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069: Source\n\u27e84\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#overview: \u00a7\n\u27e85\u27e9 https://crates.io/crates/enum-iterator: \ud83d\udce6 crates.io\n\u27e86\u27e9 https://docs.rs/enum-iterator: \ud83d\udcd6 Documentation\n\u27e87\u27e9 https://spdx.org/licenses/0BSD.html: \u2696 0BSD license\n\u27e88\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#examples: \u00a7\n\u27e89\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version: \u00a7\n\u27e810\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#contribute: \u00a7\n\u27e811\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html: struct enum_iterator::All - All\n\u27e813\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html: struct enum_iterator::ReverseAll - ReverseAll\n\u27e814\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html: trait enum_iterator::Sequence - Sequence\n\u27e816\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#functions: \u00a7\n\u27e817\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html: fn enum_iterator::all - all\n\u27e818\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html: fn enum_iterator::cardinality - cardinality\n\u27e819\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html: fn enum_iterator::first - first\n\u27e820\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html: fn enum_iterator::last - last\n\u27e821\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html: fn enum_iterator::next - next\n\u27e822\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html: fn enum_iterator::next_cycle - next_cycle\n\u27e823\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html: fn enum_iterator::previous - previous\n\u27e824\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html: fn enum_iterator::previous_cycle - previous_cycle\n\u27e825\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html: fn enum_iterator::reverse_all - reverse_all\n\u27e826\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#derives: \u00a7\n\u27e827\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html: derive enum_iterator::Sequence - Sequence\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4977,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117832.5351059"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/enum-iterator",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [24 releases](https://lib.rs/crates/enum-iterator/versions) (13 stable)\n2.1.0 |  May 1, 2024   \n---|---  \n2.0.0 |  Feb 25, 2024   \n1.5.0 |  Jan 15, 2024   \n1.4.1 |  May 4, 2023   \n0.2.0 |  Jul 2, 2018   \n#**49** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 202483/week @ 2025-02-14 238535/week @ 2025-02-21 242991/week @ 2025-02-28 242832/week @ 2025-03-07 271773/week @ 2025-03-14 250221/week @ 2025-03-21 252882/week @ 2025-03-28 259249/week @ 2025-04-04 274905/week @ 2025-04-11 295788/week @ 2025-04-18 269821/week @ 2025-04-25 236510/week @ 2025-05-02 247063/week @ 2025-05-09 231881/week @ 2025-05-16 211267/week @ 2025-05-23 202186/week @ 2025-05-30\n**930,464** downloads per month Used in [**1,674** crates (182 directly)](https://lib.rs/crates/enum-iterator/rev)\n**0BSD** license \n34KB  628 lines\n# Overview\n  * [\ud83d\udce6 crates.io](https://crates.io/crates/enum-iterator)\n  * [\ud83d\udcd6 Documentation](https://docs.rs/enum-iterator)\n  * [\u2696 0BSD license](https://spdx.org/licenses/0BSD.html)\n\n\nTools to iterate over the values of a type.\n# Examples\n```\n``use` `enum_iterator`::````{`all`,` cardinality`,` first`,` last`,` next`,` previous`,` reverse_all`,` Sequence```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Sequence```)```]``\n``enum` `Day` ``{` Monday`,` Tuesday`,` Wednesday`,` Thursday`,` Friday`,` Saturday`,` Sunday ```}```\n`assert_eq!``(``cardinality`::````<`Day`>```(``)``,` `7``)``;`\n`assert_eq!``(``all`::````<`Day`>```(``)``.``collect`::````<``Vec``<``_``>``>```(``)``,` `[`\n  `Day`::``Monday`,`\n  `Day`::``Tuesday`,`\n  `Day`::``Wednesday`,`\n  `Day`::``Thursday`,`\n  `Day`::``Friday`,`\n  `Day`::``Saturday`,`\n  `Day`::``Sunday`,`\n`]``)``;`\n`assert_eq!``(``first`::````<`Day`>```(``)``,` `Some``(``Day`::``Monday`)``)``;`\n`assert_eq!``(``last`::````<`Day`>```(``)``,` `Some``(``Day`::``Sunday`)``)``;`\n`assert_eq!``(``next``(``&``Day`::``Tuesday`)``,` `Some``(``Day`::``Wednesday`)``)``;`\n`assert_eq!``(``previous``(``&``Day`::``Wednesday`)``,` `Some``(``Day`::``Tuesday`)``)``;`\n`assert_eq!``(``reverse_all`::````<`Day`>```(``)``.``collect`::````<``Vec``<``_``>``>```(``)``,` `[`\n  `Day`::``Sunday`,`\n  `Day`::``Saturday`,`\n  `Day`::``Friday`,`\n  `Day`::``Thursday`,`\n  `Day`::``Wednesday`,`\n  `Day`::``Tuesday`,`\n  `Day`::``Monday`,`\n`]``)``;`\n`\n```\n```\n``use` `enum_iterator`::````{`cardinality`,` first`,` last`,` Sequence```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Sequence```)```]``\n``struct` ```Foo` ````{`\n  `a``:` `bool`,\n  `b``:` `u8`,\n```}```\n`assert_eq!``(``cardinality`::````<`Foo`>```(``)``,` `512``)``;`\n`assert_eq!``(``first`::````<`Foo`>```(``)``,` `Some``(`Foo ``{` a`:` `false``,` b`:` `0` ```}```)``)``;`\n`assert_eq!``(``last`::````<`Foo`>```(``)``,` `Some``(`Foo ``{` a`:` `true``,` b`:` `255` ```}```)``)``;`\n`\n```\n\n# Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n# Contribute\nAll contributions shall be licensed under the [0BSD license](https://spdx.org/licenses/0BSD.html).\n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * [enum-iterator-derive](https://lib.rs/crates/enum-iterator-derive \"1.4.0\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  24 releases\u27e81\u27e9 (13 stable)\n2.1.0 |  May 1, 2024   \n---|---  \n2.0.0 |  Feb 25, 2024   \n1.5.0 |  Jan 15, 2024   \n1.4.1 |  May 4, 2023   \n0.2.0 |  Jul 2, 2018   \n#**49** in Rust patterns\u27e82\u27e9\nDownload history 202483/week @ 2025-02-14 238535/week @ 2025-02-21 242991/week @ 2025-02-28 242832/week @ 2025-03-07 271773/week @ 2025-03-14 250221/week @ 2025-03-21 252882/week @ 2025-03-28 259249/week @ 2025-04-04 274905/week @ 2025-04-11 295788/week @ 2025-04-18 269821/week @ 2025-04-25 236510/week @ 2025-05-02 247063/week @ 2025-05-09 231881/week @ 2025-05-16 211267/week @ 2025-05-23 202186/week @ 2025-05-30\n**930,464** downloads per month Used in **1,674** crates (182 directly)\u27e83\u27e9\n**0BSD** license \n34KB  628 lines\n# Overview\n  * \ud83d\udce6 crates.io\u27e84\u27e9\n  * \ud83d\udcd6 Documentation\u27e85\u27e9\n  * \u2696 0BSD license\u27e86\u27e9\n\n\nTools to iterate over the values of a type.\n# Examples\n```\n``use` `enum_iterator`::````{`all`,` cardinality`,` first`,` last`,` next`,` previous`,` reverse_all`,` Sequence```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Sequence```)```]``\n``enum` `Day` ``{` Monday`,` Tuesday`,` Wednesday`,` Thursday`,` Friday`,` Saturday`,` Sunday ```}```\n`assert_eq!``(``cardinality`::````<`Day`>```(``)``,` `7``)``;`\n`assert_eq!``(``all`::````<`Day`>```(``)``.``collect`::````<``Vec``<``_``>``>```(``)``,` `[`\n  `Day`::``Monday`,`\n  `Day`::``Tuesday`,`\n  `Day`::``Wednesday`,`\n  `Day`::``Thursday`,`\n  `Day`::``Friday`,`\n  `Day`::``Saturday`,`\n  `Day`::``Sunday`,`\n`]``)``;`\n`assert_eq!``(``first`::````<`Day`>```(``)``,` `Some``(``Day`::``Monday`)``)``;`\n`assert_eq!``(``last`::````<`Day`>```(``)``,` `Some``(``Day`::``Sunday`)``)``;`\n`assert_eq!``(``next``(``&``Day`::``Tuesday`)``,` `Some``(``Day`::``Wednesday`)``)``;`\n`assert_eq!``(``previous``(``&``Day`::``Wednesday`)``,` `Some``(``Day`::``Tuesday`)``)``;`\n`assert_eq!``(``reverse_all`::````<`Day`>```(``)``.``collect`::````<``Vec``<``_``>``>```(``)``,` `[`\n  `Day`::``Sunday`,`\n  `Day`::``Saturday`,`\n  `Day`::``Friday`,`\n  `Day`::``Thursday`,`\n  `Day`::``Wednesday`,`\n  `Day`::``Tuesday`,`\n  `Day`::``Monday`,`\n`]``)``;`\n`\n```\n```\n``use` `enum_iterator`::````{`cardinality`,` first`,` last`,` Sequence```}```;`\n``#``[``derive```(```Debug`,` PartialEq`,` Sequence```)```]``\n``struct` ```Foo` ````{`\n  `a``:` `bool`,\n  `b``:` `u8`,\n```}```\n`assert_eq!``(``cardinality`::````<`Foo`>```(``)``,` `512``)``;`\n`assert_eq!``(``first`::````<`Foo`>```(``)``,` `Some``(`Foo ``{` a`:` `false``,` b`:` `0` ```}```)``)``;`\n`assert_eq!``(``last`::````<`Foo`>```(``)``,` `Some``(`Foo ``{` a`:` `true``,` b`:` `255` ```}```)``)``;`\n`\n```\n\n# Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n# Contribute\nAll contributions shall be licensed under the 0BSD license\u27e86\u27e9.\n#### Dependencies\n~180\u2013600KB  ~14K SLoC\n  * enum-iterator-derive\u27e87\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/enum-iterator/versions: 24 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/enum-iterator/rev: **1,674** crates (182 directly)\n\u27e84\u27e9 https://crates.io/crates/enum-iterator: \ud83d\udce6 crates.io\n\u27e85\u27e9 https://docs.rs/enum-iterator: \ud83d\udcd6 Documentation\n\u27e86\u27e9 https://spdx.org/licenses/0BSD.html: \u2696 0BSD license\n\u27e87\u27e9 https://lib.rs/crates/enum-iterator-derive: 1.4.0 - enum-iterator-derive\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3290,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117832.9428998"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libsyn-58a490da17069e4a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libsyn-58a490da17069e4a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#enum-iterator-derive@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum-iterator-derive-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "enum_iterator_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum-iterator-derive-1.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpffzffe70/enum-iterator-2.1.0#enum-iterator@2.1.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "enum_iterator",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libenum_iterator-319dac7ba2eda10d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libsyn-58a490da17069e4a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libsyn-58a490da17069e4a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#enum-iterator-derive@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum-iterator-derive-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "enum_iterator_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\enum-iterator-derive-1.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\enum_iterator_derive-60b6631839456090.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpffzffe70/enum-iterator-2.1.0#enum-iterator@2.1.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "enum_iterator",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpffzffe70\\enum-iterator-2.1.0\\target\\debug\\deps\\libenum_iterator-9365fd42fef82917.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 6
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "enum-iterator",
          "version": "2.1.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\n[Settings](https://docs.rs/enum-iterator/latest/settings.html)\n[Help](https://docs.rs/enum-iterator/latest/help.html)\nSummary[Source](https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069)\nExpand description\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#overview)Overview\n  * [\ud83d\udce6 crates.io](https://crates.io/crates/enum-iterator)\n  * [\ud83d\udcd6 Documentation](https://docs.rs/enum-iterator)\n  * [\u2696 0BSD license](https://spdx.org/licenses/0BSD.html)\n\n\nTools to iterate over the values of a type.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#examples)Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version)Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#contribute)Contribute\nAll contributions shall be licensed under the [0BSD license](https://spdx.org/licenses/0BSD.html).\n## Structs[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#structs)\n\n[All](https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html \"struct enum_iterator::All\")\n    Iterator over the values of type `T`.\n\n[ReverseAll](https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html \"struct enum_iterator::ReverseAll\")\n    Iterator over the values of type `T` in reverse order.\n## Traits[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#traits)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html \"trait enum_iterator::Sequence\")\n    Trait to iterate over the values of a type.\n## Functions[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#functions)\n\n[all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\")\n    Returns an iterator over all values of type `T`.\n\n[cardinality](https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html \"fn enum_iterator::cardinality\")\n    Returns the cardinality (number of values) of `T`\n\n[first](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\")\n    Returns the first value of type `T`.\n\n[last](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\")\n    Returns the last value of type `T`.\n\n[next](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html \"fn enum_iterator::next\")\n    Returns the next value of type `T` or `None` if this was the end.\n\n[next_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html \"fn enum_iterator::next_cycle\")\n    Returns the next value of type `T` or [`first()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\") if this was the end.\n\n[previous](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html \"fn enum_iterator::previous\")\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\n[previous_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html \"fn enum_iterator::previous_cycle\")\n    Returns the previous value of type `T` or [`last()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\") if this was the beginning.\n\n[reverse_all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html \"fn enum_iterator::reverse_all\")\n    Returns an iterator over all values of type `T` in the reverse order of [`all`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\").\n## Derive Macros[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#derives)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html \"derive enum_iterator::Sequence\")\n    Derives `Sequence`.\n",
            "markdown_with_citations": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Overview\n  * \ud83d\udce6 crates.io\u27e85\u27e9\n  * \ud83d\udcd6 Documentation\u27e86\u27e9\n  * \u2696 0BSD license\u27e87\u27e9\n\n\nTools to iterate over the values of a type.\n## \u00a7\u27e88\u27e9Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## \u00a7\u27e89\u27e9Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## \u00a7\u27e810\u27e9Contribute\nAll contributions shall be licensed under the 0BSD license\u27e87\u27e9.\n## Structs\u00a7\u27e811\u27e9\n\nAll\u27e812\u27e9\n    Iterator over the values of type `T`.\n\nReverseAll\u27e813\u27e9\n    Iterator over the values of type `T` in reverse order.\n## Traits\u00a7\u27e814\u27e9\n\nSequence\u27e815\u27e9\n    Trait to iterate over the values of a type.\n## Functions\u00a7\u27e816\u27e9\n\nall\u27e817\u27e9\n    Returns an iterator over all values of type `T`.\n\ncardinality\u27e818\u27e9\n    Returns the cardinality (number of values) of `T`\n\nfirst\u27e819\u27e9\n    Returns the first value of type `T`.\n\nlast\u27e820\u27e9\n    Returns the last value of type `T`.\n\nnext\u27e821\u27e9\n    Returns the next value of type `T` or `None` if this was the end.\n\nnext_cycle\u27e822\u27e9\n    Returns the next value of type `T` or `first()`\u27e819\u27e9 if this was the end.\n\nprevious\u27e823\u27e9\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\nprevious_cycle\u27e824\u27e9\n    Returns the previous value of type `T` or `last()`\u27e820\u27e9 if this was the beginning.\n\nreverse_all\u27e825\u27e9\n    Returns an iterator over all values of type `T` in the reverse order of `all`\u27e817\u27e9.\n## Derive Macros\u00a7\u27e826\u27e9\n\nSequence\u27e827\u27e9\n    Derives `Sequence`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/enum-iterator/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/enum-iterator/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069: Source\n\u27e84\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#overview: \u00a7\n\u27e85\u27e9 https://crates.io/crates/enum-iterator: \ud83d\udce6 crates.io\n\u27e86\u27e9 https://docs.rs/enum-iterator: \ud83d\udcd6 Documentation\n\u27e87\u27e9 https://spdx.org/licenses/0BSD.html: \u2696 0BSD license\n\u27e88\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#examples: \u00a7\n\u27e89\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version: \u00a7\n\u27e810\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#contribute: \u00a7\n\u27e811\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html: struct enum_iterator::All - All\n\u27e813\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html: struct enum_iterator::ReverseAll - ReverseAll\n\u27e814\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html: trait enum_iterator::Sequence - Sequence\n\u27e816\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#functions: \u00a7\n\u27e817\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html: fn enum_iterator::all - all\n\u27e818\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html: fn enum_iterator::cardinality - cardinality\n\u27e819\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html: fn enum_iterator::first - first\n\u27e820\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html: fn enum_iterator::last - last\n\u27e821\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html: fn enum_iterator::next - next\n\u27e822\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html: fn enum_iterator::next_cycle - next_cycle\n\u27e823\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html: fn enum_iterator::previous - previous\n\u27e824\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html: fn enum_iterator::previous_cycle - previous_cycle\n\u27e825\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html: fn enum_iterator::reverse_all - reverse_all\n\u27e826\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#derives: \u00a7\n\u27e827\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html: derive enum_iterator::Sequence - Sequence\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "enum-iterator",
          "version": "2.1.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\n[Settings](https://docs.rs/enum-iterator/latest/settings.html)\n[Help](https://docs.rs/enum-iterator/latest/help.html)\nSummary[Source](https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069)\nExpand description\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#overview)Overview\n  * [\ud83d\udce6 crates.io](https://crates.io/crates/enum-iterator)\n  * [\ud83d\udcd6 Documentation](https://docs.rs/enum-iterator)\n  * [\u2696 0BSD license](https://spdx.org/licenses/0BSD.html)\n\n\nTools to iterate over the values of a type.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#examples)Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version)Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## [\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#contribute)Contribute\nAll contributions shall be licensed under the [0BSD license](https://spdx.org/licenses/0BSD.html).\n## Structs[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#structs)\n\n[All](https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html \"struct enum_iterator::All\")\n    Iterator over the values of type `T`.\n\n[ReverseAll](https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html \"struct enum_iterator::ReverseAll\")\n    Iterator over the values of type `T` in reverse order.\n## Traits[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#traits)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html \"trait enum_iterator::Sequence\")\n    Trait to iterate over the values of a type.\n## Functions[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#functions)\n\n[all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\")\n    Returns an iterator over all values of type `T`.\n\n[cardinality](https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html \"fn enum_iterator::cardinality\")\n    Returns the cardinality (number of values) of `T`\n\n[first](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\")\n    Returns the first value of type `T`.\n\n[last](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\")\n    Returns the last value of type `T`.\n\n[next](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html \"fn enum_iterator::next\")\n    Returns the next value of type `T` or `None` if this was the end.\n\n[next_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html \"fn enum_iterator::next_cycle\")\n    Returns the next value of type `T` or [`first()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html \"fn enum_iterator::first\") if this was the end.\n\n[previous](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html \"fn enum_iterator::previous\")\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\n[previous_cycle](https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html \"fn enum_iterator::previous_cycle\")\n    Returns the previous value of type `T` or [`last()`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html \"fn enum_iterator::last\") if this was the beginning.\n\n[reverse_all](https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html \"fn enum_iterator::reverse_all\")\n    Returns an iterator over all values of type `T` in the reverse order of [`all`](https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html \"fn enum_iterator::all\").\n## Derive Macros[\u00a7](https://docs.rs/enum-iterator/latest/enum_iterator/#derives)\n\n[Sequence](https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html \"derive enum_iterator::Sequence\")\n    Derives `Sequence`.\n",
            "markdown_with_citations": "[](https://docs.rs/enum-iterator/latest/enum_iterator/all.html \"show sidebar\")\n# Crate enum_iteratorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Overview\n  * \ud83d\udce6 crates.io\u27e85\u27e9\n  * \ud83d\udcd6 Documentation\u27e86\u27e9\n  * \u2696 0BSD license\u27e87\u27e9\n\n\nTools to iterate over the values of a type.\n## \u00a7\u27e88\u27e9Examples\n```\nuse enum_iterator::{all, cardinality, first, last, next, previous, reverse_all, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nenum Day { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }\nassert_eq!(cardinality::<Day>(), 7);\nassert_eq!(all::<Day>().collect::<Vec<_>>(), [\n  Day::Monday,\n  Day::Tuesday,\n  Day::Wednesday,\n  Day::Thursday,\n  Day::Friday,\n  Day::Saturday,\n  Day::Sunday,\n]);\nassert_eq!(first::<Day>(), Some(Day::Monday));\nassert_eq!(last::<Day>(), Some(Day::Sunday));\nassert_eq!(next(&Day::Tuesday), Some(Day::Wednesday));\nassert_eq!(previous(&Day::Wednesday), Some(Day::Tuesday));\nassert_eq!(reverse_all::<Day>().collect::<Vec<_>>(), [\n  Day::Sunday,\n  Day::Saturday,\n  Day::Friday,\n  Day::Thursday,\n  Day::Wednesday,\n  Day::Tuesday,\n  Day::Monday,\n]);\n```\n\n```\nuse enum_iterator::{cardinality, first, last, Sequence};\n#[derive(Debug, PartialEq, Sequence)]\nstruct Foo {\n  a: bool,\n  b: u8,\n}\nassert_eq!(cardinality::<Foo>(), 512);\nassert_eq!(first::<Foo>(), Some(Foo { a: false, b: 0 }));\nassert_eq!(last::<Foo>(), Some(Foo { a: true, b: 255 }));\n```\n\n## \u00a7\u27e89\u27e9Rust version\nThis crate tracks stable Rust. Minor releases may require a newer Rust version. Patch releases must not require a newer Rust version.\n## \u00a7\u27e810\u27e9Contribute\nAll contributions shall be licensed under the 0BSD license\u27e87\u27e9.\n## Structs\u00a7\u27e811\u27e9\n\nAll\u27e812\u27e9\n    Iterator over the values of type `T`.\n\nReverseAll\u27e813\u27e9\n    Iterator over the values of type `T` in reverse order.\n## Traits\u00a7\u27e814\u27e9\n\nSequence\u27e815\u27e9\n    Trait to iterate over the values of a type.\n## Functions\u00a7\u27e816\u27e9\n\nall\u27e817\u27e9\n    Returns an iterator over all values of type `T`.\n\ncardinality\u27e818\u27e9\n    Returns the cardinality (number of values) of `T`\n\nfirst\u27e819\u27e9\n    Returns the first value of type `T`.\n\nlast\u27e820\u27e9\n    Returns the last value of type `T`.\n\nnext\u27e821\u27e9\n    Returns the next value of type `T` or `None` if this was the end.\n\nnext_cycle\u27e822\u27e9\n    Returns the next value of type `T` or `first()`\u27e819\u27e9 if this was the end.\n\nprevious\u27e823\u27e9\n    Returns the previous value of type `T` or `None` if this was the beginning.\n\nprevious_cycle\u27e824\u27e9\n    Returns the previous value of type `T` or `last()`\u27e820\u27e9 if this was the beginning.\n\nreverse_all\u27e825\u27e9\n    Returns an iterator over all values of type `T` in the reverse order of `all`\u27e817\u27e9.\n## Derive Macros\u00a7\u27e826\u27e9\n\nSequence\u27e827\u27e9\n    Derives `Sequence`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/enum-iterator/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/enum-iterator/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/enum-iterator/latest/src/enum_iterator/lib.rs.html#3-1069: Source\n\u27e84\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#overview: \u00a7\n\u27e85\u27e9 https://crates.io/crates/enum-iterator: \ud83d\udce6 crates.io\n\u27e86\u27e9 https://docs.rs/enum-iterator: \ud83d\udcd6 Documentation\n\u27e87\u27e9 https://spdx.org/licenses/0BSD.html: \u2696 0BSD license\n\u27e88\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#examples: \u00a7\n\u27e89\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#rust-version: \u00a7\n\u27e810\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#contribute: \u00a7\n\u27e811\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.All.html: struct enum_iterator::All - All\n\u27e813\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/struct.ReverseAll.html: struct enum_iterator::ReverseAll - ReverseAll\n\u27e814\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#traits: \u00a7\n\u27e815\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/trait.Sequence.html: trait enum_iterator::Sequence - Sequence\n\u27e816\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#functions: \u00a7\n\u27e817\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.all.html: fn enum_iterator::all - all\n\u27e818\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.cardinality.html: fn enum_iterator::cardinality - cardinality\n\u27e819\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.first.html: fn enum_iterator::first - first\n\u27e820\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.last.html: fn enum_iterator::last - last\n\u27e821\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next.html: fn enum_iterator::next - next\n\u27e822\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.next_cycle.html: fn enum_iterator::next_cycle - next_cycle\n\u27e823\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous.html: fn enum_iterator::previous - previous\n\u27e824\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.previous_cycle.html: fn enum_iterator::previous_cycle - previous_cycle\n\u27e825\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/fn.reverse_all.html: fn enum_iterator::reverse_all - reverse_all\n\u27e826\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/#derives: \u00a7\n\u27e827\u27e9 https://docs.rs/enum-iterator/latest/enum_iterator/derive.Sequence.html: derive enum_iterator::Sequence - Sequence\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `enum-iterator` crate provides tools to iterate over all values of a type, particularly enums, by deriving the `Sequence` trait. It offers functions like `all`, `reverse_all`, `cardinality`, `first`, `last`, `next`, and `previous` to traverse, count, or access specific values in sequence. The crate supports cyclic navigation and works with both enums and structs, making it a versatile solution for enumerating type values.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1:\n\u2705 Factual: The `enum-iterator` crate provides the `cardinality` function, which returns the total number of variants in an enum type.  \n\u274c Counterfactual: The `cardinality` function calculates the number of variants in an enum dynamically at runtime by inspecting the enum's memory layout.\n\n---\n\n### Pair 2:\n\u2705 Factual: The `Sequence` derive macro allows enums to be iterated over in defined order, enabling utilities like `first`, `last`, `next`, and `previous` to work seamlessly.  \n\u274c Counterfactual: The `Sequence` derive macro automatically generates implementations for all traits in the `std::iter` module, including `Iterator` and `IntoIterator`.\n\n---\n\n### Pair 3:\n\u2705 Factual: The `reverse_all` function in the `enum-iterator` crate returns an iterator over all variants of an enum in reverse order compared to `all`.  \n\u274c Counterfactual: The `reverse_all` function requires the enum to implement the `Clone` trait for iteration to work correctly.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-88999e5f-4b88e642-1751264041",
      "timestamp": "2025-06-30T06:14:01.831189+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]