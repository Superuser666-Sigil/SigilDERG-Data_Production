[
  {
    "execution_id": "exec-46e90a09-20143289-1751258769",
    "timestamp": "2025-06-30T04:46:09.845758+00:00",
    "sacred_chain": {
      "input_data": "futures-timer",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'futures-timer' -> 'futures-timer'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "futures-timer",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/futures-timer",
            "title": "futures-timer v3.0.3",
            "content": {
              "raw_markdown": "#  futures-timer v3.0.3\nTimeouts for futures. \n  * [ Readme ](https://crates.io/crates/futures-timer)\n  * [ 20 Versions ](https://crates.io/crates/futures-timer/versions)\n  * [ Dependencies ](https://crates.io/crates/futures-timer/dependencies)\n  * [ Dependents ](https://crates.io/crates/futures-timer/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n19.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-timer\nOr add the following line to your Cargo.toml:\nfutures-timer = \"3.0.3\"\n## Documentation\n[ docs.rs/futures-timer ](https://docs.rs/futures-timer)\n## Repository\n[ github.com/async-rs/futures-timer ](https://github.com/async-rs/futures-timer)\n## Owners\n[ Report crate ](https://crates.io/support?crate=futures-timer&inquire=crate-violation)\n### Stats Overview\n75,348,725 Downloads all time\n20 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  futures-timer v3.0.3\nTimeouts for futures. \n  *  Readme \u27e81\u27e9\n  *  20 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nover 1 year ago \n2018 edition \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n19.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-timer\nOr add the following line to your Cargo.toml:\nfutures-timer = \"3.0.3\"\n## Documentation\n docs.rs/futures-timer \u27e87\u27e9\n## Repository\n github.com/async-rs/futures-timer \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n75,348,725 Downloads all time\n20 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/futures-timer:  Readme \n\u27e82\u27e9 https://crates.io/crates/futures-timer/versions:  20 Versions \n\u27e83\u27e9 https://crates.io/crates/futures-timer/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/futures-timer/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/futures-timer:  docs.rs/futures-timer \n\u27e88\u27e9 https://github.com/async-rs/futures-timer:  github.com/async-rs/futures-timer \n\u27e89\u27e9 https://crates.io/support?crate=futures-timer&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1094,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112559.5226735"
          },
          "docs_rs": {
            "url": "https://docs.rs/futures-timer",
            "title": "Crate futures_timerCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\n[Settings](https://docs.rs/futures-timer/latest/settings.html)\n[Help](https://docs.rs/futures-timer/latest/help.html)\nSummary[Source](https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27)\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## [\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#examples)Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs[\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#structs)\n\n[Delay](https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html \"struct futures_timer::Delay\")\n    A future representing the notification that an elapsed duration has occurred.\n",
              "markdown_with_citations": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## \u00a7\u27e84\u27e9Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nDelay\u27e86\u27e9\n    A future representing the notification that an elapsed duration has occurred.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-timer/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-timer/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27: Source\n\u27e84\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html: struct futures_timer::Delay - Delay\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 902,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112560.3490226"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/futures-timer",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [20 releases](https://lib.rs/crates/futures-timer/versions) (11 stable)\n3.0.3 |  Feb 22, 2024   \n---|---  \n3.0.2 |  Feb 17, 2020   \n3.0.0 |  Jan 27, 2020   \n2.0.2 |  Nov 15, 2019   \n0.0.0 |  Sep 27, 2017   \n#**23** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 1013622/week @ 2025-03-07 971045/week @ 2025-03-14 963360/week @ 2025-03-21 960956/week @ 2025-03-28 995296/week @ 2025-04-04 977156/week @ 2025-04-11 945851/week @ 2025-04-18 893522/week @ 2025-04-25 891809/week @ 2025-05-02 941156/week @ 2025-05-09 983495/week @ 2025-05-16 840723/week @ 2025-05-23 978135/week @ 2025-05-30 976819/week @ 2025-06-06 1024229/week @ 2025-06-13 1047578/week @ 2025-06-20\n**4,182,404** downloads per month Used in [**2,677** crates (367 directly)](https://lib.rs/crates/futures-timer/rev)\n**MIT/Apache**\n51KB  956 lines\n# futures-timer\n**Timeouts for futures.**\n[ ![Crates.io version](https://img.shields.io/crates/v/futures-timer.svg?style=flat-square) ](https://crates.io/crates/futures-timer) [ ![Download](https://img.shields.io/crates/d/futures-timer.svg?style=flat-square) ](https://crates.io/crates/futures-timer) [ ![docs.rs docs](https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square) ](https://docs.rs/futures-timer) [ ![chat](https://img.shields.io/discord/598880689856970762.svg?logo=discord&style=flat-square) ](https://discord.gg/JvZeVNe)\n###  [ API Docs ](https://docs.rs/futures-timer) |  [ Releases ](https://github.com/async-rs/futures-timer/releases) |  [ Contributing ](https://async.rs/contribute)\n## Installation\nWith [cargo add](https://github.com/killercup/cargo-edit) installed run:\n```\n```$``` cargo add futures-timer`\n`\n```\n\n## Safety\nThis crate makes use of carefully checked ```unsafe``` blocks to construct an efficient timer implementation.\n## Contributing\nWant to join us? Check out our [\"Contributing\" guide](https://github.com/async-rs/futures-timer/blob/master.github/CONTRIBUTING.md) and take a look at some of these issues:\n  * [Issues labeled \"good first issue\"](https://github.com/async-rs/futures-timer/labels/good%20first%20issue)\n  * [Issues labeled \"help wanted\"](https://github.com/async-rs/futures-timer/labels/help%20wanted)\n\n\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/async-rs/futures-timer/blob/07dbe53da1b5ddb703cdfc74ad59e15cb4134ce0/LICENSE-APACHE) or [MIT license](https://github.com/async-rs/futures-timer/blob/07dbe53da1b5ddb703cdfc74ad59e15cb4134ce0/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u2013255KB \n  * [wasm-bindgen?](https://lib.rs/crates/futures-timer/features#feature-wasm-bindgen \"optional feature\") [gloo-timers](https://lib.rs/crates/gloo-timers \"obsolete\") 0.2[+futures](https://lib.rs/crates/gloo-timers/features#feature-futures)\n  * [wasm-bindgen?](https://lib.rs/crates/futures-timer/features#feature-wasm-bindgen \"optional feature\") [send_wrapper](https://lib.rs/crates/send_wrapper \"obsolete\") 0.4\n\n\n  * dev  [async-std](https://lib.rs/crates/async-std \"outdated\") 1.0[+attributes](https://lib.rs/crates/async-std/features#feature-attributes)\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.1\")\n\n\n",
              "markdown_with_citations": "###  20 releases\u27e81\u27e9 (11 stable)\n3.0.3 |  Feb 22, 2024   \n---|---  \n3.0.2 |  Feb 17, 2020   \n3.0.0 |  Jan 27, 2020   \n2.0.2 |  Nov 15, 2019   \n0.0.0 |  Sep 27, 2017   \n#**23** in Asynchronous\u27e82\u27e9\nDownload history 1013622/week @ 2025-03-07 971045/week @ 2025-03-14 963360/week @ 2025-03-21 960956/week @ 2025-03-28 995296/week @ 2025-04-04 977156/week @ 2025-04-11 945851/week @ 2025-04-18 893522/week @ 2025-04-25 891809/week @ 2025-05-02 941156/week @ 2025-05-09 983495/week @ 2025-05-16 840723/week @ 2025-05-23 978135/week @ 2025-05-30 976819/week @ 2025-06-06 1024229/week @ 2025-06-13 1047578/week @ 2025-06-20\n**4,182,404** downloads per month Used in **2,677** crates (367 directly)\u27e83\u27e9\n**MIT/Apache**\n51KB  956 lines\n# futures-timer\n**Timeouts for futures.**\n ![Crates.io version\u27e84\u27e9 ](https://crates.io/crates/futures-timer)  ![Download\u27e85\u27e9 ](https://crates.io/crates/futures-timer)  ![docs.rs docs\u27e86\u27e9 ](https://docs.rs/futures-timer)  ![chat\u27e87\u27e9 ](https://discord.gg/JvZeVNe)\n###   API Docs \u27e88\u27e9 |   Releases \u27e89\u27e9 |   Contributing \u27e810\u27e9\n## Installation\nWith cargo add\u27e811\u27e9 installed run:\n```\n```$``` cargo add futures-timer`\n`\n```\n\n## Safety\nThis crate makes use of carefully checked ```unsafe``` blocks to construct an efficient timer implementation.\n## Contributing\nWant to join us? Check out our \"Contributing\" guide\u27e812\u27e9 and take a look at some of these issues:\n  * Issues labeled \"good first issue\"\u27e813\u27e9\n  * Issues labeled \"help wanted\"\u27e814\u27e9\n\n\n## License\nLicensed under either of Apache License, Version 2.0\u27e815\u27e9 or MIT license\u27e816\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u2013255KB \n  * wasm-bindgen?\u27e817\u27e9 gloo-timers\u27e818\u27e9 0.2+futures\u27e819\u27e9\n  * wasm-bindgen?\u27e817\u27e9 send_wrapper\u27e820\u27e9 0.4\n\n\n  * dev  async-std\u27e821\u27e9 1.0+attributes\u27e822\u27e9\n  * dev  futures\u27e823\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/futures-timer/versions: 20 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/futures-timer/rev: **2,677** crates (367 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/futures-timer.svg?style=flat-square:  ![Crates.io version\n\u27e85\u27e9 https://img.shields.io/crates/d/futures-timer.svg?style=flat-square:  ![Download\n\u27e86\u27e9 https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square:  ![docs.rs docs\n\u27e87\u27e9 https://img.shields.io/discord/598880689856970762.svg?logo=discord&style=flat-square:  ![chat\n\u27e88\u27e9 https://docs.rs/futures-timer:  API Docs \n\u27e89\u27e9 https://github.com/async-rs/futures-timer/releases:  Releases \n\u27e810\u27e9 https://async.rs/contribute:  Contributing \n\u27e811\u27e9 https://github.com/killercup/cargo-edit: cargo add\n\u27e812\u27e9 https://github.com/async-rs/futures-timer/blob/master.github/CONTRIBUTING.md: \"Contributing\" guide\n\u27e813\u27e9 https://github.com/async-rs/futures-timer/labels/good%20first%20issue: Issues labeled \"good first issue\"\n\u27e814\u27e9 https://github.com/async-rs/futures-timer/labels/help%20wanted: Issues labeled \"help wanted\"\n\u27e815\u27e9 https://github.com/async-rs/futures-timer/blob/07dbe53da1b5ddb703cdfc74ad59e15cb4134ce0/LICENSE-APACHE: Apache License, Version 2.0\n\u27e816\u27e9 https://github.com/async-rs/futures-timer/blob/07dbe53da1b5ddb703cdfc74ad59e15cb4134ce0/LICENSE-MIT: MIT license\n\u27e817\u27e9 https://lib.rs/crates/futures-timer/features#feature-wasm-bindgen: optional feature - wasm-bindgen?\n\u27e818\u27e9 https://lib.rs/crates/gloo-timers: obsolete - gloo-timers\n\u27e819\u27e9 https://lib.rs/crates/gloo-timers/features#feature-futures: +futures\n\u27e820\u27e9 https://lib.rs/crates/send_wrapper: obsolete - send_wrapper\n\u27e821\u27e9 https://lib.rs/crates/async-std: outdated - async-std\n\u27e822\u27e9 https://lib.rs/crates/async-std/features#feature-attributes: +attributes\n\u27e823\u27e9 https://lib.rs/crates/futures: 0.3.1 - futures\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3525,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112560.9007458"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `assert_timer_heap_consistent`\n   --> src\\native\\heap.rs:164:18\n    |\n164 |         if !cfg!(assert_timer_heap_consistent) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(assert_timer_heap_consistent)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(assert_timer_heap_consistent)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(assert_timer_heap_consistent)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(assert_timer_heap_consistent)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `assert_timer_heap_consistent`",
                "spans": [
                  {
                    "byte_end": 5211,
                    "byte_start": 5183,
                    "column_end": 46,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\native\\heap.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 18,
                        "text": "        if !cfg!(assert_timer_heap_consistent) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated method `std::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\n   --> src\\native\\atomic_waker.rs:107:26\n    |\n107 |         match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {\n    |                          ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(deprecated)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated method `std::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead",
                "spans": [
                  {
                    "byte_end": 4053,
                    "byte_start": 4037,
                    "column_end": 42,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\native\\atomic_waker.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 26,
                        "text": "        match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: trait `AssertSync` is never used\n  --> src\\native\\atomic_waker.rs:45:15\n   |\n45 |         trait AssertSync: Sync {}\n   |               ^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dead_code)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "dead_code",
                  "explanation": null
                },
                "level": "warning",
                "message": "trait `AssertSync` is never used",
                "spans": [
                  {
                    "byte_end": 1737,
                    "byte_start": 1727,
                    "column_end": 25,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\native\\atomic_waker.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 15,
                        "text": "        trait AssertSync: Sync {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\target\\debug\\deps\\libfutures_timer-169b54bde8f3f9ba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `assert_timer_heap_consistent`\n   --> src\\native\\heap.rs:164:18\n    |\n164 |         if !cfg!(assert_timer_heap_consistent) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(assert_timer_heap_consistent)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(assert_timer_heap_consistent)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(assert_timer_heap_consistent)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(assert_timer_heap_consistent)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `assert_timer_heap_consistent`",
                "spans": [
                  {
                    "byte_end": 5211,
                    "byte_start": 5183,
                    "column_end": 46,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\native\\heap.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 18,
                        "text": "        if !cfg!(assert_timer_heap_consistent) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated method `std::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead\n   --> src\\native\\atomic_waker.rs:107:26\n    |\n107 |         match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {\n    |                          ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(deprecated)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated method `std::sync::atomic::AtomicUsize::compare_and_swap`: Use `compare_exchange` or `compare_exchange_weak` instead",
                "spans": [
                  {
                    "byte_end": 4053,
                    "byte_start": 4037,
                    "column_end": 42,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\native\\atomic_waker.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 26,
                        "text": "        match self.state.compare_and_swap(WAITING, REGISTERING, Acquire) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: trait `AssertSync` is never used\n  --> src\\native\\atomic_waker.rs:45:15\n   |\n45 |         trait AssertSync: Sync {}\n   |               ^^^^^^^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(dead_code)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "dead_code",
                  "explanation": null
                },
                "level": "warning",
                "message": "trait `AssertSync` is never used",
                "spans": [
                  {
                    "byte_end": 1737,
                    "byte_start": 1727,
                    "column_end": 25,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "src\\native\\atomic_waker.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 15,
                        "text": "        trait AssertSync: Sync {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting raw pointers to the same type and constness is unnecessary (`*mut native::arc_list::Node<T>` -> `*mut native::arc_list::Node<T>`)\n  --> src\\native\\arc_list.rs:39:40\n   |\n39 |                     drop(Arc::from_raw(node as *mut Node<T>));\n   |                                        ^^^^^^^^^^^^^^^^^^^^ help: try: `node`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n   = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_cast)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1353,
                        "byte_start": 1333,
                        "column_end": 60,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\native\\arc_list.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 39,
                        "line_start": 39,
                        "suggested_replacement": "node",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 40,
                            "text": "                    drop(Arc::from_raw(node as *mut Node<T>));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting raw pointers to the same type and constness is unnecessary (`*mut native::arc_list::Node<T>` -> `*mut native::arc_list::Node<T>`)",
                "spans": [
                  {
                    "byte_end": 1353,
                    "byte_start": 1333,
                    "column_end": 60,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\native\\arc_list.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 40,
                        "text": "                    drop(Arc::from_raw(node as *mut Node<T>));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant pattern matching, consider using `is_some()`\n   --> src\\native\\arc_list.rs:102:19\n    |\n102 |         while let Some(_) = self.pop() {\n    |         ----------^^^^^^^------------- help: try: `while self.pop().is_some()`\n    |\n    = note: this will change drop order of the result, as well as all temporaries\n    = note: add `#[allow(clippy::redundant_pattern_matching)]` if this is important\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n    = note: `#[warn(clippy::redundant_pattern_matching)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this will change drop order of the result, as well as all temporaries",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "add `#[allow(clippy::redundant_pattern_matching)]` if this is important",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_pattern_matching)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3350,
                        "byte_start": 3320,
                        "column_end": 39,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\native\\arc_list.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": "while self.pop().is_some()",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 9,
                            "text": "        while let Some(_) = self.pop() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_pattern_matching",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant pattern matching, consider using `is_some()`",
                "spans": [
                  {
                    "byte_end": 3337,
                    "byte_start": 3330,
                    "column_end": 26,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\native\\arc_list.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 19,
                        "text": "        while let Some(_) = self.pop() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it\n  --> src\\native\\global.rs:87:5\n   |\n87 |     mem::forget(me.clone());\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: argument has type `std::mem::ManuallyDrop<std::sync::Arc<std::thread::Thread>>`\n  --> src\\native\\global.rs:87:17\n   |\n87 |     mem::forget(me.clone());\n   |                 ^^^^^^^^^^\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n   = note: `#[warn(clippy::forget_non_drop)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "argument has type `std::mem::ManuallyDrop<std::sync::Arc<std::thread::Thread>>`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2339,
                        "byte_start": 2329,
                        "column_end": 27,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\native\\global.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 17,
                            "text": "    mem::forget(me.clone());"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::forget_non_drop)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::forget_non_drop",
                  "explanation": null
                },
                "level": "warning",
                "message": "call to `std::mem::forget` with a value that does not implement `Drop`. Forgetting such a type is the same as dropping it",
                "spans": [
                  {
                    "byte_end": 2340,
                    "byte_start": 2317,
                    "column_end": 28,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\native\\global.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 5,
                        "text": "    mem::forget(me.clone());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do\n   --> src\\native\\heap.rs:208:23\n    |\n208 | fn set_index<T>(slab: &mut Vec<SlabSlot<T>>, slab_slot: usize, val: T) {\n    |                       ^^^^^^^^^^^^^^^^^^^^^ help: change this to: `&mut [SlabSlot<T>]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\n    = note: `#[warn(clippy::ptr_arg)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::ptr_arg)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6560,
                        "byte_start": 6539,
                        "column_end": 44,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\native\\heap.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 208,
                        "line_start": 208,
                        "suggested_replacement": "&mut [SlabSlot<T>]",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 23,
                            "text": "fn set_index<T>(slab: &mut Vec<SlabSlot<T>>, slab_slot: usize, val: T) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::ptr_arg",
                  "explanation": null
                },
                "level": "warning",
                "message": "writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do",
                "spans": [
                  {
                    "byte_end": 6560,
                    "byte_start": 6539,
                    "column_end": 44,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\native\\heap.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 208,
                    "line_start": 208,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 23,
                        "text": "fn set_index<T>(slab: &mut Vec<SlabSlot<T>>, slab_slot: usize, val: T) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp84tchznw/futures-timer-3.0.3#futures-timer@3.0.3",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_timer",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp84tchznw\\futures-timer-3.0.3\\target\\debug\\deps\\libfutures_timer-2e7d7b5b792334fb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 86
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "futures-timer",
          "version": "3.0.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\n[Settings](https://docs.rs/futures-timer/latest/settings.html)\n[Help](https://docs.rs/futures-timer/latest/help.html)\nSummary[Source](https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27)\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## [\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#examples)Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs[\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#structs)\n\n[Delay](https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html \"struct futures_timer::Delay\")\n    A future representing the notification that an elapsed duration has occurred.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## \u00a7\u27e84\u27e9Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nDelay\u27e86\u27e9\n    A future representing the notification that an elapsed duration has occurred.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-timer/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-timer/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27: Source\n\u27e84\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html: struct futures_timer::Delay - Delay\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "futures-timer",
          "version": "3.0.3",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\n[Settings](https://docs.rs/futures-timer/latest/settings.html)\n[Help](https://docs.rs/futures-timer/latest/help.html)\nSummary[Source](https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27)\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## [\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#examples)Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs[\u00a7](https://docs.rs/futures-timer/latest/futures_timer/#structs)\n\n[Delay](https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html \"struct futures_timer::Delay\")\n    A future representing the notification that an elapsed duration has occurred.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-timer/latest/futures_timer/all.html \"show sidebar\")\n# Crate futures_timerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA general purpose crate for working with timeouts and delays with futures.\n## \u00a7\u27e84\u27e9Examples\n```\nuse std::time::Duration;\nuse futures_timer::Delay;\nlet now = Delay::new(Duration::from_secs(3)).await;\nprintln!(\"waited for 3 secs\");\n```\n\n## Structs\u00a7\u27e85\u27e9\n\nDelay\u27e86\u27e9\n    A future representing the notification that an elapsed duration has occurred.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-timer/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-timer/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-timer/latest/src/futures_timer/lib.rs.html#1-27: Source\n\u27e84\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#examples: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-timer/latest/futures_timer/#structs: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-timer/latest/futures_timer/struct.Delay.html: struct futures_timer::Delay - Delay\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `futures-timer` crate provides utilities for working with timeouts and delays in asynchronous Rust code. Its primary feature is the `Delay` struct, which represents a future that completes after a specified duration, enabling precise control over timed operations. This crate is lightweight and integrates seamlessly with async workflows.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 5.0,
          "factual_counterfactual": "### Pair 1:  \n\u2705 Factual: The `futures-timer` crate provides the `Delay` struct, which allows you to create a future that resolves after a specified duration, enabling timeouts and delays in asynchronous Rust code.  \n\u274c Counterfactual: The `futures-timer` crate includes built-in support for periodic timers that repeatedly fire at fixed intervals without requiring additional logic.  \n\n---\n\n### Pair 2:  \n\u2705 Factual: The `Delay::new` method in `futures-timer` takes a `Duration` as input and returns a future that resolves once the specified duration has elapsed.  \n\u274c Counterfactual: The `Delay::new` method automatically adjusts the duration based on system clock changes, ensuring precise timing even during clock adjustments.  \n\n---\n\n### Pair 3:  \n\u2705 Factual: The `futures-timer` crate is designed to integrate seamlessly with other asynchronous crates in the Rust ecosystem, such as `tokio` and `async-std`.  \n\u274c Counterfactual: The `futures-timer` crate requires a specific runtime, such as `tokio`, and cannot be used with runtime-agnostic asynchronous code.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-46e90a09-20143289-1751258769",
      "timestamp": "2025-06-30T04:46:09.845758+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]