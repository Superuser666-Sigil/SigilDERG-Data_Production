[
  {
    "execution_id": "exec-7ef4bc34-7027bea9-1751265146",
    "timestamp": "2025-06-30T06:32:26.618048+00:00",
    "sacred_chain": {
      "input_data": "piston",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'piston' -> 'piston'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "piston",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/piston",
            "title": "piston v1.0.0",
            "content": {
              "raw_markdown": "#  piston v1.0.0\nThe Piston game engine core libraries \n  * [ #engine ](https://crates.io/keywords/engine)\n  * [ #core ](https://crates.io/keywords/core)\n  * [ #piston ](https://crates.io/keywords/piston)\n  * [ #game ](https://crates.io/keywords/game)\n\n\n  * [ Readme ](https://crates.io/crates/piston)\n  * [ 82 Versions ](https://crates.io/crates/piston/versions)\n  * [ Dependencies ](https://crates.io/crates/piston/dependencies)\n  * [ Dependents ](https://crates.io/crates/piston/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n7.83 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add piston\nOr add the following line to your Cargo.toml:\npiston = \"1.0.0\"\n## Documentation\n[ docs.rs/piston ](https://docs.rs/piston)\n## Repository\n[ github.com/PistonDevelopers/piston ](https://github.com/PistonDevelopers/piston.git)\n## Owners\n[ Report crate ](https://crates.io/support?crate=piston&inquire=crate-violation)\n### Stats Overview\n1,374,228 Downloads all time\n82 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  piston v1.0.0\nThe Piston game engine core libraries \n  *  #engine \u27e81\u27e9\n  *  #core \u27e82\u27e9\n  *  #piston \u27e83\u27e9\n  *  #game \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  82 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n MIT \u27e89\u27e9\n7.83 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add piston\nOr add the following line to your Cargo.toml:\npiston = \"1.0.0\"\n## Documentation\n docs.rs/piston \u27e810\u27e9\n## Repository\n github.com/PistonDevelopers/piston \u27e811\u27e9\n## Owners\n Report crate \u27e812\u27e9\n### Stats Overview\n1,374,228 Downloads all time\n82 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/engine:  #engine \n\u27e82\u27e9 https://crates.io/keywords/core:  #core \n\u27e83\u27e9 https://crates.io/keywords/piston:  #piston \n\u27e84\u27e9 https://crates.io/keywords/game:  #game \n\u27e85\u27e9 https://crates.io/crates/piston:  Readme \n\u27e86\u27e9 https://crates.io/crates/piston/versions:  82 Versions \n\u27e87\u27e9 https://crates.io/crates/piston/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/piston/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://docs.rs/piston:  docs.rs/piston \n\u27e811\u27e9 https://github.com/PistonDevelopers/piston.git:  github.com/PistonDevelopers/piston \n\u27e812\u27e9 https://crates.io/support?crate=piston&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1178,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118935.7631682"
          },
          "docs_rs": {
            "url": "https://docs.rs/piston",
            "title": "Crate pistonCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\n[Settings](https://docs.rs/piston/latest/settings.html)\n[Help](https://docs.rs/piston/latest/help.html)\nSummary[Source](https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148)\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see [`piston_window`](https://github.com/pistondevelopers/piston_window).\nFor examples, see [piston-examples](https://github.com/pistondevelopers/piston-examples).\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n#### [\u00a7](https://docs.rs/piston/latest/piston/#design)Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see [Model-View-Controller (Wikipedia)](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller).\nThe most important traits in Piston are the following:\n  * [`GenericEvent`](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\") (allows handling of events for controllers)\n  * [Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\") (allows polling of events)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules)Link to documentation for core modules\n  * [pistoncore-input](https://docs.rs/pistoncore-input) (User input and event handling)\n  * [pistoncore-window](https://docs.rs/pistoncore-window) (Window abstraction)\n  * [pistoncore-event_loop](https://docs.rs/pistoncore-event_loop) (Event loop)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#points-vs-pixels)Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine)About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * [Image](https://github.com/pistondevelopers/image) library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * [Piston\u2019s 2D graphics](https://github.com/pistondevelopers/graphics) is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see [Imageproc](https://github.com/pistondevelopers/imageproc).\n  * [Dyon](https://github.com/pistondevelopers/dyon) is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * [pistoncore-glutin_window](https://github.com/pistondevelopers/glutin_window)\n  * [pistoncore-sdl2_window](https://github.com/pistondevelopers/sdl2_window)\n  * [pistoncore-glfw_window](https://github.com/pistondevelopers/glfw_window)\n  * [pistoncore-winit_window](https://github.com/PistonDevelopers/winit_window)\n\n\nThere are a [few other window backends as well](https://crates.io/search?q=piston%20window).\nPlus a 2D graphics backend (optional):\n  * [piston2d-opengl_graphics](https://github.com/pistondevelopers/opengl_graphics)\n  * [piston2d-gfx_graphics](https://github.com/pistondevelopers/gfx_graphics)\n  * [piston2d-glium_graphics](https://github.com/pistondevelopers/glium_graphics)\n  * [piston2d-wgpu_graphics](https://github.com/PistonDevelopers/wgpu_graphics)\n\n\nThere are a [few other graphics backends as well](https://crates.io/search?q=piston%20graphics).\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-project)About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * [`PistonDevelopers`](https://github.com/pistondevelopers/) - everything game engine related\n  * [`AdvancedResearch`](https://github.com/advancedresearch/) - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * [Gfx-rs](https://github.com/gfx-rs/) - everything 3D graphics related\n  * [`RustAudio`](https://github.com/rustaudio) - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n## Re-exports[\u00a7](https://docs.rs/piston/latest/piston/#reexports)\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules[\u00a7](https://docs.rs/piston/latest/piston/#modules)\n\n[controller](https://docs.rs/piston/latest/piston/controller/index.html \"mod piston::controller\")\n    Back-end agnostic controller events.\n\n[event_id](https://docs.rs/piston/latest/piston/event_id/index.html \"mod piston::event_id\")\n    Event identifiers.\n\n[generic_event](https://docs.rs/piston/latest/piston/generic_event/index.html \"mod piston::generic_event\")\n    Trait for generic events\n\n[keyboard](https://docs.rs/piston/latest/piston/keyboard/index.html \"mod piston::keyboard\")\n    Back-end agnostic keyboard keys.\n\n[mouse](https://docs.rs/piston/latest/piston/mouse/index.html \"mod piston::mouse\")\n    Back-end agnostic mouse buttons.\n## Structs[\u00a7](https://docs.rs/piston/latest/piston/#structs)\n\n[AfterRenderArgs](https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html \"struct piston::AfterRenderArgs\")\n    After render arguments.\n\n[Api](https://docs.rs/piston/latest/piston/struct.Api.html \"struct piston::Api\")\n    Stores graphics API version.\n\n[ButtonArgs](https://docs.rs/piston/latest/piston/struct.ButtonArgs.html \"struct piston::ButtonArgs\")\n    Button arguments.\n\n[CloseArgs](https://docs.rs/piston/latest/piston/struct.CloseArgs.html \"struct piston::CloseArgs\")\n    Close arguments.\n\n[ControllerAxisArgs](https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html \"struct piston::ControllerAxisArgs\")\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\n[ControllerButton](https://docs.rs/piston/latest/piston/struct.ControllerButton.html \"struct piston::ControllerButton\")\n    Components of a controller button event. Not guaranteed consistent across backends.\n\n[ControllerHat](https://docs.rs/piston/latest/piston/struct.ControllerHat.html \"struct piston::ControllerHat\")\n    Components of a controller hat move event (d-Pad).\n\n[EventSettings](https://docs.rs/piston/latest/piston/struct.EventSettings.html \"struct piston::EventSettings\")\n    Stores event loop settings.\n\n[Events](https://docs.rs/piston/latest/piston/struct.Events.html \"struct piston::Events\")\n    An event loop iterator\n\n[IdleArgs](https://docs.rs/piston/latest/piston/struct.IdleArgs.html \"struct piston::IdleArgs\")\n    Idle arguments, such as expected idle time in seconds.\n\n[NoWindow](https://docs.rs/piston/latest/piston/struct.NoWindow.html \"struct piston::NoWindow\")\n    A window without user interface, often used in server event loops.\n\n[Position](https://docs.rs/piston/latest/piston/struct.Position.html \"struct piston::Position\")\n    Structure to store the window position.\n\n[RenderArgs](https://docs.rs/piston/latest/piston/struct.RenderArgs.html \"struct piston::RenderArgs\")\n    Render arguments.\n\n[ResizeArgs](https://docs.rs/piston/latest/piston/struct.ResizeArgs.html \"struct piston::ResizeArgs\")\n    Resize arguments.\n\n[Size](https://docs.rs/piston/latest/piston/struct.Size.html \"struct piston::Size\")\n    Structure to store the window size.\n\n[TouchArgs](https://docs.rs/piston/latest/piston/struct.TouchArgs.html \"struct piston::TouchArgs\")\n    Touch arguments\n\n[UnsupportedGraphicsApiError](https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html \"struct piston::UnsupportedGraphicsApiError\")\n    An error for when a graphics API is unsupported.\n\n[UpdateArgs](https://docs.rs/piston/latest/piston/struct.UpdateArgs.html \"struct piston::UpdateArgs\")\n    Update arguments, such as delta time in seconds.\n\n[WindowSettings](https://docs.rs/piston/latest/piston/struct.WindowSettings.html \"struct piston::WindowSettings\")\n    Settings structure for window behavior.\n## Enums[\u00a7](https://docs.rs/piston/latest/piston/#enums)\n\n[Button](https://docs.rs/piston/latest/piston/enum.Button.html \"enum piston::Button\")\n    Models different kinds of buttons.\n\n[ButtonState](https://docs.rs/piston/latest/piston/enum.ButtonState.html \"enum piston::ButtonState\")\n    Stores button state.\n\n[Event](https://docs.rs/piston/latest/piston/enum.Event.html \"enum piston::Event\")\n    Models all events.\n\n[FileDrag](https://docs.rs/piston/latest/piston/enum.FileDrag.html \"enum piston::FileDrag\")\n    Models dragging and dropping files.\n\n[HatState](https://docs.rs/piston/latest/piston/enum.HatState.html \"enum piston::HatState\")\n    Stores controller hat state.\n\n[Input](https://docs.rs/piston/latest/piston/enum.Input.html \"enum piston::Input\")\n    Models input events.\n\n[Key](https://docs.rs/piston/latest/piston/enum.Key.html \"enum piston::Key\")\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\n[Loop](https://docs.rs/piston/latest/piston/enum.Loop.html \"enum piston::Loop\")\n    Models loop events.\n\n[Motion](https://docs.rs/piston/latest/piston/enum.Motion.html \"enum piston::Motion\")\n    Models different kinds of motion.\n\n[MouseButton](https://docs.rs/piston/latest/piston/enum.MouseButton.html \"enum piston::MouseButton\")\n    Represent a mouse button.\n\n[Touch](https://docs.rs/piston/latest/piston/enum.Touch.html \"enum piston::Touch\")\n    Stores the touch state.\n## Constants[\u00a7](https://docs.rs/piston/latest/piston/#constants)\n\n[DEFAULT_MAX_FPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html \"constant piston::DEFAULT_MAX_FPS\")\n    The default maximum frames per second.\n\n[DEFAULT_UPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html \"constant piston::DEFAULT_UPS\")\n    The default updates per second.\n\n[DEFAULT_UPS_RESET](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html \"constant piston::DEFAULT_UPS_RESET\")\n    The default delayed updates reset.\n## Traits[\u00a7](https://docs.rs/piston/latest/piston/#traits)\n\n[AdvancedWindow](https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html \"trait piston::AdvancedWindow\")\n    Trait representing a window with the most features that are still generic.\n\n[AfterRenderEvent](https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html \"trait piston::AfterRenderEvent\")\n    After rendering and buffers are swapped.\n\n[BuildFromWindowSettings](https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html \"trait piston::BuildFromWindowSettings\")\n    Constructs a window from a [`WindowSettings`](https://docs.rs/piston/latest/piston/struct.WindowSettings.html) object.\n\n[ButtonEvent](https://docs.rs/piston/latest/piston/trait.ButtonEvent.html \"trait piston::ButtonEvent\")\n    Changed button state.\n\n[CloseEvent](https://docs.rs/piston/latest/piston/trait.CloseEvent.html \"trait piston::CloseEvent\")\n    Window is closing.\n\n[ControllerAxisEvent](https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html \"trait piston::ControllerAxisEvent\")\n    The position of a controller axis changed.\n\n[CursorEvent](https://docs.rs/piston/latest/piston/trait.CursorEvent.html \"trait piston::CursorEvent\")\n    When window gets or loses cursor.\n\n[EventLoop](https://docs.rs/piston/latest/piston/trait.EventLoop.html \"trait piston::EventLoop\")\n    Methods implemented for changing event loop settings.\n\n[FocusEvent](https://docs.rs/piston/latest/piston/trait.FocusEvent.html \"trait piston::FocusEvent\")\n    When window gets or loses focus.\n\n[GenericEvent](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\")\n    Implemented by all events.\n\n[IdleEvent](https://docs.rs/piston/latest/piston/trait.IdleEvent.html \"trait piston::IdleEvent\")\n    When background tasks should be performed.\n\n[MouseCursorEvent](https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html \"trait piston::MouseCursorEvent\")\n    The position of the mouse cursor.\n\n[MouseRelativeEvent](https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html \"trait piston::MouseRelativeEvent\")\n    The relative movement of mouse cursor.\n\n[MouseScrollEvent](https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html \"trait piston::MouseScrollEvent\")\n    The scroll of the mouse wheel.\n\n[OpenGLWindow](https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html \"trait piston::OpenGLWindow\")\n    Trait for OpenGL specific operations on a window.\n\n[PressEvent](https://docs.rs/piston/latest/piston/trait.PressEvent.html \"trait piston::PressEvent\")\n    The press of a button.\n\n[ReleaseEvent](https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html \"trait piston::ReleaseEvent\")\n    The release of a button.\n\n[RenderEvent](https://docs.rs/piston/latest/piston/trait.RenderEvent.html \"trait piston::RenderEvent\")\n    When the next frame should be rendered.\n\n[ResizeEvent](https://docs.rs/piston/latest/piston/trait.ResizeEvent.html \"trait piston::ResizeEvent\")\n    When the window is resized.\n\n[TextEvent](https://docs.rs/piston/latest/piston/trait.TextEvent.html \"trait piston::TextEvent\")\n    When receiving text from user, such as typing a character.\n\n[TouchEvent](https://docs.rs/piston/latest/piston/trait.TouchEvent.html \"trait piston::TouchEvent\")\n    When a touch is started, moved, ended or cancelled.\n\n[UpdateEvent](https://docs.rs/piston/latest/piston/trait.UpdateEvent.html \"trait piston::UpdateEvent\")\n    When the application state should be updated.\n\n[Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\")\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases[\u00a7](https://docs.rs/piston/latest/piston/#types)\n\n[ProcAddress](https://docs.rs/piston/latest/piston/type.ProcAddress.html \"type piston::ProcAddress\")\n    The type of an OpenGL function address.\n\n[TimeStamp](https://docs.rs/piston/latest/piston/type.TimeStamp.html \"type piston::TimeStamp\")\n    The type of time stamp.\n",
              "markdown_with_citations": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see `piston_window`\u27e84\u27e9.\nFor examples, see piston-examples\u27e85\u27e9.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n#### \u00a7\u27e87\u27e9Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see Model-View-Controller (Wikipedia)\u27e88\u27e9.\nThe most important traits in Piston are the following:\n  * `GenericEvent`\u27e89\u27e9 (allows handling of events for controllers)\n  * Window\u27e810\u27e9 (allows polling of events)\n\n\n#### \u00a7\u27e811\u27e9Link to documentation for core modules\n  * pistoncore-input\u27e812\u27e9 (User input and event handling)\n  * pistoncore-window\u27e813\u27e9 (Window abstraction)\n  * pistoncore-event_loop\u27e814\u27e9 (Event loop)\n\n\n#### \u00a7\u27e815\u27e9Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### \u00a7\u27e816\u27e9About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * Image\u27e817\u27e9 library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * Piston\u2019s 2D graphics\u27e818\u27e9 is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see Imageproc\u27e819\u27e9.\n  * Dyon\u27e820\u27e9 is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * pistoncore-glutin_window\u27e821\u27e9\n  * pistoncore-sdl2_window\u27e822\u27e9\n  * pistoncore-glfw_window\u27e823\u27e9\n  * pistoncore-winit_window\u27e824\u27e9\n\n\nThere are a few other window backends as well\u27e825\u27e9.\nPlus a 2D graphics backend (optional):\n  * piston2d-opengl_graphics\u27e826\u27e9\n  * piston2d-gfx_graphics\u27e827\u27e9\n  * piston2d-glium_graphics\u27e828\u27e9\n  * piston2d-wgpu_graphics\u27e829\u27e9\n\n\nThere are a few other graphics backends as well\u27e830\u27e9.\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### \u00a7\u27e831\u27e9About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * `PistonDevelopers`\u27e832\u27e9 - everything game engine related\n  * `AdvancedResearch`\u27e833\u27e9 - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * Gfx-rs\u27e834\u27e9 - everything 3D graphics related\n  * `RustAudio`\u27e835\u27e9 - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ncontroller\u27e838\u27e9\n    Back-end agnostic controller events.\n\nevent_id\u27e839\u27e9\n    Event identifiers.\n\ngeneric_event\u27e840\u27e9\n    Trait for generic events\n\nkeyboard\u27e841\u27e9\n    Back-end agnostic keyboard keys.\n\nmouse\u27e842\u27e9\n    Back-end agnostic mouse buttons.\n## Structs\u00a7\u27e843\u27e9\n\nAfterRenderArgs\u27e844\u27e9\n    After render arguments.\n\nApi\u27e845\u27e9\n    Stores graphics API version.\n\nButtonArgs\u27e846\u27e9\n    Button arguments.\n\nCloseArgs\u27e847\u27e9\n    Close arguments.\n\nControllerAxisArgs\u27e848\u27e9\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\nControllerButton\u27e849\u27e9\n    Components of a controller button event. Not guaranteed consistent across backends.\n\nControllerHat\u27e850\u27e9\n    Components of a controller hat move event (d-Pad).\n\nEventSettings\u27e851\u27e9\n    Stores event loop settings.\n\nEvents\u27e852\u27e9\n    An event loop iterator\n\nIdleArgs\u27e853\u27e9\n    Idle arguments, such as expected idle time in seconds.\n\nNoWindow\u27e854\u27e9\n    A window without user interface, often used in server event loops.\n\nPosition\u27e855\u27e9\n    Structure to store the window position.\n\nRenderArgs\u27e856\u27e9\n    Render arguments.\n\nResizeArgs\u27e857\u27e9\n    Resize arguments.\n\nSize\u27e858\u27e9\n    Structure to store the window size.\n\nTouchArgs\u27e859\u27e9\n    Touch arguments\n\nUnsupportedGraphicsApiError\u27e860\u27e9\n    An error for when a graphics API is unsupported.\n\nUpdateArgs\u27e861\u27e9\n    Update arguments, such as delta time in seconds.\n\nWindowSettings\u27e862\u27e9\n    Settings structure for window behavior.\n## Enums\u00a7\u27e863\u27e9\n\nButton\u27e864\u27e9\n    Models different kinds of buttons.\n\nButtonState\u27e865\u27e9\n    Stores button state.\n\nEvent\u27e866\u27e9\n    Models all events.\n\nFileDrag\u27e867\u27e9\n    Models dragging and dropping files.\n\nHatState\u27e868\u27e9\n    Stores controller hat state.\n\nInput\u27e869\u27e9\n    Models input events.\n\nKey\u27e870\u27e9\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\nLoop\u27e871\u27e9\n    Models loop events.\n\nMotion\u27e872\u27e9\n    Models different kinds of motion.\n\nMouseButton\u27e873\u27e9\n    Represent a mouse button.\n\nTouch\u27e874\u27e9\n    Stores the touch state.\n## Constants\u00a7\u27e875\u27e9\n\nDEFAULT_MAX_FPS\u27e876\u27e9\n    The default maximum frames per second.\n\nDEFAULT_UPS\u27e877\u27e9\n    The default updates per second.\n\nDEFAULT_UPS_RESET\u27e878\u27e9\n    The default delayed updates reset.\n## Traits\u00a7\u27e879\u27e9\n\nAdvancedWindow\u27e880\u27e9\n    Trait representing a window with the most features that are still generic.\n\nAfterRenderEvent\u27e881\u27e9\n    After rendering and buffers are swapped.\n\nBuildFromWindowSettings\u27e882\u27e9\n    Constructs a window from a `WindowSettings`\u27e862\u27e9 object.\n\nButtonEvent\u27e883\u27e9\n    Changed button state.\n\nCloseEvent\u27e884\u27e9\n    Window is closing.\n\nControllerAxisEvent\u27e885\u27e9\n    The position of a controller axis changed.\n\nCursorEvent\u27e886\u27e9\n    When window gets or loses cursor.\n\nEventLoop\u27e887\u27e9\n    Methods implemented for changing event loop settings.\n\nFocusEvent\u27e888\u27e9\n    When window gets or loses focus.\n\nGenericEvent\u27e89\u27e9\n    Implemented by all events.\n\nIdleEvent\u27e889\u27e9\n    When background tasks should be performed.\n\nMouseCursorEvent\u27e890\u27e9\n    The position of the mouse cursor.\n\nMouseRelativeEvent\u27e891\u27e9\n    The relative movement of mouse cursor.\n\nMouseScrollEvent\u27e892\u27e9\n    The scroll of the mouse wheel.\n\nOpenGLWindow\u27e893\u27e9\n    Trait for OpenGL specific operations on a window.\n\nPressEvent\u27e894\u27e9\n    The press of a button.\n\nReleaseEvent\u27e895\u27e9\n    The release of a button.\n\nRenderEvent\u27e896\u27e9\n    When the next frame should be rendered.\n\nResizeEvent\u27e897\u27e9\n    When the window is resized.\n\nTextEvent\u27e898\u27e9\n    When receiving text from user, such as typing a character.\n\nTouchEvent\u27e899\u27e9\n    When a touch is started, moved, ended or cancelled.\n\nUpdateEvent\u27e8100\u27e9\n    When the application state should be updated.\n\nWindow\u27e810\u27e9\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases\u00a7\u27e8101\u27e9\n\nProcAddress\u27e8102\u27e9\n    The type of an OpenGL function address.\n\nTimeStamp\u27e8103\u27e9\n    The type of time stamp.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/piston/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/piston/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148: Source\n\u27e84\u27e9 https://github.com/pistondevelopers/piston_window: `piston_window`\n\u27e85\u27e9 https://github.com/pistondevelopers/piston-examples: piston-examples\n\u27e86\u27e9 https://github.com/pistondevelopers/piston: Piston\u2019s README in the core repository\n\u27e87\u27e9 https://docs.rs/piston/latest/piston/#design: \u00a7\n\u27e88\u27e9 https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller: Model-View-Controller (Wikipedia)\n\u27e89\u27e9 https://docs.rs/piston/latest/piston/trait.GenericEvent.html: trait piston::GenericEvent - `GenericEvent`\n\u27e810\u27e9 https://docs.rs/piston/latest/piston/trait.Window.html: trait piston::Window - Window\n\u27e811\u27e9 https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules: \u00a7\n\u27e812\u27e9 https://docs.rs/pistoncore-input: pistoncore-input\n\u27e813\u27e9 https://docs.rs/pistoncore-window: pistoncore-window\n\u27e814\u27e9 https://docs.rs/pistoncore-event_loop: pistoncore-event_loop\n\u27e815\u27e9 https://docs.rs/piston/latest/piston/#points-vs-pixels: \u00a7\n\u27e816\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine: \u00a7\n\u27e817\u27e9 https://github.com/pistondevelopers/image: Image\n\u27e818\u27e9 https://github.com/pistondevelopers/graphics: Piston\u2019s 2D graphics\n\u27e819\u27e9 https://github.com/pistondevelopers/imageproc: Imageproc\n\u27e820\u27e9 https://github.com/pistondevelopers/dyon: Dyon\n\u27e821\u27e9 https://github.com/pistondevelopers/glutin_window: pistoncore-glutin_window\n\u27e822\u27e9 https://github.com/pistondevelopers/sdl2_window: pistoncore-sdl2_window\n\u27e823\u27e9 https://github.com/pistondevelopers/glfw_window: pistoncore-glfw_window\n\u27e824\u27e9 https://github.com/PistonDevelopers/winit_window: pistoncore-winit_window\n\u27e825\u27e9 https://crates.io/search?q=piston%20window: few other window backends as well\n\u27e826\u27e9 https://github.com/pistondevelopers/opengl_graphics: piston2d-opengl_graphics\n\u27e827\u27e9 https://github.com/pistondevelopers/gfx_graphics: piston2d-gfx_graphics\n\u27e828\u27e9 https://github.com/pistondevelopers/glium_graphics: piston2d-glium_graphics\n\u27e829\u27e9 https://github.com/PistonDevelopers/wgpu_graphics: piston2d-wgpu_graphics\n\u27e830\u27e9 https://crates.io/search?q=piston%20graphics: few other graphics backends as well\n\u27e831\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-project: \u00a7\n\u27e832\u27e9 https://github.com/pistondevelopers/: `PistonDevelopers`\n\u27e833\u27e9 https://github.com/advancedresearch/: `AdvancedResearch`\n\u27e834\u27e9 https://github.com/gfx-rs/: Gfx-rs\n\u27e835\u27e9 https://github.com/rustaudio: `RustAudio`\n\u27e836\u27e9 https://docs.rs/piston/latest/piston/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/piston/latest/piston/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/piston/latest/piston/controller/index.html: mod piston::controller - controller\n\u27e839\u27e9 https://docs.rs/piston/latest/piston/event_id/index.html: mod piston::event_id - event_id\n\u27e840\u27e9 https://docs.rs/piston/latest/piston/generic_event/index.html: mod piston::generic_event - generic_event\n\u27e841\u27e9 https://docs.rs/piston/latest/piston/keyboard/index.html: mod piston::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/piston/latest/piston/mouse/index.html: mod piston::mouse - mouse\n\u27e843\u27e9 https://docs.rs/piston/latest/piston/#structs: \u00a7\n\u27e844\u27e9 https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html: struct piston::AfterRenderArgs - AfterRenderArgs\n\u27e845\u27e9 https://docs.rs/piston/latest/piston/struct.Api.html: struct piston::Api - Api\n\u27e846\u27e9 https://docs.rs/piston/latest/piston/struct.ButtonArgs.html: struct piston::ButtonArgs - ButtonArgs\n\u27e847\u27e9 https://docs.rs/piston/latest/piston/struct.CloseArgs.html: struct piston::CloseArgs - CloseArgs\n\u27e848\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html: struct piston::ControllerAxisArgs - ControllerAxisArgs\n\u27e849\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerButton.html: struct piston::ControllerButton - ControllerButton\n\u27e850\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerHat.html: struct piston::ControllerHat - ControllerHat\n\u27e851\u27e9 https://docs.rs/piston/latest/piston/struct.EventSettings.html: struct piston::EventSettings - EventSettings\n\u27e852\u27e9 https://docs.rs/piston/latest/piston/struct.Events.html: struct piston::Events - Events\n\u27e853\u27e9 https://docs.rs/piston/latest/piston/struct.IdleArgs.html: struct piston::IdleArgs - IdleArgs\n\u27e854\u27e9 https://docs.rs/piston/latest/piston/struct.NoWindow.html: struct piston::NoWindow - NoWindow\n\u27e855\u27e9 https://docs.rs/piston/latest/piston/struct.Position.html: struct piston::Position - Position\n\u27e856\u27e9 https://docs.rs/piston/latest/piston/struct.RenderArgs.html: struct piston::RenderArgs - RenderArgs\n\u27e857\u27e9 https://docs.rs/piston/latest/piston/struct.ResizeArgs.html: struct piston::ResizeArgs - ResizeArgs\n\u27e858\u27e9 https://docs.rs/piston/latest/piston/struct.Size.html: struct piston::Size - Size\n\u27e859\u27e9 https://docs.rs/piston/latest/piston/struct.TouchArgs.html: struct piston::TouchArgs - TouchArgs\n\u27e860\u27e9 https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html: struct piston::UnsupportedGraphicsApiError - UnsupportedGraphicsApiError\n\u27e861\u27e9 https://docs.rs/piston/latest/piston/struct.UpdateArgs.html: struct piston::UpdateArgs - UpdateArgs\n\u27e862\u27e9 https://docs.rs/piston/latest/piston/struct.WindowSettings.html: struct piston::WindowSettings - WindowSettings\n\u27e863\u27e9 https://docs.rs/piston/latest/piston/#enums: \u00a7\n\u27e864\u27e9 https://docs.rs/piston/latest/piston/enum.Button.html: enum piston::Button - Button\n\u27e865\u27e9 https://docs.rs/piston/latest/piston/enum.ButtonState.html: enum piston::ButtonState - ButtonState\n\u27e866\u27e9 https://docs.rs/piston/latest/piston/enum.Event.html: enum piston::Event - Event\n\u27e867\u27e9 https://docs.rs/piston/latest/piston/enum.FileDrag.html: enum piston::FileDrag - FileDrag\n\u27e868\u27e9 https://docs.rs/piston/latest/piston/enum.HatState.html: enum piston::HatState - HatState\n\u27e869\u27e9 https://docs.rs/piston/latest/piston/enum.Input.html: enum piston::Input - Input\n\u27e870\u27e9 https://docs.rs/piston/latest/piston/enum.Key.html: enum piston::Key - Key\n\u27e871\u27e9 https://docs.rs/piston/latest/piston/enum.Loop.html: enum piston::Loop - Loop\n\u27e872\u27e9 https://docs.rs/piston/latest/piston/enum.Motion.html: enum piston::Motion - Motion\n\u27e873\u27e9 https://docs.rs/piston/latest/piston/enum.MouseButton.html: enum piston::MouseButton - MouseButton\n\u27e874\u27e9 https://docs.rs/piston/latest/piston/enum.Touch.html: enum piston::Touch - Touch\n\u27e875\u27e9 https://docs.rs/piston/latest/piston/#constants: \u00a7\n\u27e876\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html: constant piston::DEFAULT_MAX_FPS - DEFAULT_MAX_FPS\n\u27e877\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html: constant piston::DEFAULT_UPS - DEFAULT_UPS\n\u27e878\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html: constant piston::DEFAULT_UPS_RESET - DEFAULT_UPS_RESET\n\u27e879\u27e9 https://docs.rs/piston/latest/piston/#traits: \u00a7\n\u27e880\u27e9 https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html: trait piston::AdvancedWindow - AdvancedWindow\n\u27e881\u27e9 https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html: trait piston::AfterRenderEvent - AfterRenderEvent\n\u27e882\u27e9 https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html: trait piston::BuildFromWindowSettings - BuildFromWindowSettings\n\u27e883\u27e9 https://docs.rs/piston/latest/piston/trait.ButtonEvent.html: trait piston::ButtonEvent - ButtonEvent\n\u27e884\u27e9 https://docs.rs/piston/latest/piston/trait.CloseEvent.html: trait piston::CloseEvent - CloseEvent\n\u27e885\u27e9 https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html: trait piston::ControllerAxisEvent - ControllerAxisEvent\n\u27e886\u27e9 https://docs.rs/piston/latest/piston/trait.CursorEvent.html: trait piston::CursorEvent - CursorEvent\n\u27e887\u27e9 https://docs.rs/piston/latest/piston/trait.EventLoop.html: trait piston::EventLoop - EventLoop\n\u27e888\u27e9 https://docs.rs/piston/latest/piston/trait.FocusEvent.html: trait piston::FocusEvent - FocusEvent\n\u27e889\u27e9 https://docs.rs/piston/latest/piston/trait.IdleEvent.html: trait piston::IdleEvent - IdleEvent\n\u27e890\u27e9 https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html: trait piston::MouseCursorEvent - MouseCursorEvent\n\u27e891\u27e9 https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html: trait piston::MouseRelativeEvent - MouseRelativeEvent\n\u27e892\u27e9 https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html: trait piston::MouseScrollEvent - MouseScrollEvent\n\u27e893\u27e9 https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html: trait piston::OpenGLWindow - OpenGLWindow\n\u27e894\u27e9 https://docs.rs/piston/latest/piston/trait.PressEvent.html: trait piston::PressEvent - PressEvent\n\u27e895\u27e9 https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html: trait piston::ReleaseEvent - ReleaseEvent\n\u27e896\u27e9 https://docs.rs/piston/latest/piston/trait.RenderEvent.html: trait piston::RenderEvent - RenderEvent\n\u27e897\u27e9 https://docs.rs/piston/latest/piston/trait.ResizeEvent.html: trait piston::ResizeEvent - ResizeEvent\n\u27e898\u27e9 https://docs.rs/piston/latest/piston/trait.TextEvent.html: trait piston::TextEvent - TextEvent\n\u27e899\u27e9 https://docs.rs/piston/latest/piston/trait.TouchEvent.html: trait piston::TouchEvent - TouchEvent\n\u27e8100\u27e9 https://docs.rs/piston/latest/piston/trait.UpdateEvent.html: trait piston::UpdateEvent - UpdateEvent\n\u27e8101\u27e9 https://docs.rs/piston/latest/piston/#types: \u00a7\n\u27e8102\u27e9 https://docs.rs/piston/latest/piston/type.ProcAddress.html: type piston::ProcAddress - ProcAddress\n\u27e8103\u27e9 https://docs.rs/piston/latest/piston/type.TimeStamp.html: type piston::TimeStamp - TimeStamp\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 16701,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118936.4791988"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/piston",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [81 releases](https://lib.rs/crates/piston/versions) (1 stable)\n1.0.0 |  May 21, 2024   \n---|---  \n0.55.0 |  Nov 14, 2023   \n0.54.0 |  Sep 26, 2023   \n0.53.2 |  Nov 12, 2022   \n0.0.0 |  Dec 21, 2014   \n#**249** in [Game dev](https://lib.rs/game-development \"Crates for creating games.\")\nDownload history 3738/week @ 2024-12-04 8823/week @ 2024-12-11 4584/week @ 2024-12-18 996/week @ 2024-12-25 3682/week @ 2025-01-01 5508/week @ 2025-01-08 9170/week @ 2025-01-15 6167/week @ 2025-01-22 6244/week @ 2025-01-29 8757/week @ 2025-02-05 6662/week @ 2025-02-12 4046/week @ 2025-02-19 6241/week @ 2025-02-26 3595/week @ 2025-03-05 9290/week @ 2025-03-12 5666/week @ 2025-03-19\n**25,003** downloads per month Used in [**107** crates (52 directly)](https://lib.rs/crates/piston/rev)\n**MIT** license \n150KB  3K  SLoC\n# ![Piston](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/pistondevelopers/piston/ddfa259c7f43a1ea46abaa2aff80ecf514f51e3d/images/piston-logo.png)\n[![Crates.io](https://img.shields.io/crates/v/piston.svg?style=flat-square)](https://crates.io/crates/piston) [![Crates.io](https://img.shields.io/crates/l/piston.svg)](https://github.com/PistonDevelopers/piston/blob/master/LICENSE)\nA modular game engine written in Rust\n[Maintainers of Piston core libraries](https://github.com/PistonDevelopers/piston/issues/1399)\n## Dive into the world of Piston\n  * [Guide](https://github.com/pistondevelopers/piston/blob/ddfa259c7f43a1ea46abaa2aff80ecf514f51e3d/GUIDE.md)\n  * [Overview](https://github.com/PistonDevelopers/piston/wiki/Piston-overview)\n  * [Examples](https://github.com/pistondevelopers/piston-examples)\n  * [Tutorials](https://github.com/pistondevelopers/piston-tutorials)\n  * [Features](https://github.com/PistonDevelopers/piston/wiki/Features)\n  * [List of games made with Piston](https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston)\n  * [Piston online docs](https://docs.rs/piston/)\n  * [How to contribute](https://github.com/PistonDevelopers/piston/blob/master/CONTRIBUTING.md)\n  * [Online forums](https://github.com/PistonDevelopers/piston/issues/1400)\n  * [FAQ - Frequently Asked Questions](https://github.com/PistonDevelopers/piston/wiki/Frequently-Asked-Questions-\\(FAQ\\))\n\n\n#### Dependencies\n~0.5\u20138MB  ~71K SLoC\n  * [pistoncore-event_loop](https://lib.rs/crates/pistoncore-event_loop \"new\") 1.0\n  * [pistoncore-input](https://lib.rs/crates/pistoncore-input \"new\") 1.0\n  * [pistoncore-window](https://lib.rs/crates/pistoncore-window \"new\") 1.0\n\n\n#### [Other feature](https://lib.rs/crates/piston/features)\n  * [async](https://lib.rs/crates/piston/features#feature-async)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  81 releases\u27e81\u27e9 (1 stable)\n1.0.0 |  May 21, 2024   \n---|---  \n0.55.0 |  Nov 14, 2023   \n0.54.0 |  Sep 26, 2023   \n0.53.2 |  Nov 12, 2022   \n0.0.0 |  Dec 21, 2014   \n#**249** in Game dev\u27e82\u27e9\nDownload history 3738/week @ 2024-12-04 8823/week @ 2024-12-11 4584/week @ 2024-12-18 996/week @ 2024-12-25 3682/week @ 2025-01-01 5508/week @ 2025-01-08 9170/week @ 2025-01-15 6167/week @ 2025-01-22 6244/week @ 2025-01-29 8757/week @ 2025-02-05 6662/week @ 2025-02-12 4046/week @ 2025-02-19 6241/week @ 2025-02-26 3595/week @ 2025-03-05 9290/week @ 2025-03-12 5666/week @ 2025-03-19\n**25,003** downloads per month Used in **107** crates (52 directly)\u27e83\u27e9\n**MIT** license \n150KB  3K  SLoC\n# ![Piston\u27e84\u27e9]\n![Crates.io\u27e85\u27e9](https://crates.io/crates/piston) ![Crates.io\u27e86\u27e9](https://github.com/PistonDevelopers/piston/blob/master/LICENSE)\nA modular game engine written in Rust\nMaintainers of Piston core libraries\u27e87\u27e9\n## Dive into the world of Piston\n  * Guide\u27e88\u27e9\n  * Overview\u27e89\u27e9\n  * Examples\u27e810\u27e9\n  * Tutorials\u27e811\u27e9\n  * Features\u27e812\u27e9\n  * List of games made with Piston\u27e813\u27e9\n  * Piston online docs\u27e814\u27e9\n  * How to contribute\u27e815\u27e9\n  * Online forums\u27e816\u27e9\n  * FAQ - Frequently Asked Questions\u27e817\u27e9)\n\n\n#### Dependencies\n~0.5\u20138MB  ~71K SLoC\n  * pistoncore-event_loop\u27e818\u27e9 1.0\n  * pistoncore-input\u27e819\u27e9 1.0\n  * pistoncore-window\u27e820\u27e9 1.0\n\n\n#### Other feature\u27e821\u27e9\n  * async\u27e822\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/piston/versions: 81 releases\n\u27e82\u27e9 https://lib.rs/game-development: Crates for creating games. - Game dev\n\u27e83\u27e9 https://lib.rs/crates/piston/rev: **107** crates (52 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/pistondevelopers/piston/ddfa259c7f43a1ea46abaa2aff80ecf514f51e3d/images/piston-logo.png: Piston\n\u27e85\u27e9 https://img.shields.io/crates/v/piston.svg?style=flat-square: ![Crates.io\n\u27e86\u27e9 https://img.shields.io/crates/l/piston.svg: ![Crates.io\n\u27e87\u27e9 https://github.com/PistonDevelopers/piston/issues/1399: Maintainers of Piston core libraries\n\u27e88\u27e9 https://github.com/pistondevelopers/piston/blob/ddfa259c7f43a1ea46abaa2aff80ecf514f51e3d/GUIDE.md: Guide\n\u27e89\u27e9 https://github.com/PistonDevelopers/piston/wiki/Piston-overview: Overview\n\u27e810\u27e9 https://github.com/pistondevelopers/piston-examples: Examples\n\u27e811\u27e9 https://github.com/pistondevelopers/piston-tutorials: Tutorials\n\u27e812\u27e9 https://github.com/PistonDevelopers/piston/wiki/Features: Features\n\u27e813\u27e9 https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston: List of games made with Piston\n\u27e814\u27e9 https://docs.rs/piston/: Piston online docs\n\u27e815\u27e9 https://github.com/PistonDevelopers/piston/blob/master/CONTRIBUTING.md: How to contribute\n\u27e816\u27e9 https://github.com/PistonDevelopers/piston/issues/1400: Online forums\n\u27e817\u27e9 https://github.com/PistonDevelopers/piston/wiki/Frequently-Asked-Questions-\\(FAQ\\: FAQ - Frequently Asked Questions\n\u27e818\u27e9 https://lib.rs/crates/pistoncore-event_loop: new - pistoncore-event_loop\n\u27e819\u27e9 https://lib.rs/crates/pistoncore-input: new - pistoncore-input\n\u27e820\u27e9 https://lib.rs/crates/pistoncore-window: new - pistoncore-window\n\u27e821\u27e9 https://lib.rs/crates/piston/features: Other feature\n\u27e822\u27e9 https://lib.rs/crates/piston/features#feature-async: async\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 2678,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118937.7467806"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libbitflags-e7afb5616860f76a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-float@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-float-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "float",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-float-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libfloat-b82f45c0395fde26.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-graphics_api_version@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-graphics_api_version-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "graphics_api_version",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-graphics_api_version-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libgraphics_api_version-2f56138070d441f3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-viewport@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-viewport-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "viewport",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-viewport-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libviewport-8da313e329dc4fd4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-240a97a4fa0b393c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-240a97a4fa0b393c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-d92a3393127d4a15\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_x86_64_msvc-40ee72fb67443885.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.53.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_targets-41d56a13d5b30761.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.60.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.60.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.60.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Media",
                "Win32_Security",
                "Win32_System",
                "Win32_System_Threading",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_sys-70c917b3ec9d7caf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin_sleep@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin_sleep-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin_sleep",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin_sleep-1.3.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libspin_sleep-fe440ec47d9575e6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-input@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-input-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "input",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-input-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libinput-52d4cffb66c4725b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-window@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-window-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "window",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-window-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindow-2d8f24cc0885bb4a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-event_loop@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-event_loop-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_loop",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-event_loop-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libevent_loop-4053bea3d8669d21.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpe6qwgsl7/piston-1.0.0#piston@1.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piston",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libpiston-af4667ad5c0b237e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-240a97a4fa0b393c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-240a97a4fa0b393c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-float@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-float-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "float",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-float-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libfloat-b82f45c0395fde26.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libbitflags-e7afb5616860f76a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-graphics_api_version@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-graphics_api_version-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "graphics_api_version",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-graphics_api_version-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libgraphics_api_version-2f56138070d441f3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\windows_x86_64_msvc-d92a3393127d4a15\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#piston-viewport@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-viewport-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "viewport",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\piston-viewport-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libviewport-8da313e329dc4fd4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.53.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.53.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_x86_64_msvc-40ee72fb67443885.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.53.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.53.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_targets-41d56a13d5b30761.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.60.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.60.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.60.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Media",
                "Win32_Security",
                "Win32_System",
                "Win32_System_Threading",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindows_sys-70c917b3ec9d7caf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-input@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-input-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "input",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-input-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libinput-52d4cffb66c4725b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#spin_sleep@1.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin_sleep-1.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "spin_sleep",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\spin_sleep-1.3.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libspin_sleep-fe440ec47d9575e6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-window@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-window-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "window",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-window-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libwindow-2d8f24cc0885bb4a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pistoncore-event_loop@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-event_loop-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_loop",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pistoncore-event_loop-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\target\\debug\\deps\\libevent_loop-4053bea3d8669d21.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpe6qwgsl7/piston-1.0.0#piston@1.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piston",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: doc list item without indentation\n  --> src\\lib.rs:92:5\n   |\n92 | //! from both the core and the 2D graphics library,\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nnote: the lint level is defined here\n  --> src\\lib.rs:8:5\n   |\n8  |     clippy::all,\n   |     ^^^^^^^^^^^\n   = note: `#[deny(clippy::doc_lazy_continuation)]` implied by `#[deny(clippy::all)]`\nhelp: indent this line\n   |\n92 | //!   from both the core and the 2D graphics library,\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 161,
                        "byte_start": 150,
                        "column_end": 16,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 8,
                        "line_start": 8,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 5,
                            "text": "    clippy::all,"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::doc_lazy_continuation)]` implied by `#[deny(clippy::all)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3705,
                        "byte_start": 3705,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 92,
                        "line_start": 92,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! from both the core and the 2D graphics library,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "error",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 3705,
                    "byte_start": 3705,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! from both the core and the 2D graphics library,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpe6qwgsl7/piston-1.0.0#piston@1.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piston",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: doc list item without indentation\n  --> src\\lib.rs:93:5\n   |\n93 | //! only connected through the 2D graphics backends.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n93 | //!   only connected through the 2D graphics backends.\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3757,
                        "byte_start": 3757,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 93,
                        "line_start": 93,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! only connected through the 2D graphics backends."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "error",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 3757,
                    "byte_start": 3757,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! only connected through the 2D graphics backends."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpe6qwgsl7/piston-1.0.0#piston@1.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piston",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: doc list item without indentation\n  --> src\\lib.rs:95:5\n   |\n95 | //! The window backend can be used without a 2D graphics backend, and so on.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n95 | //!   The window backend can be used without a 2D graphics backend, and so on.\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3939,
                        "byte_start": 3939,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 95,
                        "line_start": 95,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! The window backend can be used without a 2D graphics backend, and so on."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "error",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 3939,
                    "byte_start": 3939,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 95,
                    "line_start": 95,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! The window backend can be used without a 2D graphics backend, and so on."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpe6qwgsl7/piston-1.0.0#piston@1.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "piston",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpe6qwgsl7\\piston-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: doc list item without indentation\n  --> src\\lib.rs:98:5\n   |\n98 | //! using a lifetime checker without garbage collection.\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n98 | //!   using a lifetime checker without garbage collection.\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4212,
                        "byte_start": 4212,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 98,
                        "line_start": 98,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! using a lifetime checker without garbage collection."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "error",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 4212,
                    "byte_start": 4212,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 98,
                    "line_start": 98,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! using a lifetime checker without garbage collection."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 46
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "piston",
          "version": "1.0.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\n[Settings](https://docs.rs/piston/latest/settings.html)\n[Help](https://docs.rs/piston/latest/help.html)\nSummary[Source](https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148)\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see [`piston_window`](https://github.com/pistondevelopers/piston_window).\nFor examples, see [piston-examples](https://github.com/pistondevelopers/piston-examples).\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n#### [\u00a7](https://docs.rs/piston/latest/piston/#design)Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see [Model-View-Controller (Wikipedia)](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller).\nThe most important traits in Piston are the following:\n  * [`GenericEvent`](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\") (allows handling of events for controllers)\n  * [Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\") (allows polling of events)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules)Link to documentation for core modules\n  * [pistoncore-input](https://docs.rs/pistoncore-input) (User input and event handling)\n  * [pistoncore-window](https://docs.rs/pistoncore-window) (Window abstraction)\n  * [pistoncore-event_loop](https://docs.rs/pistoncore-event_loop) (Event loop)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#points-vs-pixels)Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine)About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * [Image](https://github.com/pistondevelopers/image) library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * [Piston\u2019s 2D graphics](https://github.com/pistondevelopers/graphics) is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see [Imageproc](https://github.com/pistondevelopers/imageproc).\n  * [Dyon](https://github.com/pistondevelopers/dyon) is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * [pistoncore-glutin_window](https://github.com/pistondevelopers/glutin_window)\n  * [pistoncore-sdl2_window](https://github.com/pistondevelopers/sdl2_window)\n  * [pistoncore-glfw_window](https://github.com/pistondevelopers/glfw_window)\n  * [pistoncore-winit_window](https://github.com/PistonDevelopers/winit_window)\n\n\nThere are a [few other window backends as well](https://crates.io/search?q=piston%20window).\nPlus a 2D graphics backend (optional):\n  * [piston2d-opengl_graphics](https://github.com/pistondevelopers/opengl_graphics)\n  * [piston2d-gfx_graphics](https://github.com/pistondevelopers/gfx_graphics)\n  * [piston2d-glium_graphics](https://github.com/pistondevelopers/glium_graphics)\n  * [piston2d-wgpu_graphics](https://github.com/PistonDevelopers/wgpu_graphics)\n\n\nThere are a [few other graphics backends as well](https://crates.io/search?q=piston%20graphics).\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-project)About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * [`PistonDevelopers`](https://github.com/pistondevelopers/) - everything game engine related\n  * [`AdvancedResearch`](https://github.com/advancedresearch/) - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * [Gfx-rs](https://github.com/gfx-rs/) - everything 3D graphics related\n  * [`RustAudio`](https://github.com/rustaudio) - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n## Re-exports[\u00a7](https://docs.rs/piston/latest/piston/#reexports)\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules[\u00a7](https://docs.rs/piston/latest/piston/#modules)\n\n[controller](https://docs.rs/piston/latest/piston/controller/index.html \"mod piston::controller\")\n    Back-end agnostic controller events.\n\n[event_id](https://docs.rs/piston/latest/piston/event_id/index.html \"mod piston::event_id\")\n    Event identifiers.\n\n[generic_event](https://docs.rs/piston/latest/piston/generic_event/index.html \"mod piston::generic_event\")\n    Trait for generic events\n\n[keyboard](https://docs.rs/piston/latest/piston/keyboard/index.html \"mod piston::keyboard\")\n    Back-end agnostic keyboard keys.\n\n[mouse](https://docs.rs/piston/latest/piston/mouse/index.html \"mod piston::mouse\")\n    Back-end agnostic mouse buttons.\n## Structs[\u00a7](https://docs.rs/piston/latest/piston/#structs)\n\n[AfterRenderArgs](https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html \"struct piston::AfterRenderArgs\")\n    After render arguments.\n\n[Api](https://docs.rs/piston/latest/piston/struct.Api.html \"struct piston::Api\")\n    Stores graphics API version.\n\n[ButtonArgs](https://docs.rs/piston/latest/piston/struct.ButtonArgs.html \"struct piston::ButtonArgs\")\n    Button arguments.\n\n[CloseArgs](https://docs.rs/piston/latest/piston/struct.CloseArgs.html \"struct piston::CloseArgs\")\n    Close arguments.\n\n[ControllerAxisArgs](https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html \"struct piston::ControllerAxisArgs\")\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\n[ControllerButton](https://docs.rs/piston/latest/piston/struct.ControllerButton.html \"struct piston::ControllerButton\")\n    Components of a controller button event. Not guaranteed consistent across backends.\n\n[ControllerHat](https://docs.rs/piston/latest/piston/struct.ControllerHat.html \"struct piston::ControllerHat\")\n    Components of a controller hat move event (d-Pad).\n\n[EventSettings](https://docs.rs/piston/latest/piston/struct.EventSettings.html \"struct piston::EventSettings\")\n    Stores event loop settings.\n\n[Events](https://docs.rs/piston/latest/piston/struct.Events.html \"struct piston::Events\")\n    An event loop iterator\n\n[IdleArgs](https://docs.rs/piston/latest/piston/struct.IdleArgs.html \"struct piston::IdleArgs\")\n    Idle arguments, such as expected idle time in seconds.\n\n[NoWindow](https://docs.rs/piston/latest/piston/struct.NoWindow.html \"struct piston::NoWindow\")\n    A window without user interface, often used in server event loops.\n\n[Position](https://docs.rs/piston/latest/piston/struct.Position.html \"struct piston::Position\")\n    Structure to store the window position.\n\n[RenderArgs](https://docs.rs/piston/latest/piston/struct.RenderArgs.html \"struct piston::RenderArgs\")\n    Render arguments.\n\n[ResizeArgs](https://docs.rs/piston/latest/piston/struct.ResizeArgs.html \"struct piston::ResizeArgs\")\n    Resize arguments.\n\n[Size](https://docs.rs/piston/latest/piston/struct.Size.html \"struct piston::Size\")\n    Structure to store the window size.\n\n[TouchArgs](https://docs.rs/piston/latest/piston/struct.TouchArgs.html \"struct piston::TouchArgs\")\n    Touch arguments\n\n[UnsupportedGraphicsApiError](https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html \"struct piston::UnsupportedGraphicsApiError\")\n    An error for when a graphics API is unsupported.\n\n[UpdateArgs](https://docs.rs/piston/latest/piston/struct.UpdateArgs.html \"struct piston::UpdateArgs\")\n    Update arguments, such as delta time in seconds.\n\n[WindowSettings](https://docs.rs/piston/latest/piston/struct.WindowSettings.html \"struct piston::WindowSettings\")\n    Settings structure for window behavior.\n## Enums[\u00a7](https://docs.rs/piston/latest/piston/#enums)\n\n[Button](https://docs.rs/piston/latest/piston/enum.Button.html \"enum piston::Button\")\n    Models different kinds of buttons.\n\n[ButtonState](https://docs.rs/piston/latest/piston/enum.ButtonState.html \"enum piston::ButtonState\")\n    Stores button state.\n\n[Event](https://docs.rs/piston/latest/piston/enum.Event.html \"enum piston::Event\")\n    Models all events.\n\n[FileDrag](https://docs.rs/piston/latest/piston/enum.FileDrag.html \"enum piston::FileDrag\")\n    Models dragging and dropping files.\n\n[HatState](https://docs.rs/piston/latest/piston/enum.HatState.html \"enum piston::HatState\")\n    Stores controller hat state.\n\n[Input](https://docs.rs/piston/latest/piston/enum.Input.html \"enum piston::Input\")\n    Models input events.\n\n[Key](https://docs.rs/piston/latest/piston/enum.Key.html \"enum piston::Key\")\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\n[Loop](https://docs.rs/piston/latest/piston/enum.Loop.html \"enum piston::Loop\")\n    Models loop events.\n\n[Motion](https://docs.rs/piston/latest/piston/enum.Motion.html \"enum piston::Motion\")\n    Models different kinds of motion.\n\n[MouseButton](https://docs.rs/piston/latest/piston/enum.MouseButton.html \"enum piston::MouseButton\")\n    Represent a mouse button.\n\n[Touch](https://docs.rs/piston/latest/piston/enum.Touch.html \"enum piston::Touch\")\n    Stores the touch state.\n## Constants[\u00a7](https://docs.rs/piston/latest/piston/#constants)\n\n[DEFAULT_MAX_FPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html \"constant piston::DEFAULT_MAX_FPS\")\n    The default maximum frames per second.\n\n[DEFAULT_UPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html \"constant piston::DEFAULT_UPS\")\n    The default updates per second.\n\n[DEFAULT_UPS_RESET](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html \"constant piston::DEFAULT_UPS_RESET\")\n    The default delayed updates reset.\n## Traits[\u00a7](https://docs.rs/piston/latest/piston/#traits)\n\n[AdvancedWindow](https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html \"trait piston::AdvancedWindow\")\n    Trait representing a window with the most features that are still generic.\n\n[AfterRenderEvent](https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html \"trait piston::AfterRenderEvent\")\n    After rendering and buffers are swapped.\n\n[BuildFromWindowSettings](https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html \"trait piston::BuildFromWindowSettings\")\n    Constructs a window from a [`WindowSettings`](https://docs.rs/piston/latest/piston/struct.WindowSettings.html) object.\n\n[ButtonEvent](https://docs.rs/piston/latest/piston/trait.ButtonEvent.html \"trait piston::ButtonEvent\")\n    Changed button state.\n\n[CloseEvent](https://docs.rs/piston/latest/piston/trait.CloseEvent.html \"trait piston::CloseEvent\")\n    Window is closing.\n\n[ControllerAxisEvent](https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html \"trait piston::ControllerAxisEvent\")\n    The position of a controller axis changed.\n\n[CursorEvent](https://docs.rs/piston/latest/piston/trait.CursorEvent.html \"trait piston::CursorEvent\")\n    When window gets or loses cursor.\n\n[EventLoop](https://docs.rs/piston/latest/piston/trait.EventLoop.html \"trait piston::EventLoop\")\n    Methods implemented for changing event loop settings.\n\n[FocusEvent](https://docs.rs/piston/latest/piston/trait.FocusEvent.html \"trait piston::FocusEvent\")\n    When window gets or loses focus.\n\n[GenericEvent](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\")\n    Implemented by all events.\n\n[IdleEvent](https://docs.rs/piston/latest/piston/trait.IdleEvent.html \"trait piston::IdleEvent\")\n    When background tasks should be performed.\n\n[MouseCursorEvent](https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html \"trait piston::MouseCursorEvent\")\n    The position of the mouse cursor.\n\n[MouseRelativeEvent](https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html \"trait piston::MouseRelativeEvent\")\n    The relative movement of mouse cursor.\n\n[MouseScrollEvent](https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html \"trait piston::MouseScrollEvent\")\n    The scroll of the mouse wheel.\n\n[OpenGLWindow](https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html \"trait piston::OpenGLWindow\")\n    Trait for OpenGL specific operations on a window.\n\n[PressEvent](https://docs.rs/piston/latest/piston/trait.PressEvent.html \"trait piston::PressEvent\")\n    The press of a button.\n\n[ReleaseEvent](https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html \"trait piston::ReleaseEvent\")\n    The release of a button.\n\n[RenderEvent](https://docs.rs/piston/latest/piston/trait.RenderEvent.html \"trait piston::RenderEvent\")\n    When the next frame should be rendered.\n\n[ResizeEvent](https://docs.rs/piston/latest/piston/trait.ResizeEvent.html \"trait piston::ResizeEvent\")\n    When the window is resized.\n\n[TextEvent](https://docs.rs/piston/latest/piston/trait.TextEvent.html \"trait piston::TextEvent\")\n    When receiving text from user, such as typing a character.\n\n[TouchEvent](https://docs.rs/piston/latest/piston/trait.TouchEvent.html \"trait piston::TouchEvent\")\n    When a touch is started, moved, ended or cancelled.\n\n[UpdateEvent](https://docs.rs/piston/latest/piston/trait.UpdateEvent.html \"trait piston::UpdateEvent\")\n    When the application state should be updated.\n\n[Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\")\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases[\u00a7](https://docs.rs/piston/latest/piston/#types)\n\n[ProcAddress](https://docs.rs/piston/latest/piston/type.ProcAddress.html \"type piston::ProcAddress\")\n    The type of an OpenGL function address.\n\n[TimeStamp](https://docs.rs/piston/latest/piston/type.TimeStamp.html \"type piston::TimeStamp\")\n    The type of time stamp.\n",
            "markdown_with_citations": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see `piston_window`\u27e84\u27e9.\nFor examples, see piston-examples\u27e85\u27e9.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n#### \u00a7\u27e87\u27e9Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see Model-View-Controller (Wikipedia)\u27e88\u27e9.\nThe most important traits in Piston are the following:\n  * `GenericEvent`\u27e89\u27e9 (allows handling of events for controllers)\n  * Window\u27e810\u27e9 (allows polling of events)\n\n\n#### \u00a7\u27e811\u27e9Link to documentation for core modules\n  * pistoncore-input\u27e812\u27e9 (User input and event handling)\n  * pistoncore-window\u27e813\u27e9 (Window abstraction)\n  * pistoncore-event_loop\u27e814\u27e9 (Event loop)\n\n\n#### \u00a7\u27e815\u27e9Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### \u00a7\u27e816\u27e9About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * Image\u27e817\u27e9 library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * Piston\u2019s 2D graphics\u27e818\u27e9 is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see Imageproc\u27e819\u27e9.\n  * Dyon\u27e820\u27e9 is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * pistoncore-glutin_window\u27e821\u27e9\n  * pistoncore-sdl2_window\u27e822\u27e9\n  * pistoncore-glfw_window\u27e823\u27e9\n  * pistoncore-winit_window\u27e824\u27e9\n\n\nThere are a few other window backends as well\u27e825\u27e9.\nPlus a 2D graphics backend (optional):\n  * piston2d-opengl_graphics\u27e826\u27e9\n  * piston2d-gfx_graphics\u27e827\u27e9\n  * piston2d-glium_graphics\u27e828\u27e9\n  * piston2d-wgpu_graphics\u27e829\u27e9\n\n\nThere are a few other graphics backends as well\u27e830\u27e9.\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### \u00a7\u27e831\u27e9About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * `PistonDevelopers`\u27e832\u27e9 - everything game engine related\n  * `AdvancedResearch`\u27e833\u27e9 - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * Gfx-rs\u27e834\u27e9 - everything 3D graphics related\n  * `RustAudio`\u27e835\u27e9 - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ncontroller\u27e838\u27e9\n    Back-end agnostic controller events.\n\nevent_id\u27e839\u27e9\n    Event identifiers.\n\ngeneric_event\u27e840\u27e9\n    Trait for generic events\n\nkeyboard\u27e841\u27e9\n    Back-end agnostic keyboard keys.\n\nmouse\u27e842\u27e9\n    Back-end agnostic mouse buttons.\n## Structs\u00a7\u27e843\u27e9\n\nAfterRenderArgs\u27e844\u27e9\n    After render arguments.\n\nApi\u27e845\u27e9\n    Stores graphics API version.\n\nButtonArgs\u27e846\u27e9\n    Button arguments.\n\nCloseArgs\u27e847\u27e9\n    Close arguments.\n\nControllerAxisArgs\u27e848\u27e9\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\nControllerButton\u27e849\u27e9\n    Components of a controller button event. Not guaranteed consistent across backends.\n\nControllerHat\u27e850\u27e9\n    Components of a controller hat move event (d-Pad).\n\nEventSettings\u27e851\u27e9\n    Stores event loop settings.\n\nEvents\u27e852\u27e9\n    An event loop iterator\n\nIdleArgs\u27e853\u27e9\n    Idle arguments, such as expected idle time in seconds.\n\nNoWindow\u27e854\u27e9\n    A window without user interface, often used in server event loops.\n\nPosition\u27e855\u27e9\n    Structure to store the window position.\n\nRenderArgs\u27e856\u27e9\n    Render arguments.\n\nResizeArgs\u27e857\u27e9\n    Resize arguments.\n\nSize\u27e858\u27e9\n    Structure to store the window size.\n\nTouchArgs\u27e859\u27e9\n    Touch arguments\n\nUnsupportedGraphicsApiError\u27e860\u27e9\n    An error for when a graphics API is unsupported.\n\nUpdateArgs\u27e861\u27e9\n    Update arguments, such as delta time in seconds.\n\nWindowSettings\u27e862\u27e9\n    Settings structure for window behavior.\n## Enums\u00a7\u27e863\u27e9\n\nButton\u27e864\u27e9\n    Models different kinds of buttons.\n\nButtonState\u27e865\u27e9\n    Stores button state.\n\nEvent\u27e866\u27e9\n    Models all events.\n\nFileDrag\u27e867\u27e9\n    Models dragging and dropping files.\n\nHatState\u27e868\u27e9\n    Stores controller hat state.\n\nInput\u27e869\u27e9\n    Models input events.\n\nKey\u27e870\u27e9\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\nLoop\u27e871\u27e9\n    Models loop events.\n\nMotion\u27e872\u27e9\n    Models different kinds of motion.\n\nMouseButton\u27e873\u27e9\n    Represent a mouse button.\n\nTouch\u27e874\u27e9\n    Stores the touch state.\n## Constants\u00a7\u27e875\u27e9\n\nDEFAULT_MAX_FPS\u27e876\u27e9\n    The default maximum frames per second.\n\nDEFAULT_UPS\u27e877\u27e9\n    The default updates per second.\n\nDEFAULT_UPS_RESET\u27e878\u27e9\n    The default delayed updates reset.\n## Traits\u00a7\u27e879\u27e9\n\nAdvancedWindow\u27e880\u27e9\n    Trait representing a window with the most features that are still generic.\n\nAfterRenderEvent\u27e881\u27e9\n    After rendering and buffers are swapped.\n\nBuildFromWindowSettings\u27e882\u27e9\n    Constructs a window from a `WindowSettings`\u27e862\u27e9 object.\n\nButtonEvent\u27e883\u27e9\n    Changed button state.\n\nCloseEvent\u27e884\u27e9\n    Window is closing.\n\nControllerAxisEvent\u27e885\u27e9\n    The position of a controller axis changed.\n\nCursorEvent\u27e886\u27e9\n    When window gets or loses cursor.\n\nEventLoop\u27e887\u27e9\n    Methods implemented for changing event loop settings.\n\nFocusEvent\u27e888\u27e9\n    When window gets or loses focus.\n\nGenericEvent\u27e89\u27e9\n    Implemented by all events.\n\nIdleEvent\u27e889\u27e9\n    When background tasks should be performed.\n\nMouseCursorEvent\u27e890\u27e9\n    The position of the mouse cursor.\n\nMouseRelativeEvent\u27e891\u27e9\n    The relative movement of mouse cursor.\n\nMouseScrollEvent\u27e892\u27e9\n    The scroll of the mouse wheel.\n\nOpenGLWindow\u27e893\u27e9\n    Trait for OpenGL specific operations on a window.\n\nPressEvent\u27e894\u27e9\n    The press of a button.\n\nReleaseEvent\u27e895\u27e9\n    The release of a button.\n\nRenderEvent\u27e896\u27e9\n    When the next frame should be rendered.\n\nResizeEvent\u27e897\u27e9\n    When the window is resized.\n\nTextEvent\u27e898\u27e9\n    When receiving text from user, such as typing a character.\n\nTouchEvent\u27e899\u27e9\n    When a touch is started, moved, ended or cancelled.\n\nUpdateEvent\u27e8100\u27e9\n    When the application state should be updated.\n\nWindow\u27e810\u27e9\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases\u00a7\u27e8101\u27e9\n\nProcAddress\u27e8102\u27e9\n    The type of an OpenGL function address.\n\nTimeStamp\u27e8103\u27e9\n    The type of time stamp.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/piston/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/piston/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148: Source\n\u27e84\u27e9 https://github.com/pistondevelopers/piston_window: `piston_window`\n\u27e85\u27e9 https://github.com/pistondevelopers/piston-examples: piston-examples\n\u27e86\u27e9 https://github.com/pistondevelopers/piston: Piston\u2019s README in the core repository\n\u27e87\u27e9 https://docs.rs/piston/latest/piston/#design: \u00a7\n\u27e88\u27e9 https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller: Model-View-Controller (Wikipedia)\n\u27e89\u27e9 https://docs.rs/piston/latest/piston/trait.GenericEvent.html: trait piston::GenericEvent - `GenericEvent`\n\u27e810\u27e9 https://docs.rs/piston/latest/piston/trait.Window.html: trait piston::Window - Window\n\u27e811\u27e9 https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules: \u00a7\n\u27e812\u27e9 https://docs.rs/pistoncore-input: pistoncore-input\n\u27e813\u27e9 https://docs.rs/pistoncore-window: pistoncore-window\n\u27e814\u27e9 https://docs.rs/pistoncore-event_loop: pistoncore-event_loop\n\u27e815\u27e9 https://docs.rs/piston/latest/piston/#points-vs-pixels: \u00a7\n\u27e816\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine: \u00a7\n\u27e817\u27e9 https://github.com/pistondevelopers/image: Image\n\u27e818\u27e9 https://github.com/pistondevelopers/graphics: Piston\u2019s 2D graphics\n\u27e819\u27e9 https://github.com/pistondevelopers/imageproc: Imageproc\n\u27e820\u27e9 https://github.com/pistondevelopers/dyon: Dyon\n\u27e821\u27e9 https://github.com/pistondevelopers/glutin_window: pistoncore-glutin_window\n\u27e822\u27e9 https://github.com/pistondevelopers/sdl2_window: pistoncore-sdl2_window\n\u27e823\u27e9 https://github.com/pistondevelopers/glfw_window: pistoncore-glfw_window\n\u27e824\u27e9 https://github.com/PistonDevelopers/winit_window: pistoncore-winit_window\n\u27e825\u27e9 https://crates.io/search?q=piston%20window: few other window backends as well\n\u27e826\u27e9 https://github.com/pistondevelopers/opengl_graphics: piston2d-opengl_graphics\n\u27e827\u27e9 https://github.com/pistondevelopers/gfx_graphics: piston2d-gfx_graphics\n\u27e828\u27e9 https://github.com/pistondevelopers/glium_graphics: piston2d-glium_graphics\n\u27e829\u27e9 https://github.com/PistonDevelopers/wgpu_graphics: piston2d-wgpu_graphics\n\u27e830\u27e9 https://crates.io/search?q=piston%20graphics: few other graphics backends as well\n\u27e831\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-project: \u00a7\n\u27e832\u27e9 https://github.com/pistondevelopers/: `PistonDevelopers`\n\u27e833\u27e9 https://github.com/advancedresearch/: `AdvancedResearch`\n\u27e834\u27e9 https://github.com/gfx-rs/: Gfx-rs\n\u27e835\u27e9 https://github.com/rustaudio: `RustAudio`\n\u27e836\u27e9 https://docs.rs/piston/latest/piston/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/piston/latest/piston/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/piston/latest/piston/controller/index.html: mod piston::controller - controller\n\u27e839\u27e9 https://docs.rs/piston/latest/piston/event_id/index.html: mod piston::event_id - event_id\n\u27e840\u27e9 https://docs.rs/piston/latest/piston/generic_event/index.html: mod piston::generic_event - generic_event\n\u27e841\u27e9 https://docs.rs/piston/latest/piston/keyboard/index.html: mod piston::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/piston/latest/piston/mouse/index.html: mod piston::mouse - mouse\n\u27e843\u27e9 https://docs.rs/piston/latest/piston/#structs: \u00a7\n\u27e844\u27e9 https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html: struct piston::AfterRenderArgs - AfterRenderArgs\n\u27e845\u27e9 https://docs.rs/piston/latest/piston/struct.Api.html: struct piston::Api - Api\n\u27e846\u27e9 https://docs.rs/piston/latest/piston/struct.ButtonArgs.html: struct piston::ButtonArgs - ButtonArgs\n\u27e847\u27e9 https://docs.rs/piston/latest/piston/struct.CloseArgs.html: struct piston::CloseArgs - CloseArgs\n\u27e848\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html: struct piston::ControllerAxisArgs - ControllerAxisArgs\n\u27e849\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerButton.html: struct piston::ControllerButton - ControllerButton\n\u27e850\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerHat.html: struct piston::ControllerHat - ControllerHat\n\u27e851\u27e9 https://docs.rs/piston/latest/piston/struct.EventSettings.html: struct piston::EventSettings - EventSettings\n\u27e852\u27e9 https://docs.rs/piston/latest/piston/struct.Events.html: struct piston::Events - Events\n\u27e853\u27e9 https://docs.rs/piston/latest/piston/struct.IdleArgs.html: struct piston::IdleArgs - IdleArgs\n\u27e854\u27e9 https://docs.rs/piston/latest/piston/struct.NoWindow.html: struct piston::NoWindow - NoWindow\n\u27e855\u27e9 https://docs.rs/piston/latest/piston/struct.Position.html: struct piston::Position - Position\n\u27e856\u27e9 https://docs.rs/piston/latest/piston/struct.RenderArgs.html: struct piston::RenderArgs - RenderArgs\n\u27e857\u27e9 https://docs.rs/piston/latest/piston/struct.ResizeArgs.html: struct piston::ResizeArgs - ResizeArgs\n\u27e858\u27e9 https://docs.rs/piston/latest/piston/struct.Size.html: struct piston::Size - Size\n\u27e859\u27e9 https://docs.rs/piston/latest/piston/struct.TouchArgs.html: struct piston::TouchArgs - TouchArgs\n\u27e860\u27e9 https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html: struct piston::UnsupportedGraphicsApiError - UnsupportedGraphicsApiError\n\u27e861\u27e9 https://docs.rs/piston/latest/piston/struct.UpdateArgs.html: struct piston::UpdateArgs - UpdateArgs\n\u27e862\u27e9 https://docs.rs/piston/latest/piston/struct.WindowSettings.html: struct piston::WindowSettings - WindowSettings\n\u27e863\u27e9 https://docs.rs/piston/latest/piston/#enums: \u00a7\n\u27e864\u27e9 https://docs.rs/piston/latest/piston/enum.Button.html: enum piston::Button - Button\n\u27e865\u27e9 https://docs.rs/piston/latest/piston/enum.ButtonState.html: enum piston::ButtonState - ButtonState\n\u27e866\u27e9 https://docs.rs/piston/latest/piston/enum.Event.html: enum piston::Event - Event\n\u27e867\u27e9 https://docs.rs/piston/latest/piston/enum.FileDrag.html: enum piston::FileDrag - FileDrag\n\u27e868\u27e9 https://docs.rs/piston/latest/piston/enum.HatState.html: enum piston::HatState - HatState\n\u27e869\u27e9 https://docs.rs/piston/latest/piston/enum.Input.html: enum piston::Input - Input\n\u27e870\u27e9 https://docs.rs/piston/latest/piston/enum.Key.html: enum piston::Key - Key\n\u27e871\u27e9 https://docs.rs/piston/latest/piston/enum.Loop.html: enum piston::Loop - Loop\n\u27e872\u27e9 https://docs.rs/piston/latest/piston/enum.Motion.html: enum piston::Motion - Motion\n\u27e873\u27e9 https://docs.rs/piston/latest/piston/enum.MouseButton.html: enum piston::MouseButton - MouseButton\n\u27e874\u27e9 https://docs.rs/piston/latest/piston/enum.Touch.html: enum piston::Touch - Touch\n\u27e875\u27e9 https://docs.rs/piston/latest/piston/#constants: \u00a7\n\u27e876\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html: constant piston::DEFAULT_MAX_FPS - DEFAULT_MAX_FPS\n\u27e877\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html: constant piston::DEFAULT_UPS - DEFAULT_UPS\n\u27e878\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html: constant piston::DEFAULT_UPS_RESET - DEFAULT_UPS_RESET\n\u27e879\u27e9 https://docs.rs/piston/latest/piston/#traits: \u00a7\n\u27e880\u27e9 https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html: trait piston::AdvancedWindow - AdvancedWindow\n\u27e881\u27e9 https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html: trait piston::AfterRenderEvent - AfterRenderEvent\n\u27e882\u27e9 https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html: trait piston::BuildFromWindowSettings - BuildFromWindowSettings\n\u27e883\u27e9 https://docs.rs/piston/latest/piston/trait.ButtonEvent.html: trait piston::ButtonEvent - ButtonEvent\n\u27e884\u27e9 https://docs.rs/piston/latest/piston/trait.CloseEvent.html: trait piston::CloseEvent - CloseEvent\n\u27e885\u27e9 https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html: trait piston::ControllerAxisEvent - ControllerAxisEvent\n\u27e886\u27e9 https://docs.rs/piston/latest/piston/trait.CursorEvent.html: trait piston::CursorEvent - CursorEvent\n\u27e887\u27e9 https://docs.rs/piston/latest/piston/trait.EventLoop.html: trait piston::EventLoop - EventLoop\n\u27e888\u27e9 https://docs.rs/piston/latest/piston/trait.FocusEvent.html: trait piston::FocusEvent - FocusEvent\n\u27e889\u27e9 https://docs.rs/piston/latest/piston/trait.IdleEvent.html: trait piston::IdleEvent - IdleEvent\n\u27e890\u27e9 https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html: trait piston::MouseCursorEvent - MouseCursorEvent\n\u27e891\u27e9 https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html: trait piston::MouseRelativeEvent - MouseRelativeEvent\n\u27e892\u27e9 https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html: trait piston::MouseScrollEvent - MouseScrollEvent\n\u27e893\u27e9 https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html: trait piston::OpenGLWindow - OpenGLWindow\n\u27e894\u27e9 https://docs.rs/piston/latest/piston/trait.PressEvent.html: trait piston::PressEvent - PressEvent\n\u27e895\u27e9 https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html: trait piston::ReleaseEvent - ReleaseEvent\n\u27e896\u27e9 https://docs.rs/piston/latest/piston/trait.RenderEvent.html: trait piston::RenderEvent - RenderEvent\n\u27e897\u27e9 https://docs.rs/piston/latest/piston/trait.ResizeEvent.html: trait piston::ResizeEvent - ResizeEvent\n\u27e898\u27e9 https://docs.rs/piston/latest/piston/trait.TextEvent.html: trait piston::TextEvent - TextEvent\n\u27e899\u27e9 https://docs.rs/piston/latest/piston/trait.TouchEvent.html: trait piston::TouchEvent - TouchEvent\n\u27e8100\u27e9 https://docs.rs/piston/latest/piston/trait.UpdateEvent.html: trait piston::UpdateEvent - UpdateEvent\n\u27e8101\u27e9 https://docs.rs/piston/latest/piston/#types: \u00a7\n\u27e8102\u27e9 https://docs.rs/piston/latest/piston/type.ProcAddress.html: type piston::ProcAddress - ProcAddress\n\u27e8103\u27e9 https://docs.rs/piston/latest/piston/type.TimeStamp.html: type piston::TimeStamp - TimeStamp\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "piston",
          "version": "1.0.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\n[Settings](https://docs.rs/piston/latest/settings.html)\n[Help](https://docs.rs/piston/latest/help.html)\nSummary[Source](https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148)\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see [`piston_window`](https://github.com/pistondevelopers/piston_window).\nFor examples, see [piston-examples](https://github.com/pistondevelopers/piston-examples).\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n#### [\u00a7](https://docs.rs/piston/latest/piston/#design)Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see [Model-View-Controller (Wikipedia)](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller).\nThe most important traits in Piston are the following:\n  * [`GenericEvent`](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\") (allows handling of events for controllers)\n  * [Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\") (allows polling of events)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules)Link to documentation for core modules\n  * [pistoncore-input](https://docs.rs/pistoncore-input) (User input and event handling)\n  * [pistoncore-window](https://docs.rs/pistoncore-window) (Window abstraction)\n  * [pistoncore-event_loop](https://docs.rs/pistoncore-event_loop) (Event loop)\n\n\n#### [\u00a7](https://docs.rs/piston/latest/piston/#points-vs-pixels)Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine)About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * [Image](https://github.com/pistondevelopers/image) library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * [Piston\u2019s 2D graphics](https://github.com/pistondevelopers/graphics) is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see [Imageproc](https://github.com/pistondevelopers/imageproc).\n  * [Dyon](https://github.com/pistondevelopers/dyon) is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * [pistoncore-glutin_window](https://github.com/pistondevelopers/glutin_window)\n  * [pistoncore-sdl2_window](https://github.com/pistondevelopers/sdl2_window)\n  * [pistoncore-glfw_window](https://github.com/pistondevelopers/glfw_window)\n  * [pistoncore-winit_window](https://github.com/PistonDevelopers/winit_window)\n\n\nThere are a [few other window backends as well](https://crates.io/search?q=piston%20window).\nPlus a 2D graphics backend (optional):\n  * [piston2d-opengl_graphics](https://github.com/pistondevelopers/opengl_graphics)\n  * [piston2d-gfx_graphics](https://github.com/pistondevelopers/gfx_graphics)\n  * [piston2d-glium_graphics](https://github.com/pistondevelopers/glium_graphics)\n  * [piston2d-wgpu_graphics](https://github.com/PistonDevelopers/wgpu_graphics)\n\n\nThere are a [few other graphics backends as well](https://crates.io/search?q=piston%20graphics).\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### [\u00a7](https://docs.rs/piston/latest/piston/#about-piston-as-a-project)About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * [`PistonDevelopers`](https://github.com/pistondevelopers/) - everything game engine related\n  * [`AdvancedResearch`](https://github.com/advancedresearch/) - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * [Gfx-rs](https://github.com/gfx-rs/) - everything 3D graphics related\n  * [`RustAudio`](https://github.com/rustaudio) - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see [Piston\u2019s README in the core repository](https://github.com/pistondevelopers/piston).\n## Re-exports[\u00a7](https://docs.rs/piston/latest/piston/#reexports)\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules[\u00a7](https://docs.rs/piston/latest/piston/#modules)\n\n[controller](https://docs.rs/piston/latest/piston/controller/index.html \"mod piston::controller\")\n    Back-end agnostic controller events.\n\n[event_id](https://docs.rs/piston/latest/piston/event_id/index.html \"mod piston::event_id\")\n    Event identifiers.\n\n[generic_event](https://docs.rs/piston/latest/piston/generic_event/index.html \"mod piston::generic_event\")\n    Trait for generic events\n\n[keyboard](https://docs.rs/piston/latest/piston/keyboard/index.html \"mod piston::keyboard\")\n    Back-end agnostic keyboard keys.\n\n[mouse](https://docs.rs/piston/latest/piston/mouse/index.html \"mod piston::mouse\")\n    Back-end agnostic mouse buttons.\n## Structs[\u00a7](https://docs.rs/piston/latest/piston/#structs)\n\n[AfterRenderArgs](https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html \"struct piston::AfterRenderArgs\")\n    After render arguments.\n\n[Api](https://docs.rs/piston/latest/piston/struct.Api.html \"struct piston::Api\")\n    Stores graphics API version.\n\n[ButtonArgs](https://docs.rs/piston/latest/piston/struct.ButtonArgs.html \"struct piston::ButtonArgs\")\n    Button arguments.\n\n[CloseArgs](https://docs.rs/piston/latest/piston/struct.CloseArgs.html \"struct piston::CloseArgs\")\n    Close arguments.\n\n[ControllerAxisArgs](https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html \"struct piston::ControllerAxisArgs\")\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\n[ControllerButton](https://docs.rs/piston/latest/piston/struct.ControllerButton.html \"struct piston::ControllerButton\")\n    Components of a controller button event. Not guaranteed consistent across backends.\n\n[ControllerHat](https://docs.rs/piston/latest/piston/struct.ControllerHat.html \"struct piston::ControllerHat\")\n    Components of a controller hat move event (d-Pad).\n\n[EventSettings](https://docs.rs/piston/latest/piston/struct.EventSettings.html \"struct piston::EventSettings\")\n    Stores event loop settings.\n\n[Events](https://docs.rs/piston/latest/piston/struct.Events.html \"struct piston::Events\")\n    An event loop iterator\n\n[IdleArgs](https://docs.rs/piston/latest/piston/struct.IdleArgs.html \"struct piston::IdleArgs\")\n    Idle arguments, such as expected idle time in seconds.\n\n[NoWindow](https://docs.rs/piston/latest/piston/struct.NoWindow.html \"struct piston::NoWindow\")\n    A window without user interface, often used in server event loops.\n\n[Position](https://docs.rs/piston/latest/piston/struct.Position.html \"struct piston::Position\")\n    Structure to store the window position.\n\n[RenderArgs](https://docs.rs/piston/latest/piston/struct.RenderArgs.html \"struct piston::RenderArgs\")\n    Render arguments.\n\n[ResizeArgs](https://docs.rs/piston/latest/piston/struct.ResizeArgs.html \"struct piston::ResizeArgs\")\n    Resize arguments.\n\n[Size](https://docs.rs/piston/latest/piston/struct.Size.html \"struct piston::Size\")\n    Structure to store the window size.\n\n[TouchArgs](https://docs.rs/piston/latest/piston/struct.TouchArgs.html \"struct piston::TouchArgs\")\n    Touch arguments\n\n[UnsupportedGraphicsApiError](https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html \"struct piston::UnsupportedGraphicsApiError\")\n    An error for when a graphics API is unsupported.\n\n[UpdateArgs](https://docs.rs/piston/latest/piston/struct.UpdateArgs.html \"struct piston::UpdateArgs\")\n    Update arguments, such as delta time in seconds.\n\n[WindowSettings](https://docs.rs/piston/latest/piston/struct.WindowSettings.html \"struct piston::WindowSettings\")\n    Settings structure for window behavior.\n## Enums[\u00a7](https://docs.rs/piston/latest/piston/#enums)\n\n[Button](https://docs.rs/piston/latest/piston/enum.Button.html \"enum piston::Button\")\n    Models different kinds of buttons.\n\n[ButtonState](https://docs.rs/piston/latest/piston/enum.ButtonState.html \"enum piston::ButtonState\")\n    Stores button state.\n\n[Event](https://docs.rs/piston/latest/piston/enum.Event.html \"enum piston::Event\")\n    Models all events.\n\n[FileDrag](https://docs.rs/piston/latest/piston/enum.FileDrag.html \"enum piston::FileDrag\")\n    Models dragging and dropping files.\n\n[HatState](https://docs.rs/piston/latest/piston/enum.HatState.html \"enum piston::HatState\")\n    Stores controller hat state.\n\n[Input](https://docs.rs/piston/latest/piston/enum.Input.html \"enum piston::Input\")\n    Models input events.\n\n[Key](https://docs.rs/piston/latest/piston/enum.Key.html \"enum piston::Key\")\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\n[Loop](https://docs.rs/piston/latest/piston/enum.Loop.html \"enum piston::Loop\")\n    Models loop events.\n\n[Motion](https://docs.rs/piston/latest/piston/enum.Motion.html \"enum piston::Motion\")\n    Models different kinds of motion.\n\n[MouseButton](https://docs.rs/piston/latest/piston/enum.MouseButton.html \"enum piston::MouseButton\")\n    Represent a mouse button.\n\n[Touch](https://docs.rs/piston/latest/piston/enum.Touch.html \"enum piston::Touch\")\n    Stores the touch state.\n## Constants[\u00a7](https://docs.rs/piston/latest/piston/#constants)\n\n[DEFAULT_MAX_FPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html \"constant piston::DEFAULT_MAX_FPS\")\n    The default maximum frames per second.\n\n[DEFAULT_UPS](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html \"constant piston::DEFAULT_UPS\")\n    The default updates per second.\n\n[DEFAULT_UPS_RESET](https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html \"constant piston::DEFAULT_UPS_RESET\")\n    The default delayed updates reset.\n## Traits[\u00a7](https://docs.rs/piston/latest/piston/#traits)\n\n[AdvancedWindow](https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html \"trait piston::AdvancedWindow\")\n    Trait representing a window with the most features that are still generic.\n\n[AfterRenderEvent](https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html \"trait piston::AfterRenderEvent\")\n    After rendering and buffers are swapped.\n\n[BuildFromWindowSettings](https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html \"trait piston::BuildFromWindowSettings\")\n    Constructs a window from a [`WindowSettings`](https://docs.rs/piston/latest/piston/struct.WindowSettings.html) object.\n\n[ButtonEvent](https://docs.rs/piston/latest/piston/trait.ButtonEvent.html \"trait piston::ButtonEvent\")\n    Changed button state.\n\n[CloseEvent](https://docs.rs/piston/latest/piston/trait.CloseEvent.html \"trait piston::CloseEvent\")\n    Window is closing.\n\n[ControllerAxisEvent](https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html \"trait piston::ControllerAxisEvent\")\n    The position of a controller axis changed.\n\n[CursorEvent](https://docs.rs/piston/latest/piston/trait.CursorEvent.html \"trait piston::CursorEvent\")\n    When window gets or loses cursor.\n\n[EventLoop](https://docs.rs/piston/latest/piston/trait.EventLoop.html \"trait piston::EventLoop\")\n    Methods implemented for changing event loop settings.\n\n[FocusEvent](https://docs.rs/piston/latest/piston/trait.FocusEvent.html \"trait piston::FocusEvent\")\n    When window gets or loses focus.\n\n[GenericEvent](https://docs.rs/piston/latest/piston/trait.GenericEvent.html \"trait piston::GenericEvent\")\n    Implemented by all events.\n\n[IdleEvent](https://docs.rs/piston/latest/piston/trait.IdleEvent.html \"trait piston::IdleEvent\")\n    When background tasks should be performed.\n\n[MouseCursorEvent](https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html \"trait piston::MouseCursorEvent\")\n    The position of the mouse cursor.\n\n[MouseRelativeEvent](https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html \"trait piston::MouseRelativeEvent\")\n    The relative movement of mouse cursor.\n\n[MouseScrollEvent](https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html \"trait piston::MouseScrollEvent\")\n    The scroll of the mouse wheel.\n\n[OpenGLWindow](https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html \"trait piston::OpenGLWindow\")\n    Trait for OpenGL specific operations on a window.\n\n[PressEvent](https://docs.rs/piston/latest/piston/trait.PressEvent.html \"trait piston::PressEvent\")\n    The press of a button.\n\n[ReleaseEvent](https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html \"trait piston::ReleaseEvent\")\n    The release of a button.\n\n[RenderEvent](https://docs.rs/piston/latest/piston/trait.RenderEvent.html \"trait piston::RenderEvent\")\n    When the next frame should be rendered.\n\n[ResizeEvent](https://docs.rs/piston/latest/piston/trait.ResizeEvent.html \"trait piston::ResizeEvent\")\n    When the window is resized.\n\n[TextEvent](https://docs.rs/piston/latest/piston/trait.TextEvent.html \"trait piston::TextEvent\")\n    When receiving text from user, such as typing a character.\n\n[TouchEvent](https://docs.rs/piston/latest/piston/trait.TouchEvent.html \"trait piston::TouchEvent\")\n    When a touch is started, moved, ended or cancelled.\n\n[UpdateEvent](https://docs.rs/piston/latest/piston/trait.UpdateEvent.html \"trait piston::UpdateEvent\")\n    When the application state should be updated.\n\n[Window](https://docs.rs/piston/latest/piston/trait.Window.html \"trait piston::Window\")\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases[\u00a7](https://docs.rs/piston/latest/piston/#types)\n\n[ProcAddress](https://docs.rs/piston/latest/piston/type.ProcAddress.html \"type piston::ProcAddress\")\n    The type of an OpenGL function address.\n\n[TimeStamp](https://docs.rs/piston/latest/piston/type.TimeStamp.html \"type piston::TimeStamp\")\n    The type of time stamp.\n",
            "markdown_with_citations": "[](https://docs.rs/piston/latest/piston/all.html \"show sidebar\")\n# Crate pistonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA modular game engine written in Rust.\nThis is the core library of the Piston Game engine. The `Piston` core library reexports the core modules.\nIf you are looking for a convenient window wrapper, see `piston_window`\u27e84\u27e9.\nFor examples, see piston-examples\u27e85\u27e9.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n#### \u00a7\u27e87\u27e9Design\nThe Piston core is a thin and modular abstraction for user input, window and event loop. This functionality is separated into 3 core modules.\nThe core modules are intended to be used directly by generic libraries. By depending directly on core modules, it is easier to maintain the ecosystem.\nThis library is intended to be used in application code. When you write application code, it is common to separate reusable code, which depends on various abstractions, from platform specific code. The reusable code that you write for applications might use the Piston core.\nThe default programming pattern in Piston is Model-View-Controller:\n  * A controller handles events and manipulates a model\n  * A view renders a model on the screen\n\n\nFor more information about this pattern, see Model-View-Controller (Wikipedia)\u27e88\u27e9.\nThe most important traits in Piston are the following:\n  * `GenericEvent`\u27e89\u27e9 (allows handling of events for controllers)\n  * Window\u27e810\u27e9 (allows polling of events)\n\n\n#### \u00a7\u27e811\u27e9Link to documentation for core modules\n  * pistoncore-input\u27e812\u27e9 (User input and event handling)\n  * pistoncore-window\u27e813\u27e9 (Window abstraction)\n  * pistoncore-event_loop\u27e814\u27e9 (Event loop)\n\n\n#### \u00a7\u27e815\u27e9Points vs Pixels\nSince some computer screens have higher resolution than others, it is convenient to use two kinds of coordinate systems:\n  * A pixel is a single square on the screen\n  * A point is a unit used by window events and 2D graphics\n\n\nFor example, the mouse cursor position events are measured in points.\nIt is common to use points for 2D graphics to match window coordinates.\nUnintentional blurring, e.g. of rendered text, might be a side effect incorrect sampling.\n#### \u00a7\u27e816\u27e9About Piston as a Game Engine\nPiston is a modular game engine with a minimal core abstraction. The core connects input events, window and event loop.\nPiston is designed for optimal modularity, making it optional to even use the core modules in many cases. The goal is to have as little abstraction as possible, while making larger libraries as independent as possible. The motivation is to encourage diversity and experimentation with various abstractions, without getting tied up to a fixed set of platforms, abstractions or vendors. You can combine Piston with any other library in Rust\u2019s ecosystem. This design has worked very well so far.\nFor example (a few libraries, there are many more):\n  * Image\u27e817\u27e9 library is standalone from both the core and the 2D graphics library, only connected through the 2D graphics backends.\n  * Piston\u2019s 2D graphics\u27e818\u27e9 is optional and can be used without a window backend. The window backend can be used without a 2D graphics backend, and so on.\n  * For image processing, see Imageproc\u27e819\u27e9.\n  * Dyon\u27e820\u27e9 is a Rusty dynamically typed scripting language, using a lifetime checker without garbage collection.\n\n\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\nWhen writing a library, please depend directly on the core module needed. This makes it less likely that the library will break.\nWhen writing an application, it is acceptable to use the `Piston` core. To use it you usually need a window backend:\n  * pistoncore-glutin_window\u27e821\u27e9\n  * pistoncore-sdl2_window\u27e822\u27e9\n  * pistoncore-glfw_window\u27e823\u27e9\n  * pistoncore-winit_window\u27e824\u27e9\n\n\nThere are a few other window backends as well\u27e825\u27e9.\nPlus a 2D graphics backend (optional):\n  * piston2d-opengl_graphics\u27e826\u27e9\n  * piston2d-gfx_graphics\u27e827\u27e9\n  * piston2d-glium_graphics\u27e828\u27e9\n  * piston2d-wgpu_graphics\u27e829\u27e9\n\n\nThere are a few other graphics backends as well\u27e830\u27e9.\nYou will find examples of how to get started in each 2D graphics backend repository.\n#### \u00a7\u27e831\u27e9About Piston as a Project\nThe Piston project is a huge collaboration across many projects, mainly focused on maintenance of libraries and research. Since this has been going on since 2014, there is too much out there to summarize here, but roughly the project is organized into two open source organizations:\n  * `PistonDevelopers`\u27e832\u27e9 - everything game engine related\n  * `AdvancedResearch`\u27e833\u27e9 - everything advanced math related\n\n\nIn addition, we collaborate across organizations with other projects, mainly:\n  * Gfx-rs\u27e834\u27e9 - everything 3D graphics related\n  * `RustAudio`\u27e835\u27e9 - everything audio related\n\n\nIn addition, there are many other projects and organizations.\nFor more information and an overview, see Piston\u2019s README in the core repository\u27e86\u27e9.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use event_loop[](https://docs.rs/pistoncore-event_loop/1.0.0/x86_64-unknown-linux-gnu/event_loop/index.html \"mod event_loop\");`\n\n\n`pub use input[](https://docs.rs/pistoncore-input/1.0.1/x86_64-unknown-linux-gnu/input/index.html \"mod input\");`\n\n\n`pub use window[](https://docs.rs/pistoncore-window/1.0.0/x86_64-unknown-linux-gnu/window/index.html \"mod window\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ncontroller\u27e838\u27e9\n    Back-end agnostic controller events.\n\nevent_id\u27e839\u27e9\n    Event identifiers.\n\ngeneric_event\u27e840\u27e9\n    Trait for generic events\n\nkeyboard\u27e841\u27e9\n    Back-end agnostic keyboard keys.\n\nmouse\u27e842\u27e9\n    Back-end agnostic mouse buttons.\n## Structs\u00a7\u27e843\u27e9\n\nAfterRenderArgs\u27e844\u27e9\n    After render arguments.\n\nApi\u27e845\u27e9\n    Stores graphics API version.\n\nButtonArgs\u27e846\u27e9\n    Button arguments.\n\nCloseArgs\u27e847\u27e9\n    Close arguments.\n\nControllerAxisArgs\u27e848\u27e9\n    Components of a controller axis move event. Not guaranteed consistent across backends.\n\nControllerButton\u27e849\u27e9\n    Components of a controller button event. Not guaranteed consistent across backends.\n\nControllerHat\u27e850\u27e9\n    Components of a controller hat move event (d-Pad).\n\nEventSettings\u27e851\u27e9\n    Stores event loop settings.\n\nEvents\u27e852\u27e9\n    An event loop iterator\n\nIdleArgs\u27e853\u27e9\n    Idle arguments, such as expected idle time in seconds.\n\nNoWindow\u27e854\u27e9\n    A window without user interface, often used in server event loops.\n\nPosition\u27e855\u27e9\n    Structure to store the window position.\n\nRenderArgs\u27e856\u27e9\n    Render arguments.\n\nResizeArgs\u27e857\u27e9\n    Resize arguments.\n\nSize\u27e858\u27e9\n    Structure to store the window size.\n\nTouchArgs\u27e859\u27e9\n    Touch arguments\n\nUnsupportedGraphicsApiError\u27e860\u27e9\n    An error for when a graphics API is unsupported.\n\nUpdateArgs\u27e861\u27e9\n    Update arguments, such as delta time in seconds.\n\nWindowSettings\u27e862\u27e9\n    Settings structure for window behavior.\n## Enums\u00a7\u27e863\u27e9\n\nButton\u27e864\u27e9\n    Models different kinds of buttons.\n\nButtonState\u27e865\u27e9\n    Stores button state.\n\nEvent\u27e866\u27e9\n    Models all events.\n\nFileDrag\u27e867\u27e9\n    Models dragging and dropping files.\n\nHatState\u27e868\u27e9\n    Stores controller hat state.\n\nInput\u27e869\u27e9\n    Models input events.\n\nKey\u27e870\u27e9\n    Represent a keyboard key. Keycodes follows SDL <http://wiki.libsdl.org/SDLKeycodeLookup>\n\nLoop\u27e871\u27e9\n    Models loop events.\n\nMotion\u27e872\u27e9\n    Models different kinds of motion.\n\nMouseButton\u27e873\u27e9\n    Represent a mouse button.\n\nTouch\u27e874\u27e9\n    Stores the touch state.\n## Constants\u00a7\u27e875\u27e9\n\nDEFAULT_MAX_FPS\u27e876\u27e9\n    The default maximum frames per second.\n\nDEFAULT_UPS\u27e877\u27e9\n    The default updates per second.\n\nDEFAULT_UPS_RESET\u27e878\u27e9\n    The default delayed updates reset.\n## Traits\u00a7\u27e879\u27e9\n\nAdvancedWindow\u27e880\u27e9\n    Trait representing a window with the most features that are still generic.\n\nAfterRenderEvent\u27e881\u27e9\n    After rendering and buffers are swapped.\n\nBuildFromWindowSettings\u27e882\u27e9\n    Constructs a window from a `WindowSettings`\u27e862\u27e9 object.\n\nButtonEvent\u27e883\u27e9\n    Changed button state.\n\nCloseEvent\u27e884\u27e9\n    Window is closing.\n\nControllerAxisEvent\u27e885\u27e9\n    The position of a controller axis changed.\n\nCursorEvent\u27e886\u27e9\n    When window gets or loses cursor.\n\nEventLoop\u27e887\u27e9\n    Methods implemented for changing event loop settings.\n\nFocusEvent\u27e888\u27e9\n    When window gets or loses focus.\n\nGenericEvent\u27e89\u27e9\n    Implemented by all events.\n\nIdleEvent\u27e889\u27e9\n    When background tasks should be performed.\n\nMouseCursorEvent\u27e890\u27e9\n    The position of the mouse cursor.\n\nMouseRelativeEvent\u27e891\u27e9\n    The relative movement of mouse cursor.\n\nMouseScrollEvent\u27e892\u27e9\n    The scroll of the mouse wheel.\n\nOpenGLWindow\u27e893\u27e9\n    Trait for OpenGL specific operations on a window.\n\nPressEvent\u27e894\u27e9\n    The press of a button.\n\nReleaseEvent\u27e895\u27e9\n    The release of a button.\n\nRenderEvent\u27e896\u27e9\n    When the next frame should be rendered.\n\nResizeEvent\u27e897\u27e9\n    When the window is resized.\n\nTextEvent\u27e898\u27e9\n    When receiving text from user, such as typing a character.\n\nTouchEvent\u27e899\u27e9\n    When a touch is started, moved, ended or cancelled.\n\nUpdateEvent\u27e8100\u27e9\n    When the application state should be updated.\n\nWindow\u27e810\u27e9\n    Trait representing the minimum requirements for defining a window.\n## Type Aliases\u00a7\u27e8101\u27e9\n\nProcAddress\u27e8102\u27e9\n    The type of an OpenGL function address.\n\nTimeStamp\u27e8103\u27e9\n    The type of time stamp.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/piston/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/piston/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/piston/latest/src/piston/lib.rs.html#1-148: Source\n\u27e84\u27e9 https://github.com/pistondevelopers/piston_window: `piston_window`\n\u27e85\u27e9 https://github.com/pistondevelopers/piston-examples: piston-examples\n\u27e86\u27e9 https://github.com/pistondevelopers/piston: Piston\u2019s README in the core repository\n\u27e87\u27e9 https://docs.rs/piston/latest/piston/#design: \u00a7\n\u27e88\u27e9 https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller: Model-View-Controller (Wikipedia)\n\u27e89\u27e9 https://docs.rs/piston/latest/piston/trait.GenericEvent.html: trait piston::GenericEvent - `GenericEvent`\n\u27e810\u27e9 https://docs.rs/piston/latest/piston/trait.Window.html: trait piston::Window - Window\n\u27e811\u27e9 https://docs.rs/piston/latest/piston/#link-to-documentation-for-core-modules: \u00a7\n\u27e812\u27e9 https://docs.rs/pistoncore-input: pistoncore-input\n\u27e813\u27e9 https://docs.rs/pistoncore-window: pistoncore-window\n\u27e814\u27e9 https://docs.rs/pistoncore-event_loop: pistoncore-event_loop\n\u27e815\u27e9 https://docs.rs/piston/latest/piston/#points-vs-pixels: \u00a7\n\u27e816\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-game-engine: \u00a7\n\u27e817\u27e9 https://github.com/pistondevelopers/image: Image\n\u27e818\u27e9 https://github.com/pistondevelopers/graphics: Piston\u2019s 2D graphics\n\u27e819\u27e9 https://github.com/pistondevelopers/imageproc: Imageproc\n\u27e820\u27e9 https://github.com/pistondevelopers/dyon: Dyon\n\u27e821\u27e9 https://github.com/pistondevelopers/glutin_window: pistoncore-glutin_window\n\u27e822\u27e9 https://github.com/pistondevelopers/sdl2_window: pistoncore-sdl2_window\n\u27e823\u27e9 https://github.com/pistondevelopers/glfw_window: pistoncore-glfw_window\n\u27e824\u27e9 https://github.com/PistonDevelopers/winit_window: pistoncore-winit_window\n\u27e825\u27e9 https://crates.io/search?q=piston%20window: few other window backends as well\n\u27e826\u27e9 https://github.com/pistondevelopers/opengl_graphics: piston2d-opengl_graphics\n\u27e827\u27e9 https://github.com/pistondevelopers/gfx_graphics: piston2d-gfx_graphics\n\u27e828\u27e9 https://github.com/pistondevelopers/glium_graphics: piston2d-glium_graphics\n\u27e829\u27e9 https://github.com/PistonDevelopers/wgpu_graphics: piston2d-wgpu_graphics\n\u27e830\u27e9 https://crates.io/search?q=piston%20graphics: few other graphics backends as well\n\u27e831\u27e9 https://docs.rs/piston/latest/piston/#about-piston-as-a-project: \u00a7\n\u27e832\u27e9 https://github.com/pistondevelopers/: `PistonDevelopers`\n\u27e833\u27e9 https://github.com/advancedresearch/: `AdvancedResearch`\n\u27e834\u27e9 https://github.com/gfx-rs/: Gfx-rs\n\u27e835\u27e9 https://github.com/rustaudio: `RustAudio`\n\u27e836\u27e9 https://docs.rs/piston/latest/piston/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/piston/latest/piston/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/piston/latest/piston/controller/index.html: mod piston::controller - controller\n\u27e839\u27e9 https://docs.rs/piston/latest/piston/event_id/index.html: mod piston::event_id - event_id\n\u27e840\u27e9 https://docs.rs/piston/latest/piston/generic_event/index.html: mod piston::generic_event - generic_event\n\u27e841\u27e9 https://docs.rs/piston/latest/piston/keyboard/index.html: mod piston::keyboard - keyboard\n\u27e842\u27e9 https://docs.rs/piston/latest/piston/mouse/index.html: mod piston::mouse - mouse\n\u27e843\u27e9 https://docs.rs/piston/latest/piston/#structs: \u00a7\n\u27e844\u27e9 https://docs.rs/piston/latest/piston/struct.AfterRenderArgs.html: struct piston::AfterRenderArgs - AfterRenderArgs\n\u27e845\u27e9 https://docs.rs/piston/latest/piston/struct.Api.html: struct piston::Api - Api\n\u27e846\u27e9 https://docs.rs/piston/latest/piston/struct.ButtonArgs.html: struct piston::ButtonArgs - ButtonArgs\n\u27e847\u27e9 https://docs.rs/piston/latest/piston/struct.CloseArgs.html: struct piston::CloseArgs - CloseArgs\n\u27e848\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerAxisArgs.html: struct piston::ControllerAxisArgs - ControllerAxisArgs\n\u27e849\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerButton.html: struct piston::ControllerButton - ControllerButton\n\u27e850\u27e9 https://docs.rs/piston/latest/piston/struct.ControllerHat.html: struct piston::ControllerHat - ControllerHat\n\u27e851\u27e9 https://docs.rs/piston/latest/piston/struct.EventSettings.html: struct piston::EventSettings - EventSettings\n\u27e852\u27e9 https://docs.rs/piston/latest/piston/struct.Events.html: struct piston::Events - Events\n\u27e853\u27e9 https://docs.rs/piston/latest/piston/struct.IdleArgs.html: struct piston::IdleArgs - IdleArgs\n\u27e854\u27e9 https://docs.rs/piston/latest/piston/struct.NoWindow.html: struct piston::NoWindow - NoWindow\n\u27e855\u27e9 https://docs.rs/piston/latest/piston/struct.Position.html: struct piston::Position - Position\n\u27e856\u27e9 https://docs.rs/piston/latest/piston/struct.RenderArgs.html: struct piston::RenderArgs - RenderArgs\n\u27e857\u27e9 https://docs.rs/piston/latest/piston/struct.ResizeArgs.html: struct piston::ResizeArgs - ResizeArgs\n\u27e858\u27e9 https://docs.rs/piston/latest/piston/struct.Size.html: struct piston::Size - Size\n\u27e859\u27e9 https://docs.rs/piston/latest/piston/struct.TouchArgs.html: struct piston::TouchArgs - TouchArgs\n\u27e860\u27e9 https://docs.rs/piston/latest/piston/struct.UnsupportedGraphicsApiError.html: struct piston::UnsupportedGraphicsApiError - UnsupportedGraphicsApiError\n\u27e861\u27e9 https://docs.rs/piston/latest/piston/struct.UpdateArgs.html: struct piston::UpdateArgs - UpdateArgs\n\u27e862\u27e9 https://docs.rs/piston/latest/piston/struct.WindowSettings.html: struct piston::WindowSettings - WindowSettings\n\u27e863\u27e9 https://docs.rs/piston/latest/piston/#enums: \u00a7\n\u27e864\u27e9 https://docs.rs/piston/latest/piston/enum.Button.html: enum piston::Button - Button\n\u27e865\u27e9 https://docs.rs/piston/latest/piston/enum.ButtonState.html: enum piston::ButtonState - ButtonState\n\u27e866\u27e9 https://docs.rs/piston/latest/piston/enum.Event.html: enum piston::Event - Event\n\u27e867\u27e9 https://docs.rs/piston/latest/piston/enum.FileDrag.html: enum piston::FileDrag - FileDrag\n\u27e868\u27e9 https://docs.rs/piston/latest/piston/enum.HatState.html: enum piston::HatState - HatState\n\u27e869\u27e9 https://docs.rs/piston/latest/piston/enum.Input.html: enum piston::Input - Input\n\u27e870\u27e9 https://docs.rs/piston/latest/piston/enum.Key.html: enum piston::Key - Key\n\u27e871\u27e9 https://docs.rs/piston/latest/piston/enum.Loop.html: enum piston::Loop - Loop\n\u27e872\u27e9 https://docs.rs/piston/latest/piston/enum.Motion.html: enum piston::Motion - Motion\n\u27e873\u27e9 https://docs.rs/piston/latest/piston/enum.MouseButton.html: enum piston::MouseButton - MouseButton\n\u27e874\u27e9 https://docs.rs/piston/latest/piston/enum.Touch.html: enum piston::Touch - Touch\n\u27e875\u27e9 https://docs.rs/piston/latest/piston/#constants: \u00a7\n\u27e876\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_MAX_FPS.html: constant piston::DEFAULT_MAX_FPS - DEFAULT_MAX_FPS\n\u27e877\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS.html: constant piston::DEFAULT_UPS - DEFAULT_UPS\n\u27e878\u27e9 https://docs.rs/piston/latest/piston/constant.DEFAULT_UPS_RESET.html: constant piston::DEFAULT_UPS_RESET - DEFAULT_UPS_RESET\n\u27e879\u27e9 https://docs.rs/piston/latest/piston/#traits: \u00a7\n\u27e880\u27e9 https://docs.rs/piston/latest/piston/trait.AdvancedWindow.html: trait piston::AdvancedWindow - AdvancedWindow\n\u27e881\u27e9 https://docs.rs/piston/latest/piston/trait.AfterRenderEvent.html: trait piston::AfterRenderEvent - AfterRenderEvent\n\u27e882\u27e9 https://docs.rs/piston/latest/piston/trait.BuildFromWindowSettings.html: trait piston::BuildFromWindowSettings - BuildFromWindowSettings\n\u27e883\u27e9 https://docs.rs/piston/latest/piston/trait.ButtonEvent.html: trait piston::ButtonEvent - ButtonEvent\n\u27e884\u27e9 https://docs.rs/piston/latest/piston/trait.CloseEvent.html: trait piston::CloseEvent - CloseEvent\n\u27e885\u27e9 https://docs.rs/piston/latest/piston/trait.ControllerAxisEvent.html: trait piston::ControllerAxisEvent - ControllerAxisEvent\n\u27e886\u27e9 https://docs.rs/piston/latest/piston/trait.CursorEvent.html: trait piston::CursorEvent - CursorEvent\n\u27e887\u27e9 https://docs.rs/piston/latest/piston/trait.EventLoop.html: trait piston::EventLoop - EventLoop\n\u27e888\u27e9 https://docs.rs/piston/latest/piston/trait.FocusEvent.html: trait piston::FocusEvent - FocusEvent\n\u27e889\u27e9 https://docs.rs/piston/latest/piston/trait.IdleEvent.html: trait piston::IdleEvent - IdleEvent\n\u27e890\u27e9 https://docs.rs/piston/latest/piston/trait.MouseCursorEvent.html: trait piston::MouseCursorEvent - MouseCursorEvent\n\u27e891\u27e9 https://docs.rs/piston/latest/piston/trait.MouseRelativeEvent.html: trait piston::MouseRelativeEvent - MouseRelativeEvent\n\u27e892\u27e9 https://docs.rs/piston/latest/piston/trait.MouseScrollEvent.html: trait piston::MouseScrollEvent - MouseScrollEvent\n\u27e893\u27e9 https://docs.rs/piston/latest/piston/trait.OpenGLWindow.html: trait piston::OpenGLWindow - OpenGLWindow\n\u27e894\u27e9 https://docs.rs/piston/latest/piston/trait.PressEvent.html: trait piston::PressEvent - PressEvent\n\u27e895\u27e9 https://docs.rs/piston/latest/piston/trait.ReleaseEvent.html: trait piston::ReleaseEvent - ReleaseEvent\n\u27e896\u27e9 https://docs.rs/piston/latest/piston/trait.RenderEvent.html: trait piston::RenderEvent - RenderEvent\n\u27e897\u27e9 https://docs.rs/piston/latest/piston/trait.ResizeEvent.html: trait piston::ResizeEvent - ResizeEvent\n\u27e898\u27e9 https://docs.rs/piston/latest/piston/trait.TextEvent.html: trait piston::TextEvent - TextEvent\n\u27e899\u27e9 https://docs.rs/piston/latest/piston/trait.TouchEvent.html: trait piston::TouchEvent - TouchEvent\n\u27e8100\u27e9 https://docs.rs/piston/latest/piston/trait.UpdateEvent.html: trait piston::UpdateEvent - UpdateEvent\n\u27e8101\u27e9 https://docs.rs/piston/latest/piston/#types: \u00a7\n\u27e8102\u27e9 https://docs.rs/piston/latest/piston/type.ProcAddress.html: type piston::ProcAddress - ProcAddress\n\u27e8103\u27e9 https://docs.rs/piston/latest/piston/type.TimeStamp.html: type piston::TimeStamp - TimeStamp\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `piston` crate is a modular game engine core written in Rust, providing lightweight abstractions for user input, window management, and event loops. It emphasizes flexibility and modularity, allowing developers to mix and match libraries and backends for 2D/3D graphics, windowing, and scripting. Designed around the Model-View-Controller pattern, it supports experimentation and interoperability across Rust's ecosystem.",
          "feature_summary": null,
          "use_case": "Unknown",
          "score": 0.0,
          "factual_counterfactual": "### Pair 1: Modular Design  \n\u2705 **Factual:** Piston is designed with modularity in mind, allowing developers to use its core modules independently or combine them with other libraries in the Rust ecosystem.  \n\u274c **Counterfactual:** Piston requires all its core modules to be used together, making it incompatible with other libraries in the Rust ecosystem.  \n\n---\n\n### Pair 2: Graphics Backends  \n\u2705 **Factual:** Piston supports multiple 2D graphics backends, such as `opengl_graphics`, `gfx_graphics`, and `wgpu_graphics`, enabling flexibility in rendering.  \n\u274c **Counterfactual:** Piston only supports a single 2D graphics backend, making it restrictive for developers who need diverse rendering options.  \n\n---\n\n### Pair 3: Window Backends  \n\u2705 **Factual:** Piston provides support for various window backends, including `glutin_window`, `sdl2_window`, and `winit_window`, giving developers the freedom to choose based on their platform requirements.  \n\u274c **Counterfactual:** Piston only works with the `glutin_window` backend, making it unsuitable for applications requiring other windowing solutions.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7ef4bc34-7027bea9-1751265146",
      "timestamp": "2025-06-30T06:32:26.618048+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]