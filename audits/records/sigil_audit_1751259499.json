[
  {
    "execution_id": "exec-c1dc9168-d0c8df8a-1751259490",
    "timestamp": "2025-06-30T04:58:10.626535+00:00",
    "sacred_chain": {
      "input_data": "anyhow",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'anyhow' -> 'anyhow'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "anyhow",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/anyhow",
            "title": "anyhow v1.0.98",
            "content": {
              "raw_markdown": "#  anyhow v1.0.98\nFlexible concrete Error type built on std::error::Error \n  * [ #error ](https://crates.io/keywords/error)\n  * [ #error-handling ](https://crates.io/keywords/error-handling)\n\n\n  * [ Readme ](https://crates.io/crates/anyhow)\n  * [ 100 Versions ](https://crates.io/crates/anyhow/versions)\n  * [ Dependencies ](https://crates.io/crates/anyhow/dependencies)\n  * [ Dependents ](https://crates.io/crates/anyhow/reverse_dependencies)\n\n\n## Metadata\n3 months ago \nv1.39.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n52.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add anyhow\nOr add the following line to your Cargo.toml:\nanyhow = \"1.0.98\"\n## Documentation\n[ docs.rs/anyhow ](https://docs.rs/anyhow)\n## Repository\n[ github.com/dtolnay/anyhow ](https://github.com/dtolnay/anyhow)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n\n\n[ Report crate ](https://crates.io/support?crate=anyhow&inquire=crate-violation)\n### Stats Overview\n357,323,242 Downloads all time\n100 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  anyhow v1.0.98\nFlexible concrete Error type built on std::error::Error \n  *  #error \u27e81\u27e9\n  *  #error-handling \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  100 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n3 months ago \nv1.39.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n52.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add anyhow\nOr add the following line to your Cargo.toml:\nanyhow = \"1.0.98\"\n## Documentation\n docs.rs/anyhow \u27e89\u27e9\n## Repository\n github.com/dtolnay/anyhow \u27e810\u27e9\n## Owners\n## Categories\n  * No standard library\u27e811\u27e9\n  * Rust patterns\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n357,323,242 Downloads all time\n100 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/error:  #error \n\u27e82\u27e9 https://crates.io/keywords/error-handling:  #error-handling \n\u27e83\u27e9 https://crates.io/crates/anyhow:  Readme \n\u27e84\u27e9 https://crates.io/crates/anyhow/versions:  100 Versions \n\u27e85\u27e9 https://crates.io/crates/anyhow/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/anyhow/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/anyhow:  docs.rs/anyhow \n\u27e810\u27e9 https://github.com/dtolnay/anyhow:  github.com/dtolnay/anyhow \n\u27e811\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e812\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e813\u27e9 https://crates.io/support?crate=anyhow&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1300,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113280.4566508"
          },
          "docs_rs": {
            "url": "https://docs.rs/anyhow",
            "title": "Crate anyhowCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\n[Settings](https://docs.rs/anyhow/latest/settings.html)\n[Help](https://docs.rs/anyhow/latest/help.html)\nSummary[Source](https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/anyhow) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/anyhow) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/anyhow)\nThis library provides [`anyhow::Error`](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\"), a trait object based error type for easy idiomatic error handling in Rust applications.\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#details)Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables \"mod std::backtrace\"):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#no-std-support)No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports[\u00a7](https://docs.rs/anyhow/latest/anyhow/#reexports)\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros[\u00a7](https://docs.rs/anyhow/latest/anyhow/#macros)\n\n[anyhow](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\")\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\n[bail](https://docs.rs/anyhow/latest/anyhow/macro.bail.html \"macro anyhow::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/anyhow/latest/anyhow/macro.ensure.html \"macro anyhow::ensure\")\n    Return early with an error if a condition is not satisfied.\n## Structs[\u00a7](https://docs.rs/anyhow/latest/anyhow/#structs)\n\n[Chain](https://docs.rs/anyhow/latest/anyhow/struct.Chain.html \"struct anyhow::Chain\")\n    Iterator of a chain of source errors.\n\n[Error](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\")\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits[\u00a7](https://docs.rs/anyhow/latest/anyhow/#traits)\n\n[Context](https://docs.rs/anyhow/latest/anyhow/trait.Context.html \"trait anyhow::Context\")\n    Provides the `context` method for `Result`.\n## Functions[\u00a7](https://docs.rs/anyhow/latest/anyhow/#functions)\n\n[Ok](https://docs.rs/anyhow/latest/anyhow/fn.Ok.html \"fn anyhow::Ok\")\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases[\u00a7](https://docs.rs/anyhow/latest/anyhow/#types)\n\n[Result](https://docs.rs/anyhow/latest/anyhow/type.Result.html \"type anyhow::Result\")\n    `Result<T, Error>`\n",
              "markdown_with_citations": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/anyhow) ![crates-io\u27e85\u27e9](https://crates.io/crates/anyhow) ![docs-rs\u27e86\u27e9](https://docs.rs/anyhow)\nThis library provides `anyhow::Error`\u27e87\u27e9, a trait object based error type for easy idiomatic error handling in Rust applications.\n## \u00a7\u27e88\u27e9Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error`\u27e89\u27e9 trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e810\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e811\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## \u00a7\u27e812\u27e9No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros\u00a7\u27e814\u27e9\n\nanyhow\u27e815\u27e9\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\nbail\u27e816\u27e9\n    Return early with an error.\n\nensure\u27e817\u27e9\n    Return early with an error if a condition is not satisfied.\n## Structs\u00a7\u27e818\u27e9\n\nChain\u27e819\u27e9\n    Iterator of a chain of source errors.\n\nError\u27e87\u27e9\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits\u00a7\u27e820\u27e9\n\nContext\u27e821\u27e9\n    Provides the `context` method for `Result`.\n## Functions\u00a7\u27e822\u27e9\n\nOk\u27e823\u27e9\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases\u00a7\u27e824\u27e9\n\nResult\u27e825\u27e9\n    `Result<T, Error>`\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/anyhow/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/anyhow/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Error.html: struct anyhow::Error - `anyhow::Error`\n\u27e88\u27e9 https://docs.rs/anyhow/latest/anyhow/#details: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e810\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: mod std::backtrace - `std::backtrace`\n\u27e811\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e812\u27e9 https://docs.rs/anyhow/latest/anyhow/#no-std-support: \u00a7\n\u27e813\u27e9 https://docs.rs/anyhow/latest/anyhow/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/anyhow/latest/anyhow/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html: macro anyhow::anyhow - anyhow\n\u27e816\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.bail.html: macro anyhow::bail - bail\n\u27e817\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.ensure.html: macro anyhow::ensure - ensure\n\u27e818\u27e9 https://docs.rs/anyhow/latest/anyhow/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Chain.html: struct anyhow::Chain - Chain\n\u27e820\u27e9 https://docs.rs/anyhow/latest/anyhow/#traits: \u00a7\n\u27e821\u27e9 https://docs.rs/anyhow/latest/anyhow/trait.Context.html: trait anyhow::Context - Context\n\u27e822\u27e9 https://docs.rs/anyhow/latest/anyhow/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/anyhow/latest/anyhow/fn.Ok.html: fn anyhow::Ok - Ok\n\u27e824\u27e9 https://docs.rs/anyhow/latest/anyhow/#types: \u00a7\n\u27e825\u27e9 https://docs.rs/anyhow/latest/anyhow/type.Result.html: type anyhow::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6213,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113281.0314128"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/anyhow",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [97 stable releases](https://lib.rs/crates/anyhow/versions)\n1.0.98 |  Apr 14, 2025   \n---|---  \n1.0.97 |  Mar 3, 2025   \n1.0.96 |  Feb 20, 2025   \n1.0.95 |  Dec 22, 2024   \n0.0.0 |  ~~Oct 5, 2019~~  \n#**2** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 4088163/week @ 2025-03-09 4338297/week @ 2025-03-16 4420610/week @ 2025-03-23 3985684/week @ 2025-03-30 4210417/week @ 2025-04-06 3960826/week @ 2025-04-13 3751348/week @ 2025-04-20 3731320/week @ 2025-04-27 3752169/week @ 2025-05-04 3885298/week @ 2025-05-11 3928869/week @ 2025-05-18 3496271/week @ 2025-05-25 3805889/week @ 2025-06-01 4027222/week @ 2025-06-08 4244978/week @ 2025-06-15 4356007/week @ 2025-06-22\n**16,684,249** downloads per month Used in [**34,334** crates (20,933 directly)](https://lib.rs/crates/anyhow/rev)\n**MIT/Apache**\n180KB  3K  SLoC\n# Anyhow \u00af\\\\_(\u00b0\u30da)_/\u00af\n[![github](https://img.shields.io/badge/github-dtolnay/anyhow-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/anyhow) [![crates.io](https://img.shields.io/crates/v/anyhow.svg?style=for-the-badge&color=fc8d62&logo=rust)](https://crates.io/crates/anyhow) [![docs.rs](https://img.shields.io/badge/docs.rs-anyhow-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/anyhow) [![build status](https://img.shields.io/github/actions/workflow/status/dtolnay/anyhow/ci.yml?branch=master&style=for-the-badge)](https://github.com/dtolnay/anyhow/actions?query=branch%3Amaster)\nThis library provides [```anyhow`::``Error``](https://docs.rs/anyhow/1.0/anyhow/struct.Error.html), a trait object based error type for easy idiomatic error handling in Rust applications.\n```\n```[``dependencies``]`\n`anyhow ``=` ``\"`1.0`\"``\n``\n```\n\n_Compiler support: requires rustc 1.39+_\n## Details\n  * Use ````Result``<`T, `anyhow`::``Error`>````, or equivalently ```anyhow`::``Result``<`T`>````, as the return type of any fallible function.\nWithin the function, use ```?``` to easily propagate any error that implements the [```std`::```error`::``Error``](https://doc.rust-lang.org/std/error/trait.Error.html) trait.\n```\n``use` `anyhow`::``Result`;`\n``fn` `get_cluster_info`````(````)```` ``->` ``Result``<`ClusterMap`>``` ````{`\n  `let` config `=` `std`::```fs`::``read_to_string`(```\"`cluster.json`\"```)``?``;`\n  `let` map`:` ClusterMap `=` `serde_json`::``from_str`(``&`config`)``?``;`\n  `Ok``(`map`)`\n```}```\n`\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \"No such file or directory\" can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\n``use` `anyhow`::````{`Context`,` `Result````}```;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `...`\n  it`.``detach``(``)``.``context``(```\"`Failed to detach the important thing`\"```)``?``;`\n  `let` content `=` `std`::```fs`::``read`(`path`)`\n    `.``with_context``(````|``````|`` ```format!``(```\"`Failed to read instrs from `{}``\"```,` path`)```)``?``;`\n  `...`\n```}```\n`\n```\n```\n```Error:``` Failed to read instrs from ./path/to/instrs.json`\n``Caused``` by:`\n  ``No``` such file or directory (os error 2`)\n`\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n```//` If the error was caused by redaction, then return a`\n``//` tombstone instead of the content.`\n`match` root_cause`.``downcast_ref`::````<`DataStoreError`>```(``)` ``{`\n  `Some``(``DataStoreError`::``Censored`(``_``)``)` `=>` `Ok``(``Poll`::``Ready`(``REDACTED_CONTENT``)``)``,`\n  `None` `=>` `Err``(`error`)``,`\n```}``\n`\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [```std`::``backtrace``](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables):\n    * If you want panics and errors to both have backtraces, set ```RUST_BACKTRACE``=``1```;\n    * If you want only errors to have backtraces, set ```RUST_LIB_BACKTRACE``=``1```;\n    * If you want only panics to have backtraces, set ```RUST_BACKTRACE``=``1``` and ```RUST_LIB_BACKTRACE``=``0```.\n  * Anyhow works with any error type that has an impl of ```std`::```error`::``Error``, including ones defined in your crate. We do not bundle a ```derive``(`Error`)``` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `FormatError` ``{`\n  ``#``[``error```(`````\"`Invalid header (expected {expected:?}, got {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`Missing attribute: {0}`\"`````)```]``\n  MissingAttribute`(``String``)``,`\n```}```\n`\n```\n\n  * One-off error messages can be constructed using the ``anyhow!`` macro, which supports string interpolation and produces an ```anyhow`::``Error``.\n```\n``return` `Err``(``anyhow!``(```\"`Missing attribute: {}`\"```,` missing`)``)``;`\n`\n```\n\nA ``bail!`` macro is provided as a shorthand for the same early return.\n```\n``bail!``(```\"`Missing attribute: {}`\"```,` missing`)``;`\n`\n```\n\n\n\n## No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \"std\" feature in Cargo.toml. A global allocator is required.\n```\n```[``dependencies``]`\n`anyhow = { version = \"1.0\", default-features ``=` `false` }\n``\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional ```.``map_err``(``Error`::``msg`)``` when working with a non-Anyhow error type inside a function that returns Anyhow's error type, as the trait that ```?```-based error conversions are defined by is only available in std in those old versions.\n## Comparison to failure\nThe ```anyhow`::``Error`` type works something like ```failure`::``Error``, but unlike failure ours is built around the standard library's ```std`::```error`::``Error`` trait rather than a separate trait ```failure`::``Fail``. The standard library has adopted the necessary improvements for this to be possible as part of [RFC 2504](https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md).\n## Comparison to thiserror\nUse Anyhow if you don't care what error type your functions return, you just want it to be easy. This is common in application code. Use [thiserror](https://github.com/dtolnay/thiserror) if you are a library that wants to design your own dedicated error type(s) so that on failures the caller gets exactly the information that you choose.\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/dtolnay/anyhow/blob/709fe86f04878a62a29b9279f5bb96422f8bca28/LICENSE-APACHE) or [MIT license](https://github.com/dtolnay/anyhow/blob/709fe86f04878a62a29b9279f5bb96422f8bca28/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u20135MB  ~11K SLoC\n  * [ optional ](https://lib.rs/crates/anyhow/features#feature-backtrace \"backtrace is optional feature\") [backtrace](https://lib.rs/crates/backtrace \"0.3.51\")\n\n\n  * build `build.rs`\n  * dev  [futures](https://lib.rs/crates/futures \"0.3\")\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0.6\")\n  * dev  [syn](https://lib.rs/crates/syn \"2.0\")[+full](https://lib.rs/crates/syn/features#feature-full)\n  * dev  [thiserror](https://lib.rs/crates/thiserror \"new\") 2.0\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.66\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n#### [Other feature](https://lib.rs/crates/anyhow/features)\n  * [std](https://lib.rs/crates/anyhow/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  97 stable releases\u27e81\u27e9\n1.0.98 |  Apr 14, 2025   \n---|---  \n1.0.97 |  Mar 3, 2025   \n1.0.96 |  Feb 20, 2025   \n1.0.95 |  Dec 22, 2024   \n0.0.0 |  ~~Oct 5, 2019~~  \n#**2** in Rust patterns\u27e82\u27e9\nDownload history 4088163/week @ 2025-03-09 4338297/week @ 2025-03-16 4420610/week @ 2025-03-23 3985684/week @ 2025-03-30 4210417/week @ 2025-04-06 3960826/week @ 2025-04-13 3751348/week @ 2025-04-20 3731320/week @ 2025-04-27 3752169/week @ 2025-05-04 3885298/week @ 2025-05-11 3928869/week @ 2025-05-18 3496271/week @ 2025-05-25 3805889/week @ 2025-06-01 4027222/week @ 2025-06-08 4244978/week @ 2025-06-15 4356007/week @ 2025-06-22\n**16,684,249** downloads per month Used in **34,334** crates (20,933 directly)\u27e83\u27e9\n**MIT/Apache**\n180KB  3K  SLoC\n# Anyhow \u00af\\\\_(\u00b0\u30da)_/\u00af\n![github\u27e84\u27e9](https://github.com/dtolnay/anyhow) ![crates.io\u27e85\u27e9](https://crates.io/crates/anyhow) ![docs.rs\u27e86\u27e9](https://docs.rs/anyhow) ![build status\u27e87\u27e9](https://github.com/dtolnay/anyhow/actions?query=branch%3Amaster)\nThis library provides ```anyhow`::``Error``\u27e88\u27e9, a trait object based error type for easy idiomatic error handling in Rust applications.\n```\n```[``dependencies``]`\n`anyhow ``=` ``\"`1.0`\"``\n``\n```\n\n_Compiler support: requires rustc 1.39+_\n## Details\n  * Use ````Result``<`T, `anyhow`::``Error`>````, or equivalently ```anyhow`::``Result``<`T`>````, as the return type of any fallible function.\nWithin the function, use ```?``` to easily propagate any error that implements the ```std`::```error`::``Error``\u27e89\u27e9 trait.\n```\n``use` `anyhow`::``Result`;`\n``fn` `get_cluster_info`````(````)```` ``->` ``Result``<`ClusterMap`>``` ````{`\n  `let` config `=` `std`::```fs`::``read_to_string`(```\"`cluster.json`\"```)``?``;`\n  `let` map`:` ClusterMap `=` `serde_json`::``from_str`(``&`config`)``?``;`\n  `Ok``(`map`)`\n```}```\n`\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \"No such file or directory\" can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\n``use` `anyhow`::````{`Context`,` `Result````}```;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `...`\n  it`.``detach``(``)``.``context``(```\"`Failed to detach the important thing`\"```)``?``;`\n  `let` content `=` `std`::```fs`::``read`(`path`)`\n    `.``with_context``(````|``````|`` ```format!``(```\"`Failed to read instrs from `{}``\"```,` path`)```)``?``;`\n  `...`\n```}```\n`\n```\n```\n```Error:``` Failed to read instrs from ./path/to/instrs.json`\n``Caused``` by:`\n  ``No``` such file or directory (os error 2`)\n`\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n```//` If the error was caused by redaction, then return a`\n``//` tombstone instead of the content.`\n`match` root_cause`.``downcast_ref`::````<`DataStoreError`>```(``)` ``{`\n  `Some``(``DataStoreError`::``Censored`(``_``)``)` `=>` `Ok``(``Poll`::``Ready`(``REDACTED_CONTENT``)``)``,`\n  `None` `=>` `Err``(`error`)``,`\n```}``\n`\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in ```std`::``backtrace``\u27e810\u27e9:\n    * If you want panics and errors to both have backtraces, set ```RUST_BACKTRACE``=``1```;\n    * If you want only errors to have backtraces, set ```RUST_LIB_BACKTRACE``=``1```;\n    * If you want only panics to have backtraces, set ```RUST_BACKTRACE``=``1``` and ```RUST_LIB_BACKTRACE``=``0```.\n  * Anyhow works with any error type that has an impl of ```std`::```error`::``Error``, including ones defined in your crate. We do not bundle a ```derive``(`Error`)``` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e811\u27e9.\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `FormatError` ``{`\n  ``#``[``error```(`````\"`Invalid header (expected {expected:?}, got {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`Missing attribute: {0}`\"`````)```]``\n  MissingAttribute`(``String``)``,`\n```}```\n`\n```\n\n  * One-off error messages can be constructed using the ``anyhow!`` macro, which supports string interpolation and produces an ```anyhow`::``Error``.\n```\n``return` `Err``(``anyhow!``(```\"`Missing attribute: {}`\"```,` missing`)``)``;`\n`\n```\n\nA ``bail!`` macro is provided as a shorthand for the same early return.\n```\n``bail!``(```\"`Missing attribute: {}`\"```,` missing`)``;`\n`\n```\n\n\n\n## No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \"std\" feature in Cargo.toml. A global allocator is required.\n```\n```[``dependencies``]`\n`anyhow = { version = \"1.0\", default-features ``=` `false` }\n``\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional ```.``map_err``(``Error`::``msg`)``` when working with a non-Anyhow error type inside a function that returns Anyhow's error type, as the trait that ```?```-based error conversions are defined by is only available in std in those old versions.\n## Comparison to failure\nThe ```anyhow`::``Error`` type works something like ```failure`::``Error``, but unlike failure ours is built around the standard library's ```std`::```error`::``Error`` trait rather than a separate trait ```failure`::``Fail``. The standard library has adopted the necessary improvements for this to be possible as part of RFC 2504\u27e812\u27e9.\n## Comparison to thiserror\nUse Anyhow if you don't care what error type your functions return, you just want it to be easy. This is common in application code. Use thiserror\u27e811\u27e9 if you are a library that wants to design your own dedicated error type(s) so that on failures the caller gets exactly the information that you choose.\n#### License\nLicensed under either of Apache License, Version 2.0\u27e813\u27e9 or MIT license\u27e814\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~0\u20135MB  ~11K SLoC\n  *  optional \u27e815\u27e9 backtrace\u27e816\u27e9\n\n\n  * build `build.rs`\n  * dev  futures\u27e817\u27e9\n  * dev  rustversion\u27e818\u27e9\n  * dev  syn\u27e819\u27e9+full\u27e820\u27e9\n  * dev  thiserror\u27e821\u27e9 2.0\n  * dev  trybuild\u27e822\u27e9+diff\u27e823\u27e9\n\n\n#### Other feature\u27e824\u27e9\n  * std\u27e825\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/anyhow/versions: 97 stable releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/anyhow/rev: **34,334** crates (20,933 directly)\n\u27e84\u27e9 https://img.shields.io/badge/github-dtolnay/anyhow-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/crates/v/anyhow.svg?style=for-the-badge&color=fc8d62&logo=rust: ![crates.io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-anyhow-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dtolnay/anyhow/ci.yml?branch=master&style=for-the-badge: ![build status\n\u27e88\u27e9 https://docs.rs/anyhow/1.0/anyhow/struct.Error.html: ```anyhow`::``Error``\n\u27e89\u27e9 https://doc.rust-lang.org/std/error/trait.Error.html: ```std`::```error`::``Error``\n\u27e810\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: ```std`::``backtrace``\n\u27e811\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e812\u27e9 https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md: RFC 2504\n\u27e813\u27e9 https://github.com/dtolnay/anyhow/blob/709fe86f04878a62a29b9279f5bb96422f8bca28/LICENSE-APACHE: Apache License, Version 2.0\n\u27e814\u27e9 https://github.com/dtolnay/anyhow/blob/709fe86f04878a62a29b9279f5bb96422f8bca28/LICENSE-MIT: MIT license\n\u27e815\u27e9 https://lib.rs/crates/anyhow/features#feature-backtrace: backtrace is optional feature -  optional \n\u27e816\u27e9 https://lib.rs/crates/backtrace: 0.3.51 - backtrace\n\u27e817\u27e9 https://lib.rs/crates/futures: 0.3 - futures\n\u27e818\u27e9 https://lib.rs/crates/rustversion: 1.0.6 - rustversion\n\u27e819\u27e9 https://lib.rs/crates/syn: 2.0 - syn\n\u27e820\u27e9 https://lib.rs/crates/syn/features#feature-full: +full\n\u27e821\u27e9 https://lib.rs/crates/thiserror: new - thiserror\n\u27e822\u27e9 https://lib.rs/crates/trybuild: 1.0.66 - trybuild\n\u27e823\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n\u27e824\u27e9 https://lib.rs/crates/anyhow/features: Other feature\n\u27e825\u27e9 https://lib.rs/crates/anyhow/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8208,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113281.6891782"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-3ff10869ece9f8e9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-3ff10869ece9f8e9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "std_backtrace"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-c941d3e0deb6aef8\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "anyhow",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\deps\\libanyhow-9158eabce4749012.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-1f01ef6e9d5330c8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-1f01ef6e9d5330c8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "std_backtrace"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\build\\anyhow-eedcd04b20bdfa72\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdrtjq32l/anyhow-1.0.98#anyhow@1.0.98",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "anyhow",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdrtjq32l\\anyhow-1.0.98\\target\\debug\\deps\\libanyhow-97e71ccb6bb2b41a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 56
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "anyhow",
          "version": "1.0.98",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\n[Settings](https://docs.rs/anyhow/latest/settings.html)\n[Help](https://docs.rs/anyhow/latest/help.html)\nSummary[Source](https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/anyhow) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/anyhow) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/anyhow)\nThis library provides [`anyhow::Error`](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\"), a trait object based error type for easy idiomatic error handling in Rust applications.\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#details)Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables \"mod std::backtrace\"):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#no-std-support)No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports[\u00a7](https://docs.rs/anyhow/latest/anyhow/#reexports)\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros[\u00a7](https://docs.rs/anyhow/latest/anyhow/#macros)\n\n[anyhow](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\")\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\n[bail](https://docs.rs/anyhow/latest/anyhow/macro.bail.html \"macro anyhow::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/anyhow/latest/anyhow/macro.ensure.html \"macro anyhow::ensure\")\n    Return early with an error if a condition is not satisfied.\n## Structs[\u00a7](https://docs.rs/anyhow/latest/anyhow/#structs)\n\n[Chain](https://docs.rs/anyhow/latest/anyhow/struct.Chain.html \"struct anyhow::Chain\")\n    Iterator of a chain of source errors.\n\n[Error](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\")\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits[\u00a7](https://docs.rs/anyhow/latest/anyhow/#traits)\n\n[Context](https://docs.rs/anyhow/latest/anyhow/trait.Context.html \"trait anyhow::Context\")\n    Provides the `context` method for `Result`.\n## Functions[\u00a7](https://docs.rs/anyhow/latest/anyhow/#functions)\n\n[Ok](https://docs.rs/anyhow/latest/anyhow/fn.Ok.html \"fn anyhow::Ok\")\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases[\u00a7](https://docs.rs/anyhow/latest/anyhow/#types)\n\n[Result](https://docs.rs/anyhow/latest/anyhow/type.Result.html \"type anyhow::Result\")\n    `Result<T, Error>`\n",
            "markdown_with_citations": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/anyhow) ![crates-io\u27e85\u27e9](https://crates.io/crates/anyhow) ![docs-rs\u27e86\u27e9](https://docs.rs/anyhow)\nThis library provides `anyhow::Error`\u27e87\u27e9, a trait object based error type for easy idiomatic error handling in Rust applications.\n## \u00a7\u27e88\u27e9Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error`\u27e89\u27e9 trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e810\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e811\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## \u00a7\u27e812\u27e9No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros\u00a7\u27e814\u27e9\n\nanyhow\u27e815\u27e9\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\nbail\u27e816\u27e9\n    Return early with an error.\n\nensure\u27e817\u27e9\n    Return early with an error if a condition is not satisfied.\n## Structs\u00a7\u27e818\u27e9\n\nChain\u27e819\u27e9\n    Iterator of a chain of source errors.\n\nError\u27e87\u27e9\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits\u00a7\u27e820\u27e9\n\nContext\u27e821\u27e9\n    Provides the `context` method for `Result`.\n## Functions\u00a7\u27e822\u27e9\n\nOk\u27e823\u27e9\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases\u00a7\u27e824\u27e9\n\nResult\u27e825\u27e9\n    `Result<T, Error>`\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/anyhow/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/anyhow/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Error.html: struct anyhow::Error - `anyhow::Error`\n\u27e88\u27e9 https://docs.rs/anyhow/latest/anyhow/#details: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e810\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: mod std::backtrace - `std::backtrace`\n\u27e811\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e812\u27e9 https://docs.rs/anyhow/latest/anyhow/#no-std-support: \u00a7\n\u27e813\u27e9 https://docs.rs/anyhow/latest/anyhow/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/anyhow/latest/anyhow/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html: macro anyhow::anyhow - anyhow\n\u27e816\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.bail.html: macro anyhow::bail - bail\n\u27e817\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.ensure.html: macro anyhow::ensure - ensure\n\u27e818\u27e9 https://docs.rs/anyhow/latest/anyhow/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Chain.html: struct anyhow::Chain - Chain\n\u27e820\u27e9 https://docs.rs/anyhow/latest/anyhow/#traits: \u00a7\n\u27e821\u27e9 https://docs.rs/anyhow/latest/anyhow/trait.Context.html: trait anyhow::Context - Context\n\u27e822\u27e9 https://docs.rs/anyhow/latest/anyhow/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/anyhow/latest/anyhow/fn.Ok.html: fn anyhow::Ok - Ok\n\u27e824\u27e9 https://docs.rs/anyhow/latest/anyhow/#types: \u00a7\n\u27e825\u27e9 https://docs.rs/anyhow/latest/anyhow/type.Result.html: type anyhow::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "anyhow",
          "version": "1.0.98",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\n[Settings](https://docs.rs/anyhow/latest/settings.html)\n[Help](https://docs.rs/anyhow/latest/help.html)\nSummary[Source](https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/anyhow) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/anyhow) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/anyhow)\nThis library provides [`anyhow::Error`](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\"), a trait object based error type for easy idiomatic error handling in Rust applications.\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#details)Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in [`std::backtrace`](https://doc.rust-lang.org/std/backtrace/index.html#environment-variables \"mod std::backtrace\"):\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like [thiserror](https://github.com/dtolnay/thiserror).\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## [\u00a7](https://docs.rs/anyhow/latest/anyhow/#no-std-support)No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports[\u00a7](https://docs.rs/anyhow/latest/anyhow/#reexports)\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros[\u00a7](https://docs.rs/anyhow/latest/anyhow/#macros)\n\n[anyhow](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\")\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\n[bail](https://docs.rs/anyhow/latest/anyhow/macro.bail.html \"macro anyhow::bail\")\n    Return early with an error.\n\n[ensure](https://docs.rs/anyhow/latest/anyhow/macro.ensure.html \"macro anyhow::ensure\")\n    Return early with an error if a condition is not satisfied.\n## Structs[\u00a7](https://docs.rs/anyhow/latest/anyhow/#structs)\n\n[Chain](https://docs.rs/anyhow/latest/anyhow/struct.Chain.html \"struct anyhow::Chain\")\n    Iterator of a chain of source errors.\n\n[Error](https://docs.rs/anyhow/latest/anyhow/struct.Error.html \"struct anyhow::Error\")\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits[\u00a7](https://docs.rs/anyhow/latest/anyhow/#traits)\n\n[Context](https://docs.rs/anyhow/latest/anyhow/trait.Context.html \"trait anyhow::Context\")\n    Provides the `context` method for `Result`.\n## Functions[\u00a7](https://docs.rs/anyhow/latest/anyhow/#functions)\n\n[Ok](https://docs.rs/anyhow/latest/anyhow/fn.Ok.html \"fn anyhow::Ok\")\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases[\u00a7](https://docs.rs/anyhow/latest/anyhow/#types)\n\n[Result](https://docs.rs/anyhow/latest/anyhow/type.Result.html \"type anyhow::Result\")\n    `Result<T, Error>`\n",
            "markdown_with_citations": "[](https://docs.rs/anyhow/latest/anyhow/all.html \"show sidebar\")\n# Crate anyhowCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/anyhow) ![crates-io\u27e85\u27e9](https://crates.io/crates/anyhow) ![docs-rs\u27e86\u27e9](https://docs.rs/anyhow)\nThis library provides `anyhow::Error`\u27e87\u27e9, a trait object based error type for easy idiomatic error handling in Rust applications.\n## \u00a7\u27e88\u27e9Details\n  * Use `Result<T, anyhow::Error>`, or equivalently `anyhow::Result<T>`, as the return type of any fallible function.\nWithin the function, use `?` to easily propagate any error that implements the `std::error::Error`\u27e89\u27e9 trait.\n```\nuse anyhow::Result;\nfn get_cluster_info() -> Result<ClusterMap> {\n  let config = std::fs::read_to_string(\"cluster.json\")?;\n  let map: ClusterMap = serde_json::from_str(&config)?;\n  Ok(map)\n}\n```\n\n  * Attach context to help the person troubleshooting the error understand where things went wrong. A low-level error like \u201cNo such file or directory\u201d can be annoying to debug without more context about what higher level step the application was in the middle of.\n```\nuse anyhow::{Context, Result};\nfn main() -> Result<()> {\n  ...\n  it.detach().context(\"Failed to detach the important thing\")?;\n  let content = std::fs::read(path)\n    .with_context(|| format!(\"Failed to read instrs from {}\", path))?;\n  ...\n}\n```\n\n```\nError: Failed to read instrs from ./path/to/instrs.json\nCaused by:\n  No such file or directory (os error 2)\n```\n\n  * Downcasting is supported and can be by value, by shared reference, or by mutable reference as needed.\n```\n// If the error was caused by redaction, then return a\n// tombstone instead of the content.\nmatch root_cause.downcast_ref::<DataStoreError>() {\n  Some(DataStoreError::Censored(_)) => Ok(Poll::Ready(REDACTED_CONTENT)),\n  None => Err(error),\n}\n```\n\n  * If using Rust \u2265 1.65, a backtrace is captured and printed with the error if the underlying error type does not already provide its own. In order to see backtraces, they must be enabled through the environment variables described in `std::backtrace`\u27e810\u27e9:\n    * If you want panics and errors to both have backtraces, set `RUST_BACKTRACE=1`;\n    * If you want only errors to have backtraces, set `RUST_LIB_BACKTRACE=1`;\n    * If you want only panics to have backtraces, set `RUST_BACKTRACE=1` and `RUST_LIB_BACKTRACE=0`.\n  * Anyhow works with any error type that has an impl of `std::error::Error`, including ones defined in your crate. We do not bundle a `derive(Error)` macro but you can write the impls yourself or use a standalone macro like thiserror\u27e811\u27e9.\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum FormatError {\n  #[error(\"Invalid header (expected {expected:?}, got {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"Missing attribute: {0}\")]\n  MissingAttribute(String),\n}\n```\n\n  * One-off error messages can be constructed using the `anyhow!` macro, which supports string interpolation and produces an `anyhow::Error`.\n```\nreturn Err(anyhow!(\"Missing attribute: {}\", missing));\n```\n\nA `bail!` macro is provided as a shorthand for the same early return.\n```\nbail!(\"Missing attribute: {}\", missing);\n```\n\n\n\n## \u00a7\u27e812\u27e9No-std support\nIn no_std mode, almost all of the same API is available and works the same way. To depend on Anyhow in no_std mode, disable our default enabled \u201cstd\u201d feature in Cargo.toml. A global allocator is required.\n```\n[dependencies]\nanyhow = { version = \"1.0\", default-features = false }\n```\n\nWith versions of Rust older than 1.81, no_std mode may require an additional `.map_err(Error::msg)` when working with a non-Anyhow error type inside a function that returns Anyhow\u2019s error type, as the trait that `?`-based error conversions are defined by is only available in std in those old versions.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use anyhow[](https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html \"macro anyhow::anyhow\") as format_err;`\n\n## Macros\u00a7\u27e814\u27e9\n\nanyhow\u27e815\u27e9\n    Construct an ad-hoc error from a string or existing non-`anyhow` error value.\n\nbail\u27e816\u27e9\n    Return early with an error.\n\nensure\u27e817\u27e9\n    Return early with an error if a condition is not satisfied.\n## Structs\u00a7\u27e818\u27e9\n\nChain\u27e819\u27e9\n    Iterator of a chain of source errors.\n\nError\u27e87\u27e9\n    The `Error` type, a wrapper around a dynamic error type.\n## Traits\u00a7\u27e820\u27e9\n\nContext\u27e821\u27e9\n    Provides the `context` method for `Result`.\n## Functions\u00a7\u27e822\u27e9\n\nOk\u27e823\u27e9\n    Equivalent to `Ok::<_, anyhow::Error>(value)`.\n## Type Aliases\u00a7\u27e824\u27e9\n\nResult\u27e825\u27e9\n    `Result<T, Error>`\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/anyhow/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/anyhow/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/anyhow/latest/src/anyhow/lib.rs.html#1-735: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Error.html: struct anyhow::Error - `anyhow::Error`\n\u27e88\u27e9 https://docs.rs/anyhow/latest/anyhow/#details: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e810\u27e9 https://doc.rust-lang.org/std/backtrace/index.html#environment-variables: mod std::backtrace - `std::backtrace`\n\u27e811\u27e9 https://github.com/dtolnay/thiserror: thiserror\n\u27e812\u27e9 https://docs.rs/anyhow/latest/anyhow/#no-std-support: \u00a7\n\u27e813\u27e9 https://docs.rs/anyhow/latest/anyhow/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/anyhow/latest/anyhow/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.anyhow.html: macro anyhow::anyhow - anyhow\n\u27e816\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.bail.html: macro anyhow::bail - bail\n\u27e817\u27e9 https://docs.rs/anyhow/latest/anyhow/macro.ensure.html: macro anyhow::ensure - ensure\n\u27e818\u27e9 https://docs.rs/anyhow/latest/anyhow/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/anyhow/latest/anyhow/struct.Chain.html: struct anyhow::Chain - Chain\n\u27e820\u27e9 https://docs.rs/anyhow/latest/anyhow/#traits: \u00a7\n\u27e821\u27e9 https://docs.rs/anyhow/latest/anyhow/trait.Context.html: trait anyhow::Context - Context\n\u27e822\u27e9 https://docs.rs/anyhow/latest/anyhow/#functions: \u00a7\n\u27e823\u27e9 https://docs.rs/anyhow/latest/anyhow/fn.Ok.html: fn anyhow::Ok - Ok\n\u27e824\u27e9 https://docs.rs/anyhow/latest/anyhow/#types: \u00a7\n\u27e825\u27e9 https://docs.rs/anyhow/latest/anyhow/type.Result.html: type anyhow::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `anyhow` crate simplifies error handling in Rust by providing a flexible, trait-object-based `anyhow::Error` type. It supports idiomatic propagation of errors using `?`, attaching contextual information for easier debugging, downcasting errors, and capturing backtraces (with Rust \u2265 1.65). It integrates seamlessly with custom error types and offers convenient macros like `anyhow!`, `bail!`, and `ensure!` for constructing and handling errors. Additionally, it supports `no_std` environments with minimal adjustments.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 9.5,
          "factual_counterfactual": "### Pair 1: Error Handling with `anyhow::Error`\n\u2705 Factual: The `anyhow::Error` type in the crate is a trait object-based error type that allows easy propagation of errors using the `?` operator, provided the error implements the `std::error::Error` trait.  \n\u274c Counterfactual: The `anyhow::Error` type is a concrete struct that requires manual implementation of error propagation for each error type used in the application.  \n\n---\n\n### Pair 2: Contextual Error Information\n\u2705 Factual: The `Context` trait provided by `anyhow` allows attaching high-level context to errors, making troubleshooting easier by explaining the broader operation that failed.  \n\u274c Counterfactual: The `Context` trait in `anyhow` automatically generates detailed error descriptions based on the function names and arguments where the error occurred, without requiring explicit context attachment.  \n\n---\n\n### Pair 3: No-std Support  \n\u2705 Factual: The `anyhow` crate supports `no_std` mode by disabling the default \"std\" feature in `Cargo.toml`, but requires a global allocator to function.  \n\u274c Counterfactual: The `anyhow` crate does not support `no_std` mode and relies entirely on the standard library for its functionality.  \n\n---",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-c1dc9168-d0c8df8a-1751259490",
      "timestamp": "2025-06-30T04:58:10.626535+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]