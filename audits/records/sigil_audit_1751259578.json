[
  {
    "execution_id": "exec-7191c717-78d8a61d-1751259562",
    "timestamp": "2025-06-30T04:59:22.918643+00:00",
    "sacred_chain": {
      "input_data": "color-eyre",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'color-eyre' -> 'color-eyre'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "color-eyre",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/color-eyre",
            "title": "color-eyre v0.6.5",
            "content": {
              "raw_markdown": "#  color-eyre v0.6.5\nAn error report handler for panics and eyre::Reports for colorful, consistent, and well formatted error reports for all kinds of errors. \n  * [ Readme ](https://crates.io/crates/color-eyre)\n  * [ 33 Versions ](https://crates.io/crates/color-eyre/versions)\n  * [ Dependencies ](https://crates.io/crates/color-eyre/dependencies)\n  * [ Dependents ](https://crates.io/crates/color-eyre/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \nv1.65.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n621 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add color-eyre\nOr add the following line to your Cargo.toml:\ncolor-eyre = \"0.6.5\"\n## Documentation\n[ docs.rs/color-eyre ](https://docs.rs/color-eyre)\n## Repository\n[ github.com/eyre-rs/eyre ](https://github.com/eyre-rs/eyre)\n## Owners\n[ Report crate ](https://crates.io/support?crate=color-eyre&inquire=crate-violation)\n### Stats Overview\n26,870,512 Downloads all time\n33 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  color-eyre v0.6.5\nAn error report handler for panics and eyre::Reports for colorful, consistent, and well formatted error reports for all kinds of errors. \n  *  Readme \u27e81\u27e9\n  *  33 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nabout 1 month ago \nv1.65.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n621 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add color-eyre\nOr add the following line to your Cargo.toml:\ncolor-eyre = \"0.6.5\"\n## Documentation\n docs.rs/color-eyre \u27e87\u27e9\n## Repository\n github.com/eyre-rs/eyre \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n26,870,512 Downloads all time\n33 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/color-eyre:  Readme \n\u27e82\u27e9 https://crates.io/crates/color-eyre/versions:  33 Versions \n\u27e83\u27e9 https://crates.io/crates/color-eyre/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/color-eyre/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/color-eyre:  docs.rs/color-eyre \n\u27e88\u27e9 https://github.com/eyre-rs/eyre:  github.com/eyre-rs/eyre \n\u27e89\u27e9 https://crates.io/support?crate=color-eyre&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1155,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113352.599037"
          },
          "docs_rs": {
            "url": "https://docs.rs/color-eyre",
            "title": "Crate color_eyreCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\n[Settings](https://docs.rs/color-eyre/latest/settings.html)\n[Help](https://docs.rs/color-eyre/latest/help.html)\nSummary[Source](https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460)\nExpand description\nAn error report handler for panics and the [`eyre`](https://docs.rs/eyre) crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#tldr)TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#setup)Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support)Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default)Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds)Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo [profile overrides](https://doc.rust-lang.org/cargo/reference/profiles.html#overrides) can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#features)Features\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels)Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by [`examples/usage.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs):\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a [`backtrace::Backtrace`](https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html):\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait)Custom `Section`s for error reports via [`Section`](https://docs.rs/color-eyre/*/color_eyre/trait.Section.html) trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from [`examples/custom_section.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs):\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report)Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is [work being done](https://github.com/rust-lang/rfcs/pull/2895) to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out [`examples/multiple_errors.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs).\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more)Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies [`color-backtrace`](https://docs.rs/color-backtrace) and [`color-spantrace`](https://github.com/yaahc/color-spantrace). `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out [`examples/custom_filter.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs).\n## Re-exports[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#reexports)\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#modules)\n\n[config](https://docs.rs/color-eyre/latest/color_eyre/config/index.html \"mod color_eyre::config\")\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\n[section](https://docs.rs/color-eyre/latest/color_eyre/section/index.html \"mod color_eyre::section\")\n    Helpers for adding custom sections to error reports\n## Structs[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#structs)\n\n[Handler](https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html \"struct color_eyre::Handler\")\n    A custom handler type for [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html) which provides colorful error reports and [`tracing-error`](https://docs.rs/tracing-error) support.\n## Enums[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#enums)\n\n[ErrorKind](https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html \"enum color_eyre::ErrorKind\")`issue-url`\n    The kind of type erased error being reported\n## Functions[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#functions)\n\n[install](https://docs.rs/color-eyre/latest/color_eyre/fn.install.html \"fn color_eyre::install\")\n    Install the default panic and error report hooks\n",
              "markdown_with_citations": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn error report handler for panics and the `eyre`\u27e84\u27e9 crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### \u00a7\u27e85\u27e9TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### \u00a7\u27e86\u27e9Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### \u00a7\u27e87\u27e9Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### \u00a7\u27e88\u27e9Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### \u00a7\u27e89\u27e9Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo profile overrides\u27e810\u27e9 can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### \u00a7\u27e811\u27e9Features\n#### \u00a7\u27e812\u27e9Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by `examples/usage.rs`\u27e813\u27e9:\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a `backtrace::Backtrace`\u27e814\u27e9:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### \u00a7\u27e815\u27e9Custom `Section`s for error reports via `Section`\u27e816\u27e9 trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from `examples/custom_section.rs`\u27e817\u27e9:\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### \u00a7\u27e818\u27e9Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is work being done\u27e819\u27e9 to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out `examples/multiple_errors.rs`\u27e820\u27e9.\n#### \u00a7\u27e821\u27e9Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies `color-backtrace`\u27e822\u27e9 and `color-spantrace`\u27e823\u27e9. `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out `examples/custom_filter.rs`\u27e824\u27e9.\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules\u00a7\u27e826\u27e9\n\nconfig\u27e827\u27e9\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\nsection\u27e828\u27e9\n    Helpers for adding custom sections to error reports\n## Structs\u00a7\u27e829\u27e9\n\nHandler\u27e830\u27e9\n    A custom handler type for `eyre::Report`\u27e831\u27e9 which provides colorful error reports and `tracing-error`\u27e832\u27e9 support.\n## Enums\u00a7\u27e833\u27e9\n\nErrorKind\u27e834\u27e9`issue-url`\n    The kind of type erased error being reported\n## Functions\u00a7\u27e835\u27e9\n\ninstall\u27e836\u27e9\n    Install the default panic and error report hooks\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/color-eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/color-eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460: Source\n\u27e84\u27e9 https://docs.rs/eyre: `eyre`\n\u27e85\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#tldr: \u00a7\n\u27e86\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#setup: \u00a7\n\u27e87\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support: \u00a7\n\u27e88\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default: \u00a7\n\u27e89\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/cargo/reference/profiles.html#overrides: profile overrides\n\u27e811\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#features: \u00a7\n\u27e812\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels: \u00a7\n\u27e813\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs: `examples/usage.rs`\n\u27e814\u27e9 https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html: `backtrace::Backtrace`\n\u27e815\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait: \u00a7\n\u27e816\u27e9 https://docs.rs/color-eyre/*/color_eyre/trait.Section.html: `Section`\n\u27e817\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs: `examples/custom_section.rs`\n\u27e818\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report: \u00a7\n\u27e819\u27e9 https://github.com/rust-lang/rfcs/pull/2895: work being done\n\u27e820\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs: `examples/multiple_errors.rs`\n\u27e821\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more: \u00a7\n\u27e822\u27e9 https://docs.rs/color-backtrace: `color-backtrace`\n\u27e823\u27e9 https://github.com/yaahc/color-spantrace: `color-spantrace`\n\u27e824\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs: `examples/custom_filter.rs`\n\u27e825\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#modules: \u00a7\n\u27e827\u27e9 https://docs.rs/color-eyre/latest/color_eyre/config/index.html: mod color_eyre::config - config\n\u27e828\u27e9 https://docs.rs/color-eyre/latest/color_eyre/section/index.html: mod color_eyre::section - section\n\u27e829\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html: struct color_eyre::Handler - Handler\n\u27e831\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e832\u27e9 https://docs.rs/tracing-error: `tracing-error`\n\u27e833\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html: enum color_eyre::ErrorKind - ErrorKind\n\u27e835\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#functions: \u00a7\n\u27e836\u27e9 https://docs.rs/color-eyre/latest/color_eyre/fn.install.html: fn color_eyre::install - install\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14977,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113353.3670432"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/color-eyre",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [30 releases](https://lib.rs/crates/color-eyre/versions)\n0.6.5 |  May 30, 2025   \n---|---  \n0.6.3 |  Mar 14, 2024   \n0.6.2 |  Jul 11, 2022   \n0.6.1 |  Feb 25, 2022   \n0.5.0 |  Jul 6, 2020   \n#**119** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 281118/week @ 2025-03-10 273119/week @ 2025-03-17 283579/week @ 2025-03-24 277570/week @ 2025-03-31 296951/week @ 2025-04-07 313022/week @ 2025-04-14 313939/week @ 2025-04-21 316669/week @ 2025-04-28 320761/week @ 2025-05-05 326438/week @ 2025-05-12 316301/week @ 2025-05-19 305807/week @ 2025-05-26 322579/week @ 2025-06-02 359169/week @ 2025-06-09 361025/week @ 2025-06-16 346223/week @ 2025-06-23\n**1,410,514** downloads per month Used in [**1,371** crates (1,190 directly)](https://lib.rs/crates/color-eyre/rev)\n**MIT/Apache**\n755KB  3.5K  SLoC\n# color-eyre\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/eyre-rs/eyre/workflows/Continuous%20integration/badge.svg)](https://github.com/eyre-rs/eyre/actions?query=workflow%3A%22Continuous+integration%22) [![Latest Version](https://img.shields.io/crates/v/color-eyre.svg)](https://crates.io/crates/color-eyre) [![Rust Documentation](https://img.shields.io/badge/docs-latest-blue.svg)](https://docs.rs/color-eyre)\nAn error report handler for panics and the [``eyre``](https://docs.rs/eyre) crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n## TLDR\n``color_eyre`` helps you build error reports that look like this:\n![custom section example](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/custom_section.png)\n## Setup\nAdd the following to your toml file:\n```\n```[``dependencies``]`\n`color-eyre ``=` ``\"`0.6`\"``\n``\n```\n\nAnd install the panic and error report handlers:\n```\n``use` `color_eyre`::```eyre`::``Result`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `color_eyre`::``install`(``)``?``;`\n  ``//` ...`\n  `#` `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Disabling tracing support\nIf you don't plan on using ``tracing_error`` and ``SpanTrace`` you can disable the tracing integration to cut down on unused dependencies:\n```\n```[``dependencies``]`\n`color-eyre = { version = \"0.6\", default-features ``=` `false` }\n``\n```\n\n### Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because ``SpanTrace`` capture is significantly cheaper than ``Backtrace`` capture. However, like backtraces, span traces are most useful for debugging applications, and it's not uncommon to want to disable span trace capture by default to keep noise out.\nTo disable span trace capture you must explicitly set one of the env variables that regulate ``SpanTrace`` capture to ````\"`0`\"````:\n```\n``if` `std`::```env`::``var`(```\"`RUST_SPANTRACE`\"```)``.``is_err``(``)` ``{`\n  `std`::```env`::``set_var`(```\"`RUST_SPANTRACE`\"```,` ``\"`0`\"```)``;`\n```}``\n`\n```\n\n### Improving perf on debug builds\nIn debug mode ``color-eyre`` behaves noticably worse than ``eyre``. This is caused by the fact that ``eyre`` uses ```std`::```backtrace`::``Backtrace`` instead of ```backtrace`::``Backtrace``. The std version of backtrace is precompiled with optimizations, this means that whether or not you're in debug mode doesn't matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of ```backtrace`::``Backtrace`` however isn't so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo [profile overrides](https://doc.rust-lang.org/cargo/reference/profiles.html#overrides) can be used to mitigate this problem. By configuring your project to always build ``backtrace`` with optimizations you should get the same performance from ``color-eyre`` that you're used to with ``eyre``. To do so add the following to your Cargo.toml:\n```\n```[``profile.dev.package.backtrace``]`\n`opt-level ``=` `3`\n``\n```\n\n## Features\n### Multiple report format verbosity levels\n``color-eyre`` provides 3 different report formats for how it formats the captured ``SpanTrace`` and ``Backtrace``, minimal, short, and full. Take the below snippets of the output produced by [``examples/usage.rs``](https://github.com/eyre-rs/color-eyre/blob/master/examples/usage.rs):\nRunning ````cargo``` run`` --`example` usage``` without ``RUST_LIB_BACKTRACE`` set will produce a minimal report like this:\n![minimal report format](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/minimal.png)\nRunning ```RUST_LIB_BACKTRACE``=``1` cargo run `-``-`example usage`` tells ``color-eyre`` to use the short format, which additionally capture a [```backtrace`::``Backtrace``](https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html):\n![short report format](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/short.png)\nFinally, running ```RUST_LIB_BACKTRACE``=`full cargo run `-``-`example usage`` tells ``color-eyre`` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n![full report format](https://img.gs/czjpqfbdkz/796/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/full.png)\n### Custom ``Section``s for error reports via [``Section``](https://docs.rs/color-eyre/*/color_eyre/section/trait.Section.html) trait\nThe ``section`` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain ``stderr`` and ``stdout`` from a failed command, taken from [``examples/custom_section.rs``](https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/custom_section.rs):\n```\n``use` `color_eyre`::````{``eyre`::``eyre`,` SectionExt`,` Section`,` `eyre`::``Report```}```;`\n`use` `std`::```process`::``Command`;`\n`use` `tracing`::``instrument`;`\n``trait` `Output` ``{`\n  ``fn` `output2`````(``&``mut` `self````)```` ``->` ``Result``<``String`, Report`>`````;`\n```}```\n``impl` ``Output `for``` `Command` ````{`\n  ``#``[``instrument``]``\n  ``fn` `output2`````(``&``mut` `self````)```` ``->` ``Result``<``String`, Report`>``` ```{`\n    `let` output `=` `self``.``output``(``)``?``;`\n    `let` stdout `=` `String```::``from_utf8_lossy`(``&`output`.`stdout`)``;`\n    `if` `!`output`.`status`.``success``(``)` `{`\n      `let` stderr `=` `String```::``from_utf8_lossy`(``&`output`.`stderr`)``;`\n      `Err``(``eyre!``(```\"`cmd exited with non-zero status code`\"```)``)`\n        `.``with_section``(``move` `||` stdout`.``trim``(``)``.``to_string``(``)``.``header``(```\"`Stdout:`\"```)``)`\n        `.``with_section``(``move` `||` stderr`.``trim``(``)``.``to_string``(``)``.``header``(```\"`Stderr:`\"```)``)`\n    `}` `else` `{`\n      `Ok``(`stdout`.``into``(``)``)`\n    `}`\n  `}``\n```}```\n`\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for ``stdout`` and one for ``stderr``.\nRunning ````cargo``` run`` --`example` custom_section``` shows us how these sections are included in the output:\n![custom section example](https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/custom_section.png)\nOnly the ``Stderr`:``` section actually gets included. The ``cat`` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n### Aggregating multiple errors into one report\nIt's not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is [work being done](https://github.com/rust-lang/rfcs/pull/2895) to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. ``color-eyre`` supports such composition in its error reports via the ``Section`` trait.\nFor an example of how to aggregate errors check out [``examples/multiple_errors.rs``](https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/multiple_errors.rs).\n### Custom configuration for ``color-backtrace`` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn't actually provided by ``color-eyre``, but instead comes from its dependencies [``color-backtrace``](https://docs.rs/color-backtrace) and [``color-spantrace``](https://github.com/eyre-rs/eyre/tree/master/color-spantrace). ``color-backtrace`` in particular has many more features than are exported by ``color-eyre``, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with ``color-eyre``, so to enable their usage we provide the ``install`` fn for setting up a custom ``BacktracePrinter`` with custom filters installed.\nFor an example of how to setup custom filters, check out [``examples/custom_filter.rs``](https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/custom_filter.rs).\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/eyre-rs/eyre/blob/f110d787930322e95f60787ff07b2d3835259357/color-eyre/LICENSE-APACHE) or [MIT license](https://github.com/eyre-rs/eyre/blob/f110d787930322e95f60787ff07b2d3835259357/color-eyre/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~2.5\u20139MB  ~85K SLoC\n  * [backtrace](https://lib.rs/crates/backtrace \"0.3.59\")\n  * [capture-spantrace](https://lib.rs/crates/color-eyre/features#feature-capture-spantrace \"default feature\") [color-spantrace](https://lib.rs/crates/color-spantrace \"0.3\")\n  * [capture-spantrace](https://lib.rs/crates/color-eyre/features#feature-capture-spantrace \"default feature\") [tracing-error](https://lib.rs/crates/tracing-error \"0.2.0\")\n  * [eyre](https://lib.rs/crates/eyre \"0.6\")\n  * [indenter](https://lib.rs/crates/indenter \"0.3.0\")\n  * [once_cell](https://lib.rs/crates/once_cell \"1.18.0\")\n  * [owo-colors](https://lib.rs/crates/owo-colors \"4.0\")\n  * [issue-url?](https://lib.rs/crates/color-eyre/features#feature-issue-url \"optional feature\") [url](https://lib.rs/crates/url \"2.1.1\")\n\n\n  * dev  [ansi-parser](https://lib.rs/crates/ansi-parser \"outdated\") 0.8\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"1.0.0\")\n  * dev  [thiserror](https://lib.rs/crates/thiserror \"outdated\") 1.0\n  * dev  [tracing](https://lib.rs/crates/tracing \"0.1.13\")\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3.0\")[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3.15\") wasm32\n\n\n#### [Other feature](https://lib.rs/crates/color-eyre/features)\n  * [track-caller](https://lib.rs/crates/color-eyre/features#feature-track-caller)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  30 releases\u27e81\u27e9\n0.6.5 |  May 30, 2025   \n---|---  \n0.6.3 |  Mar 14, 2024   \n0.6.2 |  Jul 11, 2022   \n0.6.1 |  Feb 25, 2022   \n0.5.0 |  Jul 6, 2020   \n#**119** in Rust patterns\u27e82\u27e9\nDownload history 281118/week @ 2025-03-10 273119/week @ 2025-03-17 283579/week @ 2025-03-24 277570/week @ 2025-03-31 296951/week @ 2025-04-07 313022/week @ 2025-04-14 313939/week @ 2025-04-21 316669/week @ 2025-04-28 320761/week @ 2025-05-05 326438/week @ 2025-05-12 316301/week @ 2025-05-19 305807/week @ 2025-05-26 322579/week @ 2025-06-02 359169/week @ 2025-06-09 361025/week @ 2025-06-16 346223/week @ 2025-06-23\n**1,410,514** downloads per month Used in **1,371** crates (1,190 directly)\u27e83\u27e9\n**MIT/Apache**\n755KB  3.5K  SLoC\n# color-eyre\n![Build Status\u27e84\u27e9](https://github.com/eyre-rs/eyre/actions?query=workflow%3A%22Continuous+integration%22) ![Latest Version\u27e85\u27e9](https://crates.io/crates/color-eyre) ![Rust Documentation\u27e86\u27e9](https://docs.rs/color-eyre)\nAn error report handler for panics and the ``eyre``\u27e87\u27e9 crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n## TLDR\n``color_eyre`` helps you build error reports that look like this:\n![custom section example\u27e88\u27e9]\n## Setup\nAdd the following to your toml file:\n```\n```[``dependencies``]`\n`color-eyre ``=` ``\"`0.6`\"``\n``\n```\n\nAnd install the panic and error report handlers:\n```\n``use` `color_eyre`::```eyre`::``Result`;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `color_eyre`::``install`(``)``?``;`\n  ``//` ...`\n  `#` `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Disabling tracing support\nIf you don't plan on using ``tracing_error`` and ``SpanTrace`` you can disable the tracing integration to cut down on unused dependencies:\n```\n```[``dependencies``]`\n`color-eyre = { version = \"0.6\", default-features ``=` `false` }\n``\n```\n\n### Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because ``SpanTrace`` capture is significantly cheaper than ``Backtrace`` capture. However, like backtraces, span traces are most useful for debugging applications, and it's not uncommon to want to disable span trace capture by default to keep noise out.\nTo disable span trace capture you must explicitly set one of the env variables that regulate ``SpanTrace`` capture to ````\"`0`\"````:\n```\n``if` `std`::```env`::``var`(```\"`RUST_SPANTRACE`\"```)``.``is_err``(``)` ``{`\n  `std`::```env`::``set_var`(```\"`RUST_SPANTRACE`\"```,` ``\"`0`\"```)``;`\n```}``\n`\n```\n\n### Improving perf on debug builds\nIn debug mode ``color-eyre`` behaves noticably worse than ``eyre``. This is caused by the fact that ``eyre`` uses ```std`::```backtrace`::``Backtrace`` instead of ```backtrace`::``Backtrace``. The std version of backtrace is precompiled with optimizations, this means that whether or not you're in debug mode doesn't matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of ```backtrace`::``Backtrace`` however isn't so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo profile overrides\u27e89\u27e9 can be used to mitigate this problem. By configuring your project to always build ``backtrace`` with optimizations you should get the same performance from ``color-eyre`` that you're used to with ``eyre``. To do so add the following to your Cargo.toml:\n```\n```[``profile.dev.package.backtrace``]`\n`opt-level ``=` `3`\n``\n```\n\n## Features\n### Multiple report format verbosity levels\n``color-eyre`` provides 3 different report formats for how it formats the captured ``SpanTrace`` and ``Backtrace``, minimal, short, and full. Take the below snippets of the output produced by ``examples/usage.rs``\u27e810\u27e9:\nRunning ````cargo``` run`` --`example` usage``` without ``RUST_LIB_BACKTRACE`` set will produce a minimal report like this:\n![minimal report format\u27e811\u27e9]\nRunning ```RUST_LIB_BACKTRACE``=``1` cargo run `-``-`example usage`` tells ``color-eyre`` to use the short format, which additionally capture a ```backtrace`::``Backtrace``\u27e812\u27e9:\n![short report format\u27e813\u27e9]\nFinally, running ```RUST_LIB_BACKTRACE``=`full cargo run `-``-`example usage`` tells ``color-eyre`` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n![full report format\u27e814\u27e9]\n### Custom ``Section``s for error reports via ``Section``\u27e815\u27e9 trait\nThe ``section`` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain ``stderr`` and ``stdout`` from a failed command, taken from ``examples/custom_section.rs``\u27e816\u27e9:\n```\n``use` `color_eyre`::````{``eyre`::``eyre`,` SectionExt`,` Section`,` `eyre`::``Report```}```;`\n`use` `std`::```process`::``Command`;`\n`use` `tracing`::``instrument`;`\n``trait` `Output` ``{`\n  ``fn` `output2`````(``&``mut` `self````)```` ``->` ``Result``<``String`, Report`>`````;`\n```}```\n``impl` ``Output `for``` `Command` ````{`\n  ``#``[``instrument``]``\n  ``fn` `output2`````(``&``mut` `self````)```` ``->` ``Result``<``String`, Report`>``` ```{`\n    `let` output `=` `self``.``output``(``)``?``;`\n    `let` stdout `=` `String```::``from_utf8_lossy`(``&`output`.`stdout`)``;`\n    `if` `!`output`.`status`.``success``(``)` `{`\n      `let` stderr `=` `String```::``from_utf8_lossy`(``&`output`.`stderr`)``;`\n      `Err``(``eyre!``(```\"`cmd exited with non-zero status code`\"```)``)`\n        `.``with_section``(``move` `||` stdout`.``trim``(``)``.``to_string``(``)``.``header``(```\"`Stdout:`\"```)``)`\n        `.``with_section``(``move` `||` stderr`.``trim``(``)``.``to_string``(``)``.``header``(```\"`Stderr:`\"```)``)`\n    `}` `else` `{`\n      `Ok``(`stdout`.``into``(``)``)`\n    `}`\n  `}``\n```}```\n`\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for ``stdout`` and one for ``stderr``.\nRunning ````cargo``` run`` --`example` custom_section``` shows us how these sections are included in the output:\n![custom section example\u27e88\u27e9]\nOnly the ``Stderr`:``` section actually gets included. The ``cat`` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n### Aggregating multiple errors into one report\nIt's not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is work being done\u27e817\u27e9 to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. ``color-eyre`` supports such composition in its error reports via the ``Section`` trait.\nFor an example of how to aggregate errors check out ``examples/multiple_errors.rs``\u27e818\u27e9.\n### Custom configuration for ``color-backtrace`` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn't actually provided by ``color-eyre``, but instead comes from its dependencies ``color-backtrace``\u27e819\u27e9 and ``color-spantrace``\u27e820\u27e9. ``color-backtrace`` in particular has many more features than are exported by ``color-eyre``, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with ``color-eyre``, so to enable their usage we provide the ``install`` fn for setting up a custom ``BacktracePrinter`` with custom filters installed.\nFor an example of how to setup custom filters, check out ``examples/custom_filter.rs``\u27e821\u27e9.\n#### License\nLicensed under either of Apache License, Version 2.0\u27e822\u27e9 or MIT license\u27e823\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~2.5\u20139MB  ~85K SLoC\n  * backtrace\u27e824\u27e9\n  * capture-spantrace\u27e825\u27e9 color-spantrace\u27e826\u27e9\n  * capture-spantrace\u27e825\u27e9 tracing-error\u27e827\u27e9\n  * eyre\u27e828\u27e9\n  * indenter\u27e829\u27e9\n  * once_cell\u27e830\u27e9\n  * owo-colors\u27e831\u27e9\n  * issue-url?\u27e832\u27e9 url\u27e833\u27e9\n\n\n  * dev  ansi-parser\u27e834\u27e9 0.8\n  * dev  pretty_assertions\u27e835\u27e9\n  * dev  thiserror\u27e836\u27e9 1.0\n  * dev  tracing\u27e837\u27e9\n  * dev  tracing-subscriber\u27e838\u27e9+env-filter\u27e839\u27e9\n  * dev  wasm-bindgen-test\u27e840\u27e9 wasm32\n\n\n#### Other feature\u27e841\u27e9\n  * track-caller\u27e842\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/color-eyre/versions: 30 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/color-eyre/rev: **1,371** crates (1,190 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/eyre-rs/eyre/workflows/Continuous%20integration/badge.svg: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/color-eyre.svg: ![Latest Version\n\u27e86\u27e9 https://img.shields.io/badge/docs-latest-blue.svg: ![Rust Documentation\n\u27e87\u27e9 https://docs.rs/eyre: ``eyre``\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/custom_section.png: custom section example\n\u27e89\u27e9 https://doc.rust-lang.org/cargo/reference/profiles.html#overrides: profile overrides\n\u27e810\u27e9 https://github.com/eyre-rs/color-eyre/blob/master/examples/usage.rs: ``examples/usage.rs``\n\u27e811\u27e9 https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/minimal.png: minimal report format\n\u27e812\u27e9 https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html: ```backtrace`::``Backtrace``\n\u27e813\u27e9 https://img.gs/czjpqfbdkz/800/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/short.png: short report format\n\u27e814\u27e9 https://img.gs/czjpqfbdkz/796/https://raw.githubusercontent.com/eyre-rs/eyre/f110d787930322e95f60787ff07b2d3835259357/color-eyre/pictures/full.png: full report format\n\u27e815\u27e9 https://docs.rs/color-eyre/*/color_eyre/section/trait.Section.html: ``Section``\n\u27e816\u27e9 https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/custom_section.rs: ``examples/custom_section.rs``\n\u27e817\u27e9 https://github.com/rust-lang/rfcs/pull/2895: work being done\n\u27e818\u27e9 https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/multiple_errors.rs: ``examples/multiple_errors.rs``\n\u27e819\u27e9 https://docs.rs/color-backtrace: ``color-backtrace``\n\u27e820\u27e9 https://github.com/eyre-rs/eyre/tree/master/color-spantrace: ``color-spantrace``\n\u27e821\u27e9 https://github.com/eyre-rs/eyre/blob/master/color-eyre/examples/custom_filter.rs: ``examples/custom_filter.rs``\n\u27e822\u27e9 https://github.com/eyre-rs/eyre/blob/f110d787930322e95f60787ff07b2d3835259357/color-eyre/LICENSE-APACHE: Apache License, Version 2.0\n\u27e823\u27e9 https://github.com/eyre-rs/eyre/blob/f110d787930322e95f60787ff07b2d3835259357/color-eyre/LICENSE-MIT: MIT license\n\u27e824\u27e9 https://lib.rs/crates/backtrace: 0.3.59 - backtrace\n\u27e825\u27e9 https://lib.rs/crates/color-eyre/features#feature-capture-spantrace: default feature - capture-spantrace\n\u27e826\u27e9 https://lib.rs/crates/color-spantrace: 0.3 - color-spantrace\n\u27e827\u27e9 https://lib.rs/crates/tracing-error: 0.2.0 - tracing-error\n\u27e828\u27e9 https://lib.rs/crates/eyre: 0.6 - eyre\n\u27e829\u27e9 https://lib.rs/crates/indenter: 0.3.0 - indenter\n\u27e830\u27e9 https://lib.rs/crates/once_cell: 1.18.0 - once_cell\n\u27e831\u27e9 https://lib.rs/crates/owo-colors: 4.0 - owo-colors\n\u27e832\u27e9 https://lib.rs/crates/color-eyre/features#feature-issue-url: optional feature - issue-url?\n\u27e833\u27e9 https://lib.rs/crates/url: 2.1.1 - url\n\u27e834\u27e9 https://lib.rs/crates/ansi-parser: outdated - ansi-parser\n\u27e835\u27e9 https://lib.rs/crates/pretty_assertions: 1.0.0 - pretty_assertions\n\u27e836\u27e9 https://lib.rs/crates/thiserror: outdated - thiserror\n\u27e837\u27e9 https://lib.rs/crates/tracing: 0.1.13 - tracing\n\u27e838\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3.0 - tracing-subscriber\n\u27e839\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e840\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3.15 - wasm-bindgen-test\n\u27e841\u27e9 https://lib.rs/crates/color-eyre/features: Other feature\n\u27e842\u27e9 https://lib.rs/crates/color-eyre/features#feature-track-caller: track-caller\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11624,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113353.9822998"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "overload",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liboverload-80eda056175843f2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indenter@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indenter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libindenter-413c215e8c882e7e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.19.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libonce_cell-3233bdf4c3fe14ff.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liblog-30e9f71cc8b15970.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsmallvec-25de0ffaa5ec55c5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-84a57c602bd23b72\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-84a57c602bd23b72\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.23\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\librustc_demangle-12325b0487f3668b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-395d58bd94e82150\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-395d58bd94e82150\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libthread_local-677ff640e461b40f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-9ff30d45ea836459\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "processenv"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-3777aef685c47559\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-3777aef685c47559\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-8efd0ff92cab5e3e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "linked_libs": [
                "dylib=gdi32",
                "dylib=kernel32",
                "dylib=msimg32",
                "dylib=opengl32",
                "dylib=winspool"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"wincon\"",
                "feature=\"windef\"",
                "feature=\"ntdef\"",
                "feature=\"ktmtypes\"",
                "feature=\"guiddef\"",
                "feature=\"wingdi\"",
                "feature=\"excpt\"",
                "feature=\"basetsd\"",
                "feature=\"minwindef\"",
                "feature=\"vcruntime\"",
                "feature=\"minwinbase\"",
                "feature=\"winnt\"",
                "feature=\"wincontypes\"",
                "feature=\"ntstatus\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-13b86b11ba3c2f9d\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "track_caller",
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-28b5bda19fb10099\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "once_cell",
                "std",
                "valuable"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_core-4e0215fa53e351d0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sharded_slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsharded_slab-c8b7d810c8d088de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "log-tracer",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_log-c982a4518f2bb853.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libeyre-ddaf469092b0122f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#owo-colors@4.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\owo-colors-4.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "owo_colors",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\owo-colors-4.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libowo_colors-6218f5466fe85aea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libquote-ecd89142360261ac.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libquote-ecd89142360261ac.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.94\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcc-884a762c7b6063a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcc-884a762c7b6063a6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "unicode-case",
                "unicode-perl"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_syntax-c4cfed36b94c2dff.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-c1c2a2dc90fa726d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-c1c2a2dc90fa726d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-ec7841888b2e3f26\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_syntax-c8b8096d399830ea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libbacktrace-728bec9b932cdc5d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "processenv"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libwinapi-3b9cde4d199ac1ef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nu_ansi_term",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libnu_ansi_term-3ef72ca08d4bda05.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "regex-syntax",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_automata-9bf6db98001865e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matchers",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libmatchers-4f914703f59946f5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "meta",
                "nfa-pikevm",
                "nfa-thompson",
                "std",
                "syntax",
                "unicode-case",
                "unicode-perl",
                "unicode-word-boundary"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_automata-a89d20e842a12695.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@1.10.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "unicode-case",
                "unicode-perl"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex-4499a3d6ccef5e32.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsyn-528c49f68f484636.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsyn-528c49f68f484636.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "default",
                "std",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing-ce7efc6ba0f8fb7b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_subscriber",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "ansi",
                "default",
                "env-filter",
                "fmt",
                "matchers",
                "nu-ansi-term",
                "once_cell",
                "regex",
                "registry",
                "sharded-slab",
                "smallvec",
                "std",
                "thread_local",
                "tracing",
                "tracing-log"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_subscriber-4c6fcf4c72e77eab.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-error@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-error-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-error-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "traced-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_error-d17fc6e98ceab02e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_spantrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcolor_spantrace-5618d7ed5b13192e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:825:33\n    |\n825 |     panic_info: &'a std::panic::PanicInfo<'a>,\n    |                                 ^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(deprecated)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 27807,
                    "byte_start": 27798,
                    "column_end": 42,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 825,
                    "line_start": 825,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 33,
                        "text": "    panic_info: &'a std::panic::PanicInfo<'a>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:793:40\n    |\n793 |     fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    |                                        ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 26548,
                    "byte_start": 26539,
                    "column_end": 49,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 793,
                    "line_start": 793,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 40,
                        "text": "    fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:952:34\n    |\n952 |     ) -> Box<dyn Fn(&std::panic::PanicInfo<'_>) + Send + Sync + 'static> {\n    |                                  ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 31827,
                    "byte_start": 31818,
                    "column_end": 43,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 952,
                    "line_start": 952,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 34,
                        "text": "    ) -> Box<dyn Fn(&std::panic::PanicInfo<'_>) + Send + Sync + 'static> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:962:37\n    |\n962 |         panic_info: &'a std::panic::PanicInfo<'_>,\n    |                                     ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 32166,
                    "byte_start": 32157,
                    "column_end": 46,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 962,
                    "line_start": 962,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 37,
                        "text": "        panic_info: &'a std::panic::PanicInfo<'_>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\section\\mod.rs:332:40\n    |\n332 |     fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result;\n    |                                        ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 11412,
                    "byte_start": 11403,
                    "column_end": 49,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\section\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 332,
                    "line_start": 332,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 40,
                        "text": "    fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "capture-spantrace",
                "color-spantrace",
                "default",
                "tracing-error",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcolor_eyre-8652b1b6c6de2f60.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-b556ba88a67abee3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\proc-macro2-8efd0ff92cab5e3e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libunicode_ident-bf7f156b09e9f547.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.19.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libonce_cell-3233bdf4c3fe14ff.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "processenv"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-3777aef685c47559\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-3777aef685c47559\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.6.29\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "unicode",
                "unicode-age",
                "unicode-bool",
                "unicode-case",
                "unicode-gencat",
                "unicode-perl",
                "unicode-script",
                "unicode-segment"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_syntax-c8b8096d399830ea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_syntax",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-syntax-0.8.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "unicode-case",
                "unicode-perl"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_syntax-c4cfed36b94c2dff.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "overload",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\overload-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liboverload-80eda056175843f2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liblog-30e9f71cc8b15970.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.0.94",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.94\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.0.94\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcc-884a762c7b6063a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcc-884a762c7b6063a6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.13.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsmallvec-25de0ffaa5ec55c5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-395d58bd94e82150\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-395d58bd94e82150\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-84a57c602bd23b72\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-84a57c602bd23b72\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.23",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.23\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\librustc_demangle-12325b0487f3668b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.81",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.81\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libproc_macro2-46354eba22a5a40e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-core-0.1.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "once_cell",
                "std",
                "valuable"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_core-4e0215fa53e351d0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "linked_libs": [
                "dylib=gdi32",
                "dylib=kernel32",
                "dylib=msimg32",
                "dylib=opengl32",
                "dylib=winspool"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"wincon\"",
                "feature=\"windef\"",
                "feature=\"ntdef\"",
                "feature=\"ktmtypes\"",
                "feature=\"guiddef\"",
                "feature=\"wingdi\"",
                "feature=\"excpt\"",
                "feature=\"basetsd\"",
                "feature=\"minwindef\"",
                "feature=\"vcruntime\"",
                "feature=\"minwinbase\"",
                "feature=\"winnt\"",
                "feature=\"wincontypes\"",
                "feature=\"ntstatus\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\winapi-13b86b11ba3c2f9d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.4.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "meta",
                "nfa-pikevm",
                "nfa-thompson",
                "std",
                "syntax",
                "unicode-case",
                "unicode-perl",
                "unicode-word-boundary"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_automata-a89d20e842a12695.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex_automata",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-automata-0.1.10\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "regex-syntax",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex_automata-9bf6db98001865e4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sharded_slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sharded-slab-0.1.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsharded_slab-c8b7d810c8d088de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thread_local",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thread_local-1.1.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libthread_local-677ff640e461b40f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-c1c2a2dc90fa726d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-c1c2a2dc90fa726d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "track_caller",
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\eyre-28b5bda19fb10099\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "stable"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\color-spantrace-9ff30d45ea836459\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indenter@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indenter",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indenter-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libindenter-413c215e8c882e7e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#owo-colors@4.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\owo-colors-4.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "owo_colors",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\owo-colors-4.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libowo_colors-6218f5466fe85aea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.36",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.36\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libquote-ecd89142360261ac.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libquote-ecd89142360261ac.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "processenv"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libwinapi-3b9cde4d199ac1ef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-log-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "log-tracer",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_log-c982a4518f2bb853.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#regex@1.10.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "regex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\regex-1.10.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std",
                "unicode-case",
                "unicode-perl"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libregex-4499a3d6ccef5e32.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "matchers",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\matchers-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libmatchers-4f914703f59946f5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\build\\backtrace-ec7841888b2e3f26\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#eyre@0.6.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "eyre",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\eyre-0.6.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "auto-install",
                "default",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libeyre-ddaf469092b0122f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.60",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.60\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsyn-528c49f68f484636.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libsyn-528c49f68f484636.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "nu_ansi_term",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\nu-ansi-term-0.46.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libnu_ansi_term-3ef72ca08d4bda05.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#backtrace@0.3.71",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\backtrace-0.3.71\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libbacktrace-728bec9b932cdc5d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tracing_attributes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-attributes-0.1.27\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\tracing_attributes-d9ad0fd26fc41e36.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-0.1.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "attributes",
                "default",
                "std",
                "tracing-attributes"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing-ce7efc6ba0f8fb7b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_subscriber",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-subscriber-0.3.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "ansi",
                "default",
                "env-filter",
                "fmt",
                "matchers",
                "nu-ansi-term",
                "once_cell",
                "regex",
                "registry",
                "sharded-slab",
                "smallvec",
                "std",
                "thread_local",
                "tracing",
                "tracing-log"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_subscriber-4c6fcf4c72e77eab.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tracing-error@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-error-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tracing_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tracing-error-0.2.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "traced-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libtracing_error-d17fc6e98ceab02e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#color-spantrace@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_spantrace",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\color-spantrace-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcolor_spantrace-5618d7ed5b13192e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:825:33\n    |\n825 |     panic_info: &'a std::panic::PanicInfo<'a>,\n    |                                 ^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(deprecated)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 27807,
                    "byte_start": 27798,
                    "column_end": 42,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 825,
                    "line_start": 825,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 33,
                        "text": "    panic_info: &'a std::panic::PanicInfo<'a>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:793:40\n    |\n793 |     fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    |                                        ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 26548,
                    "byte_start": 26539,
                    "column_end": 49,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 793,
                    "line_start": 793,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 40,
                        "text": "    fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:952:34\n    |\n952 |     ) -> Box<dyn Fn(&std::panic::PanicInfo<'_>) + Send + Sync + 'static> {\n    |                                  ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 31827,
                    "byte_start": 31818,
                    "column_end": 43,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 952,
                    "line_start": 952,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 34,
                        "text": "    ) -> Box<dyn Fn(&std::panic::PanicInfo<'_>) + Send + Sync + 'static> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\config.rs:962:37\n    |\n962 |         panic_info: &'a std::panic::PanicInfo<'_>,\n    |                                     ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 32166,
                    "byte_start": 32157,
                    "column_end": 46,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 962,
                    "line_start": 962,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 37,
                        "text": "        panic_info: &'a std::panic::PanicInfo<'_>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead\n   --> src\\section\\mod.rs:332:40\n    |\n332 |     fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result;\n    |                                        ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "deprecated",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of deprecated type alias `std::panic::PanicInfo`: use `PanicHookInfo` instead",
                "spans": [
                  {
                    "byte_end": 11412,
                    "byte_start": 11403,
                    "column_end": 49,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\section\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 332,
                    "line_start": 332,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 40,
                        "text": "    fn display(&self, pi: &std::panic::PanicInfo<'_>, f: &mut fmt::Formatter<'_>) -> fmt::Result;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\config.rs:274:17\n    |\n274 |                 write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n274 -                 write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;\n274 +                 write!(&mut f, \"{cur_line_no:>8} \u2502 {line}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9233,
                        "byte_start": 9233,
                        "column_end": 34,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "cur_line_no",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 34,
                            "text": "                write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 9243,
                        "byte_start": 9243,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "line",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "                write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 9258,
                        "byte_start": 9245,
                        "column_end": 57,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 44,
                            "text": "                write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 9264,
                        "byte_start": 9258,
                        "column_end": 63,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 274,
                        "line_start": 274,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 57,
                            "text": "                write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9265,
                    "byte_start": 9216,
                    "column_end": 64,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 17,
                        "text": "                write!(&mut f, \"{:>8} \u2502 {}\", cur_line_no, line)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\config.rs:840:9\n    |\n840 |         write!(&mut separated.ready(), \"{}\", section)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n840 -         write!(&mut separated.ready(), \"{}\", section)?;\n840 +         write!(&mut separated.ready(), \"{section}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28322,
                        "byte_start": 28322,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 840,
                        "line_start": 840,
                        "suggested_replacement": "section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "        write!(&mut separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 28333,
                        "byte_start": 28324,
                        "column_end": 53,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 840,
                        "line_start": 840,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 44,
                            "text": "        write!(&mut separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 28334,
                    "byte_start": 28289,
                    "column_end": 54,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 840,
                    "line_start": 840,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 9,
                        "text": "        write!(&mut separated.ready(), \"{}\", section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\config.rs:856:9\n    |\n856 | /         write!(\n857 | |             indented(&mut separated.ready()).with_format(Format::Uniform { indentation: \"  \" }),\n858 | |             \"{}\",\n859 | |             fmted_bt\n860 | |         )?;\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28867,
                        "byte_start": 28867,
                        "column_end": 15,
                        "column_start": 15,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 858,
                        "line_start": 858,
                        "suggested_replacement": "fmted_bt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 15,
                            "text": "            \"{}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 28891,
                        "byte_start": 28869,
                        "column_end": 21,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 859,
                        "line_start": 858,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 17,
                            "text": "            \"{}\","
                          },
                          {
                            "highlight_end": 21,
                            "highlight_start": 1,
                            "text": "            fmted_bt"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 28901,
                    "byte_start": 28748,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 860,
                    "line_start": 856,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        write!("
                      },
                      {
                        "highlight_end": 97,
                        "highlight_start": 1,
                        "text": "            indented(&mut separated.ready()).with_format(Format::Uniform { indentation: \"  \" }),"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "            \"{}\","
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "            fmted_bt"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        )?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\config.rs:870:9\n    |\n870 |         write!(&mut separated.ready(), \"{}\", env_section)?;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n870 -         write!(&mut separated.ready(), \"{}\", env_section)?;\n870 +         write!(&mut separated.ready(), \"{env_section}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 29184,
                        "byte_start": 29184,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 870,
                        "line_start": 870,
                        "suggested_replacement": "env_section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "        write!(&mut separated.ready(), \"{}\", env_section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 29199,
                        "byte_start": 29186,
                        "column_end": 57,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\config.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 870,
                        "line_start": 870,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 44,
                            "text": "        write!(&mut separated.ready(), \"{}\", env_section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 29200,
                    "byte_start": 29151,
                    "column_end": 58,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\config.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 870,
                    "line_start": 870,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 9,
                        "text": "        write!(&mut separated.ready(), \"{}\", env_section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\handler.rs:88:13\n   |\n88 |             write!(separated.ready(), \"{}\", section)?;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n88 -             write!(separated.ready(), \"{}\", section)?;\n88 +             write!(separated.ready(), \"{section}\")?;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2477,
                        "byte_start": 2477,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": "section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "            write!(separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2488,
                        "byte_start": 2479,
                        "column_end": 52,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 43,
                            "text": "            write!(separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2489,
                    "byte_start": 2449,
                    "column_end": 53,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\handler.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 13,
                        "text": "            write!(separated.ready(), \"{}\", section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\handler.rs:96:13\n   |\n96 |             write!(separated.ready(), \"{}\", section)?;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n96 -             write!(separated.ready(), \"{}\", section)?;\n96 +             write!(separated.ready(), \"{section}\")?;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2681,
                        "byte_start": 2681,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "            write!(separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2692,
                        "byte_start": 2683,
                        "column_end": 52,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 43,
                            "text": "            write!(separated.ready(), \"{}\", section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2693,
                    "byte_start": 2653,
                    "column_end": 53,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\handler.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 13,
                        "text": "            write!(separated.ready(), \"{}\", section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\handler.rs:120:17\n    |\n120 | /                 write!(\n121 | |                     indented(&mut separated.ready())\n122 | |                         .with_format(Format::Uniform { indentation: \"  \" }),\n123 | |                     \"{}\",\n124 | |                     fmted_bt\n125 | |                 )?;\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3541,
                        "byte_start": 3541,
                        "column_end": 23,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 123,
                        "suggested_replacement": "fmted_bt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 23,
                            "highlight_start": 23,
                            "text": "                    \"{}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3573,
                        "byte_start": 3543,
                        "column_end": 29,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 124,
                        "line_start": 123,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 25,
                            "text": "                    \"{}\","
                          },
                          {
                            "highlight_end": 29,
                            "highlight_start": 1,
                            "text": "                    fmted_bt"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3591,
                    "byte_start": 3381,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\handler.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 125,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "                write!("
                      },
                      {
                        "highlight_end": 53,
                        "highlight_start": 1,
                        "text": "                    indented(&mut separated.ready())"
                      },
                      {
                        "highlight_end": 77,
                        "highlight_start": 1,
                        "text": "                        .with_format(Format::Uniform { indentation: \"  \" }),"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "                    \"{}\","
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "                    fmted_bt"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\handler.rs:138:13\n    |\n138 |             write!(&mut f, \"{}\", section)?;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n138 -             write!(&mut f, \"{}\", section)?;\n138 +             write!(&mut f, \"{section}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3920,
                        "byte_start": 3920,
                        "column_end": 30,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 138,
                        "line_start": 138,
                        "suggested_replacement": "section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 30,
                            "text": "            write!(&mut f, \"{}\", section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3931,
                        "byte_start": 3922,
                        "column_end": 41,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 138,
                        "line_start": 138,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 32,
                            "text": "            write!(&mut f, \"{}\", section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3932,
                    "byte_start": 3903,
                    "column_end": 42,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\handler.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 13,
                        "text": "            write!(&mut f, \"{}\", section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\handler.rs:149:13\n    |\n149 |             write!(&mut separated.ready(), \"{}\", env_section)?;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n149 -             write!(&mut separated.ready(), \"{}\", env_section)?;\n149 +             write!(&mut separated.ready(), \"{env_section}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4253,
                        "byte_start": 4253,
                        "column_end": 46,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": "env_section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "            write!(&mut separated.ready(), \"{}\", env_section)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 4268,
                        "byte_start": 4255,
                        "column_end": 61,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\handler.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 48,
                            "text": "            write!(&mut separated.ready(), \"{}\", env_section)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4269,
                    "byte_start": 4220,
                    "column_end": 62,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\handler.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 13,
                        "text": "            write!(&mut separated.ready(), \"{}\", env_section)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\section\\help.rs:278:42\n    |\n278 |             HelpInfo::Custom(section) => write!(f, \"{}\", section),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n278 -             HelpInfo::Custom(section) => write!(f, \"{}\", section),\n278 +             HelpInfo::Custom(section) => write!(f, \"{section}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7939,
                        "byte_start": 7939,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 278,
                        "suggested_replacement": "section",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "            HelpInfo::Custom(section) => write!(f, \"{}\", section),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7950,
                        "byte_start": 7941,
                        "column_end": 65,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 278,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 56,
                            "text": "            HelpInfo::Custom(section) => write!(f, \"{}\", section),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7951,
                    "byte_start": 7927,
                    "column_end": 66,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\section\\help.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 278,
                    "line_start": 278,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 42,
                        "text": "            HelpInfo::Custom(section) => write!(f, \"{}\", section),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\section\\help.rs:303:25\n    |\n303 |                 .field(&format_args!(\"{}\", note))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n303 -                 .field(&format_args!(\"{}\", note))\n303 +                 .field(&format_args!(\"{note}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8744,
                        "byte_start": 8744,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 303,
                        "line_start": 303,
                        "suggested_replacement": "note",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                .field(&format_args!(\"{}\", note))"
                          }
                        ]
                      },
                      {
                        "byte_end": 8752,
                        "byte_start": 8746,
                        "column_end": 48,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 303,
                        "line_start": 303,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 42,
                            "text": "                .field(&format_args!(\"{}\", note))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 8753,
                    "byte_start": 8729,
                    "column_end": 49,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\section\\help.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 303,
                    "line_start": 303,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 25,
                        "text": "                .field(&format_args!(\"{}\", note))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\section\\help.rs:307:25\n    |\n307 |                 .field(&format_args!(\"{}\", warning))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n307 -                 .field(&format_args!(\"{}\", warning))\n307 +                 .field(&format_args!(\"{warning}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8909,
                        "byte_start": 8909,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 307,
                        "line_start": 307,
                        "suggested_replacement": "warning",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                .field(&format_args!(\"{}\", warning))"
                          }
                        ]
                      },
                      {
                        "byte_end": 8920,
                        "byte_start": 8911,
                        "column_end": 51,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 307,
                        "line_start": 307,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 42,
                            "text": "                .field(&format_args!(\"{}\", warning))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 8921,
                    "byte_start": 8894,
                    "column_end": 52,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\section\\help.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 307,
                    "line_start": 307,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 25,
                        "text": "                .field(&format_args!(\"{}\", warning))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\section\\help.rs:311:25\n    |\n311 |                 .field(&format_args!(\"{}\", suggestion))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n311 -                 .field(&format_args!(\"{}\", suggestion))\n311 +                 .field(&format_args!(\"{suggestion}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9086,
                        "byte_start": 9086,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 311,
                        "line_start": 311,
                        "suggested_replacement": "suggestion",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                .field(&format_args!(\"{}\", suggestion))"
                          }
                        ]
                      },
                      {
                        "byte_end": 9100,
                        "byte_start": 9088,
                        "column_end": 54,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 311,
                        "line_start": 311,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 42,
                            "text": "                .field(&format_args!(\"{}\", suggestion))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9101,
                    "byte_start": 9071,
                    "column_end": 55,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\section\\help.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 311,
                    "line_start": 311,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 25,
                        "text": "                .field(&format_args!(\"{}\", suggestion))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\section\\help.rs:315:25\n    |\n315 |                 .field(&format_args!(\"{}\", custom))\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n315 -                 .field(&format_args!(\"{}\", custom))\n315 +                 .field(&format_args!(\"{custom}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9261,
                        "byte_start": 9261,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 315,
                        "line_start": 315,
                        "suggested_replacement": "custom",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                .field(&format_args!(\"{}\", custom))"
                          }
                        ]
                      },
                      {
                        "byte_end": 9271,
                        "byte_start": 9263,
                        "column_end": 50,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\section\\help.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 315,
                        "line_start": 315,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 42,
                            "text": "                .field(&format_args!(\"{}\", custom))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9272,
                    "byte_start": 9246,
                    "column_end": 51,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\section\\help.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 315,
                    "line_start": 315,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 25,
                        "text": "                .field(&format_args!(\"{}\", custom))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptjph7vfw/color-eyre-0.6.5#color-eyre@0.6.5",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "color_eyre",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "capture-spantrace",
                "color-spantrace",
                "default",
                "tracing-error",
                "track-caller"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptjph7vfw\\color-eyre-0.6.5\\target\\debug\\deps\\libcolor_eyre-a59e938639021bb1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 85
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.5.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6",
                    "dependencies": [
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.23",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "heapless",
                    "version": "0.5.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "74911a68a1658cfcfb61bc0ccfbd536e3b6e906f8c2f7883ee50157e3e2184f1",
                    "dependencies": [
                      {
                        "name": "as-slice",
                        "version": "0.1.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "generic-array",
                        "version": "0.13.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "hash32",
                        "version": "0.1.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stable_deref_trait",
                        "version": "1.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0145",
                    "package": "heapless",
                    "title": "Use-after-free when cloning a partially consumed `Vec` iterator",
                    "description": "The `IntoIter` `Clone` implementation clones the whole underlying `Vec`.\nIf the iterator is partially consumed the consumed items will be copied, thus creating a use-after-free access.\n\nA proof of concept is available in the original bug report.",
                    "date": "2020-11-02",
                    "aliases": [
                      "CVE-2020-36464",
                      "GHSA-qgwf-r2jj-2ccv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "memory-exposure"
                    ],
                    "keywords": [
                      "use-after-free"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/japaric/heapless/issues/181",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "heapless::vec::IntoIter::clone": [
                        "<=0.6"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.1"
                    ],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "color-eyre",
          "version": "0.6.5",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\n[Settings](https://docs.rs/color-eyre/latest/settings.html)\n[Help](https://docs.rs/color-eyre/latest/help.html)\nSummary[Source](https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460)\nExpand description\nAn error report handler for panics and the [`eyre`](https://docs.rs/eyre) crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#tldr)TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#setup)Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support)Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default)Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds)Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo [profile overrides](https://doc.rust-lang.org/cargo/reference/profiles.html#overrides) can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#features)Features\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels)Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by [`examples/usage.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs):\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a [`backtrace::Backtrace`](https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html):\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait)Custom `Section`s for error reports via [`Section`](https://docs.rs/color-eyre/*/color_eyre/trait.Section.html) trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from [`examples/custom_section.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs):\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report)Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is [work being done](https://github.com/rust-lang/rfcs/pull/2895) to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out [`examples/multiple_errors.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs).\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more)Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies [`color-backtrace`](https://docs.rs/color-backtrace) and [`color-spantrace`](https://github.com/yaahc/color-spantrace). `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out [`examples/custom_filter.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs).\n## Re-exports[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#reexports)\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#modules)\n\n[config](https://docs.rs/color-eyre/latest/color_eyre/config/index.html \"mod color_eyre::config\")\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\n[section](https://docs.rs/color-eyre/latest/color_eyre/section/index.html \"mod color_eyre::section\")\n    Helpers for adding custom sections to error reports\n## Structs[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#structs)\n\n[Handler](https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html \"struct color_eyre::Handler\")\n    A custom handler type for [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html) which provides colorful error reports and [`tracing-error`](https://docs.rs/tracing-error) support.\n## Enums[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#enums)\n\n[ErrorKind](https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html \"enum color_eyre::ErrorKind\")`issue-url`\n    The kind of type erased error being reported\n## Functions[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#functions)\n\n[install](https://docs.rs/color-eyre/latest/color_eyre/fn.install.html \"fn color_eyre::install\")\n    Install the default panic and error report hooks\n",
            "markdown_with_citations": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn error report handler for panics and the `eyre`\u27e84\u27e9 crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### \u00a7\u27e85\u27e9TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### \u00a7\u27e86\u27e9Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### \u00a7\u27e87\u27e9Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### \u00a7\u27e88\u27e9Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### \u00a7\u27e89\u27e9Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo profile overrides\u27e810\u27e9 can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### \u00a7\u27e811\u27e9Features\n#### \u00a7\u27e812\u27e9Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by `examples/usage.rs`\u27e813\u27e9:\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a `backtrace::Backtrace`\u27e814\u27e9:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### \u00a7\u27e815\u27e9Custom `Section`s for error reports via `Section`\u27e816\u27e9 trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from `examples/custom_section.rs`\u27e817\u27e9:\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### \u00a7\u27e818\u27e9Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is work being done\u27e819\u27e9 to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out `examples/multiple_errors.rs`\u27e820\u27e9.\n#### \u00a7\u27e821\u27e9Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies `color-backtrace`\u27e822\u27e9 and `color-spantrace`\u27e823\u27e9. `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out `examples/custom_filter.rs`\u27e824\u27e9.\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules\u00a7\u27e826\u27e9\n\nconfig\u27e827\u27e9\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\nsection\u27e828\u27e9\n    Helpers for adding custom sections to error reports\n## Structs\u00a7\u27e829\u27e9\n\nHandler\u27e830\u27e9\n    A custom handler type for `eyre::Report`\u27e831\u27e9 which provides colorful error reports and `tracing-error`\u27e832\u27e9 support.\n## Enums\u00a7\u27e833\u27e9\n\nErrorKind\u27e834\u27e9`issue-url`\n    The kind of type erased error being reported\n## Functions\u00a7\u27e835\u27e9\n\ninstall\u27e836\u27e9\n    Install the default panic and error report hooks\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/color-eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/color-eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460: Source\n\u27e84\u27e9 https://docs.rs/eyre: `eyre`\n\u27e85\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#tldr: \u00a7\n\u27e86\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#setup: \u00a7\n\u27e87\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support: \u00a7\n\u27e88\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default: \u00a7\n\u27e89\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/cargo/reference/profiles.html#overrides: profile overrides\n\u27e811\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#features: \u00a7\n\u27e812\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels: \u00a7\n\u27e813\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs: `examples/usage.rs`\n\u27e814\u27e9 https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html: `backtrace::Backtrace`\n\u27e815\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait: \u00a7\n\u27e816\u27e9 https://docs.rs/color-eyre/*/color_eyre/trait.Section.html: `Section`\n\u27e817\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs: `examples/custom_section.rs`\n\u27e818\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report: \u00a7\n\u27e819\u27e9 https://github.com/rust-lang/rfcs/pull/2895: work being done\n\u27e820\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs: `examples/multiple_errors.rs`\n\u27e821\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more: \u00a7\n\u27e822\u27e9 https://docs.rs/color-backtrace: `color-backtrace`\n\u27e823\u27e9 https://github.com/yaahc/color-spantrace: `color-spantrace`\n\u27e824\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs: `examples/custom_filter.rs`\n\u27e825\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#modules: \u00a7\n\u27e827\u27e9 https://docs.rs/color-eyre/latest/color_eyre/config/index.html: mod color_eyre::config - config\n\u27e828\u27e9 https://docs.rs/color-eyre/latest/color_eyre/section/index.html: mod color_eyre::section - section\n\u27e829\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html: struct color_eyre::Handler - Handler\n\u27e831\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e832\u27e9 https://docs.rs/tracing-error: `tracing-error`\n\u27e833\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html: enum color_eyre::ErrorKind - ErrorKind\n\u27e835\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#functions: \u00a7\n\u27e836\u27e9 https://docs.rs/color-eyre/latest/color_eyre/fn.install.html: fn color_eyre::install - install\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "color-eyre",
          "version": "0.6.5",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\n[Settings](https://docs.rs/color-eyre/latest/settings.html)\n[Help](https://docs.rs/color-eyre/latest/help.html)\nSummary[Source](https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460)\nExpand description\nAn error report handler for panics and the [`eyre`](https://docs.rs/eyre) crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#tldr)TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#setup)Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support)Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default)Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds)Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo [profile overrides](https://doc.rust-lang.org/cargo/reference/profiles.html#overrides) can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#features)Features\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels)Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by [`examples/usage.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs):\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a [`backtrace::Backtrace`](https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html):\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait)Custom `Section`s for error reports via [`Section`](https://docs.rs/color-eyre/*/color_eyre/trait.Section.html) trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from [`examples/custom_section.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs):\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report)Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is [work being done](https://github.com/rust-lang/rfcs/pull/2895) to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out [`examples/multiple_errors.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs).\n#### [\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more)Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies [`color-backtrace`](https://docs.rs/color-backtrace) and [`color-spantrace`](https://github.com/yaahc/color-spantrace). `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out [`examples/custom_filter.rs`](https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs).\n## Re-exports[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#reexports)\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#modules)\n\n[config](https://docs.rs/color-eyre/latest/color_eyre/config/index.html \"mod color_eyre::config\")\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\n[section](https://docs.rs/color-eyre/latest/color_eyre/section/index.html \"mod color_eyre::section\")\n    Helpers for adding custom sections to error reports\n## Structs[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#structs)\n\n[Handler](https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html \"struct color_eyre::Handler\")\n    A custom handler type for [`eyre::Report`](https://docs.rs/eyre/*/eyre/struct.Report.html) which provides colorful error reports and [`tracing-error`](https://docs.rs/tracing-error) support.\n## Enums[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#enums)\n\n[ErrorKind](https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html \"enum color_eyre::ErrorKind\")`issue-url`\n    The kind of type erased error being reported\n## Functions[\u00a7](https://docs.rs/color-eyre/latest/color_eyre/#functions)\n\n[install](https://docs.rs/color-eyre/latest/color_eyre/fn.install.html \"fn color_eyre::install\")\n    Install the default panic and error report hooks\n",
            "markdown_with_citations": "[](https://docs.rs/color-eyre/latest/color_eyre/all.html \"show sidebar\")\n# Crate color_eyreCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn error report handler for panics and the `eyre`\u27e84\u27e9 crate for colorful, consistent, and well formatted error reports for all kinds of errors.\n### \u00a7\u27e85\u27e9TLDR\n`color_eyre` helps you build error reports that look like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\n### \u00a7\u27e86\u27e9Setup\nAdd the following to your toml file:\n```\n[dependencies]\ncolor-eyre = \"0.6\"\n```\n\nAnd install the panic and error report handlers:\n```\nuse color_eyre::eyre::Result;\nfn main() -> Result<()> {\n  color_eyre::install()?;\n  // ...\n}\n```\n\n#### \u00a7\u27e87\u27e9Disabling tracing support\nIf you don\u2019t plan on using `tracing_error` and `SpanTrace` you can disable the tracing integration to cut down on unused dependencies:\n```\n[dependencies]\ncolor-eyre = { version = \"0.6\", default-features = false }\n```\n\n#### \u00a7\u27e88\u27e9Disabling SpanTrace capture by default\ncolor-eyre defaults to capturing span traces. This is because `SpanTrace` capture is significantly cheaper than `Backtrace` capture. However, like backtraces, span traces are most useful for debugging applications, and it\u2019s not uncommon to want to disable span trace capture by default to keep noise out developer.\nTo disable span trace capture you must explicitly set one of the env variables that regulate `SpanTrace` capture to `\"0\"`:\n```\nif std::env::var(\"RUST_SPANTRACE\").is_err() {\n  std::env::set_var(\"RUST_SPANTRACE\", \"0\");\n}\n```\n\n#### \u00a7\u27e89\u27e9Improving perf on debug builds\nIn debug mode `color-eyre` behaves noticably worse than `eyre`. This is caused by the fact that `eyre` uses `std::backtrace::Backtrace` instead of `backtrace::Backtrace`. The std version of backtrace is precompiled with optimizations, this means that whether or not you\u2019re in debug mode doesn\u2019t matter much for how expensive backtrace capture is, it will always be in the 10s of milliseconds to capture. A debug version of `backtrace::Backtrace` however isn\u2019t so lucky, and can take an order of magnitude more time to capture a backtrace compared to its std counterpart.\nCargo profile overrides\u27e810\u27e9 can be used to mitigate this problem. By configuring your project to always build `backtrace` with optimizations you should get the same performance from `color-eyre` that you\u2019re used to with `eyre`. To do so add the following to your Cargo.toml:\n```\n[profile.dev.package.backtrace]\nopt-level = 3\n```\n\n### \u00a7\u27e811\u27e9Features\n#### \u00a7\u27e812\u27e9Multiple report format verbosity levels\n`color-eyre` provides 3 different report formats for how it formats the captured `SpanTrace` and `Backtrace`, minimal, short, and full. Take the below snippets of the output produced by `examples/usage.rs`\u27e813\u27e9:\nRunning `cargo run --example usage` without `RUST_LIB_BACKTRACE` set will produce a minimal report like this:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:15:58.026  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\nSuggestion: try using a file that exists next time\n```\n\nRunning `RUST_LIB_BACKTRACE=1 cargo run --example usage` tells `color-eyre` to use the short format, which additionally capture a `backtrace::Backtrace`\u27e814\u27e9:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=1 cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:02.853  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n  1: usage::read_config\n   at examples/usage.rs:38\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\nFinally, running `RUST_LIB_BACKTRACE=full cargo run --example usage` tells `color-eyre` to use the full format, which in addition to the above will attempt to include source lines where the error originated from, assuming it can find them on the disk.\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0**\n**\u276f** RUST_LIB_BACKTRACE=full cargo run --example usage\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.05s\n**   Running** `target/debug/examples/usage`\nJul 05 19:16:06.335  INFO **read_config**:**read_file{**path=\"fake_file\"**}**: Reading file\nError:\n  0: Unable to read config\n  1: No such file or directory (os error 2)\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: usage::read_file with path=\"fake_file\"\n   at examples/usage.rs:32\n    30 \u2502 }\n    31 \u2502\n **   32 > #[instrument]**\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n  1: usage::read_config\n   at examples/usage.rs:38\n    36 \u2502 }\n    37 \u2502\n **   38 > #[instrument]**\n    39 \u2502 fn read_config() -> Result<(), Report> {\n    40 \u2502   read_file(\"fake_file\")\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 BACKTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n                \u22ee 5 frames hidden \u22ee                \n  6: usage::read_file::haee210cb22460af3\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:35\n    33 \u2502 fn read_file(path: &str) -> Result<(), Report> {\n    34 \u2502   info!(\"Reading file\");\n **   35 >   Ok(std::fs::read_to_string(path).map(drop)?)**\n    36 \u2502 }\n    37 \u2502\n  7: usage::read_config::ha649ef4ec333524d\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:40\n    38 \u2502 #[instrument]\n    39 \u2502 fn read_config() -> Result<(), Report> {\n **   40 >   read_file(\"fake_file\")**\n    41 \u2502     .wrap_err(\"Unable to read config\")\n    42 \u2502     .suggestion(\"try using a file that exists next time\")\n  8: usage::main::hbe443b50eac38236\n   at /home/jlusby/git/yaahc/color-eyre/examples/usage.rs:11\n     9 \u2502   color_eyre::install()?;\n    10 \u2502\n **   11 >   Ok(read_config()?)**\n    12 \u2502 }\n    13 \u2502\n                \u22ee 10 frames hidden \u22ee               \nSuggestion: try using a file that exists next time\n```\n\n#### \u00a7\u27e815\u27e9Custom `Section`s for error reports via `Section`\u27e816\u27e9 trait\nThe `section` module provides helpers for adding extra sections to error reports. Sections are disinct from error messages and are displayed independently from the chain of errors. Take this example of adding sections to contain `stderr` and `stdout` from a failed command, taken from `examples/custom_section.rs`\u27e817\u27e9:\n```\nuse color_eyre::{eyre::eyre, SectionExt, Section, eyre::Report};\nuse std::process::Command;\nuse tracing::instrument;\ntrait Output {\n  fn output2(&mut self) -> Result<String, Report>;\n}\nimpl Output for Command {\n  #[instrument]\n  fn output2(&mut self) -> Result<String, Report> {\n    let output = self.output()?;\n    let stdout = String::from_utf8_lossy(&output.stdout);\n    if !output.status.success() {\n      let stderr = String::from_utf8_lossy(&output.stderr);\n      Err(eyre!(\"cmd exited with non-zero status code\"))\n        .with_section(move || stdout.trim().to_string().header(\"Stdout:\"))\n        .with_section(move || stderr.trim().to_string().header(\"Stderr:\"))\n    } else {\n      Ok(stdout.into())\n    }\n  }\n}\n```\n\nHere we have an function that, if the command exits unsuccessfully, creates a report indicating the failure and attaches two sections, one for `stdout` and one for `stderr`.\nRunning `cargo run --example custom_section` shows us how these sections are included in the output:\n```\n**color-eyre** on **\ue0a0 hooked** **[$!] **is **\ud83d\udce6 v0.5.0** via **\ud83e\udd80 v1.44.0** took **2s**\n**\u276f** cargo run --example custom_section\n**  Finished** dev [unoptimized + debuginfo] target(s) in 0.04s\n**   Running** `target/debug/examples/custom_section`\nError:\n  0: Unable to read config\n  1: cmd exited with non-zero status code\nStderr:\n  cat: fake_file: No such file or directory\n \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 SPANTRACE \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  0: custom_section::output2 with self=\"cat\" \"fake_file\"\n   at examples/custom_section.rs:14\n  1: custom_section::read_file with path=\"fake_file\"\n   at examples/custom_section.rs:58\n  2: custom_section::read_config\n   at examples/custom_section.rs:63\nSuggestion: try using a file that exists next time\n```\n\nOnly the `Stderr:` section actually gets included. The `cat` command fails, so stdout ends up being empty and is skipped in the final report. This gives us a short and concise error report indicating exactly what was attempted and how it failed.\n#### \u00a7\u27e818\u27e9Aggregating multiple errors into one report\nIt\u2019s not uncommon for programs like batched task runners or parsers to want to return an error with multiple sources. The current version of the error trait does not support this use case very well, though there is work being done\u27e819\u27e9 to improve this.\nFor now however one way to work around this is to compose errors outside the error trait. `color-eyre` supports such composition in its error reports via the `Section` trait.\nFor an example of how to aggregate errors check out `examples/multiple_errors.rs`\u27e820\u27e9.\n#### \u00a7\u27e821\u27e9Custom configuration for `color-backtrace` for setting custom filters and more\nThe pretty printing for backtraces and span traces isn\u2019t actually provided by `color-eyre`, but instead comes from its dependencies `color-backtrace`\u27e822\u27e9 and `color-spantrace`\u27e823\u27e9. `color-backtrace` in particular has many more features than are exported by `color-eyre`, such as customized color schemes, panic hooks, and custom frame filters. The custom frame filters are particularly useful when combined with `color-eyre`, so to enable their usage we provide the `install` fn for setting up a custom `BacktracePrinter` with custom filters installed.\nFor an example of how to setup custom filters, check out `examples/custom_filter.rs`\u27e824\u27e9.\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use section::IndentedSection[](https://docs.rs/color-eyre/latest/color_eyre/section/struct.IndentedSection.html \"struct color_eyre::section::IndentedSection\");`\n\n\n`pub use section::Section[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.Section.html \"trait color_eyre::section::Section\");`\n\n\n`pub use section::SectionExt[](https://docs.rs/color-eyre/latest/color_eyre/section/trait.SectionExt.html \"trait color_eyre::section::SectionExt\");`\n\n\n`pub use eyre[](https://docs.rs/eyre/0.6.12/x86_64-unknown-linux-gnu/eyre/index.html \"mod eyre\");`\n\n\n`pub use owo_colors[](https://docs.rs/owo-colors/4.2.1/x86_64-unknown-linux-gnu/owo_colors/index.html \"mod owo_colors\");`\n\n## Modules\u00a7\u27e826\u27e9\n\nconfig\u27e827\u27e9\n    Configuration options for customizing the behavior of the provided panic and error reporting hooks\n\nsection\u27e828\u27e9\n    Helpers for adding custom sections to error reports\n## Structs\u00a7\u27e829\u27e9\n\nHandler\u27e830\u27e9\n    A custom handler type for `eyre::Report`\u27e831\u27e9 which provides colorful error reports and `tracing-error`\u27e832\u27e9 support.\n## Enums\u00a7\u27e833\u27e9\n\nErrorKind\u27e834\u27e9`issue-url`\n    The kind of type erased error being reported\n## Functions\u00a7\u27e835\u27e9\n\ninstall\u27e836\u27e9\n    Install the default panic and error report hooks\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/color-eyre/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/color-eyre/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/color-eyre/latest/src/color_eyre/lib.rs.html#1-460: Source\n\u27e84\u27e9 https://docs.rs/eyre: `eyre`\n\u27e85\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#tldr: \u00a7\n\u27e86\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#setup: \u00a7\n\u27e87\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-tracing-support: \u00a7\n\u27e88\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#disabling-spantrace-capture-by-default: \u00a7\n\u27e89\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#improving-perf-on-debug-builds: \u00a7\n\u27e810\u27e9 https://doc.rust-lang.org/cargo/reference/profiles.html#overrides: profile overrides\n\u27e811\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#features: \u00a7\n\u27e812\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#multiple-report-format-verbosity-levels: \u00a7\n\u27e813\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/usage.rs: `examples/usage.rs`\n\u27e814\u27e9 https://docs.rs/backtrace/*/backtrace/struct.Backtrace.html: `backtrace::Backtrace`\n\u27e815\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-sections-for-error-reports-via-section-trait: \u00a7\n\u27e816\u27e9 https://docs.rs/color-eyre/*/color_eyre/trait.Section.html: `Section`\n\u27e817\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_section.rs: `examples/custom_section.rs`\n\u27e818\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#aggregating-multiple-errors-into-one-report: \u00a7\n\u27e819\u27e9 https://github.com/rust-lang/rfcs/pull/2895: work being done\n\u27e820\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/multiple_errors.rs: `examples/multiple_errors.rs`\n\u27e821\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#custom-configuration-for-color-backtrace-for-setting-custom-filters-and-more: \u00a7\n\u27e822\u27e9 https://docs.rs/color-backtrace: `color-backtrace`\n\u27e823\u27e9 https://github.com/yaahc/color-spantrace: `color-spantrace`\n\u27e824\u27e9 https://github.com/yaahc/color-eyre/blob/master/examples/custom_filter.rs: `examples/custom_filter.rs`\n\u27e825\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#modules: \u00a7\n\u27e827\u27e9 https://docs.rs/color-eyre/latest/color_eyre/config/index.html: mod color_eyre::config - config\n\u27e828\u27e9 https://docs.rs/color-eyre/latest/color_eyre/section/index.html: mod color_eyre::section - section\n\u27e829\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/color-eyre/latest/color_eyre/struct.Handler.html: struct color_eyre::Handler - Handler\n\u27e831\u27e9 https://docs.rs/eyre/*/eyre/struct.Report.html: `eyre::Report`\n\u27e832\u27e9 https://docs.rs/tracing-error: `tracing-error`\n\u27e833\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#enums: \u00a7\n\u27e834\u27e9 https://docs.rs/color-eyre/latest/color_eyre/enum.ErrorKind.html: enum color_eyre::ErrorKind - ErrorKind\n\u27e835\u27e9 https://docs.rs/color-eyre/latest/color_eyre/#functions: \u00a7\n\u27e836\u27e9 https://docs.rs/color-eyre/latest/color_eyre/fn.install.html: fn color_eyre::install - install\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `color-eyre` crate enhances error reporting in Rust applications by providing colorful, well-formatted, and detailed error messages for both panics and errors handled via the `eyre` crate. It supports multiple verbosity levels (minimal, short, and full) for error reports, integrates with `SpanTrace` and `Backtrace` for debugging, and allows customization to optimize performance or disable tracing features. This makes it ideal for creating user-friendly and developer-focused error diagnostics.",
          "feature_summary": null,
          "use_case": "DevTools",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Error Reporting Integration  \n\u2705 Factual: `color-eyre` integrates seamlessly with the `eyre` crate to provide colorful and well-formatted error reports, enhancing debugging experiences for Rust developers.  \n\u274c Counterfactual: `color-eyre` is a standalone error reporting library that does not require integration with other crates like `eyre` for enhanced functionality.  \n\n---\n\n### Pair 2: Tracing Support  \n\u2705 Factual: `color-eyre` supports `tracing_error` and `SpanTrace` for detailed error tracing, but these features can be disabled to reduce dependency overhead.  \n\u274c Counterfactual: `color-eyre` requires `tracing_error` and `SpanTrace` to function and cannot be used without enabling these features.  \n\n---\n\n### Pair 3: Debug Build Performance  \n\u2705 Factual: In debug builds, `color-eyre` can exhibit slower performance due to its reliance on `backtrace::Backtrace`, but this can be mitigated by configuring the `backtrace` crate to always build with optimizations using Cargo profile overrides.  \n\u274c Counterfactual: `color-eyre` performs equally well in debug and release builds without any need for optimization adjustments in the Cargo configuration.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7191c717-78d8a61d-1751259562",
      "timestamp": "2025-06-30T04:59:22.918643+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]