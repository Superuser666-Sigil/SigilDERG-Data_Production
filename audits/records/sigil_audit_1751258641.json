[
  {
    "execution_id": "exec-a66793b2-c30502f4-1751258632",
    "timestamp": "2025-06-30T04:43:52.139379+00:00",
    "sacred_chain": {
      "input_data": "async-channel",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-channel' -> 'async-channel'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-channel",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-channel",
            "title": "async-channel v2.3.1",
            "content": {
              "raw_markdown": "#  async-channel v2.3.1\nAsync multi-producer multi-consumer channel \n  * [ #chan ](https://crates.io/keywords/chan)\n  * [ #futures ](https://crates.io/keywords/futures)\n  * [ #mpsc ](https://crates.io/keywords/mpsc)\n  * [ #spmc ](https://crates.io/keywords/spmc)\n  * [ #mpmc ](https://crates.io/keywords/mpmc)\n\n\n  * [ Readme ](https://crates.io/crates/async-channel)\n  * [ 24 Versions ](https://crates.io/crates/async-channel/versions)\n  * [ Dependencies ](https://crates.io/crates/async-channel/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-channel/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \nv1.60.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n14.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-channel\nOr add the following line to your Cargo.toml:\nasync-channel = \"2.3.1\"\n## Repository\n[ github.com/smol-rs/async-channel ](https://github.com/smol-rs/async-channel)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Concurrency](https://crates.io/categories/concurrency)\n\n\n[ Report crate ](https://crates.io/support?crate=async-channel&inquire=crate-violation)\n### Stats Overview\n129,872,531 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async-channel v2.3.1\nAsync multi-producer multi-consumer channel \n  *  #chan \u27e81\u27e9\n  *  #futures \u27e82\u27e9\n  *  #mpsc \u27e83\u27e9\n  *  #spmc \u27e84\u27e9\n  *  #mpmc \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  24 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 year ago \nv1.60.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n14.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-channel\nOr add the following line to your Cargo.toml:\nasync-channel = \"2.3.1\"\n## Repository\n github.com/smol-rs/async-channel \u27e812\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e813\u27e9\n  * Concurrency\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n129,872,531 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/chan:  #chan \n\u27e82\u27e9 https://crates.io/keywords/futures:  #futures \n\u27e83\u27e9 https://crates.io/keywords/mpsc:  #mpsc \n\u27e84\u27e9 https://crates.io/keywords/spmc:  #spmc \n\u27e85\u27e9 https://crates.io/keywords/mpmc:  #mpmc \n\u27e86\u27e9 https://crates.io/crates/async-channel:  Readme \n\u27e87\u27e9 https://crates.io/crates/async-channel/versions:  24 Versions \n\u27e88\u27e9 https://crates.io/crates/async-channel/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/async-channel/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://github.com/smol-rs/async-channel:  github.com/smol-rs/async-channel \n\u27e813\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e814\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e815\u27e9 https://crates.io/support?crate=async-channel&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1418,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112422.0406494"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-channel",
            "title": "Crate async_channelCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\n[Settings](https://docs.rs/async-channel/latest/settings.html)\n[Help](https://docs.rs/async-channel/latest/help.html)\nSummary[Source](https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262)\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. [Bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\") channel with limited capacity.\n  2. [Unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\") channel with unlimited capacity.\n\n\nA channel has the [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") and [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") side. Both sides are cloneable and can be shared among multiple threads.\nWhen all [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")s or all [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling [`Sender::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close \"method async_channel::Sender::close\") or [`Receiver::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close \"method async_channel::Receiver::close\").\n## [\u00a7](https://docs.rs/async-channel/latest/async_channel/#examples)Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs[\u00a7](https://docs.rs/async-channel/latest/async_channel/#structs)\n\n[Receiver](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")\n    The receiving side of a channel.\n\n[Recv](https://docs.rs/async-channel/latest/async_channel/struct.Recv.html \"struct async_channel::Recv\")\n    A future returned by [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[RecvError](https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html \"struct async_channel::RecvError\")\n    An error returned from [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[Send](https://docs.rs/async-channel/latest/async_channel/struct.Send.html \"struct async_channel::Send\")\n    A future returned by [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[SendError](https://docs.rs/async-channel/latest/async_channel/struct.SendError.html \"struct async_channel::SendError\")\n    An error returned from [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[Sender](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")\n    The sending side of a channel.\n\n[WeakReceiver](https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html \"struct async_channel::WeakReceiver\")\n    A [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") that prevents the channel from not being closed.\n\n[WeakSender](https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html \"struct async_channel::WeakSender\")\n    A [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") that prevents the channel from not being closed.\n## Enums[\u00a7](https://docs.rs/async-channel/latest/async_channel/#enums)\n\n[TryRecvError](https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html \"enum async_channel::TryRecvError\")\n    An error returned from [`Receiver::try_recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv \"method async_channel::Receiver::try_recv\").\n\n[TrySendError](https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html \"enum async_channel::TrySendError\")\n    An error returned from [`Sender::try_send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send \"method async_channel::Sender::try_send\").\n## Functions[\u00a7](https://docs.rs/async-channel/latest/async_channel/#functions)\n\n[bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\")\n    Creates a bounded channel.\n\n[unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\")\n    Creates an unbounded channel.\n",
              "markdown_with_citations": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. Bounded\u27e84\u27e9 channel with limited capacity.\n  2. Unbounded\u27e85\u27e9 channel with unlimited capacity.\n\n\nA channel has the `Sender`\u27e86\u27e9 and `Receiver`\u27e87\u27e9 side. Both sides are cloneable and can be shared among multiple threads.\nWhen all `Sender`\u27e86\u27e9s or all `Receiver`\u27e87\u27e9s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling `Sender::close()`\u27e88\u27e9 or `Receiver::close()`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs\u00a7\u27e811\u27e9\n\nReceiver\u27e87\u27e9\n    The receiving side of a channel.\n\nRecv\u27e812\u27e9\n    A future returned by `Receiver::recv()`\u27e813\u27e9.\n\nRecvError\u27e814\u27e9\n    An error returned from `Receiver::recv()`\u27e813\u27e9.\n\nSend\u27e815\u27e9\n    A future returned by `Sender::send()`\u27e816\u27e9.\n\nSendError\u27e817\u27e9\n    An error returned from `Sender::send()`\u27e816\u27e9.\n\nSender\u27e86\u27e9\n    The sending side of a channel.\n\nWeakReceiver\u27e818\u27e9\n    A `Receiver`\u27e87\u27e9 that prevents the channel from not being closed.\n\nWeakSender\u27e819\u27e9\n    A `Sender`\u27e86\u27e9 that prevents the channel from not being closed.\n## Enums\u00a7\u27e820\u27e9\n\nTryRecvError\u27e821\u27e9\n    An error returned from `Receiver::try_recv()`\u27e822\u27e9.\n\nTrySendError\u27e823\u27e9\n    An error returned from `Sender::try_send()`\u27e824\u27e9.\n## Functions\u00a7\u27e825\u27e9\n\nbounded\u27e84\u27e9\n    Creates a bounded channel.\n\nunbounded\u27e85\u27e9\n    Creates an unbounded channel.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262: Source\n\u27e84\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.bounded.html: fn async_channel::bounded - Bounded\n\u27e85\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html: fn async_channel::unbounded - Unbounded\n\u27e86\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html: struct async_channel::Sender - `Sender`\n\u27e87\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html: struct async_channel::Receiver - `Receiver`\n\u27e88\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close: method async_channel::Sender::close - `Sender::close()`\n\u27e89\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close: method async_channel::Receiver::close - `Receiver::close()`\n\u27e810\u27e9 https://docs.rs/async-channel/latest/async_channel/#examples: \u00a7\n\u27e811\u27e9 https://docs.rs/async-channel/latest/async_channel/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Recv.html: struct async_channel::Recv - Recv\n\u27e813\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv: method async_channel::Receiver::recv - `Receiver::recv()`\n\u27e814\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html: struct async_channel::RecvError - RecvError\n\u27e815\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Send.html: struct async_channel::Send - Send\n\u27e816\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send: method async_channel::Sender::send - `Sender::send()`\n\u27e817\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.SendError.html: struct async_channel::SendError - SendError\n\u27e818\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html: struct async_channel::WeakReceiver - WeakReceiver\n\u27e819\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html: struct async_channel::WeakSender - WeakSender\n\u27e820\u27e9 https://docs.rs/async-channel/latest/async_channel/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html: enum async_channel::TryRecvError - TryRecvError\n\u27e822\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv: method async_channel::Receiver::try_recv - `Receiver::try_recv()`\n\u27e823\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html: enum async_channel::TrySendError - TrySendError\n\u27e824\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send: method async_channel::Sender::try_send - `Sender::try_send()`\n\u27e825\u27e9 https://docs.rs/async-channel/latest/async_channel/#functions: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5222,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112422.7890194"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-channel",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [23 stable releases](https://lib.rs/crates/async-channel/versions)\n2.3.1 |  May 16, 2024   \n---|---  \n2.2.1 |  Apr 14, 2024   \n2.2.0 |  Feb 8, 2024   \n2.1.1 |  Nov 24, 2023   \n0.1.0 |  May 6, 2019   \n#**8** in [Concurrency](https://lib.rs/concurrency \"Crates for implementing concurrent and parallel computation.\")\nDownload history 1915835/week @ 2025-03-07 2150534/week @ 2025-03-14 3753910/week @ 2025-03-21 2193417/week @ 2025-03-28 2291707/week @ 2025-04-04 1985613/week @ 2025-04-11 1704524/week @ 2025-04-18 1675123/week @ 2025-04-25 1718727/week @ 2025-05-02 1868360/week @ 2025-05-09 1895833/week @ 2025-05-16 1636932/week @ 2025-05-23 1821495/week @ 2025-05-30 1760278/week @ 2025-06-06 1865465/week @ 2025-06-13 1911949/week @ 2025-06-20\n**7,669,138** downloads per month Used in [**7,795** crates (540 directly)](https://lib.rs/crates/async-channel/rev)\n**Apache-2.0 OR MIT**\n41KB  568 lines\n# async-channel\n[![Build](https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/async-channel/actions/workflows/ci.yml/badge.svg)](https://github.com/smol-rs/async-channel/actions) [![License](https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg)](https://github.com/smol-rs/async-channel) [![Cargo](https://img.shields.io/crates/v/async-channel.svg)](https://crates.io/crates/async-channel) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/async-channel/badge.svg)](https://docs.rs/async-channel)\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. Bounded channel with limited capacity.\n  2. Unbounded channel with unlimited capacity.\n\n\nA channel has the ``Sender`` and ``Receiver`` side. Both sides are cloneable and can be shared among multiple threads.\nWhen all ``Sender``s or all ``Receiver``s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling ```Sender`::``close`(``)``` or ```Receiver`::``close`(``)```.\n## Examples\n```\n``let` `(`s`,` r`)` `=` `async_channel`::``unbounded`(``)``;`\n`assert_eq!``(`s`.``send``(```\"`Hello`\"```)``.`await`,` `Ok``(``(``)``)``)``;`\n`assert_eq!``(`r`.``recv``(``)``.`await`,` `Ok``(```\"`Hello`\"```)``)``;`\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/smol-rs/async-channel/blob/HEAD/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/smol-rs/async-channel/blob/HEAD/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~400KB \n  * [concurrent-queue](https://lib.rs/crates/concurrent-queue \"2.5\")\n  * [event-listener-strategy](https://lib.rs/crates/event-listener-strategy \"0.5.2\")\n  * [futures-core](https://lib.rs/crates/futures-core \"0.3.5\")\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.11\")\n\n\n  * dev  [easy-parallel](https://lib.rs/crates/easy-parallel \"3\")\n  * dev  [futures-lite](https://lib.rs/crates/futures-lite \"2\")\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3.37\") wasm\n\n\n#### [Other feature](https://lib.rs/crates/async-channel/features)\n  * [std](https://lib.rs/crates/async-channel/features#feature-std)\n\n\n",
              "markdown_with_citations": "###  23 stable releases\u27e81\u27e9\n2.3.1 |  May 16, 2024   \n---|---  \n2.2.1 |  Apr 14, 2024   \n2.2.0 |  Feb 8, 2024   \n2.1.1 |  Nov 24, 2023   \n0.1.0 |  May 6, 2019   \n#**8** in Concurrency\u27e82\u27e9\nDownload history 1915835/week @ 2025-03-07 2150534/week @ 2025-03-14 3753910/week @ 2025-03-21 2193417/week @ 2025-03-28 2291707/week @ 2025-04-04 1985613/week @ 2025-04-11 1704524/week @ 2025-04-18 1675123/week @ 2025-04-25 1718727/week @ 2025-05-02 1868360/week @ 2025-05-09 1895833/week @ 2025-05-16 1636932/week @ 2025-05-23 1821495/week @ 2025-05-30 1760278/week @ 2025-06-06 1865465/week @ 2025-06-13 1911949/week @ 2025-06-20\n**7,669,138** downloads per month Used in **7,795** crates (540 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n41KB  568 lines\n# async-channel\n![Build\u27e84\u27e9](https://github.com/smol-rs/async-channel/actions) ![License\u27e85\u27e9](https://github.com/smol-rs/async-channel) ![Cargo\u27e86\u27e9](https://crates.io/crates/async-channel) ![Documentation\u27e87\u27e9](https://docs.rs/async-channel)\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. Bounded channel with limited capacity.\n  2. Unbounded channel with unlimited capacity.\n\n\nA channel has the ``Sender`` and ``Receiver`` side. Both sides are cloneable and can be shared among multiple threads.\nWhen all ``Sender``s or all ``Receiver``s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling ```Sender`::``close`(``)``` or ```Receiver`::``close`(``)```.\n## Examples\n```\n``let` `(`s`,` r`)` `=` `async_channel`::``unbounded`(``)``;`\n`assert_eq!``(`s`.``send``(```\"`Hello`\"```)``.`await`,` `Ok``(``(``)``)``)``;`\n`assert_eq!``(`r`.``recv``(``)``.`await`,` `Ok``(```\"`Hello`\"```)``)``;`\n`\n```\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e88\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e89\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~400KB \n  * concurrent-queue\u27e810\u27e9\n  * event-listener-strategy\u27e811\u27e9\n  * futures-core\u27e812\u27e9\n  * pin-project-lite\u27e813\u27e9\n\n\n  * dev  easy-parallel\u27e814\u27e9\n  * dev  futures-lite\u27e815\u27e9\n  * dev  wasm-bindgen-test\u27e816\u27e9 wasm\n\n\n#### Other feature\u27e817\u27e9\n  * std\u27e818\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/async-channel/versions: 23 stable releases\n\u27e82\u27e9 https://lib.rs/concurrency: Crates for implementing concurrent and parallel computation. - Concurrency\n\u27e83\u27e9 https://lib.rs/crates/async-channel/rev: **7,795** crates (540 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/async-channel/actions/workflows/ci.yml/badge.svg: ![Build\n\u27e85\u27e9 https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg: ![License\n\u27e86\u27e9 https://img.shields.io/crates/v/async-channel.svg: ![Cargo\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/async-channel/badge.svg: ![Documentation\n\u27e88\u27e9 https://github.com/smol-rs/async-channel/blob/HEAD/LICENSE-APACHE: LICENSE-APACHE\n\u27e89\u27e9 https://github.com/smol-rs/async-channel/blob/HEAD/LICENSE-MIT: LICENSE-MIT\n\u27e810\u27e9 https://lib.rs/crates/concurrent-queue: 2.5 - concurrent-queue\n\u27e811\u27e9 https://lib.rs/crates/event-listener-strategy: 0.5.2 - event-listener-strategy\n\u27e812\u27e9 https://lib.rs/crates/futures-core: 0.3.5 - futures-core\n\u27e813\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.11 - pin-project-lite\n\u27e814\u27e9 https://lib.rs/crates/easy-parallel: 3 - easy-parallel\n\u27e815\u27e9 https://lib.rs/crates/futures-lite: 2 - futures-lite\n\u27e816\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3.37 - wasm-bindgen-test\n\u27e817\u27e9 https://lib.rs/crates/async-channel/features: Other feature\n\u27e818\u27e9 https://lib.rs/crates/async-channel/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3614,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112423.1927898"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libfutures_core-b6845aee26fe820f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-8d9c1eff06854c8d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libcrossbeam_utils-0f4f22ec3e3ec06e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libconcurrent_queue-6d8464127a7463ef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libevent_listener-45c869864aabd80f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libevent_listener_strategy-4e321d2b017bfd98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp66mjgijw/async-channel-2.3.1#async-channel@2.3.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libasync_channel-388efe0d53d27c21.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\build\\crossbeam-utils-8d9c1eff06854c8d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libfutures_core-b6845aee26fe820f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libcrossbeam_utils-0f4f22ec3e3ec06e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libconcurrent_queue-6d8464127a7463ef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libevent_listener-45c869864aabd80f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libevent_listener_strategy-4e321d2b017bfd98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp66mjgijw/async-channel-2.3.1#async-channel@2.3.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_channel",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp66mjgijw\\async-channel-2.3.1\\target\\debug\\deps\\libasync_channel-b13389dc98ff6d4e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 46
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "async-channel",
          "version": "2.3.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\n[Settings](https://docs.rs/async-channel/latest/settings.html)\n[Help](https://docs.rs/async-channel/latest/help.html)\nSummary[Source](https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262)\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. [Bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\") channel with limited capacity.\n  2. [Unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\") channel with unlimited capacity.\n\n\nA channel has the [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") and [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") side. Both sides are cloneable and can be shared among multiple threads.\nWhen all [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")s or all [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling [`Sender::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close \"method async_channel::Sender::close\") or [`Receiver::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close \"method async_channel::Receiver::close\").\n## [\u00a7](https://docs.rs/async-channel/latest/async_channel/#examples)Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs[\u00a7](https://docs.rs/async-channel/latest/async_channel/#structs)\n\n[Receiver](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")\n    The receiving side of a channel.\n\n[Recv](https://docs.rs/async-channel/latest/async_channel/struct.Recv.html \"struct async_channel::Recv\")\n    A future returned by [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[RecvError](https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html \"struct async_channel::RecvError\")\n    An error returned from [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[Send](https://docs.rs/async-channel/latest/async_channel/struct.Send.html \"struct async_channel::Send\")\n    A future returned by [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[SendError](https://docs.rs/async-channel/latest/async_channel/struct.SendError.html \"struct async_channel::SendError\")\n    An error returned from [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[Sender](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")\n    The sending side of a channel.\n\n[WeakReceiver](https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html \"struct async_channel::WeakReceiver\")\n    A [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") that prevents the channel from not being closed.\n\n[WeakSender](https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html \"struct async_channel::WeakSender\")\n    A [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") that prevents the channel from not being closed.\n## Enums[\u00a7](https://docs.rs/async-channel/latest/async_channel/#enums)\n\n[TryRecvError](https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html \"enum async_channel::TryRecvError\")\n    An error returned from [`Receiver::try_recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv \"method async_channel::Receiver::try_recv\").\n\n[TrySendError](https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html \"enum async_channel::TrySendError\")\n    An error returned from [`Sender::try_send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send \"method async_channel::Sender::try_send\").\n## Functions[\u00a7](https://docs.rs/async-channel/latest/async_channel/#functions)\n\n[bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\")\n    Creates a bounded channel.\n\n[unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\")\n    Creates an unbounded channel.\n",
            "markdown_with_citations": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. Bounded\u27e84\u27e9 channel with limited capacity.\n  2. Unbounded\u27e85\u27e9 channel with unlimited capacity.\n\n\nA channel has the `Sender`\u27e86\u27e9 and `Receiver`\u27e87\u27e9 side. Both sides are cloneable and can be shared among multiple threads.\nWhen all `Sender`\u27e86\u27e9s or all `Receiver`\u27e87\u27e9s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling `Sender::close()`\u27e88\u27e9 or `Receiver::close()`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs\u00a7\u27e811\u27e9\n\nReceiver\u27e87\u27e9\n    The receiving side of a channel.\n\nRecv\u27e812\u27e9\n    A future returned by `Receiver::recv()`\u27e813\u27e9.\n\nRecvError\u27e814\u27e9\n    An error returned from `Receiver::recv()`\u27e813\u27e9.\n\nSend\u27e815\u27e9\n    A future returned by `Sender::send()`\u27e816\u27e9.\n\nSendError\u27e817\u27e9\n    An error returned from `Sender::send()`\u27e816\u27e9.\n\nSender\u27e86\u27e9\n    The sending side of a channel.\n\nWeakReceiver\u27e818\u27e9\n    A `Receiver`\u27e87\u27e9 that prevents the channel from not being closed.\n\nWeakSender\u27e819\u27e9\n    A `Sender`\u27e86\u27e9 that prevents the channel from not being closed.\n## Enums\u00a7\u27e820\u27e9\n\nTryRecvError\u27e821\u27e9\n    An error returned from `Receiver::try_recv()`\u27e822\u27e9.\n\nTrySendError\u27e823\u27e9\n    An error returned from `Sender::try_send()`\u27e824\u27e9.\n## Functions\u00a7\u27e825\u27e9\n\nbounded\u27e84\u27e9\n    Creates a bounded channel.\n\nunbounded\u27e85\u27e9\n    Creates an unbounded channel.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262: Source\n\u27e84\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.bounded.html: fn async_channel::bounded - Bounded\n\u27e85\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html: fn async_channel::unbounded - Unbounded\n\u27e86\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html: struct async_channel::Sender - `Sender`\n\u27e87\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html: struct async_channel::Receiver - `Receiver`\n\u27e88\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close: method async_channel::Sender::close - `Sender::close()`\n\u27e89\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close: method async_channel::Receiver::close - `Receiver::close()`\n\u27e810\u27e9 https://docs.rs/async-channel/latest/async_channel/#examples: \u00a7\n\u27e811\u27e9 https://docs.rs/async-channel/latest/async_channel/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Recv.html: struct async_channel::Recv - Recv\n\u27e813\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv: method async_channel::Receiver::recv - `Receiver::recv()`\n\u27e814\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html: struct async_channel::RecvError - RecvError\n\u27e815\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Send.html: struct async_channel::Send - Send\n\u27e816\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send: method async_channel::Sender::send - `Sender::send()`\n\u27e817\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.SendError.html: struct async_channel::SendError - SendError\n\u27e818\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html: struct async_channel::WeakReceiver - WeakReceiver\n\u27e819\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html: struct async_channel::WeakSender - WeakSender\n\u27e820\u27e9 https://docs.rs/async-channel/latest/async_channel/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html: enum async_channel::TryRecvError - TryRecvError\n\u27e822\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv: method async_channel::Receiver::try_recv - `Receiver::try_recv()`\n\u27e823\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html: enum async_channel::TrySendError - TrySendError\n\u27e824\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send: method async_channel::Sender::try_send - `Sender::try_send()`\n\u27e825\u27e9 https://docs.rs/async-channel/latest/async_channel/#functions: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-channel",
          "version": "2.3.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\n[Settings](https://docs.rs/async-channel/latest/settings.html)\n[Help](https://docs.rs/async-channel/latest/help.html)\nSummary[Source](https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262)\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. [Bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\") channel with limited capacity.\n  2. [Unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\") channel with unlimited capacity.\n\n\nA channel has the [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") and [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") side. Both sides are cloneable and can be shared among multiple threads.\nWhen all [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")s or all [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling [`Sender::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close \"method async_channel::Sender::close\") or [`Receiver::close()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close \"method async_channel::Receiver::close\").\n## [\u00a7](https://docs.rs/async-channel/latest/async_channel/#examples)Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs[\u00a7](https://docs.rs/async-channel/latest/async_channel/#structs)\n\n[Receiver](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\")\n    The receiving side of a channel.\n\n[Recv](https://docs.rs/async-channel/latest/async_channel/struct.Recv.html \"struct async_channel::Recv\")\n    A future returned by [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[RecvError](https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html \"struct async_channel::RecvError\")\n    An error returned from [`Receiver::recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv \"method async_channel::Receiver::recv\").\n\n[Send](https://docs.rs/async-channel/latest/async_channel/struct.Send.html \"struct async_channel::Send\")\n    A future returned by [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[SendError](https://docs.rs/async-channel/latest/async_channel/struct.SendError.html \"struct async_channel::SendError\")\n    An error returned from [`Sender::send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send \"method async_channel::Sender::send\").\n\n[Sender](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\")\n    The sending side of a channel.\n\n[WeakReceiver](https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html \"struct async_channel::WeakReceiver\")\n    A [`Receiver`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html \"struct async_channel::Receiver\") that prevents the channel from not being closed.\n\n[WeakSender](https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html \"struct async_channel::WeakSender\")\n    A [`Sender`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html \"struct async_channel::Sender\") that prevents the channel from not being closed.\n## Enums[\u00a7](https://docs.rs/async-channel/latest/async_channel/#enums)\n\n[TryRecvError](https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html \"enum async_channel::TryRecvError\")\n    An error returned from [`Receiver::try_recv()`](https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv \"method async_channel::Receiver::try_recv\").\n\n[TrySendError](https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html \"enum async_channel::TrySendError\")\n    An error returned from [`Sender::try_send()`](https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send \"method async_channel::Sender::try_send\").\n## Functions[\u00a7](https://docs.rs/async-channel/latest/async_channel/#functions)\n\n[bounded](https://docs.rs/async-channel/latest/async_channel/fn.bounded.html \"fn async_channel::bounded\")\n    Creates a bounded channel.\n\n[unbounded](https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html \"fn async_channel::unbounded\")\n    Creates an unbounded channel.\n",
            "markdown_with_citations": "[](https://docs.rs/async-channel/latest/async_channel/all.html \"show sidebar\")\n# Crate async_channelCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAn async multi-producer multi-consumer channel, where each message can be received by only one of all existing consumers.\nThere are two kinds of channels:\n  1. Bounded\u27e84\u27e9 channel with limited capacity.\n  2. Unbounded\u27e85\u27e9 channel with unlimited capacity.\n\n\nA channel has the `Sender`\u27e86\u27e9 and `Receiver`\u27e87\u27e9 side. Both sides are cloneable and can be shared among multiple threads.\nWhen all `Sender`\u27e86\u27e9s or all `Receiver`\u27e87\u27e9s are dropped, the channel becomes closed. When a channel is closed, no more messages can be sent, but remaining messages can still be received.\nThe channel can also be closed manually by calling `Sender::close()`\u27e88\u27e9 or `Receiver::close()`\u27e89\u27e9.\n## \u00a7\u27e810\u27e9Examples\n```\nlet (s, r) = async_channel::unbounded();\nassert_eq!(s.send(\"Hello\").await, Ok(()));\nassert_eq!(r.recv().await, Ok(\"Hello\"));\n```\n\n## Structs\u00a7\u27e811\u27e9\n\nReceiver\u27e87\u27e9\n    The receiving side of a channel.\n\nRecv\u27e812\u27e9\n    A future returned by `Receiver::recv()`\u27e813\u27e9.\n\nRecvError\u27e814\u27e9\n    An error returned from `Receiver::recv()`\u27e813\u27e9.\n\nSend\u27e815\u27e9\n    A future returned by `Sender::send()`\u27e816\u27e9.\n\nSendError\u27e817\u27e9\n    An error returned from `Sender::send()`\u27e816\u27e9.\n\nSender\u27e86\u27e9\n    The sending side of a channel.\n\nWeakReceiver\u27e818\u27e9\n    A `Receiver`\u27e87\u27e9 that prevents the channel from not being closed.\n\nWeakSender\u27e819\u27e9\n    A `Sender`\u27e86\u27e9 that prevents the channel from not being closed.\n## Enums\u00a7\u27e820\u27e9\n\nTryRecvError\u27e821\u27e9\n    An error returned from `Receiver::try_recv()`\u27e822\u27e9.\n\nTrySendError\u27e823\u27e9\n    An error returned from `Sender::try_send()`\u27e824\u27e9.\n## Functions\u00a7\u27e825\u27e9\n\nbounded\u27e84\u27e9\n    Creates a bounded channel.\n\nunbounded\u27e85\u27e9\n    Creates an unbounded channel.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-channel/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-channel/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-channel/latest/src/async_channel/lib.rs.html#1-1262: Source\n\u27e84\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.bounded.html: fn async_channel::bounded - Bounded\n\u27e85\u27e9 https://docs.rs/async-channel/latest/async_channel/fn.unbounded.html: fn async_channel::unbounded - Unbounded\n\u27e86\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html: struct async_channel::Sender - `Sender`\n\u27e87\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html: struct async_channel::Receiver - `Receiver`\n\u27e88\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.close: method async_channel::Sender::close - `Sender::close()`\n\u27e89\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.close: method async_channel::Receiver::close - `Receiver::close()`\n\u27e810\u27e9 https://docs.rs/async-channel/latest/async_channel/#examples: \u00a7\n\u27e811\u27e9 https://docs.rs/async-channel/latest/async_channel/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Recv.html: struct async_channel::Recv - Recv\n\u27e813\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.recv: method async_channel::Receiver::recv - `Receiver::recv()`\n\u27e814\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.RecvError.html: struct async_channel::RecvError - RecvError\n\u27e815\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Send.html: struct async_channel::Send - Send\n\u27e816\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.send: method async_channel::Sender::send - `Sender::send()`\n\u27e817\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.SendError.html: struct async_channel::SendError - SendError\n\u27e818\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakReceiver.html: struct async_channel::WeakReceiver - WeakReceiver\n\u27e819\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.WeakSender.html: struct async_channel::WeakSender - WeakSender\n\u27e820\u27e9 https://docs.rs/async-channel/latest/async_channel/#enums: \u00a7\n\u27e821\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TryRecvError.html: enum async_channel::TryRecvError - TryRecvError\n\u27e822\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Receiver.html#method.try_recv: method async_channel::Receiver::try_recv - `Receiver::try_recv()`\n\u27e823\u27e9 https://docs.rs/async-channel/latest/async_channel/enum.TrySendError.html: enum async_channel::TrySendError - TrySendError\n\u27e824\u27e9 https://docs.rs/async-channel/latest/async_channel/struct.Sender.html#method.try_send: method async_channel::Sender::try_send - `Sender::try_send()`\n\u27e825\u27e9 https://docs.rs/async-channel/latest/async_channel/#functions: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-channel` crate provides asynchronous multi-producer, multi-consumer channels for message passing, where each message is received by only one consumer. It supports both bounded channels with a fixed capacity and unbounded channels with unlimited capacity. The `Sender` and `Receiver` sides are cloneable, thread-safe, and allow manual or automatic closure of the channel, ensuring efficient and flexible communication in async contexts.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Channel Types  \n\u2705 Factual: The `async-channel` crate provides two types of channels: bounded channels with a fixed capacity and unbounded channels with unlimited capacity.  \n\u274c Counterfactual: The `async-channel` crate only supports bounded channels, and unbounded channels must be implemented manually by the user.  \n\n---\n\n### Pair 2: Message Delivery  \n\u2705 Factual: In `async-channel`, each message sent into the channel can only be received by one of the existing consumers, ensuring exclusive delivery.  \n\u274c Counterfactual: Messages sent into an `async-channel` can be received by all consumers simultaneously, allowing for broadcast-like behavior.  \n\n---\n\n### Pair 3: Closing Channels  \n\u2705 Factual: Channels created with `async-channel` can be manually closed using the `Sender::close()` or `Receiver::close()` methods, after which no new messages can be sent but remaining messages can still be received.  \n\u274c Counterfactual: Once all `Sender` or `Receiver` instances are dropped, the channel automatically deletes all remaining messages without allowing them to be received.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-a66793b2-c30502f4-1751258632",
      "timestamp": "2025-06-30T04:43:52.139379+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]