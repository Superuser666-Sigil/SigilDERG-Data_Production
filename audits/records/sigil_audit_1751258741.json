[
  {
    "execution_id": "exec-2eb169c4-f8b0ad22-1751258722",
    "timestamp": "2025-06-30T04:45:22.106510+00:00",
    "sacred_chain": {
      "input_data": "futures-util",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'futures-util' -> 'futures-util'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "futures-util",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/futures-util",
            "title": "futures-util v0.3.31",
            "content": {
              "raw_markdown": "#  futures-util v0.3.31\nCommon utilities and extension traits for the futures-rs library. \n  * [ Readme ](https://crates.io/crates/futures-util)\n  * [ 36 Versions ](https://crates.io/crates/futures-util/versions)\n  * [ Dependencies ](https://crates.io/crates/futures-util/dependencies)\n  * [ Dependents ](https://crates.io/crates/futures-util/reverse_dependencies)\n\n\n## Metadata\n9 months ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n158 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-util\nOr add the following line to your Cargo.toml:\nfutures-util = \"0.3.31\"\n## Homepage\n[ rust-lang.github.io/futures-rs ](https://rust-lang.github.io/futures-rs)\n## Repository\n[ github.com/rust-lang/futures-rs ](https://github.com/rust-lang/futures-rs)\n## Owners\n[ Report crate ](https://crates.io/support?crate=futures-util&inquire=crate-violation)\n### Stats Overview\n313,573,878 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  futures-util v0.3.31\nCommon utilities and extension traits for the futures-rs library. \n  *  Readme \u27e81\u27e9\n  *  36 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\n9 months ago \nv1.56.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n158 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures-util\nOr add the following line to your Cargo.toml:\nfutures-util = \"0.3.31\"\n## Homepage\n rust-lang.github.io/futures-rs \u27e87\u27e9\n## Repository\n github.com/rust-lang/futures-rs \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n313,573,878 Downloads all time\n36 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/futures-util:  Readme \n\u27e82\u27e9 https://crates.io/crates/futures-util/versions:  36 Versions \n\u27e83\u27e9 https://crates.io/crates/futures-util/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/futures-util/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://rust-lang.github.io/futures-rs:  rust-lang.github.io/futures-rs \n\u27e88\u27e9 https://github.com/rust-lang/futures-rs:  github.com/rust-lang/futures-rs \n\u27e89\u27e9 https://crates.io/support?crate=futures-util&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1133,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112511.9195686"
          },
          "docs_rs": {
            "url": "https://docs.rs/futures-util",
            "title": "Crate futures_utilCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\n[Settings](https://docs.rs/futures-util/latest/settings.html)\n[Help](https://docs.rs/futures-util/latest/help.html)\nSummary[Source](https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332)\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports[\u00a7](https://docs.rs/futures-util/latest/futures_util/#reexports)\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures-util/latest/futures_util/#modules)\n\n[compat](https://docs.rs/futures-util/latest/futures_util/compat/index.html \"mod futures_util::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[future](https://docs.rs/futures-util/latest/futures_util/future/index.html \"mod futures_util::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures-util/latest/futures_util/io/index.html \"mod futures_util::io\")`io`\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures-util/latest/futures_util/lock/index.html \"mod futures_util::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures-util/latest/futures_util/never/index.html \"mod futures_util::never\")\n    This module contains the `Never` type.\n\n[sink](https://docs.rs/futures-util/latest/futures_util/sink/index.html \"mod futures_util::sink\")`sink`\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures-util/latest/futures_util/stream/index.html \"mod futures_util::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures-util/latest/futures_util/task/index.html \"mod futures_util::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures-util/latest/futures_util/#macros)\n\n[join](https://docs.rs/futures-util/latest/futures_util/macro.join.html \"macro futures_util::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures-util/latest/futures_util/macro.pending.html \"macro futures_util::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html \"macro futures_util::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures-util/latest/futures_util/macro.poll.html \"macro futures_util::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures-util/latest/futures_util/macro.ready.html \"macro futures_util::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures-util/latest/futures_util/macro.select.html \"macro futures_util::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html \"macro futures_util::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures-util/latest/futures_util/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html \"macro futures_util::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures-util/latest/futures_util/macro.try_join.html \"macro futures_util::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
              "markdown_with_citations": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e85\u27e9\n\ncompat\u27e86\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nfuture\u27e87\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9`io`\n    Asynchronous I/O.\n\nlock\u27e89\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e810\u27e9\n    This module contains the `Never` type.\n\nsink\u27e811\u27e9`sink`\n    Asynchronous sinks.\n\nstream\u27e812\u27e9\n    Asynchronous streams.\n\ntask\u27e813\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e814\u27e9\n\njoin\u27e815\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e816\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e817\u27e9\n    Pins a value on the stack.\n\npoll\u27e818\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e819\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e820\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e821\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e820\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e822\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e823\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e824\u27e9 containing either a tuple of the successful outputs or an error.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-util/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-util/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332: Source\n\u27e84\u27e9 https://docs.rs/futures-util/latest/futures_util/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-util/latest/futures_util/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-util/latest/futures_util/compat/index.html: mod futures_util::compat - compat\n\u27e87\u27e9 https://docs.rs/futures-util/latest/futures_util/future/index.html: mod futures_util::future - future\n\u27e88\u27e9 https://docs.rs/futures-util/latest/futures_util/io/index.html: mod futures_util::io - io\n\u27e89\u27e9 https://docs.rs/futures-util/latest/futures_util/lock/index.html: mod futures_util::lock - lock\n\u27e810\u27e9 https://docs.rs/futures-util/latest/futures_util/never/index.html: mod futures_util::never - never\n\u27e811\u27e9 https://docs.rs/futures-util/latest/futures_util/sink/index.html: mod futures_util::sink - sink\n\u27e812\u27e9 https://docs.rs/futures-util/latest/futures_util/stream/index.html: mod futures_util::stream - stream\n\u27e813\u27e9 https://docs.rs/futures-util/latest/futures_util/task/index.html: mod futures_util::task - task\n\u27e814\u27e9 https://docs.rs/futures-util/latest/futures_util/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.join.html: macro futures_util::join - join\n\u27e816\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pending.html: macro futures_util::pending - pending\n\u27e817\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html: macro futures_util::pin_mut - pin_mut\n\u27e818\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.poll.html: macro futures_util::poll - poll\n\u27e819\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.ready.html: macro futures_util::ready - ready\n\u27e820\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select.html: macro futures_util::select - select\n\u27e821\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html: macro futures_util::select_biased - select_biased\n\u27e822\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html: macro futures_util::stream_select - stream_select\n\u27e823\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.try_join.html: macro futures_util::try_join - try_join\n\u27e824\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7034,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112512.7680088"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/futures-util",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [23 releases](https://lib.rs/crates/futures-util/versions)\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.2.0-beta |  Mar 20, 2018   \n#**196** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 3226012/week @ 2025-02-28 3451513/week @ 2025-03-07 3499628/week @ 2025-03-14 4103307/week @ 2025-03-21 3312512/week @ 2025-03-28 3571764/week @ 2025-04-04 3308008/week @ 2025-04-11 3100373/week @ 2025-04-18 3154224/week @ 2025-04-25 3125675/week @ 2025-05-02 3220876/week @ 2025-05-09 3390537/week @ 2025-05-16 3004730/week @ 2025-05-23 3283771/week @ 2025-05-30 3365677/week @ 2025-06-06 3272500/week @ 2025-06-13\n**13,526,873** downloads per month Used in [**39,804** crates (3,704 directly)](https://lib.rs/crates/futures-util/rev)\n**MIT/Apache**\n1MB  17K  SLoC\nCombinators and utilities for working with ``Future``s, ``Stream``s, ``Sink``s, and the ``AsyncRead`` and ``AsyncWrite`` traits.\n# futures-util\nCommon utilities and extension traits for the futures-rs library.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures-util ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures-util`` requires Rust 1.56 or later.\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-util/LICENSE-APACHE) or [MIT license](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-util/LICENSE-MIT) at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~34\u2013475KB \n  * [futures-core](https://lib.rs/crates/futures-core \"0.3.31\")\n  * [async-await-macro](https://lib.rs/crates/futures-util/features#feature-async-await-macro \"default feature\") [futures-macro](https://lib.rs/crates/futures-macro \"=0.3.31\")\n  * [futures-task](https://lib.rs/crates/futures-task \"0.3.31\")\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.6\")\n  * [pin-utils](https://lib.rs/crates/pin-utils \"0.1.0\")\n  * [std](https://lib.rs/crates/futures-util/features#feature-std \"default feature\") [slab](https://lib.rs/crates/slab \"0.4.2\")\n  * [compat?](https://lib.rs/crates/futures-util/features#feature-compat \"optional feature\") [futures](https://lib.rs/crates/futures \"renamed futures_01, deprecated\") 0.1.25\n  * [channel?](https://lib.rs/crates/futures-util/features#feature-channel \"optional feature\") [futures-channel](https://lib.rs/crates/futures-channel \"0.3.31\")[+std](https://lib.rs/crates/futures-channel/features#feature-std)\n  * [io?](https://lib.rs/crates/futures-util/features#feature-io \"optional feature\") [futures-io](https://lib.rs/crates/futures-io \"0.3.31\")[+std](https://lib.rs/crates/futures-io/features#feature-std)\n  * [io?](https://lib.rs/crates/futures-util/features#feature-io \"optional feature\") [memchr](https://lib.rs/crates/memchr \"2.2\")\n  * [sink?](https://lib.rs/crates/futures-util/features#feature-sink \"optional feature\") [futures-sink](https://lib.rs/crates/futures-sink \"0.3.31\")\n  * [io-compat?](https://lib.rs/crates/futures-util/features#feature-io-compat \"optional feature\") [tokio-io](https://lib.rs/crates/tokio-io \"deprecated\") 0.1.9\n\n\n  * dev  [tokio](https://lib.rs/crates/tokio \"deprecated\") 0.1.11\n\n\n#### [Other features](https://lib.rs/crates/futures-util/features)\n  * [alloc](https://lib.rs/crates/futures-util/features#feature-alloc)\n  * [async-await](https://lib.rs/crates/futures-util/features#feature-async-await)\n  * [bilock](https://lib.rs/crates/futures-util/features#feature-bilock)\n  * [cfg-target-has-atomic](https://lib.rs/crates/futures-util/features#feature-cfg-target-has-atomic)\n  * [portable-atomic](https://lib.rs/crates/futures-util/features#feature-portable-atomic)\n  * [unstable](https://lib.rs/crates/futures-util/features#feature-unstable)\n  * [write-all-vectored](https://lib.rs/crates/futures-util/features#feature-write-all-vectored)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  23 releases\u27e81\u27e9\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.2.0-beta |  Mar 20, 2018   \n#**196** in Asynchronous\u27e82\u27e9\nDownload history 3226012/week @ 2025-02-28 3451513/week @ 2025-03-07 3499628/week @ 2025-03-14 4103307/week @ 2025-03-21 3312512/week @ 2025-03-28 3571764/week @ 2025-04-04 3308008/week @ 2025-04-11 3100373/week @ 2025-04-18 3154224/week @ 2025-04-25 3125675/week @ 2025-05-02 3220876/week @ 2025-05-09 3390537/week @ 2025-05-16 3004730/week @ 2025-05-23 3283771/week @ 2025-05-30 3365677/week @ 2025-06-06 3272500/week @ 2025-06-13\n**13,526,873** downloads per month Used in **39,804** crates (3,704 directly)\u27e83\u27e9\n**MIT/Apache**\n1MB  17K  SLoC\nCombinators and utilities for working with ``Future``s, ``Stream``s, ``Sink``s, and the ``AsyncRead`` and ``AsyncWrite`` traits.\n# futures-util\nCommon utilities and extension traits for the futures-rs library.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures-util ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures-util`` requires Rust 1.56 or later.\n## License\nLicensed under either of Apache License, Version 2.0\u27e84\u27e9 or MIT license\u27e85\u27e9 at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~34\u2013475KB \n  * futures-core\u27e86\u27e9\n  * async-await-macro\u27e87\u27e9 futures-macro\u27e88\u27e9\n  * futures-task\u27e89\u27e9\n  * pin-project-lite\u27e810\u27e9\n  * pin-utils\u27e811\u27e9\n  * std\u27e812\u27e9 slab\u27e813\u27e9\n  * compat?\u27e814\u27e9 futures\u27e815\u27e9 0.1.25\n  * channel?\u27e816\u27e9 futures-channel\u27e817\u27e9+std\u27e818\u27e9\n  * io?\u27e819\u27e9 futures-io\u27e820\u27e9+std\u27e821\u27e9\n  * io?\u27e819\u27e9 memchr\u27e822\u27e9\n  * sink?\u27e823\u27e9 futures-sink\u27e824\u27e9\n  * io-compat?\u27e825\u27e9 tokio-io\u27e826\u27e9 0.1.9\n\n\n  * dev  tokio\u27e827\u27e9 0.1.11\n\n\n#### Other features\u27e828\u27e9\n  * alloc\u27e829\u27e9\n  * async-await\u27e830\u27e9\n  * bilock\u27e831\u27e9\n  * cfg-target-has-atomic\u27e832\u27e9\n  * portable-atomic\u27e833\u27e9\n  * unstable\u27e834\u27e9\n  * write-all-vectored\u27e835\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/futures-util/versions: 23 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/futures-util/rev: **39,804** crates (3,704 directly)\n\u27e84\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-util/LICENSE-APACHE: Apache License, Version 2.0\n\u27e85\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures-util/LICENSE-MIT: MIT license\n\u27e86\u27e9 https://lib.rs/crates/futures-core: 0.3.31 - futures-core\n\u27e87\u27e9 https://lib.rs/crates/futures-util/features#feature-async-await-macro: default feature - async-await-macro\n\u27e88\u27e9 https://lib.rs/crates/futures-macro: =0.3.31 - futures-macro\n\u27e89\u27e9 https://lib.rs/crates/futures-task: 0.3.31 - futures-task\n\u27e810\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.6 - pin-project-lite\n\u27e811\u27e9 https://lib.rs/crates/pin-utils: 0.1.0 - pin-utils\n\u27e812\u27e9 https://lib.rs/crates/futures-util/features#feature-std: default feature - std\n\u27e813\u27e9 https://lib.rs/crates/slab: 0.4.2 - slab\n\u27e814\u27e9 https://lib.rs/crates/futures-util/features#feature-compat: optional feature - compat?\n\u27e815\u27e9 https://lib.rs/crates/futures: renamed futures_01, deprecated - futures\n\u27e816\u27e9 https://lib.rs/crates/futures-util/features#feature-channel: optional feature - channel?\n\u27e817\u27e9 https://lib.rs/crates/futures-channel: 0.3.31 - futures-channel\n\u27e818\u27e9 https://lib.rs/crates/futures-channel/features#feature-std: +std\n\u27e819\u27e9 https://lib.rs/crates/futures-util/features#feature-io: optional feature - io?\n\u27e820\u27e9 https://lib.rs/crates/futures-io: 0.3.31 - futures-io\n\u27e821\u27e9 https://lib.rs/crates/futures-io/features#feature-std: +std\n\u27e822\u27e9 https://lib.rs/crates/memchr: 2.2 - memchr\n\u27e823\u27e9 https://lib.rs/crates/futures-util/features#feature-sink: optional feature - sink?\n\u27e824\u27e9 https://lib.rs/crates/futures-sink: 0.3.31 - futures-sink\n\u27e825\u27e9 https://lib.rs/crates/futures-util/features#feature-io-compat: optional feature - io-compat?\n\u27e826\u27e9 https://lib.rs/crates/tokio-io: deprecated - tokio-io\n\u27e827\u27e9 https://lib.rs/crates/tokio: deprecated - tokio\n\u27e828\u27e9 https://lib.rs/crates/futures-util/features: Other features\n\u27e829\u27e9 https://lib.rs/crates/futures-util/features#feature-alloc: alloc\n\u27e830\u27e9 https://lib.rs/crates/futures-util/features#feature-async-await: async-await\n\u27e831\u27e9 https://lib.rs/crates/futures-util/features#feature-bilock: bilock\n\u27e832\u27e9 https://lib.rs/crates/futures-util/features#feature-cfg-target-has-atomic: cfg-target-has-atomic\n\u27e833\u27e9 https://lib.rs/crates/futures-util/features#feature-portable-atomic: portable-atomic\n\u27e834\u27e9 https://lib.rs/crates/futures-util/features#feature-unstable: unstable\n\u27e835\u27e9 https://lib.rs/crates/futures-util/features#feature-write-all-vectored: write-all-vectored\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4329,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112513.1608749"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libslab-998bee1b978fdba0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "default",
                "futures-macro",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_util-c3724e802011750a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libslab-998bee1b978fdba0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\futures_macro-00cbbcd33118668f.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n  --> src\\future\\future\\flatten.rs:32:9\n   |\n32 | /         match self {\n33 | |             Self::Empty => true,\n34 | |             _ => false,\n35 | |         }\n   | |_________^ help: try: `matches!(self, Self::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n   = note: `#[warn(clippy::match_like_matches_macro)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::match_like_matches_macro)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 817,
                        "byte_start": 738,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\future\\flatten.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 32,
                        "suggested_replacement": "matches!(self, Self::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            Self::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 817,
                    "byte_start": 738,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\future\\flatten.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 35,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            Self::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n  --> src\\future\\future\\flatten.rs:70:9\n   |\n70 | /         match self {\n71 | |             Self::Empty => true,\n72 | |             _ => false,\n73 | |         }\n   | |_________^ help: try: `matches!(self, Self::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1830,
                        "byte_start": 1751,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\future\\flatten.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 73,
                        "line_start": 70,
                        "suggested_replacement": "matches!(self, Self::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            Self::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 1830,
                    "byte_start": 1751,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\future\\flatten.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            Self::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\future\\future\\shared.rs:141:33\n    |\n141 |         self.inner.as_ref().map(|arc| Arc::strong_count(arc))\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Arc::strong_count`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4081,
                        "byte_start": 4053,
                        "column_end": 61,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\future\\future\\shared.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 141,
                        "line_start": 141,
                        "suggested_replacement": "Arc::strong_count",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 33,
                            "text": "        self.inner.as_ref().map(|arc| Arc::strong_count(arc))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 4081,
                    "byte_start": 4053,
                    "column_end": 61,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\future\\future\\shared.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 141,
                    "line_start": 141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 33,
                        "text": "        self.inner.as_ref().map(|arc| Arc::strong_count(arc))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\future\\future\\shared.rs:155:33\n    |\n155 |         self.inner.as_ref().map(|arc| Arc::weak_count(arc))\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Arc::weak_count`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4642,
                        "byte_start": 4616,
                        "column_end": 59,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\future\\future\\shared.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 155,
                        "line_start": 155,
                        "suggested_replacement": "Arc::weak_count",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 33,
                            "text": "        self.inner.as_ref().map(|arc| Arc::weak_count(arc))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 4642,
                    "byte_start": 4616,
                    "column_end": 59,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\future\\future\\shared.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 155,
                    "line_start": 155,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 33,
                        "text": "        self.inner.as_ref().map(|arc| Arc::weak_count(arc))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n  --> src\\future\\try_future\\try_flatten.rs:32:9\n   |\n32 | /         match self {\n33 | |             Self::Empty => true,\n34 | |             _ => false,\n35 | |         }\n   | |_________^ help: try: `matches!(self, Self::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 869,
                        "byte_start": 790,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\try_future\\try_flatten.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 35,
                        "line_start": 32,
                        "suggested_replacement": "matches!(self, Self::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            Self::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 869,
                    "byte_start": 790,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\try_future\\try_flatten.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 35,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            Self::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n  --> src\\future\\try_future\\try_flatten.rs:73:9\n   |\n73 | /         match self {\n74 | |             Self::Empty => true,\n75 | |             _ => false,\n76 | |         }\n   | |_________^ help: try: `matches!(self, Self::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2085,
                        "byte_start": 2006,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\try_future\\try_flatten.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 76,
                        "line_start": 73,
                        "suggested_replacement": "matches!(self, Self::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            Self::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 2085,
                    "byte_start": 2006,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\try_future\\try_flatten.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 76,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            Self::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n  --> src\\future\\try_future\\try_flatten_err.rs:29:9\n   |\n29 | /         match self {\n30 | |             Self::Empty => true,\n31 | |             _ => false,\n32 | |         }\n   | |_________^ help: try: `matches!(self, Self::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 772,
                        "byte_start": 693,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\try_future\\try_flatten_err.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 29,
                        "suggested_replacement": "matches!(self, Self::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "        match self {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            Self::Empty => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 772,
                    "byte_start": 693,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\try_future\\try_flatten_err.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        match self {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            Self::Empty => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\future\\poll_fn.rs:56:9\n   |\n56 |         (&mut self.f)(cx)\n   |         ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n   = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1376,
                        "byte_start": 1363,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\future\\poll_fn.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut self.f)(cx)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 1376,
                    "byte_start": 1363,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\future\\poll_fn.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut self.f)(cx)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: if let .. else expression looks like `matches!` macro\n  --> src\\stream\\stream\\cycle.rs:61:9\n   |\n61 | /         if let (0, Some(0)) = self.size_hint() {\n62 | |             true\n63 | |         } else {\n64 | |             false\n65 | |         }\n   | |_________^ help: try: `matches!(self.size_hint(), (0, Some(0)))`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1577,
                        "byte_start": 1475,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\stream\\stream\\cycle.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 61,
                        "suggested_replacement": "matches!(self.size_hint(), (0, Some(0)))",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        if let (0, Some(0)) = self.size_hint() {"
                          },
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "            true"
                          },
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "        } else {"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "            false"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "if let .. else expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 1577,
                    "byte_start": 1475,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\stream\\stream\\cycle.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 9,
                        "text": "        if let (0, Some(0)) = self.size_hint() {"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "            true"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "        } else {"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "            false"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `core::mem::take`\n   --> src\\stream\\try_stream\\try_for_each_concurrent.rs:101:30\n    |\n101 |                         drop(mem::replace(this.futures, FuturesUnordered::new()));\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `core::mem::take(this.futures)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n    = note: `#[warn(clippy::mem_replace_with_default)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mem_replace_with_default)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3281,
                        "byte_start": 3230,
                        "column_end": 81,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\stream\\try_stream\\try_for_each_concurrent.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "core::mem::take(this.futures)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 30,
                            "text": "                        drop(mem::replace(this.futures, FuturesUnordered::new()));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `core::mem::take`",
                "spans": [
                  {
                    "byte_end": 3281,
                    "byte_start": 3230,
                    "column_end": 81,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\stream\\try_stream\\try_for_each_concurrent.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 81,
                        "highlight_start": 30,
                        "text": "                        drop(mem::replace(this.futures, FuturesUnordered::new()));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `core::mem::take`\n   --> src\\stream\\try_stream\\try_for_each_concurrent.rs:123:26\n    |\n123 |                     drop(mem::replace(this.futures, FuturesUnordered::new()));\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `core::mem::take(this.futures)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4136,
                        "byte_start": 4085,
                        "column_end": 77,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\stream\\try_stream\\try_for_each_concurrent.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 123,
                        "suggested_replacement": "core::mem::take(this.futures)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 26,
                            "text": "                    drop(mem::replace(this.futures, FuturesUnordered::new()));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `core::mem::take`",
                "spans": [
                  {
                    "byte_end": 4136,
                    "byte_start": 4085,
                    "column_end": 77,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\stream\\try_stream\\try_for_each_concurrent.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 123,
                    "line_start": 123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 26,
                        "text": "                    drop(mem::replace(this.futures, FuturesUnordered::new()));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\repeat_with.rs:23:26\n   |\n23 |         Poll::Ready(Some((&mut self.repeater)()))\n   |                          ^^^^^^^^^^^^^^^^^^^^ help: change this to: `(self.repeater)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 739,
                        "byte_start": 719,
                        "column_end": 46,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\stream\\repeat_with.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "(self.repeater)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 26,
                            "text": "        Poll::Ready(Some((&mut self.repeater)()))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 739,
                    "byte_start": 719,
                    "column_end": 46,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\stream\\repeat_with.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 26,
                        "text": "        Poll::Ready(Some((&mut self.repeater)()))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n  --> src\\stream\\poll_fn.rs:55:9\n   |\n55 |         (&mut self.f)(cx)\n   |         ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1328,
                        "byte_start": 1315,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\stream\\poll_fn.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "(self.f)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut self.f)(cx)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 1328,
                    "byte_start": 1315,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\stream\\poll_fn.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut self.f)(cx)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\stream\\select_with_strategy.rs:201:9\n    |\n201 | /         match self.internal_state {\n202 | |             InternalState::BothFinished => true,\n203 | |             _ => false,\n204 | |         }\n    | |_________^ help: try: `matches!(self.internal_state, InternalState::BothFinished)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6174,
                        "byte_start": 6064,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\stream\\select_with_strategy.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 204,
                        "line_start": 201,
                        "suggested_replacement": "matches!(self.internal_state, InternalState::BothFinished)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 9,
                            "text": "        match self.internal_state {"
                          },
                          {
                            "highlight_end": 49,
                            "highlight_start": 1,
                            "text": "            InternalState::BothFinished => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 6174,
                    "byte_start": 6064,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\stream\\select_with_strategy.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 204,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 9,
                        "text": "        match self.internal_state {"
                      },
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "            InternalState::BothFinished => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: if let .. else expression looks like `matches!` macro\n  --> src\\stream\\unfold.rs:84:9\n   |\n84 | /         if let UnfoldState::Empty = self.state {\n85 | |             true\n86 | |         } else {\n87 | |             false\n88 | |         }\n   | |_________^ help: try: `matches!(self.state, UnfoldState::Empty)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2692,
                        "byte_start": 2590,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\stream\\unfold.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 84,
                        "suggested_replacement": "matches!(self.state, UnfoldState::Empty)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 9,
                            "text": "        if let UnfoldState::Empty = self.state {"
                          },
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "            true"
                          },
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "        } else {"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "            false"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "if let .. else expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 2692,
                    "byte_start": 2590,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\stream\\unfold.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 84,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 9,
                        "text": "        if let UnfoldState::Empty = self.state {"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "            true"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "        } else {"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "            false"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use `core::ptr::eq` when comparing raw pointers\n  --> src\\stream\\futures_unordered\\ready_to_run_queue.rs:72:16\n   |\n72 |             if self.head.load(Acquire) as *const _ != tail {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `!core::ptr::eq(self.head.load(Acquire), tail)`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n   = note: `#[warn(clippy::ptr_eq)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::ptr_eq)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2398,
                        "byte_start": 2355,
                        "column_end": 59,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\stream\\futures_unordered\\ready_to_run_queue.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 72,
                        "line_start": 72,
                        "suggested_replacement": "!core::ptr::eq(self.head.load(Acquire), tail)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 16,
                            "text": "            if self.head.load(Acquire) as *const _ != tail {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::ptr_eq",
                  "explanation": null
                },
                "level": "warning",
                "message": "use `core::ptr::eq` when comparing raw pointers",
                "spans": [
                  {
                    "byte_end": 2398,
                    "byte_start": 2355,
                    "column_end": 59,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "src\\stream\\futures_unordered\\ready_to_run_queue.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 16,
                        "text": "            if self.head.load(Acquire) as *const _ != tail {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpvcy8b4jn/futures-util-0.3.31#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "default",
                "futures-macro",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpvcy8b4jn\\futures-util-0.3.31\\target\\debug\\deps\\libfutures_util-678892cf9094db9d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 71
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0124",
                    "package": "tokio",
                    "title": "Data race when sending and receiving after closing a `oneshot` channel",
                    "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
                    "date": "2021-11-16",
                    "aliases": [
                      "CVE-2021-45710",
                      "GHSA-fg7r-2g4j-5cgr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "race condition"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/4225",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.8.4, <1.9.0",
                      ">=1.13.1"
                    ],
                    "unaffected": [
                      "<0.1.14"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::sync::oneshot::Receiver::close": [
                        "<=1.13.0, >=0.1.14"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.1.22",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5a09c0b5bb588872ab2f09afa13ee6e9dac11e10a0ec9e8e3ba39a5a5d530af6",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.4.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures",
                        "version": "0.1.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "0.6.23",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.17.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-codec",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-current-thread",
                        "version": "0.1.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-executor",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-fs",
                        "version": "0.1.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-io",
                        "version": "0.1.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-reactor",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-sync",
                        "version": "0.1.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-tcp",
                        "version": "0.1.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-threadpool",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-timer",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-udp",
                        "version": "0.1.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-uds",
                        "version": "0.2.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "net2",
                    "version": "0.2.39",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "b13b648036a2339d06de780866fbdfda0dde886de7b3af2ddeba8b14f4ee34ac",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0016",
                    "package": "net2",
                    "title": "`net2` crate has been deprecated; use `socket2` instead",
                    "description": "The [`net2`](https://crates.io/crates/net2) crate has been deprecated\nand users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.",
                    "date": "2020-05-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.7.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "lock_api",
                    "version": "0.3.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75",
                    "dependencies": [
                      {
                        "name": "scopeguard",
                        "version": "1.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0070",
                    "package": "lock_api",
                    "title": "Some lock_api lock guard objects can cause data races",
                    "description": "Affected versions of lock_api had unsound implementations of the `Send` or\n`Sync` traits for some guard objects, namely:\n\n* MappedMutexGuard\n* MappedRwLockReadGuard\n* MappedRwLockWriteGuard\n* RwLockReadGuard\n* RwLockWriteGuard\n\nThese guards could allow data races through types that are not safe to `Send`\nacross thread boundaries in safe Rust code.\n\nThis issue was fixed by changing the trait bounds on the `Mapped` guard types\nand removing the `Sync` trait for the `RwLock` guards.",
                    "date": "2020-11-08",
                    "aliases": [
                      "CVE-2020-35910",
                      "CVE-2020-35911",
                      "CVE-2020-35912",
                      "CVE-2020-35913",
                      "CVE-2020-35914",
                      "GHSA-5wg8-7c9q-794v",
                      "GHSA-gmv4-vmx3-x9f3",
                      "GHSA-hj9h-wrgg-hgmx",
                      "GHSA-ppj3-7jw3-8vc4",
                      "GHSA-vh4p-6j7g-f4j9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "concurrency"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/parking_lot/pull/262",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "lock_api::MappedMutexGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockWriteGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockWriteGuard": [
                        ">=0.1.0"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "memoffset",
                    "version": "0.5.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "043175f069eda7b85febe4a74abbaeff828d9f8b448515d3151a14a3542811aa",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0045",
                    "package": "memoffset",
                    "title": "memoffset allows reading uninitialized memory",
                    "description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of<T>` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in <https://github.com/Gilnaa/memoffset/pull/50>.",
                    "date": "2023-06-21",
                    "aliases": [
                      "GHSA-wfg4-322g-9vqv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "memoffset",
                      "offset"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Gilnaa/memoffset/issues/24",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "memoffset::offset_of": [
                        "<0.6.2"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.2"
                    ],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "futures-util",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\n[Settings](https://docs.rs/futures-util/latest/settings.html)\n[Help](https://docs.rs/futures-util/latest/help.html)\nSummary[Source](https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332)\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports[\u00a7](https://docs.rs/futures-util/latest/futures_util/#reexports)\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures-util/latest/futures_util/#modules)\n\n[compat](https://docs.rs/futures-util/latest/futures_util/compat/index.html \"mod futures_util::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[future](https://docs.rs/futures-util/latest/futures_util/future/index.html \"mod futures_util::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures-util/latest/futures_util/io/index.html \"mod futures_util::io\")`io`\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures-util/latest/futures_util/lock/index.html \"mod futures_util::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures-util/latest/futures_util/never/index.html \"mod futures_util::never\")\n    This module contains the `Never` type.\n\n[sink](https://docs.rs/futures-util/latest/futures_util/sink/index.html \"mod futures_util::sink\")`sink`\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures-util/latest/futures_util/stream/index.html \"mod futures_util::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures-util/latest/futures_util/task/index.html \"mod futures_util::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures-util/latest/futures_util/#macros)\n\n[join](https://docs.rs/futures-util/latest/futures_util/macro.join.html \"macro futures_util::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures-util/latest/futures_util/macro.pending.html \"macro futures_util::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html \"macro futures_util::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures-util/latest/futures_util/macro.poll.html \"macro futures_util::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures-util/latest/futures_util/macro.ready.html \"macro futures_util::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures-util/latest/futures_util/macro.select.html \"macro futures_util::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html \"macro futures_util::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures-util/latest/futures_util/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html \"macro futures_util::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures-util/latest/futures_util/macro.try_join.html \"macro futures_util::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e85\u27e9\n\ncompat\u27e86\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nfuture\u27e87\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9`io`\n    Asynchronous I/O.\n\nlock\u27e89\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e810\u27e9\n    This module contains the `Never` type.\n\nsink\u27e811\u27e9`sink`\n    Asynchronous sinks.\n\nstream\u27e812\u27e9\n    Asynchronous streams.\n\ntask\u27e813\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e814\u27e9\n\njoin\u27e815\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e816\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e817\u27e9\n    Pins a value on the stack.\n\npoll\u27e818\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e819\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e820\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e821\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e820\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e822\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e823\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e824\u27e9 containing either a tuple of the successful outputs or an error.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-util/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-util/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332: Source\n\u27e84\u27e9 https://docs.rs/futures-util/latest/futures_util/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-util/latest/futures_util/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-util/latest/futures_util/compat/index.html: mod futures_util::compat - compat\n\u27e87\u27e9 https://docs.rs/futures-util/latest/futures_util/future/index.html: mod futures_util::future - future\n\u27e88\u27e9 https://docs.rs/futures-util/latest/futures_util/io/index.html: mod futures_util::io - io\n\u27e89\u27e9 https://docs.rs/futures-util/latest/futures_util/lock/index.html: mod futures_util::lock - lock\n\u27e810\u27e9 https://docs.rs/futures-util/latest/futures_util/never/index.html: mod futures_util::never - never\n\u27e811\u27e9 https://docs.rs/futures-util/latest/futures_util/sink/index.html: mod futures_util::sink - sink\n\u27e812\u27e9 https://docs.rs/futures-util/latest/futures_util/stream/index.html: mod futures_util::stream - stream\n\u27e813\u27e9 https://docs.rs/futures-util/latest/futures_util/task/index.html: mod futures_util::task - task\n\u27e814\u27e9 https://docs.rs/futures-util/latest/futures_util/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.join.html: macro futures_util::join - join\n\u27e816\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pending.html: macro futures_util::pending - pending\n\u27e817\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html: macro futures_util::pin_mut - pin_mut\n\u27e818\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.poll.html: macro futures_util::poll - poll\n\u27e819\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.ready.html: macro futures_util::ready - ready\n\u27e820\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select.html: macro futures_util::select - select\n\u27e821\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html: macro futures_util::select_biased - select_biased\n\u27e822\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html: macro futures_util::stream_select - stream_select\n\u27e823\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.try_join.html: macro futures_util::try_join - try_join\n\u27e824\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "futures-util",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\n[Settings](https://docs.rs/futures-util/latest/settings.html)\n[Help](https://docs.rs/futures-util/latest/help.html)\nSummary[Source](https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332)\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports[\u00a7](https://docs.rs/futures-util/latest/futures_util/#reexports)\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures-util/latest/futures_util/#modules)\n\n[compat](https://docs.rs/futures-util/latest/futures_util/compat/index.html \"mod futures_util::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[future](https://docs.rs/futures-util/latest/futures_util/future/index.html \"mod futures_util::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures-util/latest/futures_util/io/index.html \"mod futures_util::io\")`io`\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures-util/latest/futures_util/lock/index.html \"mod futures_util::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures-util/latest/futures_util/never/index.html \"mod futures_util::never\")\n    This module contains the `Never` type.\n\n[sink](https://docs.rs/futures-util/latest/futures_util/sink/index.html \"mod futures_util::sink\")`sink`\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures-util/latest/futures_util/stream/index.html \"mod futures_util::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures-util/latest/futures_util/task/index.html \"mod futures_util::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures-util/latest/futures_util/#macros)\n\n[join](https://docs.rs/futures-util/latest/futures_util/macro.join.html \"macro futures_util::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures-util/latest/futures_util/macro.pending.html \"macro futures_util::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html \"macro futures_util::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures-util/latest/futures_util/macro.poll.html \"macro futures_util::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures-util/latest/futures_util/macro.ready.html \"macro futures_util::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures-util/latest/futures_util/macro.select.html \"macro futures_util::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html \"macro futures_util::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures-util/latest/futures_util/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html \"macro futures_util::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures-util/latest/futures_util/macro.try_join.html \"macro futures_util::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
            "markdown_with_citations": "[](https://docs.rs/futures-util/latest/futures_util/all.html \"show sidebar\")\n# Crate futures_utilCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCombinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.\n## Re-exports\u00a7\u27e84\u27e9\n\n`pub use crate::future::Future[](https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html \"trait core::future::future::Future\");`\n\n\n`pub use crate::future::FutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.FutureExt.html \"trait futures_util::future::FutureExt\");`\n\n\n`pub use crate::future::TryFuture[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFuture.html \"trait futures_util::future::TryFuture\");`\n\n\n`pub use crate::future::TryFutureExt[](https://docs.rs/futures-util/latest/futures_util/future/trait.TryFutureExt.html \"trait futures_util::future::TryFutureExt\");`\n\n\n`pub use crate::stream::Stream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.Stream.html \"trait futures_util::stream::Stream\");`\n\n\n`pub use crate::stream::StreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.StreamExt.html \"trait futures_util::stream::StreamExt\");`\n\n\n`pub use crate::stream::TryStream[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStream.html \"trait futures_util::stream::TryStream\");`\n\n\n`pub use crate::stream::TryStreamExt[](https://docs.rs/futures-util/latest/futures_util/stream/trait.TryStreamExt.html \"trait futures_util::stream::TryStreamExt\");`\n\n\n`pub use crate::sink::Sink[](https://docs.rs/futures-util/latest/futures_util/sink/trait.Sink.html \"trait futures_util::sink::Sink\");`\n\n\n`pub use crate::sink::SinkExt[](https://docs.rs/futures-util/latest/futures_util/sink/trait.SinkExt.html \"trait futures_util::sink::SinkExt\");`\n\n\n`pub use crate::io::AsyncBufRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufRead.html \"trait futures_util::io::AsyncBufRead\");`\n\n\n`pub use crate::io::AsyncBufReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncBufReadExt.html \"trait futures_util::io::AsyncBufReadExt\");`\n\n\n`pub use crate::io::AsyncRead[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncRead.html \"trait futures_util::io::AsyncRead\");`\n\n\n`pub use crate::io::AsyncReadExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncReadExt.html \"trait futures_util::io::AsyncReadExt\");`\n\n\n`pub use crate::io::AsyncSeek[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeek.html \"trait futures_util::io::AsyncSeek\");`\n\n\n`pub use crate::io::AsyncSeekExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncSeekExt.html \"trait futures_util::io::AsyncSeekExt\");`\n\n\n`pub use crate::io::AsyncWrite[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWrite.html \"trait futures_util::io::AsyncWrite\");`\n\n\n`pub use crate::io::AsyncWriteExt[](https://docs.rs/futures-util/latest/futures_util/io/trait.AsyncWriteExt.html \"trait futures_util::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e85\u27e9\n\ncompat\u27e86\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nfuture\u27e87\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9`io`\n    Asynchronous I/O.\n\nlock\u27e89\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e810\u27e9\n    This module contains the `Never` type.\n\nsink\u27e811\u27e9`sink`\n    Asynchronous sinks.\n\nstream\u27e812\u27e9\n    Asynchronous streams.\n\ntask\u27e813\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e814\u27e9\n\njoin\u27e815\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e816\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e817\u27e9\n    Pins a value on the stack.\n\npoll\u27e818\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e819\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e820\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e821\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e820\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e822\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e823\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e824\u27e9 containing either a tuple of the successful outputs or an error.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures-util/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures-util/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures-util/latest/src/futures_util/lib.rs.html#1-332: Source\n\u27e84\u27e9 https://docs.rs/futures-util/latest/futures_util/#reexports: \u00a7\n\u27e85\u27e9 https://docs.rs/futures-util/latest/futures_util/#modules: \u00a7\n\u27e86\u27e9 https://docs.rs/futures-util/latest/futures_util/compat/index.html: mod futures_util::compat - compat\n\u27e87\u27e9 https://docs.rs/futures-util/latest/futures_util/future/index.html: mod futures_util::future - future\n\u27e88\u27e9 https://docs.rs/futures-util/latest/futures_util/io/index.html: mod futures_util::io - io\n\u27e89\u27e9 https://docs.rs/futures-util/latest/futures_util/lock/index.html: mod futures_util::lock - lock\n\u27e810\u27e9 https://docs.rs/futures-util/latest/futures_util/never/index.html: mod futures_util::never - never\n\u27e811\u27e9 https://docs.rs/futures-util/latest/futures_util/sink/index.html: mod futures_util::sink - sink\n\u27e812\u27e9 https://docs.rs/futures-util/latest/futures_util/stream/index.html: mod futures_util::stream - stream\n\u27e813\u27e9 https://docs.rs/futures-util/latest/futures_util/task/index.html: mod futures_util::task - task\n\u27e814\u27e9 https://docs.rs/futures-util/latest/futures_util/#macros: \u00a7\n\u27e815\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.join.html: macro futures_util::join - join\n\u27e816\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pending.html: macro futures_util::pending - pending\n\u27e817\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.pin_mut.html: macro futures_util::pin_mut - pin_mut\n\u27e818\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.poll.html: macro futures_util::poll - poll\n\u27e819\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.ready.html: macro futures_util::ready - ready\n\u27e820\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select.html: macro futures_util::select - select\n\u27e821\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.select_biased.html: macro futures_util::select_biased - select_biased\n\u27e822\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.stream_select.html: macro futures_util::stream_select - stream_select\n\u27e823\u27e9 https://docs.rs/futures-util/latest/futures_util/macro.try_join.html: macro futures_util::try_join - try_join\n\u27e824\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `futures-util` crate provides a comprehensive set of combinators, utilities, and extensions for working with asynchronous programming in Rust, including `Future`, `Stream`, `Sink`, and async I/O traits like `AsyncRead` and `AsyncWrite`. It includes modules for asynchronous values, streams, sinks, and task management, as well as macros like `join`, `select`, and `try_join` for efficiently combining and polling futures and streams. Additionally, it offers interop tools for compatibility between different versions of the `futures` crate.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Future and Stream Utilities  \n\u2705 **Factual:** The `futures-util` crate provides the `FutureExt` and `StreamExt` traits, which extend the functionality of `Future` and `Stream` types with combinators like `map`, `then`, and `filter`.  \n\u274c **Counterfactual:** The `futures-util` crate requires you to implement custom combinators manually for `Future` and `Stream` types, as it does not provide built-in extensions.  \n\n---\n\n### Pair 2: Async I/O Support  \n\u2705 **Factual:** The `futures-util` crate includes traits like `AsyncRead` and `AsyncWrite`, enabling asynchronous I/O operations commonly used in networking and file handling.  \n\u274c **Counterfactual:** The `futures-util` crate does not support asynchronous I/O operations, requiring developers to use external crates like `tokio` for such functionality.  \n\n---\n\n### Pair 3: Compatibility Layer  \n\u2705 **Factual:** The `compat` module in `futures-util` allows interoperability between `futures` 0.1 and 0.3, making it easier to transition legacy codebases to newer versions of the `futures` library.  \n\u274c **Counterfactual:** The `compat` module in `futures-util` is designed exclusively for compatibility between `futures` 0.3 and `tokio`, and does not support older versions of `f",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-2eb169c4-f8b0ad22-1751258722",
      "timestamp": "2025-06-30T04:45:22.106510+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]