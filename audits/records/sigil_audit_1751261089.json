[
  {
    "execution_id": "exec-c106ec9a-475b3275-1751261081",
    "timestamp": "2025-06-30T05:24:41.692758+00:00",
    "sacred_chain": {
      "input_data": "fastrand",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'fastrand' -> 'fastrand'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "fastrand",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/fastrand",
            "title": "fastrand v2.3.0",
            "content": {
              "raw_markdown": "#  fastrand v2.3.0\nA simple and fast random number generator \n  * [ #fast ](https://crates.io/keywords/fast)\n  * [ #rand ](https://crates.io/keywords/rand)\n  * [ #random ](https://crates.io/keywords/random)\n  * [ #simple ](https://crates.io/keywords/simple)\n  * [ #wyrand ](https://crates.io/keywords/wyrand)\n\n\n  * [ Readme ](https://crates.io/crates/fastrand)\n  * [ 27 Versions ](https://crates.io/crates/fastrand/versions)\n  * [ Dependencies ](https://crates.io/crates/fastrand/dependencies)\n  * [ Dependents ](https://crates.io/crates/fastrand/reverse_dependencies)\n\n\n## Metadata\n7 months ago \nv1.36.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n14.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add fastrand\nOr add the following line to your Cargo.toml:\nfastrand = \"2.3.0\"\n## Repository\n[ github.com/smol-rs/fastrand ](https://github.com/smol-rs/fastrand)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n\n\n[ Report crate ](https://crates.io/support?crate=fastrand&inquire=crate-violation)\n### Stats Overview\n334,786,162 Downloads all time\n27 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  fastrand v2.3.0\nA simple and fast random number generator \n  *  #fast \u27e81\u27e9\n  *  #rand \u27e82\u27e9\n  *  #random \u27e83\u27e9\n  *  #simple \u27e84\u27e9\n  *  #wyrand \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  27 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n7 months ago \nv1.36.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n14.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add fastrand\nOr add the following line to your Cargo.toml:\nfastrand = \"2.3.0\"\n## Repository\n github.com/smol-rs/fastrand \u27e812\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n334,786,162 Downloads all time\n27 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/fast:  #fast \n\u27e82\u27e9 https://crates.io/keywords/rand:  #rand \n\u27e83\u27e9 https://crates.io/keywords/random:  #random \n\u27e84\u27e9 https://crates.io/keywords/simple:  #simple \n\u27e85\u27e9 https://crates.io/keywords/wyrand:  #wyrand \n\u27e86\u27e9 https://crates.io/crates/fastrand:  Readme \n\u27e87\u27e9 https://crates.io/crates/fastrand/versions:  27 Versions \n\u27e88\u27e9 https://crates.io/crates/fastrand/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/fastrand/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://github.com/smol-rs/fastrand:  github.com/smol-rs/fastrand \n\u27e813\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e814\u27e9 https://crates.io/support?crate=fastrand&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1304,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114871.5082472"
          },
          "docs_rs": {
            "url": "https://docs.rs/fastrand",
            "title": "Crate fastrandCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\n[Settings](https://docs.rs/fastrand/latest/settings.html)\n[Help](https://docs.rs/fastrand/latest/help.html)\nSummary[Source](https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689)\nExpand description\nA simple and fast random number generator.\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast generator but **not** cryptographically secure.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#examples)Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\") or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the [`fastrand-contrib`](https://crates.io/crates/fastrand-contrib) crate alongside this one.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#features)Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") can only be instantiated using the [`with_seed`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed \"associated function fastrand::Rng::with_seed\") method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the [WebAssembly Notes](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes) section for more information.\n\n\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes)WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the [`getrandom`](https://crates.io/crates/getrandom) crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs[\u00a7](https://docs.rs/fastrand/latest/fastrand/#structs)\n\n[Rng](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\")\n    A random number generator.\n## Functions[\u00a7](https://docs.rs/fastrand/latest/fastrand/#functions)\n\n[alphabetic](https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html \"fn fastrand::alphabetic\")`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\n[alphanumeric](https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html \"fn fastrand::alphanumeric\")`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\n[bool](https://docs.rs/fastrand/latest/fastrand/fn.bool.html \"fn fastrand::bool\")`std`\n    Generates a random `bool`.\n\n[char](https://docs.rs/fastrand/latest/fastrand/fn.char.html \"fn fastrand::char\")`std`\n    Generates a random `char` in the given range.\n\n[choice](https://docs.rs/fastrand/latest/fastrand/fn.choice.html \"fn fastrand::choice\")`std`\n    Choose an item from an iterator at random.\n\n[choose_multiple](https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html \"fn fastrand::choose_multiple\")`std`\n    Collects `amount` values at random from the iterable into a vector.\n\n[digit](https://docs.rs/fastrand/latest/fastrand/fn.digit.html \"fn fastrand::digit\")`std`\n    Generates a random digit in the given `base`.\n\n[f32](https://docs.rs/fastrand/latest/fastrand/fn.f32.html \"fn fastrand::f32\")`std`\n    Generates a random `f32` in range `0..1`.\n\n[f64](https://docs.rs/fastrand/latest/fastrand/fn.f64.html \"fn fastrand::f64\")`std`\n    Generates a random `f64` in range `0..1`.\n\n[fill](https://docs.rs/fastrand/latest/fastrand/fn.fill.html \"fn fastrand::fill\")`std`\n    Fill a byte slice with random data.\n\n[get_seed](https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html \"fn fastrand::get_seed\")`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\n[i8](https://docs.rs/fastrand/latest/fastrand/fn.i8.html \"fn fastrand::i8\")`std`\n    Generates a random `i8` in the given range.\n\n[i16](https://docs.rs/fastrand/latest/fastrand/fn.i16.html \"fn fastrand::i16\")`std`\n    Generates a random `i16` in the given range.\n\n[i32](https://docs.rs/fastrand/latest/fastrand/fn.i32.html \"fn fastrand::i32\")`std`\n    Generates a random `i32` in the given range.\n\n[i64](https://docs.rs/fastrand/latest/fastrand/fn.i64.html \"fn fastrand::i64\")`std`\n    Generates a random `i64` in the given range.\n\n[i128](https://docs.rs/fastrand/latest/fastrand/fn.i128.html \"fn fastrand::i128\")`std`\n    Generates a random `i128` in the given range.\n\n[isize](https://docs.rs/fastrand/latest/fastrand/fn.isize.html \"fn fastrand::isize\")`std`\n    Generates a random `isize` in the given range.\n\n[lowercase](https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html \"fn fastrand::lowercase\")`std`\n    Generates a random `char` in range a-z.\n\n[seed](https://docs.rs/fastrand/latest/fastrand/fn.seed.html \"fn fastrand::seed\")`std`\n    Initializes the thread-local generator with the given seed.\n\n[shuffle](https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html \"fn fastrand::shuffle\")`std`\n    Shuffles a slice randomly.\n\n[u8](https://docs.rs/fastrand/latest/fastrand/fn.u8.html \"fn fastrand::u8\")`std`\n    Generates a random `u8` in the given range.\n\n[u16](https://docs.rs/fastrand/latest/fastrand/fn.u16.html \"fn fastrand::u16\")`std`\n    Generates a random `u16` in the given range.\n\n[u32](https://docs.rs/fastrand/latest/fastrand/fn.u32.html \"fn fastrand::u32\")`std`\n    Generates a random `u32` in the given range.\n\n[u64](https://docs.rs/fastrand/latest/fastrand/fn.u64.html \"fn fastrand::u64\")`std`\n    Generates a random `u64` in the given range.\n\n[u128](https://docs.rs/fastrand/latest/fastrand/fn.u128.html \"fn fastrand::u128\")`std`\n    Generates a random `u128` in the given range.\n\n[uppercase](https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html \"fn fastrand::uppercase\")`std`\n    Generates a random `char` in range A-Z.\n\n[usize](https://docs.rs/fastrand/latest/fastrand/fn.usize.html \"fn fastrand::usize\")`std`\n    Generates a random `usize` in the given range.\n",
              "markdown_with_citations": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA simple and fast random number generator.\nThe implementation uses Wyrand\u27e84\u27e9, a simple and fast generator but **not** cryptographically secure.\n## \u00a7\u27e85\u27e9Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random `Vec`\u27e86\u27e9 or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new `Rng`\u27e87\u27e9 instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the `fastrand-contrib`\u27e88\u27e9 crate alongside this one.\n## \u00a7\u27e89\u27e9Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, `Rng`\u27e87\u27e9 can only be instantiated using the `with_seed`\u27e810\u27e9 method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the WebAssembly Notes\u27e811\u27e9 section for more information.\n\n\n## \u00a7\u27e811\u27e9WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the `getrandom`\u27e812\u27e9 crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs\u00a7\u27e813\u27e9\n\nRng\u27e87\u27e9\n    A random number generator.\n## Functions\u00a7\u27e814\u27e9\n\nalphabetic\u27e815\u27e9`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\nalphanumeric\u27e816\u27e9`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\nbool\u27e817\u27e9`std`\n    Generates a random `bool`.\n\nchar\u27e818\u27e9`std`\n    Generates a random `char` in the given range.\n\nchoice\u27e819\u27e9`std`\n    Choose an item from an iterator at random.\n\nchoose_multiple\u27e820\u27e9`std`\n    Collects `amount` values at random from the iterable into a vector.\n\ndigit\u27e821\u27e9`std`\n    Generates a random digit in the given `base`.\n\nf32\u27e822\u27e9`std`\n    Generates a random `f32` in range `0..1`.\n\nf64\u27e823\u27e9`std`\n    Generates a random `f64` in range `0..1`.\n\nfill\u27e824\u27e9`std`\n    Fill a byte slice with random data.\n\nget_seed\u27e825\u27e9`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\ni8\u27e826\u27e9`std`\n    Generates a random `i8` in the given range.\n\ni16\u27e827\u27e9`std`\n    Generates a random `i16` in the given range.\n\ni32\u27e828\u27e9`std`\n    Generates a random `i32` in the given range.\n\ni64\u27e829\u27e9`std`\n    Generates a random `i64` in the given range.\n\ni128\u27e830\u27e9`std`\n    Generates a random `i128` in the given range.\n\nisize\u27e831\u27e9`std`\n    Generates a random `isize` in the given range.\n\nlowercase\u27e832\u27e9`std`\n    Generates a random `char` in range a-z.\n\nseed\u27e833\u27e9`std`\n    Initializes the thread-local generator with the given seed.\n\nshuffle\u27e834\u27e9`std`\n    Shuffles a slice randomly.\n\nu8\u27e835\u27e9`std`\n    Generates a random `u8` in the given range.\n\nu16\u27e836\u27e9`std`\n    Generates a random `u16` in the given range.\n\nu32\u27e837\u27e9`std`\n    Generates a random `u32` in the given range.\n\nu64\u27e838\u27e9`std`\n    Generates a random `u64` in the given range.\n\nu128\u27e839\u27e9`std`\n    Generates a random `u128` in the given range.\n\nuppercase\u27e840\u27e9`std`\n    Generates a random `char` in range A-Z.\n\nusize\u27e841\u27e9`std`\n    Generates a random `usize` in the given range.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fastrand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fastrand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: Wyrand\n\u27e85\u27e9 https://docs.rs/fastrand/latest/fastrand/#examples: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec`\n\u27e87\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html: struct fastrand::Rng - `Rng`\n\u27e88\u27e9 https://crates.io/crates/fastrand-contrib: `fastrand-contrib`\n\u27e89\u27e9 https://docs.rs/fastrand/latest/fastrand/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed: associated function fastrand::Rng::with_seed - `with_seed`\n\u27e811\u27e9 https://docs.rs/fastrand/latest/fastrand/#webassembly-notes: WebAssembly Notes\n\u27e812\u27e9 https://crates.io/crates/getrandom: `getrandom`\n\u27e813\u27e9 https://docs.rs/fastrand/latest/fastrand/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/fastrand/latest/fastrand/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html: fn fastrand::alphabetic - alphabetic\n\u27e816\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html: fn fastrand::alphanumeric - alphanumeric\n\u27e817\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.bool.html: fn fastrand::bool - bool\n\u27e818\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.char.html: fn fastrand::char - char\n\u27e819\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choice.html: fn fastrand::choice - choice\n\u27e820\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html: fn fastrand::choose_multiple - choose_multiple\n\u27e821\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.digit.html: fn fastrand::digit - digit\n\u27e822\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f32.html: fn fastrand::f32 - f32\n\u27e823\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f64.html: fn fastrand::f64 - f64\n\u27e824\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.fill.html: fn fastrand::fill - fill\n\u27e825\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html: fn fastrand::get_seed - get_seed\n\u27e826\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i8.html: fn fastrand::i8 - i8\n\u27e827\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i16.html: fn fastrand::i16 - i16\n\u27e828\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i32.html: fn fastrand::i32 - i32\n\u27e829\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i64.html: fn fastrand::i64 - i64\n\u27e830\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i128.html: fn fastrand::i128 - i128\n\u27e831\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.isize.html: fn fastrand::isize - isize\n\u27e832\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html: fn fastrand::lowercase - lowercase\n\u27e833\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.seed.html: fn fastrand::seed - seed\n\u27e834\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html: fn fastrand::shuffle - shuffle\n\u27e835\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u8.html: fn fastrand::u8 - u8\n\u27e836\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u16.html: fn fastrand::u16 - u16\n\u27e837\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u32.html: fn fastrand::u32 - u32\n\u27e838\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u64.html: fn fastrand::u64 - u64\n\u27e839\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u128.html: fn fastrand::u128 - u128\n\u27e840\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html: fn fastrand::uppercase - uppercase\n\u27e841\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.usize.html: fn fastrand::usize - usize\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7651,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114872.3613476"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/fastrand",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [27 stable releases](https://lib.rs/crates/fastrand/versions)\n2.3.0 |  Dec 8, 2024   \n---|---  \n2.2.0 |  Nov 8, 2024   \n2.1.1 |  Aug 23, 2024   \n2.1.0 |  Apr 27, 2024   \n1.3.3 |  Jul 7, 2020   \n#**4** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 4330601/week @ 2025-03-07 4480319/week @ 2025-03-14 5840613/week @ 2025-03-21 4266095/week @ 2025-03-28 4480606/week @ 2025-04-04 4086854/week @ 2025-04-11 3757248/week @ 2025-04-18 3806134/week @ 2025-04-25 3737130/week @ 2025-05-02 3895653/week @ 2025-05-09 4128786/week @ 2025-05-16 3576261/week @ 2025-05-23 3754440/week @ 2025-05-30 3824345/week @ 2025-06-06 4198159/week @ 2025-06-13 4379876/week @ 2025-06-20\n**16,818,036** downloads per month Used in [**26,045** crates (1,010 directly)](https://lib.rs/crates/fastrand/rev)\n**Apache-2.0 OR MIT**\n33KB  592 lines\n# fastrand\n[![Build](https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/fastrand/workflows/CI/badge.svg)](https://github.com/smol-rs/fastrand/actions) [![License](https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg)](https://github.com/smol-rs/fastrand) [![Cargo](https://img.shields.io/crates/v/fastrand.svg)](https://crates.io/crates/fastrand) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/fastrand/badge.svg)](https://docs.rs/fastrand)\nA simple and fast random number generator.\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast generator but **not** cryptographically secure.\n## Examples\nFlip a coin:\n```\n``if` `fastrand`::``bool`(``)` ``{`\n  `println!``(```\"`heads`\"```)``;`\n```}`` `else` ``{`\n  `println!``(```\"`tails`\"```)``;`\n```}``\n`\n```\n\nGenerate a random ```i32```:\n```\n``let` num `=` `fastrand`::``i32`(``..``)``;`\n`\n```\n\nChoose a random element in an array:\n```\n``let` v `=` `vec!``[``1``,` `2``,` `3``,` `4``,` `5``]``;`\n`let` i `=` `fastrand`::``usize`(``..`v`.``len``(``)``)``;`\n`let` elem `=` v`[`i`]``;`\n`\n```\n\nSample values from an array with ``O`(`n`)``` complexity (``n`` is the length of array):\n```\n``fastrand`::``choose_multiple`(``[``1``,` `4``,` `5``]``,` `2``)``;`\n`fastrand`::``choose_multiple`(``0``..``20``,` `12``)``;`\n`\n```\n\nShuffle an array:\n```\n``let` `mut` v `=` `vec!``[``1``,` `2``,` `3``,` `4``,` `5``]``;`\n`fastrand`::``shuffle`(``&``mut` v`)``;`\n`\n```\n\nGenerate a random ```Vec``` or ```String```:\n```\n``use` `std`::```iter`::``repeat_with`;`\n`let` v`:` ``Vec``<``i32``>`` `=` `repeat_with``(````|``````|`` ```fastrand`::``i32`(``..``)```)``.``take``(``10``)``.``collect``(``)``;`\n`let` s`:` `String` `=` `repeat_with``(``fastrand`::``alphanumeric`)``.``take``(``10``)``.``collect``(``)``;`\n`\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n```//` Pick an arbitrary number as seed.`\n`fastrand`::``seed`(``7``)``;`\n``//` Now this prints the same number on every run:`\n`println!``(```\"``{}``\"```,` `fastrand`::``u32`(``..``)``)``;`\n`\n```\n\nTo be more efficient, create a new ``Rng`` instance instead of using the thread-local generator:\n```\n``use` `std`::```iter`::``repeat_with`;`\n`let` rng `=` `fastrand`::```Rng`::``new`(``)``;`\n`let` `mut` bytes`:` ``Vec``<``u8``>`` `=` `repeat_with``(````|``````|`` ``rng`.``u8``(``..``)```)``.``take``(``10_000``)``.``collect``(``)``;`\n`\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the [``fastrand-contrib``](https://lib.rs/crates/fastrand-contrib) crate alongside this one.\n# Features\n  * ``std`` (enabled by default): Enables the ``std`` library. This is required for the global generator and global entropy. Without this feature, [``Rng``] can only be instantiated using the [``with_seed``](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed) method.\n  * ``js``: Assumes that WebAssembly targets are being run in a JavaScript environment.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/smol-rs/fastrand/blob/8419f8916f08c63572b4f7cbdc07cec94c1fc5ed/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/smol-rs/fastrand/blob/8419f8916f08c63572b4f7cbdc07cec94c1fc5ed/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0\u2013375KB \n  * [js?](https://lib.rs/crates/fastrand/features#feature-js \"optional feature\") [getrandom](https://lib.rs/crates/getrandom \"outdated\") 0.2[+js](https://lib.rs/crates/getrandom/features#feature-js) wasm32 wasm64 unknown\n\n\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3\") wasm32 wasm64 unknown\n  * dev  [wyhash](https://lib.rs/crates/wyhash \"0.5\")\n\n\n#### [Other features](https://lib.rs/crates/fastrand/features)\n  * [alloc](https://lib.rs/crates/fastrand/features#feature-alloc)\n  * [std](https://lib.rs/crates/fastrand/features#feature-std)\n\n\n",
              "markdown_with_citations": "###  27 stable releases\u27e81\u27e9\n2.3.0 |  Dec 8, 2024   \n---|---  \n2.2.0 |  Nov 8, 2024   \n2.1.1 |  Aug 23, 2024   \n2.1.0 |  Apr 27, 2024   \n1.3.3 |  Jul 7, 2020   \n#**4** in Algorithms\u27e82\u27e9\nDownload history 4330601/week @ 2025-03-07 4480319/week @ 2025-03-14 5840613/week @ 2025-03-21 4266095/week @ 2025-03-28 4480606/week @ 2025-04-04 4086854/week @ 2025-04-11 3757248/week @ 2025-04-18 3806134/week @ 2025-04-25 3737130/week @ 2025-05-02 3895653/week @ 2025-05-09 4128786/week @ 2025-05-16 3576261/week @ 2025-05-23 3754440/week @ 2025-05-30 3824345/week @ 2025-06-06 4198159/week @ 2025-06-13 4379876/week @ 2025-06-20\n**16,818,036** downloads per month Used in **26,045** crates (1,010 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n33KB  592 lines\n# fastrand\n![Build\u27e84\u27e9](https://github.com/smol-rs/fastrand/actions) ![License\u27e85\u27e9](https://github.com/smol-rs/fastrand) ![Cargo\u27e86\u27e9](https://crates.io/crates/fastrand) ![Documentation\u27e87\u27e9](https://docs.rs/fastrand)\nA simple and fast random number generator.\nThe implementation uses Wyrand\u27e88\u27e9, a simple and fast generator but **not** cryptographically secure.\n## Examples\nFlip a coin:\n```\n``if` `fastrand`::``bool`(``)` ``{`\n  `println!``(```\"`heads`\"```)``;`\n```}`` `else` ``{`\n  `println!``(```\"`tails`\"```)``;`\n```}``\n`\n```\n\nGenerate a random ```i32```:\n```\n``let` num `=` `fastrand`::``i32`(``..``)``;`\n`\n```\n\nChoose a random element in an array:\n```\n``let` v `=` `vec!``[``1``,` `2``,` `3``,` `4``,` `5``]``;`\n`let` i `=` `fastrand`::``usize`(``..`v`.``len``(``)``)``;`\n`let` elem `=` v`[`i`]``;`\n`\n```\n\nSample values from an array with ``O`(`n`)``` complexity (``n`` is the length of array):\n```\n``fastrand`::``choose_multiple`(``[``1``,` `4``,` `5``]``,` `2``)``;`\n`fastrand`::``choose_multiple`(``0``..``20``,` `12``)``;`\n`\n```\n\nShuffle an array:\n```\n``let` `mut` v `=` `vec!``[``1``,` `2``,` `3``,` `4``,` `5``]``;`\n`fastrand`::``shuffle`(``&``mut` v`)``;`\n`\n```\n\nGenerate a random ```Vec``` or ```String```:\n```\n``use` `std`::```iter`::``repeat_with`;`\n`let` v`:` ``Vec``<``i32``>`` `=` `repeat_with``(````|``````|`` ```fastrand`::``i32`(``..``)```)``.``take``(``10``)``.``collect``(``)``;`\n`let` s`:` `String` `=` `repeat_with``(``fastrand`::``alphanumeric`)``.``take``(``10``)``.``collect``(``)``;`\n`\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n```//` Pick an arbitrary number as seed.`\n`fastrand`::``seed`(``7``)``;`\n``//` Now this prints the same number on every run:`\n`println!``(```\"``{}``\"```,` `fastrand`::``u32`(``..``)``)``;`\n`\n```\n\nTo be more efficient, create a new ``Rng`` instance instead of using the thread-local generator:\n```\n``use` `std`::```iter`::``repeat_with`;`\n`let` rng `=` `fastrand`::```Rng`::``new`(``)``;`\n`let` `mut` bytes`:` ``Vec``<``u8``>`` `=` `repeat_with``(````|``````|`` ``rng`.``u8``(``..``)```)``.``take``(``10_000``)``.``collect``(``)``;`\n`\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the ``fastrand-contrib``\u27e89\u27e9 crate alongside this one.\n# Features\n  * ``std`` (enabled by default): Enables the ``std`` library. This is required for the global generator and global entropy. Without this feature, [``Rng``] can only be instantiated using the ``with_seed``\u27e810\u27e9 method.\n  * ``js``: Assumes that WebAssembly targets are being run in a JavaScript environment.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e811\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e812\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0\u2013375KB \n  * js?\u27e813\u27e9 getrandom\u27e814\u27e9 0.2+js\u27e815\u27e9 wasm32 wasm64 unknown\n\n\n  * dev  rand\u27e816\u27e9 0.8\n  * dev  wasm-bindgen-test\u27e817\u27e9 wasm32 wasm64 unknown\n  * dev  wyhash\u27e818\u27e9\n\n\n#### Other features\u27e819\u27e9\n  * alloc\u27e820\u27e9\n  * std\u27e821\u27e9\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/fastrand/versions: 27 stable releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/fastrand/rev: **26,045** crates (1,010 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/fastrand/workflows/CI/badge.svg: ![Build\n\u27e85\u27e9 https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg: ![License\n\u27e86\u27e9 https://img.shields.io/crates/v/fastrand.svg: ![Cargo\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/fastrand/badge.svg: ![Documentation\n\u27e88\u27e9 https://github.com/wangyi-fudan/wyhash: Wyrand\n\u27e89\u27e9 https://lib.rs/crates/fastrand-contrib: ``fastrand-contrib``\n\u27e810\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed: ``with_seed``\n\u27e811\u27e9 https://github.com/smol-rs/fastrand/blob/8419f8916f08c63572b4f7cbdc07cec94c1fc5ed/LICENSE-APACHE: LICENSE-APACHE\n\u27e812\u27e9 https://github.com/smol-rs/fastrand/blob/8419f8916f08c63572b4f7cbdc07cec94c1fc5ed/LICENSE-MIT: LICENSE-MIT\n\u27e813\u27e9 https://lib.rs/crates/fastrand/features#feature-js: optional feature - js?\n\u27e814\u27e9 https://lib.rs/crates/getrandom: outdated - getrandom\n\u27e815\u27e9 https://lib.rs/crates/getrandom/features#feature-js: +js\n\u27e816\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e817\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3 - wasm-bindgen-test\n\u27e818\u27e9 https://lib.rs/crates/wyhash: 0.5 - wyhash\n\u27e819\u27e9 https://lib.rs/crates/fastrand/features: Other features\n\u27e820\u27e9 https://lib.rs/crates/fastrand/features#feature-alloc: alloc\n\u27e821\u27e9 https://lib.rs/crates/fastrand/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5288,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114872.7727803"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp99rlbyf4/fastrand-2.3.0#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\target\\debug\\deps\\libfastrand-caab45bc52dd518d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp99rlbyf4/fastrand-2.3.0#fastrand@2.3.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fastrand",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp99rlbyf4\\fastrand-2.3.0\\target\\debug\\deps\\libfastrand-9a017bfd86cca882.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 45
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "fastrand",
          "version": "2.3.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\n[Settings](https://docs.rs/fastrand/latest/settings.html)\n[Help](https://docs.rs/fastrand/latest/help.html)\nSummary[Source](https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689)\nExpand description\nA simple and fast random number generator.\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast generator but **not** cryptographically secure.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#examples)Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\") or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the [`fastrand-contrib`](https://crates.io/crates/fastrand-contrib) crate alongside this one.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#features)Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") can only be instantiated using the [`with_seed`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed \"associated function fastrand::Rng::with_seed\") method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the [WebAssembly Notes](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes) section for more information.\n\n\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes)WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the [`getrandom`](https://crates.io/crates/getrandom) crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs[\u00a7](https://docs.rs/fastrand/latest/fastrand/#structs)\n\n[Rng](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\")\n    A random number generator.\n## Functions[\u00a7](https://docs.rs/fastrand/latest/fastrand/#functions)\n\n[alphabetic](https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html \"fn fastrand::alphabetic\")`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\n[alphanumeric](https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html \"fn fastrand::alphanumeric\")`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\n[bool](https://docs.rs/fastrand/latest/fastrand/fn.bool.html \"fn fastrand::bool\")`std`\n    Generates a random `bool`.\n\n[char](https://docs.rs/fastrand/latest/fastrand/fn.char.html \"fn fastrand::char\")`std`\n    Generates a random `char` in the given range.\n\n[choice](https://docs.rs/fastrand/latest/fastrand/fn.choice.html \"fn fastrand::choice\")`std`\n    Choose an item from an iterator at random.\n\n[choose_multiple](https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html \"fn fastrand::choose_multiple\")`std`\n    Collects `amount` values at random from the iterable into a vector.\n\n[digit](https://docs.rs/fastrand/latest/fastrand/fn.digit.html \"fn fastrand::digit\")`std`\n    Generates a random digit in the given `base`.\n\n[f32](https://docs.rs/fastrand/latest/fastrand/fn.f32.html \"fn fastrand::f32\")`std`\n    Generates a random `f32` in range `0..1`.\n\n[f64](https://docs.rs/fastrand/latest/fastrand/fn.f64.html \"fn fastrand::f64\")`std`\n    Generates a random `f64` in range `0..1`.\n\n[fill](https://docs.rs/fastrand/latest/fastrand/fn.fill.html \"fn fastrand::fill\")`std`\n    Fill a byte slice with random data.\n\n[get_seed](https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html \"fn fastrand::get_seed\")`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\n[i8](https://docs.rs/fastrand/latest/fastrand/fn.i8.html \"fn fastrand::i8\")`std`\n    Generates a random `i8` in the given range.\n\n[i16](https://docs.rs/fastrand/latest/fastrand/fn.i16.html \"fn fastrand::i16\")`std`\n    Generates a random `i16` in the given range.\n\n[i32](https://docs.rs/fastrand/latest/fastrand/fn.i32.html \"fn fastrand::i32\")`std`\n    Generates a random `i32` in the given range.\n\n[i64](https://docs.rs/fastrand/latest/fastrand/fn.i64.html \"fn fastrand::i64\")`std`\n    Generates a random `i64` in the given range.\n\n[i128](https://docs.rs/fastrand/latest/fastrand/fn.i128.html \"fn fastrand::i128\")`std`\n    Generates a random `i128` in the given range.\n\n[isize](https://docs.rs/fastrand/latest/fastrand/fn.isize.html \"fn fastrand::isize\")`std`\n    Generates a random `isize` in the given range.\n\n[lowercase](https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html \"fn fastrand::lowercase\")`std`\n    Generates a random `char` in range a-z.\n\n[seed](https://docs.rs/fastrand/latest/fastrand/fn.seed.html \"fn fastrand::seed\")`std`\n    Initializes the thread-local generator with the given seed.\n\n[shuffle](https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html \"fn fastrand::shuffle\")`std`\n    Shuffles a slice randomly.\n\n[u8](https://docs.rs/fastrand/latest/fastrand/fn.u8.html \"fn fastrand::u8\")`std`\n    Generates a random `u8` in the given range.\n\n[u16](https://docs.rs/fastrand/latest/fastrand/fn.u16.html \"fn fastrand::u16\")`std`\n    Generates a random `u16` in the given range.\n\n[u32](https://docs.rs/fastrand/latest/fastrand/fn.u32.html \"fn fastrand::u32\")`std`\n    Generates a random `u32` in the given range.\n\n[u64](https://docs.rs/fastrand/latest/fastrand/fn.u64.html \"fn fastrand::u64\")`std`\n    Generates a random `u64` in the given range.\n\n[u128](https://docs.rs/fastrand/latest/fastrand/fn.u128.html \"fn fastrand::u128\")`std`\n    Generates a random `u128` in the given range.\n\n[uppercase](https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html \"fn fastrand::uppercase\")`std`\n    Generates a random `char` in range A-Z.\n\n[usize](https://docs.rs/fastrand/latest/fastrand/fn.usize.html \"fn fastrand::usize\")`std`\n    Generates a random `usize` in the given range.\n",
            "markdown_with_citations": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA simple and fast random number generator.\nThe implementation uses Wyrand\u27e84\u27e9, a simple and fast generator but **not** cryptographically secure.\n## \u00a7\u27e85\u27e9Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random `Vec`\u27e86\u27e9 or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new `Rng`\u27e87\u27e9 instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the `fastrand-contrib`\u27e88\u27e9 crate alongside this one.\n## \u00a7\u27e89\u27e9Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, `Rng`\u27e87\u27e9 can only be instantiated using the `with_seed`\u27e810\u27e9 method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the WebAssembly Notes\u27e811\u27e9 section for more information.\n\n\n## \u00a7\u27e811\u27e9WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the `getrandom`\u27e812\u27e9 crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs\u00a7\u27e813\u27e9\n\nRng\u27e87\u27e9\n    A random number generator.\n## Functions\u00a7\u27e814\u27e9\n\nalphabetic\u27e815\u27e9`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\nalphanumeric\u27e816\u27e9`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\nbool\u27e817\u27e9`std`\n    Generates a random `bool`.\n\nchar\u27e818\u27e9`std`\n    Generates a random `char` in the given range.\n\nchoice\u27e819\u27e9`std`\n    Choose an item from an iterator at random.\n\nchoose_multiple\u27e820\u27e9`std`\n    Collects `amount` values at random from the iterable into a vector.\n\ndigit\u27e821\u27e9`std`\n    Generates a random digit in the given `base`.\n\nf32\u27e822\u27e9`std`\n    Generates a random `f32` in range `0..1`.\n\nf64\u27e823\u27e9`std`\n    Generates a random `f64` in range `0..1`.\n\nfill\u27e824\u27e9`std`\n    Fill a byte slice with random data.\n\nget_seed\u27e825\u27e9`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\ni8\u27e826\u27e9`std`\n    Generates a random `i8` in the given range.\n\ni16\u27e827\u27e9`std`\n    Generates a random `i16` in the given range.\n\ni32\u27e828\u27e9`std`\n    Generates a random `i32` in the given range.\n\ni64\u27e829\u27e9`std`\n    Generates a random `i64` in the given range.\n\ni128\u27e830\u27e9`std`\n    Generates a random `i128` in the given range.\n\nisize\u27e831\u27e9`std`\n    Generates a random `isize` in the given range.\n\nlowercase\u27e832\u27e9`std`\n    Generates a random `char` in range a-z.\n\nseed\u27e833\u27e9`std`\n    Initializes the thread-local generator with the given seed.\n\nshuffle\u27e834\u27e9`std`\n    Shuffles a slice randomly.\n\nu8\u27e835\u27e9`std`\n    Generates a random `u8` in the given range.\n\nu16\u27e836\u27e9`std`\n    Generates a random `u16` in the given range.\n\nu32\u27e837\u27e9`std`\n    Generates a random `u32` in the given range.\n\nu64\u27e838\u27e9`std`\n    Generates a random `u64` in the given range.\n\nu128\u27e839\u27e9`std`\n    Generates a random `u128` in the given range.\n\nuppercase\u27e840\u27e9`std`\n    Generates a random `char` in range A-Z.\n\nusize\u27e841\u27e9`std`\n    Generates a random `usize` in the given range.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fastrand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fastrand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: Wyrand\n\u27e85\u27e9 https://docs.rs/fastrand/latest/fastrand/#examples: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec`\n\u27e87\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html: struct fastrand::Rng - `Rng`\n\u27e88\u27e9 https://crates.io/crates/fastrand-contrib: `fastrand-contrib`\n\u27e89\u27e9 https://docs.rs/fastrand/latest/fastrand/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed: associated function fastrand::Rng::with_seed - `with_seed`\n\u27e811\u27e9 https://docs.rs/fastrand/latest/fastrand/#webassembly-notes: WebAssembly Notes\n\u27e812\u27e9 https://crates.io/crates/getrandom: `getrandom`\n\u27e813\u27e9 https://docs.rs/fastrand/latest/fastrand/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/fastrand/latest/fastrand/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html: fn fastrand::alphabetic - alphabetic\n\u27e816\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html: fn fastrand::alphanumeric - alphanumeric\n\u27e817\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.bool.html: fn fastrand::bool - bool\n\u27e818\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.char.html: fn fastrand::char - char\n\u27e819\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choice.html: fn fastrand::choice - choice\n\u27e820\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html: fn fastrand::choose_multiple - choose_multiple\n\u27e821\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.digit.html: fn fastrand::digit - digit\n\u27e822\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f32.html: fn fastrand::f32 - f32\n\u27e823\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f64.html: fn fastrand::f64 - f64\n\u27e824\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.fill.html: fn fastrand::fill - fill\n\u27e825\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html: fn fastrand::get_seed - get_seed\n\u27e826\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i8.html: fn fastrand::i8 - i8\n\u27e827\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i16.html: fn fastrand::i16 - i16\n\u27e828\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i32.html: fn fastrand::i32 - i32\n\u27e829\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i64.html: fn fastrand::i64 - i64\n\u27e830\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i128.html: fn fastrand::i128 - i128\n\u27e831\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.isize.html: fn fastrand::isize - isize\n\u27e832\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html: fn fastrand::lowercase - lowercase\n\u27e833\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.seed.html: fn fastrand::seed - seed\n\u27e834\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html: fn fastrand::shuffle - shuffle\n\u27e835\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u8.html: fn fastrand::u8 - u8\n\u27e836\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u16.html: fn fastrand::u16 - u16\n\u27e837\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u32.html: fn fastrand::u32 - u32\n\u27e838\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u64.html: fn fastrand::u64 - u64\n\u27e839\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u128.html: fn fastrand::u128 - u128\n\u27e840\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html: fn fastrand::uppercase - uppercase\n\u27e841\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.usize.html: fn fastrand::usize - usize\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "fastrand",
          "version": "2.3.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\n[Settings](https://docs.rs/fastrand/latest/settings.html)\n[Help](https://docs.rs/fastrand/latest/help.html)\nSummary[Source](https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689)\nExpand description\nA simple and fast random number generator.\nThe implementation uses [Wyrand](https://github.com/wangyi-fudan/wyhash), a simple and fast generator but **not** cryptographically secure.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#examples)Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random [`Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\") or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the [`fastrand-contrib`](https://crates.io/crates/fastrand-contrib) crate alongside this one.\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#features)Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, [`Rng`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\") can only be instantiated using the [`with_seed`](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed \"associated function fastrand::Rng::with_seed\") method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the [WebAssembly Notes](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes) section for more information.\n\n\n## [\u00a7](https://docs.rs/fastrand/latest/fastrand/#webassembly-notes)WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the [`getrandom`](https://crates.io/crates/getrandom) crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs[\u00a7](https://docs.rs/fastrand/latest/fastrand/#structs)\n\n[Rng](https://docs.rs/fastrand/latest/fastrand/struct.Rng.html \"struct fastrand::Rng\")\n    A random number generator.\n## Functions[\u00a7](https://docs.rs/fastrand/latest/fastrand/#functions)\n\n[alphabetic](https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html \"fn fastrand::alphabetic\")`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\n[alphanumeric](https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html \"fn fastrand::alphanumeric\")`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\n[bool](https://docs.rs/fastrand/latest/fastrand/fn.bool.html \"fn fastrand::bool\")`std`\n    Generates a random `bool`.\n\n[char](https://docs.rs/fastrand/latest/fastrand/fn.char.html \"fn fastrand::char\")`std`\n    Generates a random `char` in the given range.\n\n[choice](https://docs.rs/fastrand/latest/fastrand/fn.choice.html \"fn fastrand::choice\")`std`\n    Choose an item from an iterator at random.\n\n[choose_multiple](https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html \"fn fastrand::choose_multiple\")`std`\n    Collects `amount` values at random from the iterable into a vector.\n\n[digit](https://docs.rs/fastrand/latest/fastrand/fn.digit.html \"fn fastrand::digit\")`std`\n    Generates a random digit in the given `base`.\n\n[f32](https://docs.rs/fastrand/latest/fastrand/fn.f32.html \"fn fastrand::f32\")`std`\n    Generates a random `f32` in range `0..1`.\n\n[f64](https://docs.rs/fastrand/latest/fastrand/fn.f64.html \"fn fastrand::f64\")`std`\n    Generates a random `f64` in range `0..1`.\n\n[fill](https://docs.rs/fastrand/latest/fastrand/fn.fill.html \"fn fastrand::fill\")`std`\n    Fill a byte slice with random data.\n\n[get_seed](https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html \"fn fastrand::get_seed\")`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\n[i8](https://docs.rs/fastrand/latest/fastrand/fn.i8.html \"fn fastrand::i8\")`std`\n    Generates a random `i8` in the given range.\n\n[i16](https://docs.rs/fastrand/latest/fastrand/fn.i16.html \"fn fastrand::i16\")`std`\n    Generates a random `i16` in the given range.\n\n[i32](https://docs.rs/fastrand/latest/fastrand/fn.i32.html \"fn fastrand::i32\")`std`\n    Generates a random `i32` in the given range.\n\n[i64](https://docs.rs/fastrand/latest/fastrand/fn.i64.html \"fn fastrand::i64\")`std`\n    Generates a random `i64` in the given range.\n\n[i128](https://docs.rs/fastrand/latest/fastrand/fn.i128.html \"fn fastrand::i128\")`std`\n    Generates a random `i128` in the given range.\n\n[isize](https://docs.rs/fastrand/latest/fastrand/fn.isize.html \"fn fastrand::isize\")`std`\n    Generates a random `isize` in the given range.\n\n[lowercase](https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html \"fn fastrand::lowercase\")`std`\n    Generates a random `char` in range a-z.\n\n[seed](https://docs.rs/fastrand/latest/fastrand/fn.seed.html \"fn fastrand::seed\")`std`\n    Initializes the thread-local generator with the given seed.\n\n[shuffle](https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html \"fn fastrand::shuffle\")`std`\n    Shuffles a slice randomly.\n\n[u8](https://docs.rs/fastrand/latest/fastrand/fn.u8.html \"fn fastrand::u8\")`std`\n    Generates a random `u8` in the given range.\n\n[u16](https://docs.rs/fastrand/latest/fastrand/fn.u16.html \"fn fastrand::u16\")`std`\n    Generates a random `u16` in the given range.\n\n[u32](https://docs.rs/fastrand/latest/fastrand/fn.u32.html \"fn fastrand::u32\")`std`\n    Generates a random `u32` in the given range.\n\n[u64](https://docs.rs/fastrand/latest/fastrand/fn.u64.html \"fn fastrand::u64\")`std`\n    Generates a random `u64` in the given range.\n\n[u128](https://docs.rs/fastrand/latest/fastrand/fn.u128.html \"fn fastrand::u128\")`std`\n    Generates a random `u128` in the given range.\n\n[uppercase](https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html \"fn fastrand::uppercase\")`std`\n    Generates a random `char` in range A-Z.\n\n[usize](https://docs.rs/fastrand/latest/fastrand/fn.usize.html \"fn fastrand::usize\")`std`\n    Generates a random `usize` in the given range.\n",
            "markdown_with_citations": "[](https://docs.rs/fastrand/latest/fastrand/all.html \"show sidebar\")\n# Crate fastrandCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA simple and fast random number generator.\nThe implementation uses Wyrand\u27e84\u27e9, a simple and fast generator but **not** cryptographically secure.\n## \u00a7\u27e85\u27e9Examples\nFlip a coin:\n```\nif fastrand::bool() {\n  println!(\"heads\");\n} else {\n  println!(\"tails\");\n}\n```\n\nGenerate a random `i32`:\n```\nlet num = fastrand::i32(..);\n```\n\nChoose a random element in an array:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet i = fastrand::usize(..v.len());\nlet elem = v[i];\n```\n\nSample values from an array with `O(n)` complexity (`n` is the length of array):\n```\nfastrand::choose_multiple([1, 4, 5], 2);\nfastrand::choose_multiple(0..20, 12);\n```\n\nShuffle an array:\n```\nlet mut v = vec![1, 2, 3, 4, 5];\nfastrand::shuffle(&mut v);\n```\n\nGenerate a random `Vec`\u27e86\u27e9 or [`String`]:\n```\nuse std::iter::repeat_with;\nlet v: Vec<i32> = repeat_with(|| fastrand::i32(..)).take(10).collect();\nlet s: String = repeat_with(fastrand::alphanumeric).take(10).collect();\n```\n\nTo get reproducible results on every run, initialize the generator with a seed:\n```\n// Pick an arbitrary number as seed.\nfastrand::seed(7);\n// Now this prints the same number on every run:\nprintln!(\"{}\", fastrand::u32(..));\n```\n\nTo be more efficient, create a new `Rng`\u27e87\u27e9 instance instead of using the thread-local generator:\n```\nuse std::iter::repeat_with;\nlet mut rng = fastrand::Rng::new();\nlet mut bytes: Vec<u8> = repeat_with(|| rng.u8(..)).take(10_000).collect();\n```\n\nThis crate aims to expose a core set of useful randomness primitives. For more niche algorithms, consider using the `fastrand-contrib`\u27e88\u27e9 crate alongside this one.\n## \u00a7\u27e89\u27e9Features\n  * `std` (enabled by default): Enables the `std` library. This is required for the global generator and global entropy. Without this feature, `Rng`\u27e87\u27e9 can only be instantiated using the `with_seed`\u27e810\u27e9 method.\n  * `js`: Assumes that WebAssembly targets are being run in a JavaScript environment. See the WebAssembly Notes\u27e811\u27e9 section for more information.\n\n\n## \u00a7\u27e811\u27e9WebAssembly Notes\nFor non-WASI WASM targets, there is additional sublety to consider when utilizing the global RNG. By default, `std` targets will use entropy sources in the standard library to seed the global RNG. However, these sources are not available by default on WASM targets outside of WASI.\nIf the `js` feature is enabled, this crate will assume that it is running in a JavaScript environment. At this point, the `getrandom`\u27e812\u27e9 crate will be used in order to access the available entropy sources and seed the global RNG. If the `js` feature is not enabled, the global RNG will use a predefined seed.\n## Structs\u00a7\u27e813\u27e9\n\nRng\u27e87\u27e9\n    A random number generator.\n## Functions\u00a7\u27e814\u27e9\n\nalphabetic\u27e815\u27e9`std`\n    Generates a random `char` in ranges a-z and A-Z.\n\nalphanumeric\u27e816\u27e9`std`\n    Generates a random `char` in ranges a-z, A-Z and 0-9.\n\nbool\u27e817\u27e9`std`\n    Generates a random `bool`.\n\nchar\u27e818\u27e9`std`\n    Generates a random `char` in the given range.\n\nchoice\u27e819\u27e9`std`\n    Choose an item from an iterator at random.\n\nchoose_multiple\u27e820\u27e9`std`\n    Collects `amount` values at random from the iterable into a vector.\n\ndigit\u27e821\u27e9`std`\n    Generates a random digit in the given `base`.\n\nf32\u27e822\u27e9`std`\n    Generates a random `f32` in range `0..1`.\n\nf64\u27e823\u27e9`std`\n    Generates a random `f64` in range `0..1`.\n\nfill\u27e824\u27e9`std`\n    Fill a byte slice with random data.\n\nget_seed\u27e825\u27e9`std`\n    Gives back **current** seed that is being held by the thread-local generator.\n\ni8\u27e826\u27e9`std`\n    Generates a random `i8` in the given range.\n\ni16\u27e827\u27e9`std`\n    Generates a random `i16` in the given range.\n\ni32\u27e828\u27e9`std`\n    Generates a random `i32` in the given range.\n\ni64\u27e829\u27e9`std`\n    Generates a random `i64` in the given range.\n\ni128\u27e830\u27e9`std`\n    Generates a random `i128` in the given range.\n\nisize\u27e831\u27e9`std`\n    Generates a random `isize` in the given range.\n\nlowercase\u27e832\u27e9`std`\n    Generates a random `char` in range a-z.\n\nseed\u27e833\u27e9`std`\n    Initializes the thread-local generator with the given seed.\n\nshuffle\u27e834\u27e9`std`\n    Shuffles a slice randomly.\n\nu8\u27e835\u27e9`std`\n    Generates a random `u8` in the given range.\n\nu16\u27e836\u27e9`std`\n    Generates a random `u16` in the given range.\n\nu32\u27e837\u27e9`std`\n    Generates a random `u32` in the given range.\n\nu64\u27e838\u27e9`std`\n    Generates a random `u64` in the given range.\n\nu128\u27e839\u27e9`std`\n    Generates a random `u128` in the given range.\n\nuppercase\u27e840\u27e9`std`\n    Generates a random `char` in range A-Z.\n\nusize\u27e841\u27e9`std`\n    Generates a random `usize` in the given range.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fastrand/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fastrand/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fastrand/latest/src/fastrand/lib.rs.html#1-689: Source\n\u27e84\u27e9 https://github.com/wangyi-fudan/wyhash: Wyrand\n\u27e85\u27e9 https://docs.rs/fastrand/latest/fastrand/#examples: \u00a7\n\u27e86\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec`\n\u27e87\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html: struct fastrand::Rng - `Rng`\n\u27e88\u27e9 https://crates.io/crates/fastrand-contrib: `fastrand-contrib`\n\u27e89\u27e9 https://docs.rs/fastrand/latest/fastrand/#features: \u00a7\n\u27e810\u27e9 https://docs.rs/fastrand/latest/fastrand/struct.Rng.html#method.with_seed: associated function fastrand::Rng::with_seed - `with_seed`\n\u27e811\u27e9 https://docs.rs/fastrand/latest/fastrand/#webassembly-notes: WebAssembly Notes\n\u27e812\u27e9 https://crates.io/crates/getrandom: `getrandom`\n\u27e813\u27e9 https://docs.rs/fastrand/latest/fastrand/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/fastrand/latest/fastrand/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphabetic.html: fn fastrand::alphabetic - alphabetic\n\u27e816\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.alphanumeric.html: fn fastrand::alphanumeric - alphanumeric\n\u27e817\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.bool.html: fn fastrand::bool - bool\n\u27e818\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.char.html: fn fastrand::char - char\n\u27e819\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choice.html: fn fastrand::choice - choice\n\u27e820\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.choose_multiple.html: fn fastrand::choose_multiple - choose_multiple\n\u27e821\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.digit.html: fn fastrand::digit - digit\n\u27e822\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f32.html: fn fastrand::f32 - f32\n\u27e823\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.f64.html: fn fastrand::f64 - f64\n\u27e824\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.fill.html: fn fastrand::fill - fill\n\u27e825\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.get_seed.html: fn fastrand::get_seed - get_seed\n\u27e826\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i8.html: fn fastrand::i8 - i8\n\u27e827\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i16.html: fn fastrand::i16 - i16\n\u27e828\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i32.html: fn fastrand::i32 - i32\n\u27e829\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i64.html: fn fastrand::i64 - i64\n\u27e830\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.i128.html: fn fastrand::i128 - i128\n\u27e831\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.isize.html: fn fastrand::isize - isize\n\u27e832\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.lowercase.html: fn fastrand::lowercase - lowercase\n\u27e833\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.seed.html: fn fastrand::seed - seed\n\u27e834\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.shuffle.html: fn fastrand::shuffle - shuffle\n\u27e835\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u8.html: fn fastrand::u8 - u8\n\u27e836\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u16.html: fn fastrand::u16 - u16\n\u27e837\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u32.html: fn fastrand::u32 - u32\n\u27e838\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u64.html: fn fastrand::u64 - u64\n\u27e839\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.u128.html: fn fastrand::u128 - u128\n\u27e840\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.uppercase.html: fn fastrand::uppercase - uppercase\n\u27e841\u27e9 https://docs.rs/fastrand/latest/fastrand/fn.usize.html: fn fastrand::usize - usize\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `fastrand` crate is a simple, fast, and non-cryptographically secure random number generator based on the Wyrand algorithm. It provides a variety of randomness utilities, including generating random numbers, booleans, characters, shuffling slices, sampling multiple elements, and creating random strings or vectors. It supports thread-local and seeded RNGs, has optional WebAssembly compatibility via the `js` feature, and offers efficient randomness primitives for general-purpose use.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Random Number Generation  \n\u2705 Factual: The `fastrand` crate uses the Wyrand algorithm to generate random numbers, which is fast but not cryptographically secure.  \n\u274c Counterfactual: The `fastrand` crate uses the Mersenne Twister algorithm for random number generation, ensuring cryptographic security.  \n\n---\n\n### Pair 2: Seeding Behavior  \n\u2705 Factual: The `fastrand` crate allows users to initialize the random number generator with a seed for reproducible results across runs.  \n\u274c Counterfactual: The `fastrand` crate automatically generates a unique seed for reproducible results without requiring user input.  \n\n---\n\n### Pair 3: WebAssembly Support  \n\u2705 Factual: When the `js` feature is enabled, the `fastrand` crate uses the `getrandom` crate to access entropy sources in JavaScript environments for WebAssembly targets.  \n\u274c Counterfactual: The `fastrand` crate does not support WebAssembly targets and fails to generate random numbers in JavaScript environments.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-c106ec9a-475b3275-1751261081",
      "timestamp": "2025-06-30T05:24:41.692758+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]