[
  {
    "execution_id": "exec-ca8c522a-d212e802-1751260295",
    "timestamp": "2025-06-30T05:11:35.484067+00:00",
    "sacred_chain": {
      "input_data": "colored",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'colored' -> 'colored'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "colored",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/colored",
            "title": "colored v3.0.0",
            "content": {
              "raw_markdown": "#  colored v3.0.0\nThe most simple way to add colors in your terminal \n  * [ #ansi_term ](https://crates.io/keywords/ansi_term)\n  * [ #color ](https://crates.io/keywords/color)\n  * [ #string ](https://crates.io/keywords/string)\n  * [ #term ](https://crates.io/keywords/term)\n  * [ #term-painter ](https://crates.io/keywords/term-painter)\n\n\n  * [ Readme ](https://crates.io/crates/colored)\n  * [ 32 Versions ](https://crates.io/crates/colored/versions)\n  * [ Dependencies ](https://crates.io/crates/colored/dependencies)\n  * [ Dependents ](https://crates.io/crates/colored/reverse_dependencies)\n\n\n## Metadata\n6 months ago \nv1.80.0 \n[ MPL-2.0 ](https://choosealicense.com/licenses/mpl-2.0)\n33.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add colored\nOr add the following line to your Cargo.toml:\ncolored = \"3.0.0\"\n## Repository\n[ github.com/mackwic/colored ](https://github.com/mackwic/colored)\n## Owners\n[ Report crate ](https://crates.io/support?crate=colored&inquire=crate-violation)\n### Stats Overview\n80,028,107 Downloads all time\n32 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  colored v3.0.0\nThe most simple way to add colors in your terminal \n  *  #ansi_term \u27e81\u27e9\n  *  #color \u27e82\u27e9\n  *  #string \u27e83\u27e9\n  *  #term \u27e84\u27e9\n  *  #term-painter \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  32 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n6 months ago \nv1.80.0 \n MPL-2.0 \u27e810\u27e9\n33.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add colored\nOr add the following line to your Cargo.toml:\ncolored = \"3.0.0\"\n## Repository\n github.com/mackwic/colored \u27e811\u27e9\n## Owners\n Report crate \u27e812\u27e9\n### Stats Overview\n80,028,107 Downloads all time\n32 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/ansi_term:  #ansi_term \n\u27e82\u27e9 https://crates.io/keywords/color:  #color \n\u27e83\u27e9 https://crates.io/keywords/string:  #string \n\u27e84\u27e9 https://crates.io/keywords/term:  #term \n\u27e85\u27e9 https://crates.io/keywords/term-painter:  #term-painter \n\u27e86\u27e9 https://crates.io/crates/colored:  Readme \n\u27e87\u27e9 https://crates.io/crates/colored/versions:  32 Versions \n\u27e88\u27e9 https://crates.io/crates/colored/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/colored/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mpl-2.0:  MPL-2.0 \n\u27e811\u27e9 https://github.com/mackwic/colored:  github.com/mackwic/colored \n\u27e812\u27e9 https://crates.io/support?crate=colored&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1190,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114085.197175"
          },
          "docs_rs": {
            "url": "https://docs.rs/colored",
            "title": "Crate coloredCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\n[Settings](https://docs.rs/colored/latest/settings.html)\n[Help](https://docs.rs/colored/latest/help.html)\nSummary[Source](https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985)\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee [the `Colorize` trait](https://docs.rs/colored/latest/colored/trait.Colorize.html) for all the methods.\nNote: The methods of [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\"), when used on [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\")\u2019s, return [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\u2019s. See [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\") to learn more about them and what you can do with them beyond continue to use [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\") to further modify them.\n## Re-exports[\u00a7](https://docs.rs/colored/latest/colored/#reexports)\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules[\u00a7](https://docs.rs/colored/latest/colored/#modules)\n\n[control](https://docs.rs/colored/latest/colored/control/index.html \"mod colored::control\")\n    A couple of functions to enable and disable coloring.\n\n[customcolors](https://docs.rs/colored/latest/colored/customcolors/index.html \"mod colored::customcolors\")\n    Custom colors support.\n## Structs[\u00a7](https://docs.rs/colored/latest/colored/#structs)\n\n[ColoredString](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\n    A string that may have color and/or style applied to it.\n\n[Style](https://docs.rs/colored/latest/colored/struct.Style.html \"struct colored::Style\")\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums[\u00a7](https://docs.rs/colored/latest/colored/#enums)\n\n[Color](https://docs.rs/colored/latest/colored/enum.Color.html \"enum colored::Color\")\n    The 8 standard colors.\n\n[Styles](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\")\n    Enum containing all of the available style settings that can be applied to a [`Styles`](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\") and by extension, a colrized type.\n## Traits[\u00a7](https://docs.rs/colored/latest/colored/#traits)\n\n[Colorize](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\")\n    The trait that enables something to be given color.\n",
              "markdown_with_citations": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee the `Colorize` trait\u27e84\u27e9 for all the methods.\nNote: The methods of `Colorize`\u27e84\u27e9, when used on `str`\u27e85\u27e9\u2019s, return `ColoredString`\u27e86\u27e9\u2019s. See `ColoredString`\u27e86\u27e9 to learn more about them and what you can do with them beyond continue to use `Colorize`\u27e84\u27e9 to further modify them.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules\u00a7\u27e88\u27e9\n\ncontrol\u27e89\u27e9\n    A couple of functions to enable and disable coloring.\n\ncustomcolors\u27e810\u27e9\n    Custom colors support.\n## Structs\u00a7\u27e811\u27e9\n\nColoredString\u27e86\u27e9\n    A string that may have color and/or style applied to it.\n\nStyle\u27e812\u27e9\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums\u00a7\u27e813\u27e9\n\nColor\u27e814\u27e9\n    The 8 standard colors.\n\nStyles\u27e815\u27e9\n    Enum containing all of the available style settings that can be applied to a `Styles`\u27e815\u27e9 and by extension, a colrized type.\n## Traits\u00a7\u27e816\u27e9\n\nColorize\u27e84\u27e9\n    The trait that enables something to be given color.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/colored/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/colored/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985: Source\n\u27e84\u27e9 https://docs.rs/colored/latest/colored/trait.Colorize.html: the `Colorize` trait\n\u27e85\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e86\u27e9 https://docs.rs/colored/latest/colored/struct.ColoredString.html: struct colored::ColoredString - `ColoredString`\n\u27e87\u27e9 https://docs.rs/colored/latest/colored/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/colored/latest/colored/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/colored/latest/colored/control/index.html: mod colored::control - control\n\u27e810\u27e9 https://docs.rs/colored/latest/colored/customcolors/index.html: mod colored::customcolors - customcolors\n\u27e811\u27e9 https://docs.rs/colored/latest/colored/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/colored/latest/colored/struct.Style.html: struct colored::Style - Style\n\u27e813\u27e9 https://docs.rs/colored/latest/colored/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/colored/latest/colored/enum.Color.html: enum colored::Color - Color\n\u27e815\u27e9 https://docs.rs/colored/latest/colored/enum.Styles.html: enum colored::Styles - Styles\n\u27e816\u27e9 https://docs.rs/colored/latest/colored/#traits: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3773,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114086.0850983"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/colored",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [32 stable releases](https://lib.rs/crates/colored/versions)\n3.0.0 |  Jan 7, 2025   \n---|---  \n2.2.0 |  Dec 15, 2024   \n2.1.0 |  Dec 10, 2023   \n2.0.4 |  Jul 5, 2023   \n1.2.0 |  Mar 30, 2016   \n#**2** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 975497/week @ 2025-02-11 1164198/week @ 2025-02-18 982938/week @ 2025-02-25 1414745/week @ 2025-03-04 1329295/week @ 2025-03-11 1730057/week @ 2025-03-18 1505302/week @ 2025-03-25 1174096/week @ 2025-04-01 1228606/week @ 2025-04-08 994784/week @ 2025-04-15 1055074/week @ 2025-04-22 963997/week @ 2025-04-29 1077229/week @ 2025-05-06 1123062/week @ 2025-05-13 1043836/week @ 2025-05-20 837193/week @ 2025-05-27\n**4,249,636** downloads per month Used in [**5,790** crates (3,684 directly)](https://lib.rs/crates/colored/rev)\n**MPL-2.0** license \n90KB  2K  SLoC\n# Colored\n[![Crates.io](https://img.shields.io/crates/v/colored.svg?maxAge=2592000)](https://crates.io/crates/colored) [![Crates.io](https://img.shields.io/crates/l/colored.svg?maxAge=2592000)](https://github.com/mackwic/colored/blob/master/LICENSE)\nColoring terminal so simple, you already know how to do it!\n```\n`  ``\"`this is blue`\"```.``blue``(``)``;`\n  ``\"`this is red`\"```.``red``(``)``;`\n  ``\"`this is red on blue`\"```.``red``(``)``.``on_blue``(``)``;`\n  ``\"`this is also red on blue`\"```.``on_blue``(``)``.``red``(``)``;`\n  ``\"`you can use truecolor values too!`\"```.``truecolor``(``0``,` `255``,` `136``)``;`\n  ``\"`background truecolor also works :)`\"```.``on_truecolor``(``135``,` `28``,` `167``)``;`\n  ``\"`truecolor from tuple`\"```.``custom_color``(``(``0``,` `255``,` `136``)``)``;`\n  ``\"`background truecolor from tuple`\"```.``on_custom_color``(``(``0``,` `255``,` `136``)``)``;`\n  ``\"`bright colors are welcome as well`\"```.``on_bright_blue``(``)``.``bright_red``(``)``;`\n  ``\"`you can also make bold comments`\"```.``bold``(``)``;`\n  `println!``(```\"``{}` `{}` `{}``\"```,` ``\"`or use`\"```.``cyan``(``)``,` ``\"`any`\"```.``italic``(``)``.``yellow``(``)``,` ``\"`string type`\"```.``cyan``(``)``)``;`\n  ``\"`or change advice. This is red`\"```.``yellow``(``)``.``blue``(``)``.``red``(``)``;`\n  ``\"`or clear things up. This is default color and style`\"```.``red``(``)``.``bold``(``)``.``clear``(``)``;`\n  ``\"`purple and magenta are the same`\"```.``purple``(``)``.``magenta``(``)``;`\n  ``\"`and so are normal and clear`\"```.``normal``(``)``.``clear``(``)``;`\n  ``\"`you can specify color by string`\"```.``color``(```\"`blue`\"```)``.``on_color``(```\"`red`\"```)``;`\n  `String```::``from`(```\"`this also works!`\"```)``.``green``(``)``.``bold``(``)``;`\n  `format!``(```\"`{:30}`\"```,` ``\"`format works as expected. This will be padded`\"```.``blue``(``)``)``;`\n  `format!``(```\"``{:.3}``\"```,` ``\"`and this will be green but truncated to 3 chars`\"```.``green``(``)``)``;`\n`\n```\n\n## How to use\nAdd this in your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`colored ``=` ``\"`2`\"``\n``\n```\n\nand add this to your ``lib.rs`` or ``main.rs``:\n```\n`  `extern` `crate` colored`;` ``//` not needed in Rust 2018+`\n  `use` `colored`::``Colorize`;`\n  ``//` test the example with `cargo run --example most_simple``\n  ``fn` `main`````(````)``````{`\n    ``//` TADAA!`\n    `println!``(```\"``{}` `{}` !`\"```,` ``\"`it`\"```.``green``(``)``,` ``\"`works`\"```.``blue``(``)``.``bold``(``)``)``;`\n  ```}```\n`\n```\n\n## Features\n  * Safe rust, easy to use, minimal dependencies, complete test suite\n  * Respect the ``CLICOLOR``/``CLICOLOR_FORCE`` behavior (see [the specs](http://bixense.com/clicolors/))\n  * Respect the ``NO_COLOR`` behavior (see [the specs](https://no-color.org/))\n  * Do note that ``CLICOLOR_FORCE`` overrules ``NO_COLOR``, which overrules ``CLICOLOR``\n  * Works on Linux, MacOS, and Windows (Powershell)\n\n\n#### Colors:\n  * black\n  * red\n  * green\n  * yellow\n  * blue\n  * magenta (or purple)\n  * cyan\n  * white\n\n\nBright colors: prepend the color by ``bright_``. So easy. Background colors: prepend the color by ``on_``. Simple as that. Bright Background colors: prepend the color by ``on_bright_``. Not hard at all.\n#### Truecolors\nColored has support for truecolors where you can specify any arbitrary rgb value.\nThis feature will only work correctly in terminals which support true colors (i.e. most modern terminals).\nYou can check if your terminal supports true color by checking the value of the environment variable `````$``COLORTERM````` on your terminal. A value of ``truecolor`` or ``24bit`` indicates that it will work.\n#### Styles:\n  * bold\n  * underline\n  * italic\n  * dimmed\n  * reversed\n  * blink\n  * hidden\n  * strikethrough\n\n\nYou can clear color _and_ style anytime by using ```normal``(``)``` or ```clear``(``)```\n#### Advanced Control:\n##### Dynamic color from str\nAs ``Color`` implements ``FromStr``, ````From``<``&``str``>````, and ````From``<``String``>````, you can easily cast a string into a color like that:\n```\n```//` the easy way`\n``\"`blue string yo`\"```.``color``(```\"`blue`\"```)``;`\n``//` this will default to white`\n``\"`white string`\"```.``color``(```\"`zorglub`\"```)``;`\n``//` the safer way via a Result`\n`let` color_res `:` ``Result``<`Color, `(``)``>`` `=` ``\"`zorglub`\"```.``parse``(``)``;`\n``\"`red string`\"```.``color``(`color_res`.``unwrap_or``(``Color`::``Red`)``)``;`\n`\n```\n\n##### Colorization control\nIf you want to disable any coloring at compile time, you can simply do so by using the ``no-color`` feature.\nFor example, you can do this in your ``Cargo.toml`` to disable color in tests:\n```\n```[``features``]`\n``# this effectively enable the feature `no-color` of colored when testing with``\n``# `cargo test --feature dumb_terminal```\n`dumb_terminal ``=` ``[```\"`colored/no-color`\"```]``\n``\n```\n\nYou can use have even finer control by using the ```colored`::```control`::``set_override`` method.\n## Todo\n  * **More tests ?** : We always welcome more tests! Please contribute!\n\n\n## Credits\nThis library wouldn't have been the same without the marvelous ruby gem [colored](https://github.com/defunkt/colored).\nThanks for the [ansi_term crate](https://github.com/ogham/rust-ansi-term) for providing a reference implementation, which greatly helped making this crate output correct strings.\n## Minimum Supported Rust Version (MSRV)\nThe current MSRV is ```1.``80```, which is checked and enforced automatically via CI. This version may change in the future in minor version bumps, so if you require a specific Rust version you should use a restricted version requirement such as ```~`X`.`Y``.\n## License\n[Mozilla Public License 2.0](https://www.mozilla.org/en-US/MPL/2.0/). See the [LICENSE](https://github.com/mackwic/colored/blob/master/LICENSE) file at the root of the repository.\nIn non legal terms it means that:\n  * if you fix a bug, you MUST give me the code of the fix (it's only fair)\n  * if you change/extend the API, you MUST give me the code you changed in the files under MPL2.\n  * you CAN'T sue me for anything about this code\n  * apart from that, you can do almost whatever you want. See the LICENSE file for details.\n\n\n## Contributors\n  * Thomas Wickham: [@mackwic](https://github.com/mackwic)\n  * Hunter Wittenborn [@hwittenborn](https://github.com/hwittenborn)\n  * Corey \"See More\" Richardson: [@cmr](https://github.com/cmr)\n  * Iban Eguia: [@Razican](https://github.com/Razican)\n  * Alexis \"Horgix\" Chotard: [@horgix](https://github.com/horgix)\n  * Keith Yeung: [@KiChjang](https://github.com/KiChjang)\n  * Kyle Galloway: [@kylegalloway](https://github.com/kylegalloway)\n  * Luke Hsiao: [@lukehsiao](https://github.com/lukehsiao)\n  * kurtlawrence: [@kurtlawrence](https://github.com/kurtlawrence)\n\n\n#### Dependencies\n~0\u20137.5MB  ~51K SLoC\n  * [windows-sys](https://lib.rs/crates/windows-sys \">=0.48,<=0.59\")[+Win32_Foundation](https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation)[+Win32_System_Console](https://lib.rs/crates/windows-sys/features#feature-Win32_System_Console) win\n\n\n  * dev  [ansi_term](https://lib.rs/crates/ansi_term \"deprecated\") 0.12\n  * dev  [insta](https://lib.rs/crates/insta \"1\")\n  * dev  [rspec](https://lib.rs/crates/rspec \"new\") 1.0\n\n\n#### [Other feature](https://lib.rs/crates/colored/features)\n  * [no-color](https://lib.rs/crates/colored/features#feature-no-color)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  32 stable releases\u27e81\u27e9\n3.0.0 |  Jan 7, 2025   \n---|---  \n2.2.0 |  Dec 15, 2024   \n2.1.0 |  Dec 10, 2023   \n2.0.4 |  Jul 5, 2023   \n1.2.0 |  Mar 30, 2016   \n#**2** in Command-line interface\u27e82\u27e9\nDownload history 975497/week @ 2025-02-11 1164198/week @ 2025-02-18 982938/week @ 2025-02-25 1414745/week @ 2025-03-04 1329295/week @ 2025-03-11 1730057/week @ 2025-03-18 1505302/week @ 2025-03-25 1174096/week @ 2025-04-01 1228606/week @ 2025-04-08 994784/week @ 2025-04-15 1055074/week @ 2025-04-22 963997/week @ 2025-04-29 1077229/week @ 2025-05-06 1123062/week @ 2025-05-13 1043836/week @ 2025-05-20 837193/week @ 2025-05-27\n**4,249,636** downloads per month Used in **5,790** crates (3,684 directly)\u27e83\u27e9\n**MPL-2.0** license \n90KB  2K  SLoC\n# Colored\n![Crates.io\u27e84\u27e9](https://crates.io/crates/colored) ![Crates.io\u27e85\u27e9](https://github.com/mackwic/colored/blob/master/LICENSE)\nColoring terminal so simple, you already know how to do it!\n```\n`  ``\"`this is blue`\"```.``blue``(``)``;`\n  ``\"`this is red`\"```.``red``(``)``;`\n  ``\"`this is red on blue`\"```.``red``(``)``.``on_blue``(``)``;`\n  ``\"`this is also red on blue`\"```.``on_blue``(``)``.``red``(``)``;`\n  ``\"`you can use truecolor values too!`\"```.``truecolor``(``0``,` `255``,` `136``)``;`\n  ``\"`background truecolor also works :)`\"```.``on_truecolor``(``135``,` `28``,` `167``)``;`\n  ``\"`truecolor from tuple`\"```.``custom_color``(``(``0``,` `255``,` `136``)``)``;`\n  ``\"`background truecolor from tuple`\"```.``on_custom_color``(``(``0``,` `255``,` `136``)``)``;`\n  ``\"`bright colors are welcome as well`\"```.``on_bright_blue``(``)``.``bright_red``(``)``;`\n  ``\"`you can also make bold comments`\"```.``bold``(``)``;`\n  `println!``(```\"``{}` `{}` `{}``\"```,` ``\"`or use`\"```.``cyan``(``)``,` ``\"`any`\"```.``italic``(``)``.``yellow``(``)``,` ``\"`string type`\"```.``cyan``(``)``)``;`\n  ``\"`or change advice. This is red`\"```.``yellow``(``)``.``blue``(``)``.``red``(``)``;`\n  ``\"`or clear things up. This is default color and style`\"```.``red``(``)``.``bold``(``)``.``clear``(``)``;`\n  ``\"`purple and magenta are the same`\"```.``purple``(``)``.``magenta``(``)``;`\n  ``\"`and so are normal and clear`\"```.``normal``(``)``.``clear``(``)``;`\n  ``\"`you can specify color by string`\"```.``color``(```\"`blue`\"```)``.``on_color``(```\"`red`\"```)``;`\n  `String```::``from`(```\"`this also works!`\"```)``.``green``(``)``.``bold``(``)``;`\n  `format!``(```\"`{:30}`\"```,` ``\"`format works as expected. This will be padded`\"```.``blue``(``)``)``;`\n  `format!``(```\"``{:.3}``\"```,` ``\"`and this will be green but truncated to 3 chars`\"```.``green``(``)``)``;`\n`\n```\n\n## How to use\nAdd this in your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`colored ``=` ``\"`2`\"``\n``\n```\n\nand add this to your ``lib.rs`` or ``main.rs``:\n```\n`  `extern` `crate` colored`;` ``//` not needed in Rust 2018+`\n  `use` `colored`::``Colorize`;`\n  ``//` test the example with `cargo run --example most_simple``\n  ``fn` `main`````(````)``````{`\n    ``//` TADAA!`\n    `println!``(```\"``{}` `{}` !`\"```,` ``\"`it`\"```.``green``(``)``,` ``\"`works`\"```.``blue``(``)``.``bold``(``)``)``;`\n  ```}```\n`\n```\n\n## Features\n  * Safe rust, easy to use, minimal dependencies, complete test suite\n  * Respect the ``CLICOLOR``/``CLICOLOR_FORCE`` behavior (see the specs\u27e86\u27e9)\n  * Respect the ``NO_COLOR`` behavior (see the specs\u27e87\u27e9)\n  * Do note that ``CLICOLOR_FORCE`` overrules ``NO_COLOR``, which overrules ``CLICOLOR``\n  * Works on Linux, MacOS, and Windows (Powershell)\n\n\n#### Colors:\n  * black\n  * red\n  * green\n  * yellow\n  * blue\n  * magenta (or purple)\n  * cyan\n  * white\n\n\nBright colors: prepend the color by ``bright_``. So easy. Background colors: prepend the color by ``on_``. Simple as that. Bright Background colors: prepend the color by ``on_bright_``. Not hard at all.\n#### Truecolors\nColored has support for truecolors where you can specify any arbitrary rgb value.\nThis feature will only work correctly in terminals which support true colors (i.e. most modern terminals).\nYou can check if your terminal supports true color by checking the value of the environment variable `````$``COLORTERM````` on your terminal. A value of ``truecolor`` or ``24bit`` indicates that it will work.\n#### Styles:\n  * bold\n  * underline\n  * italic\n  * dimmed\n  * reversed\n  * blink\n  * hidden\n  * strikethrough\n\n\nYou can clear color _and_ style anytime by using ```normal``(``)``` or ```clear``(``)```\n#### Advanced Control:\n##### Dynamic color from str\nAs ``Color`` implements ``FromStr``, ````From``<``&``str``>````, and ````From``<``String``>````, you can easily cast a string into a color like that:\n```\n```//` the easy way`\n``\"`blue string yo`\"```.``color``(```\"`blue`\"```)``;`\n``//` this will default to white`\n``\"`white string`\"```.``color``(```\"`zorglub`\"```)``;`\n``//` the safer way via a Result`\n`let` color_res `:` ``Result``<`Color, `(``)``>`` `=` ``\"`zorglub`\"```.``parse``(``)``;`\n``\"`red string`\"```.``color``(`color_res`.``unwrap_or``(``Color`::``Red`)``)``;`\n`\n```\n\n##### Colorization control\nIf you want to disable any coloring at compile time, you can simply do so by using the ``no-color`` feature.\nFor example, you can do this in your ``Cargo.toml`` to disable color in tests:\n```\n```[``features``]`\n``# this effectively enable the feature `no-color` of colored when testing with``\n``# `cargo test --feature dumb_terminal```\n`dumb_terminal ``=` ``[```\"`colored/no-color`\"```]``\n``\n```\n\nYou can use have even finer control by using the ```colored`::```control`::``set_override`` method.\n## Todo\n  * **More tests ?** : We always welcome more tests! Please contribute!\n\n\n## Credits\nThis library wouldn't have been the same without the marvelous ruby gem colored\u27e88\u27e9.\nThanks for the ansi_term crate\u27e89\u27e9 for providing a reference implementation, which greatly helped making this crate output correct strings.\n## Minimum Supported Rust Version (MSRV)\nThe current MSRV is ```1.``80```, which is checked and enforced automatically via CI. This version may change in the future in minor version bumps, so if you require a specific Rust version you should use a restricted version requirement such as ```~`X`.`Y``.\n## License\nMozilla Public License 2.0\u27e810\u27e9. See the LICENSE\u27e811\u27e9 file at the root of the repository.\nIn non legal terms it means that:\n  * if you fix a bug, you MUST give me the code of the fix (it's only fair)\n  * if you change/extend the API, you MUST give me the code you changed in the files under MPL2.\n  * you CAN'T sue me for anything about this code\n  * apart from that, you can do almost whatever you want. See the LICENSE file for details.\n\n\n## Contributors\n  * Thomas Wickham: @mackwic\u27e812\u27e9\n  * Hunter Wittenborn @hwittenborn\u27e813\u27e9\n  * Corey \"See More\" Richardson: @cmr\u27e814\u27e9\n  * Iban Eguia: @Razican\u27e815\u27e9\n  * Alexis \"Horgix\" Chotard: @horgix\u27e816\u27e9\n  * Keith Yeung: @KiChjang\u27e817\u27e9\n  * Kyle Galloway: @kylegalloway\u27e818\u27e9\n  * Luke Hsiao: @lukehsiao\u27e819\u27e9\n  * kurtlawrence: @kurtlawrence\u27e820\u27e9\n\n\n#### Dependencies\n~0\u20137.5MB  ~51K SLoC\n  * windows-sys\u27e821\u27e9+Win32_Foundation\u27e822\u27e9+Win32_System_Console\u27e823\u27e9 win\n\n\n  * dev  ansi_term\u27e824\u27e9 0.12\n  * dev  insta\u27e825\u27e9\n  * dev  rspec\u27e826\u27e9 1.0\n\n\n#### Other feature\u27e827\u27e9\n  * no-color\u27e828\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/colored/versions: 32 stable releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/colored/rev: **5,790** crates (3,684 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/colored.svg?maxAge=2592000: ![Crates.io\n\u27e85\u27e9 https://img.shields.io/crates/l/colored.svg?maxAge=2592000: ![Crates.io\n\u27e86\u27e9 http://bixense.com/clicolors/: the specs\n\u27e87\u27e9 https://no-color.org/: the specs\n\u27e88\u27e9 https://github.com/defunkt/colored: colored\n\u27e89\u27e9 https://github.com/ogham/rust-ansi-term: ansi_term crate\n\u27e810\u27e9 https://www.mozilla.org/en-US/MPL/2.0/: Mozilla Public License 2.0\n\u27e811\u27e9 https://github.com/mackwic/colored/blob/master/LICENSE: LICENSE\n\u27e812\u27e9 https://github.com/mackwic: @mackwic\n\u27e813\u27e9 https://github.com/hwittenborn: @hwittenborn\n\u27e814\u27e9 https://github.com/cmr: @cmr\n\u27e815\u27e9 https://github.com/Razican: @Razican\n\u27e816\u27e9 https://github.com/horgix: @horgix\n\u27e817\u27e9 https://github.com/KiChjang: @KiChjang\n\u27e818\u27e9 https://github.com/kylegalloway: @kylegalloway\n\u27e819\u27e9 https://github.com/lukehsiao: @lukehsiao\n\u27e820\u27e9 https://github.com/kurtlawrence: @kurtlawrence\n\u27e821\u27e9 https://lib.rs/crates/windows-sys: >=0.48,<=0.59 - windows-sys\n\u27e822\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation: +Win32_Foundation\n\u27e823\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_Console: +Win32_System_Console\n\u27e824\u27e9 https://lib.rs/crates/ansi_term: deprecated - ansi_term\n\u27e825\u27e9 https://lib.rs/crates/insta: 1 - insta\n\u27e826\u27e9 https://lib.rs/crates/rspec: new - rspec\n\u27e827\u27e9 https://lib.rs/crates/colored/features: Other feature\n\u27e828\u27e9 https://lib.rs/crates/colored/features#feature-no-color: no-color\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8368,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114086.5556809"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_System",
                "Win32_System_Console",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_sys-95796c41d3a356ff.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4sylcaj5/colored-3.0.0#colored@3.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libcolored-353d3467cb1bd9f5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_System",
                "Win32_System_Console",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libwindows_sys-95796c41d3a356ff.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4sylcaj5/colored-3.0.0#colored@3.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\color.rs:58:45\n   |\n58 |             Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n58 -             Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),\n58 +             Color::TrueColor { r, g, b } => format!(\"38;2;{r};{g};{b}\").into(),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1636,
                        "byte_start": 1636,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "r",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1639,
                        "byte_start": 1639,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "g",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1642,
                        "byte_start": 1642,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1647,
                        "byte_start": 1644,
                        "column_end": 71,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 68,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1650,
                        "byte_start": 1647,
                        "column_end": 74,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 71,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1653,
                        "byte_start": 1650,
                        "column_end": 77,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 74,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1654,
                    "byte_start": 1621,
                    "column_end": 78,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 45,
                        "text": "            Color::TrueColor { r, g, b } => format!(\"38;2;{};{};{}\", r, g, b).into(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4sylcaj5/colored-3.0.0#colored@3.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\color.rs:83:45\n   |\n83 |             Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n83 -             Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),\n83 +             Color::TrueColor { r, g, b } => format!(\"48;2;{r};{g};{b}\").into(),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2660,
                        "byte_start": 2660,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "r",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2663,
                        "byte_start": 2663,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "g",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2666,
                        "byte_start": 2666,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2671,
                        "byte_start": 2668,
                        "column_end": 71,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 68,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2674,
                        "byte_start": 2671,
                        "column_end": 74,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 71,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2677,
                        "byte_start": 2674,
                        "column_end": 77,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\color.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 74,
                            "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2678,
                    "byte_start": 2645,
                    "column_end": 78,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\color.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 83,
                    "line_start": 83,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 45,
                        "text": "            Color::TrueColor { r, g, b } => format!(\"48;2;{};{};{}\", r, g, b).into(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4sylcaj5/colored-3.0.0#colored@3.0.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "colored",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4sylcaj5\\colored-3.0.0\\target\\debug\\deps\\libcolored-d94dc46746126be4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 77
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.12.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "stdweb",
                    "version": "0.4.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5",
                    "dependencies": [
                      {
                        "name": "discard",
                        "version": "1.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustc_version",
                        "version": "0.2.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-derive",
                        "version": "0.5.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-internal-macros",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "stdweb-internal-runtime",
                        "version": "0.1.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasm-bindgen",
                        "version": "0.2.99",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0056",
                    "package": "stdweb",
                    "title": "stdweb is unmaintained",
                    "description": "The author of the `stdweb` crate is unresponsive.\n\nMaintained alternatives:\n\n- [`wasm-bindgen`](https://github.com/rustwasm/wasm-bindgen)\n- [`js-sys`](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/js-sys)\n- [`web-sys`](https://github.com/rustwasm/wasm-bindgen/tree/master/crates/web-sys)",
                    "date": "2020-05-04",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/koute/stdweb/issues/403",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">0.4.20"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "colored",
          "version": "3.0.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\n[Settings](https://docs.rs/colored/latest/settings.html)\n[Help](https://docs.rs/colored/latest/help.html)\nSummary[Source](https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985)\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee [the `Colorize` trait](https://docs.rs/colored/latest/colored/trait.Colorize.html) for all the methods.\nNote: The methods of [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\"), when used on [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\")\u2019s, return [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\u2019s. See [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\") to learn more about them and what you can do with them beyond continue to use [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\") to further modify them.\n## Re-exports[\u00a7](https://docs.rs/colored/latest/colored/#reexports)\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules[\u00a7](https://docs.rs/colored/latest/colored/#modules)\n\n[control](https://docs.rs/colored/latest/colored/control/index.html \"mod colored::control\")\n    A couple of functions to enable and disable coloring.\n\n[customcolors](https://docs.rs/colored/latest/colored/customcolors/index.html \"mod colored::customcolors\")\n    Custom colors support.\n## Structs[\u00a7](https://docs.rs/colored/latest/colored/#structs)\n\n[ColoredString](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\n    A string that may have color and/or style applied to it.\n\n[Style](https://docs.rs/colored/latest/colored/struct.Style.html \"struct colored::Style\")\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums[\u00a7](https://docs.rs/colored/latest/colored/#enums)\n\n[Color](https://docs.rs/colored/latest/colored/enum.Color.html \"enum colored::Color\")\n    The 8 standard colors.\n\n[Styles](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\")\n    Enum containing all of the available style settings that can be applied to a [`Styles`](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\") and by extension, a colrized type.\n## Traits[\u00a7](https://docs.rs/colored/latest/colored/#traits)\n\n[Colorize](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\")\n    The trait that enables something to be given color.\n",
            "markdown_with_citations": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee the `Colorize` trait\u27e84\u27e9 for all the methods.\nNote: The methods of `Colorize`\u27e84\u27e9, when used on `str`\u27e85\u27e9\u2019s, return `ColoredString`\u27e86\u27e9\u2019s. See `ColoredString`\u27e86\u27e9 to learn more about them and what you can do with them beyond continue to use `Colorize`\u27e84\u27e9 to further modify them.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules\u00a7\u27e88\u27e9\n\ncontrol\u27e89\u27e9\n    A couple of functions to enable and disable coloring.\n\ncustomcolors\u27e810\u27e9\n    Custom colors support.\n## Structs\u00a7\u27e811\u27e9\n\nColoredString\u27e86\u27e9\n    A string that may have color and/or style applied to it.\n\nStyle\u27e812\u27e9\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums\u00a7\u27e813\u27e9\n\nColor\u27e814\u27e9\n    The 8 standard colors.\n\nStyles\u27e815\u27e9\n    Enum containing all of the available style settings that can be applied to a `Styles`\u27e815\u27e9 and by extension, a colrized type.\n## Traits\u00a7\u27e816\u27e9\n\nColorize\u27e84\u27e9\n    The trait that enables something to be given color.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/colored/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/colored/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985: Source\n\u27e84\u27e9 https://docs.rs/colored/latest/colored/trait.Colorize.html: the `Colorize` trait\n\u27e85\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e86\u27e9 https://docs.rs/colored/latest/colored/struct.ColoredString.html: struct colored::ColoredString - `ColoredString`\n\u27e87\u27e9 https://docs.rs/colored/latest/colored/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/colored/latest/colored/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/colored/latest/colored/control/index.html: mod colored::control - control\n\u27e810\u27e9 https://docs.rs/colored/latest/colored/customcolors/index.html: mod colored::customcolors - customcolors\n\u27e811\u27e9 https://docs.rs/colored/latest/colored/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/colored/latest/colored/struct.Style.html: struct colored::Style - Style\n\u27e813\u27e9 https://docs.rs/colored/latest/colored/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/colored/latest/colored/enum.Color.html: enum colored::Color - Color\n\u27e815\u27e9 https://docs.rs/colored/latest/colored/enum.Styles.html: enum colored::Styles - Styles\n\u27e816\u27e9 https://docs.rs/colored/latest/colored/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "colored",
          "version": "3.0.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\n[Settings](https://docs.rs/colored/latest/settings.html)\n[Help](https://docs.rs/colored/latest/help.html)\nSummary[Source](https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985)\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee [the `Colorize` trait](https://docs.rs/colored/latest/colored/trait.Colorize.html) for all the methods.\nNote: The methods of [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\"), when used on [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\")\u2019s, return [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\u2019s. See [`ColoredString`](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\") to learn more about them and what you can do with them beyond continue to use [`Colorize`](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\") to further modify them.\n## Re-exports[\u00a7](https://docs.rs/colored/latest/colored/#reexports)\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules[\u00a7](https://docs.rs/colored/latest/colored/#modules)\n\n[control](https://docs.rs/colored/latest/colored/control/index.html \"mod colored::control\")\n    A couple of functions to enable and disable coloring.\n\n[customcolors](https://docs.rs/colored/latest/colored/customcolors/index.html \"mod colored::customcolors\")\n    Custom colors support.\n## Structs[\u00a7](https://docs.rs/colored/latest/colored/#structs)\n\n[ColoredString](https://docs.rs/colored/latest/colored/struct.ColoredString.html \"struct colored::ColoredString\")\n    A string that may have color and/or style applied to it.\n\n[Style](https://docs.rs/colored/latest/colored/struct.Style.html \"struct colored::Style\")\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums[\u00a7](https://docs.rs/colored/latest/colored/#enums)\n\n[Color](https://docs.rs/colored/latest/colored/enum.Color.html \"enum colored::Color\")\n    The 8 standard colors.\n\n[Styles](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\")\n    Enum containing all of the available style settings that can be applied to a [`Styles`](https://docs.rs/colored/latest/colored/enum.Styles.html \"enum colored::Styles\") and by extension, a colrized type.\n## Traits[\u00a7](https://docs.rs/colored/latest/colored/#traits)\n\n[Colorize](https://docs.rs/colored/latest/colored/trait.Colorize.html \"trait colored::Colorize\")\n    The trait that enables something to be given color.\n",
            "markdown_with_citations": "[](https://docs.rs/colored/latest/colored/all.html \"show sidebar\")\n# Crate coloredCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nColoring terminal so simple, you already know how to do it !\n```\nuse colored::Colorize;\n\"this is blue\".blue();\n\"this is red\".red();\n\"this is red on blue\".red().on_blue();\n\"this is also red on blue\".on_blue().red();\n\"you can use truecolor values too!\".truecolor(0, 255, 136);\n\"background truecolor also works :)\".on_truecolor(135, 28, 167);\n\"you can also make bold comments\".bold();\nprintln!(\"{} {} {}\", \"or use\".cyan(), \"any\".italic().yellow(), \"string type\".cyan());\n\"or change advice. This is red\".yellow().blue().red();\n\"or clear things up. This is default color and style\".red().bold().clear();\n\"purple and magenta are the same\".purple().magenta();\n\"bright colors are also allowed\".bright_blue().on_bright_white();\n\"you can specify color by string\".color(\"blue\").on_color(\"red\");\n\"and so are normal and clear\".normal().clear();\nString::from(\"this also works!\").green().bold();\nformat!(\"{:30}\", \"format works as expected. This will be padded\".blue());\nformat!(\"{:.3}\", \"and this will be green but truncated to 3 chars\".green());\n```\n\nSee the `Colorize` trait\u27e84\u27e9 for all the methods.\nNote: The methods of `Colorize`\u27e84\u27e9, when used on `str`\u27e85\u27e9\u2019s, return `ColoredString`\u27e86\u27e9\u2019s. See `ColoredString`\u27e86\u27e9 to learn more about them and what you can do with them beyond continue to use `Colorize`\u27e84\u27e9 to further modify them.\n## Re-exports\u00a7\u27e87\u27e9\n\n`pub use self::customcolors::CustomColor[](https://docs.rs/colored/latest/colored/customcolors/struct.CustomColor.html \"struct colored::customcolors::CustomColor\");`\n\n## Modules\u00a7\u27e88\u27e9\n\ncontrol\u27e89\u27e9\n    A couple of functions to enable and disable coloring.\n\ncustomcolors\u27e810\u27e9\n    Custom colors support.\n## Structs\u00a7\u27e811\u27e9\n\nColoredString\u27e86\u27e9\n    A string that may have color and/or style applied to it.\n\nStyle\u27e812\u27e9\n    A combinatorial style such as bold, italics, dimmed, etc.\n## Enums\u00a7\u27e813\u27e9\n\nColor\u27e814\u27e9\n    The 8 standard colors.\n\nStyles\u27e815\u27e9\n    Enum containing all of the available style settings that can be applied to a `Styles`\u27e815\u27e9 and by extension, a colrized type.\n## Traits\u00a7\u27e816\u27e9\n\nColorize\u27e84\u27e9\n    The trait that enables something to be given color.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/colored/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/colored/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/colored/latest/src/colored/lib.rs.html#1-985: Source\n\u27e84\u27e9 https://docs.rs/colored/latest/colored/trait.Colorize.html: the `Colorize` trait\n\u27e85\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e86\u27e9 https://docs.rs/colored/latest/colored/struct.ColoredString.html: struct colored::ColoredString - `ColoredString`\n\u27e87\u27e9 https://docs.rs/colored/latest/colored/#reexports: \u00a7\n\u27e88\u27e9 https://docs.rs/colored/latest/colored/#modules: \u00a7\n\u27e89\u27e9 https://docs.rs/colored/latest/colored/control/index.html: mod colored::control - control\n\u27e810\u27e9 https://docs.rs/colored/latest/colored/customcolors/index.html: mod colored::customcolors - customcolors\n\u27e811\u27e9 https://docs.rs/colored/latest/colored/#structs: \u00a7\n\u27e812\u27e9 https://docs.rs/colored/latest/colored/struct.Style.html: struct colored::Style - Style\n\u27e813\u27e9 https://docs.rs/colored/latest/colored/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/colored/latest/colored/enum.Color.html: enum colored::Color - Color\n\u27e815\u27e9 https://docs.rs/colored/latest/colored/enum.Styles.html: enum colored::Styles - Styles\n\u27e816\u27e9 https://docs.rs/colored/latest/colored/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `colored` crate simplifies terminal text styling by allowing you to apply colors, styles (e.g., bold, italic), and truecolor values to strings using the `Colorize` trait. It supports chaining methods for complex styles, custom colors, and integration with formatting macros like `println!` and `format!`. Key components include the `ColoredString` struct for styled text and utilities to enable or disable coloring dynamically.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Terminal Coloring Capabilities  \n\u2705 **Factual**: The `colored` crate allows users to apply both foreground and background colors to strings, including support for RGB truecolor values using methods like `.truecolor()` and `.on_truecolor()`.  \n\u274c **Counterfactual**: The `colored` crate only supports the 8 standard ANSI colors for terminal output and does not allow for truecolor or custom RGB values.  \n\n---\n\n### Pair 2: String Manipulation and Formatting  \n\u2705 **Factual**: The methods provided by the `Colorize` trait return a `ColoredString` type, which can be further modified or used in formatting operations like `println!` and `format!`.  \n\u274c **Counterfactual**: The methods of the `Colorize` trait directly modify the original `str` type, making it impossible to use the resulting colored strings in formatting operations.  \n\n---\n\n### Pair 3: Style Combinations  \n\u2705 **Factual**: The `colored` crate supports combining multiple styles (e.g., bold, italic, dimmed) with colors, allowing for complex text formatting using chained method calls like `.red().bold().italic()`.  \n\u274c **Counterfactual**: The `colored` crate restricts users to applying only one style or color at a time, preventing combinations like bold and italic text with a colored foreground.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-ca8c522a-d212e802-1751260295",
      "timestamp": "2025-06-30T05:11:35.484067+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]