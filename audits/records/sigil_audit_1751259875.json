[
  {
    "execution_id": "exec-265ee18a-4097edd4-1751259868",
    "timestamp": "2025-06-30T05:04:28.167466+00:00",
    "sacred_chain": {
      "input_data": "backtrace",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'backtrace' -> 'backtrace'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "backtrace",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/backtrace",
            "title": "backtrace v0.3.75",
            "content": {
              "raw_markdown": "#  backtrace v0.3.75\nA library to acquire a stack trace (backtrace) at runtime in a Rust program. \n  * [ Readme ](https://crates.io/crates/backtrace)\n  * [ 89 Versions ](https://crates.io/crates/backtrace/versions)\n  * [ Dependencies ](https://crates.io/crates/backtrace/dependencies)\n  * [ Dependents ](https://crates.io/crates/backtrace/reverse_dependencies)\n\n\n## Metadata\nabout 2 months ago \nv1.82.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n90.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add backtrace\nOr add the following line to your Cargo.toml:\nbacktrace = \"0.3.75\"\n## Documentation\n[ docs.rs/backtrace ](https://docs.rs/backtrace)\n## Repository\n[ github.com/rust-lang/backtrace-rs ](https://github.com/rust-lang/backtrace-rs)\n## Owners\n[ Report crate ](https://crates.io/support?crate=backtrace&inquire=crate-violation)\n### Stats Overview\n223,154,536 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  backtrace v0.3.75\nA library to acquire a stack trace (backtrace) at runtime in a Rust program. \n  *  Readme \u27e81\u27e9\n  *  89 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\nabout 2 months ago \nv1.82.0 \n MIT \u27e85\u27e9 OR  Apache-2.0 \u27e86\u27e9\n90.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add backtrace\nOr add the following line to your Cargo.toml:\nbacktrace = \"0.3.75\"\n## Documentation\n docs.rs/backtrace \u27e87\u27e9\n## Repository\n github.com/rust-lang/backtrace-rs \u27e88\u27e9\n## Owners\n Report crate \u27e89\u27e9\n### Stats Overview\n223,154,536 Downloads all time\n89 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/backtrace:  Readme \n\u27e82\u27e9 https://crates.io/crates/backtrace/versions:  89 Versions \n\u27e83\u27e9 https://crates.io/crates/backtrace/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/backtrace/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://docs.rs/backtrace:  docs.rs/backtrace \n\u27e88\u27e9 https://github.com/rust-lang/backtrace-rs:  github.com/rust-lang/backtrace-rs \n\u27e89\u27e9 https://crates.io/support?crate=backtrace&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1110,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113657.8160983"
          },
          "docs_rs": {
            "url": "https://docs.rs/backtrace",
            "title": "Crate backtraceCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\n[Settings](https://docs.rs/backtrace/latest/settings.html)\n[Help](https://docs.rs/backtrace/latest/help.html)\nSummary[Source](https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251)\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#usage)Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy)Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs[\u00a7](https://docs.rs/backtrace/latest/backtrace/#structs)\n\n[Backtrace](https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html \"struct backtrace::Backtrace\")\n    Representation of an owned and self-contained backtrace.\n\n[BacktraceFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html \"struct backtrace::BacktraceFmt\")\n    A formatter for backtraces.\n\n[BacktraceFrame](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html \"struct backtrace::BacktraceFrame\")\n    Captured version of a frame in a backtrace.\n\n[BacktraceFrameFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html \"struct backtrace::BacktraceFrameFmt\")\n    A formatter for just one frame of a backtrace.\n\n[BacktraceSymbol](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html \"struct backtrace::BacktraceSymbol\")\n    Captured version of a symbol in a backtrace.\n\n[Frame](https://docs.rs/backtrace/latest/backtrace/struct.Frame.html \"struct backtrace::Frame\")\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\n[Symbol](https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html \"struct backtrace::Symbol\")\n    A trait representing the resolution of a symbol in a file.\n\n[SymbolName](https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html \"struct backtrace::SymbolName\")\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums[\u00a7](https://docs.rs/backtrace/latest/backtrace/#enums)\n\n[BytesOrWideString](https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html \"enum backtrace::BytesOrWideString\")\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\n[PrintFmt](https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html \"enum backtrace::PrintFmt\")\n    The styles of printing that we can print\n## Functions[\u00a7](https://docs.rs/backtrace/latest/backtrace/#functions)\n\n[clear_symbol_cache](https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html \"fn backtrace::clear_symbol_cache\")\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\n[resolve](https://docs.rs/backtrace/latest/backtrace/fn.resolve.html \"fn backtrace::resolve\")\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html \"fn backtrace::resolve_frame\")\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html \"fn backtrace::resolve_frame_unsynchronized\")\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\n[resolve_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html \"fn backtrace::resolve_unsynchronized\")\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\n[trace](https://docs.rs/backtrace/latest/backtrace/fn.trace.html \"fn backtrace::trace\")\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\n[trace_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html \"fn backtrace::trace_unsynchronized\")\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
              "markdown_with_citations": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## \u00a7\u27e84\u27e9Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## \u00a7\u27e85\u27e9Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs\u00a7\u27e86\u27e9\n\nBacktrace\u27e87\u27e9\n    Representation of an owned and self-contained backtrace.\n\nBacktraceFmt\u27e88\u27e9\n    A formatter for backtraces.\n\nBacktraceFrame\u27e89\u27e9\n    Captured version of a frame in a backtrace.\n\nBacktraceFrameFmt\u27e810\u27e9\n    A formatter for just one frame of a backtrace.\n\nBacktraceSymbol\u27e811\u27e9\n    Captured version of a symbol in a backtrace.\n\nFrame\u27e812\u27e9\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\nSymbol\u27e813\u27e9\n    A trait representing the resolution of a symbol in a file.\n\nSymbolName\u27e814\u27e9\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums\u00a7\u27e815\u27e9\n\nBytesOrWideString\u27e816\u27e9\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\nPrintFmt\u27e817\u27e9\n    The styles of printing that we can print\n## Functions\u00a7\u27e818\u27e9\n\nclear_symbol_cache\u27e819\u27e9\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\nresolve\u27e820\u27e9\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\nresolve_frame\u27e821\u27e9\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\nresolve_frame_unsynchronized\u27e822\u27e9\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\nresolve_unsynchronized\u27e823\u27e9\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\ntrace\u27e824\u27e9\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\ntrace_unsynchronized\u27e825\u27e9\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/backtrace/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/backtrace/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251: Source\n\u27e84\u27e9 https://docs.rs/backtrace/latest/backtrace/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy: \u00a7\n\u27e86\u27e9 https://docs.rs/backtrace/latest/backtrace/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html: struct backtrace::Backtrace - Backtrace\n\u27e88\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html: struct backtrace::BacktraceFmt - BacktraceFmt\n\u27e89\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html: struct backtrace::BacktraceFrame - BacktraceFrame\n\u27e810\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html: struct backtrace::BacktraceFrameFmt - BacktraceFrameFmt\n\u27e811\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html: struct backtrace::BacktraceSymbol - BacktraceSymbol\n\u27e812\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Frame.html: struct backtrace::Frame - Frame\n\u27e813\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html: struct backtrace::Symbol - Symbol\n\u27e814\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html: struct backtrace::SymbolName - SymbolName\n\u27e815\u27e9 https://docs.rs/backtrace/latest/backtrace/#enums: \u00a7\n\u27e816\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html: enum backtrace::BytesOrWideString - BytesOrWideString\n\u27e817\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html: enum backtrace::PrintFmt - PrintFmt\n\u27e818\u27e9 https://docs.rs/backtrace/latest/backtrace/#functions: \u00a7\n\u27e819\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html: fn backtrace::clear_symbol_cache - clear_symbol_cache\n\u27e820\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve.html: fn backtrace::resolve - resolve\n\u27e821\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html: fn backtrace::resolve_frame - resolve_frame\n\u27e822\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html: fn backtrace::resolve_frame_unsynchronized - resolve_frame_unsynchronized\n\u27e823\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html: fn backtrace::resolve_unsynchronized - resolve_unsynchronized\n\u27e824\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace.html: fn backtrace::trace - trace\n\u27e825\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html: fn backtrace::trace_unsynchronized - trace_unsynchronized\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6953,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113658.6699197"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/backtrace",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [86 releases](https://lib.rs/crates/backtrace/versions)\n0.3.75 |  May 6, 2025   \n---|---  \n0.3.74 |  Sep 8, 2024   \n0.3.73 |  Jun 12, 2024   \n0.3.71 |  Mar 22, 2024   \n0.1.4 |  Jul 16, 2015   \n#**3** in [Debugging](https://lib.rs/development-tools/debugging \"Crates to help you figure out what is going on with your code such as logging, tracing, or assertions.\")\nDownload history 2497891/week @ 2025-03-10 2754178/week @ 2025-03-17 2827527/week @ 2025-03-24 2377481/week @ 2025-03-31 2532867/week @ 2025-04-07 2286996/week @ 2025-04-14 2196531/week @ 2025-04-21 2156226/week @ 2025-04-28 2281020/week @ 2025-05-05 2361088/week @ 2025-05-12 2329807/week @ 2025-05-19 2197994/week @ 2025-05-26 2448536/week @ 2025-06-02 2486545/week @ 2025-06-09 2629615/week @ 2025-06-16 2537815/week @ 2025-06-23\n**10,234,628** downloads per month Used in [**43,348** crates (515 directly)](https://lib.rs/crates/backtrace/rev)\n**MIT/Apache**\n275KB  5.5K  SLoC\n# backtrace-rs\n[Documentation](https://docs.rs/backtrace)\nA library for acquiring backtraces at runtime for Rust. This library aims to enhance the support of the standard library by providing a programmatic interface to work with, but it also supports simply easily printing the current backtrace like libstd's panics.\n## Install\n```\n```[``dependencies``]`\n`backtrace ``=` ``\"`0.3`\"``\n``\n```\n\n## Usage\nTo simply capture a backtrace and defer dealing with it until a later time, you can use the top-level ``Backtrace`` type.\n```\n``use` `backtrace`::``Backtrace`;`\n``fn` `main`````(````)``````{`\n  `let` bt `=` `Backtrace`::``new`(``)``;`\n  ``//` do_some_work();`\n  `println!``(```\"``{bt:?}``\"```)``;`\n```}```\n`\n```\n\nIf, however, you'd like more raw access to the actual tracing functionality, you can use the ``trace`` and ``resolve`` functions directly.\n```\n```fn` `main`````(````)``````{`\n  `backtrace`::``trace`(````|``````frame``|`` ```{`\n    `let` ip `=` frame`.``ip``(``)``;`\n    `let` symbol_address `=` frame`.``symbol_address``(``)``;`\n    ``//` Resolve this instruction pointer to a symbol name`\n    `backtrace`::``resolve_frame`(`frame`,` ``|````symbol``|`` `{`\n      `if` `let` `Some``(`name`)` `=` symbol`.``name``(``)` `{`\n        ``//` ...`\n      `}`\n      `if` `let` `Some``(`filename`)` `=` symbol`.``filename``(``)` `{`\n        ``//` ...`\n      `}`\n    `}``)``;`\n    `true` ``//` keep going to the next frame`\n  `}```)``;`\n```}```\n`\n```\n\n# Supported Rust Versions\nThe ``backtrace`` crate is a core component of the standard library, and must at times keep up with the evolution of various platforms in order to serve the standard library's needs. This often means using recent libraries that provide unwinding and symbolication for various platforms. Thus ``backtrace`` is likely to use recent Rust features or depend on a library which itself uses them. Its minimum supported Rust version, by policy, is within a few versions of current stable, approximately \"stable - 2\".\nThis policy takes precedence over versions written anywhere else in this repo.\n# License\nThis project is licensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/rust-lang/backtrace-rs/blob/e09b86e75343365642d1adb568dde589308b0d07/LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/rust-lang/backtrace-rs/blob/e09b86e75343365642d1adb568dde589308b0d07/LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in backtrace-rs by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~2.2\u20138MB  ~72K SLoC\n  * [addr2line](https://lib.rs/crates/addr2line \"0.24.0\") not win not msvc or uwp\n  * [cfg-if](https://lib.rs/crates/cfg-if \"1.0\")\n  * [libc](https://lib.rs/crates/libc \"0.2.156\") not win not msvc or uwp\n  * [miniz_oxide](https://lib.rs/crates/miniz_oxide \"0.8\") not win not msvc or uwp\n  * [object](https://lib.rs/crates/object \"0.36.0\")[+read_core](https://lib.rs/crates/object/features#feature-read_core)[+elf](https://lib.rs/crates/object/features#feature-elf)[+macho](https://lib.rs/crates/object/features#feature-macho)[+pe](https://lib.rs/crates/object/features#feature-pe)[+xcoff](https://lib.rs/crates/object/features#feature-xcoff)[+unaligned](https://lib.rs/crates/object/features#feature-unaligned)[+archive](https://lib.rs/crates/object/features#feature-archive) not win not msvc or uwp\n  * [rustc-demangle](https://lib.rs/crates/rustc-demangle \"0.1.24\")\n  * [ optional ](https://lib.rs/crates/backtrace/features#feature-cpp_demangle \"cpp_demangle is optional feature\") [cpp_demangle](https://lib.rs/crates/cpp_demangle \"new\") 0.4[+alloc](https://lib.rs/crates/cpp_demangle/features#feature-alloc)\n  * [ optional ](https://lib.rs/crates/backtrace/features#feature-ruzstd \"ruzstd is optional feature\") [ruzstd](https://lib.rs/crates/ruzstd \"outdated\") 0.7.3 not win not msvc or uwp\n  * [serialize-serde?](https://lib.rs/crates/backtrace/features#feature-serialize-serde \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [windows-targets](https://lib.rs/crates/windows-targets \"0.52.6\") win cygwin\n\n\n  * dev  [libloading](https://lib.rs/crates/libloading \"new\") 0.8\n\n\n#### [Other features](https://lib.rs/crates/backtrace/features)\n  * [coresymbolication](https://lib.rs/crates/backtrace/features#feature-coresymbolication)\n  * [dbghelp](https://lib.rs/crates/backtrace/features#feature-dbghelp)\n  * [dl_iterate_phdr](https://lib.rs/crates/backtrace/features#feature-dl_iterate_phdr)\n  * [dladdr](https://lib.rs/crates/backtrace/features#feature-dladdr)\n  * [kernel32](https://lib.rs/crates/backtrace/features#feature-kernel32)\n  * [libunwind](https://lib.rs/crates/backtrace/features#feature-libunwind)\n  * [std](https://lib.rs/crates/backtrace/features#feature-std)\n  * [unix-backtrace](https://lib.rs/crates/backtrace/features#feature-unix-backtrace)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  86 releases\u27e81\u27e9\n0.3.75 |  May 6, 2025   \n---|---  \n0.3.74 |  Sep 8, 2024   \n0.3.73 |  Jun 12, 2024   \n0.3.71 |  Mar 22, 2024   \n0.1.4 |  Jul 16, 2015   \n#**3** in Debugging\u27e82\u27e9\nDownload history 2497891/week @ 2025-03-10 2754178/week @ 2025-03-17 2827527/week @ 2025-03-24 2377481/week @ 2025-03-31 2532867/week @ 2025-04-07 2286996/week @ 2025-04-14 2196531/week @ 2025-04-21 2156226/week @ 2025-04-28 2281020/week @ 2025-05-05 2361088/week @ 2025-05-12 2329807/week @ 2025-05-19 2197994/week @ 2025-05-26 2448536/week @ 2025-06-02 2486545/week @ 2025-06-09 2629615/week @ 2025-06-16 2537815/week @ 2025-06-23\n**10,234,628** downloads per month Used in **43,348** crates (515 directly)\u27e83\u27e9\n**MIT/Apache**\n275KB  5.5K  SLoC\n# backtrace-rs\nDocumentation\u27e84\u27e9\nA library for acquiring backtraces at runtime for Rust. This library aims to enhance the support of the standard library by providing a programmatic interface to work with, but it also supports simply easily printing the current backtrace like libstd's panics.\n## Install\n```\n```[``dependencies``]`\n`backtrace ``=` ``\"`0.3`\"``\n``\n```\n\n## Usage\nTo simply capture a backtrace and defer dealing with it until a later time, you can use the top-level ``Backtrace`` type.\n```\n``use` `backtrace`::``Backtrace`;`\n``fn` `main`````(````)``````{`\n  `let` bt `=` `Backtrace`::``new`(``)``;`\n  ``//` do_some_work();`\n  `println!``(```\"``{bt:?}``\"```)``;`\n```}```\n`\n```\n\nIf, however, you'd like more raw access to the actual tracing functionality, you can use the ``trace`` and ``resolve`` functions directly.\n```\n```fn` `main`````(````)``````{`\n  `backtrace`::``trace`(````|``````frame``|`` ```{`\n    `let` ip `=` frame`.``ip``(``)``;`\n    `let` symbol_address `=` frame`.``symbol_address``(``)``;`\n    ``//` Resolve this instruction pointer to a symbol name`\n    `backtrace`::``resolve_frame`(`frame`,` ``|````symbol``|`` `{`\n      `if` `let` `Some``(`name`)` `=` symbol`.``name``(``)` `{`\n        ``//` ...`\n      `}`\n      `if` `let` `Some``(`filename`)` `=` symbol`.``filename``(``)` `{`\n        ``//` ...`\n      `}`\n    `}``)``;`\n    `true` ``//` keep going to the next frame`\n  `}```)``;`\n```}```\n`\n```\n\n# Supported Rust Versions\nThe ``backtrace`` crate is a core component of the standard library, and must at times keep up with the evolution of various platforms in order to serve the standard library's needs. This often means using recent libraries that provide unwinding and symbolication for various platforms. Thus ``backtrace`` is likely to use recent Rust features or depend on a library which itself uses them. Its minimum supported Rust version, by policy, is within a few versions of current stable, approximately \"stable - 2\".\nThis policy takes precedence over versions written anywhere else in this repo.\n# License\nThis project is licensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e85\u27e9 or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e86\u27e9 or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in backtrace-rs by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~2.2\u20138MB  ~72K SLoC\n  * addr2line\u27e87\u27e9 not win not msvc or uwp\n  * cfg-if\u27e88\u27e9\n  * libc\u27e89\u27e9 not win not msvc or uwp\n  * miniz_oxide\u27e810\u27e9 not win not msvc or uwp\n  * object\u27e811\u27e9+read_core\u27e812\u27e9+elf\u27e813\u27e9+macho\u27e814\u27e9+pe\u27e815\u27e9+xcoff\u27e816\u27e9+unaligned\u27e817\u27e9+archive\u27e818\u27e9 not win not msvc or uwp\n  * rustc-demangle\u27e819\u27e9\n  *  optional \u27e820\u27e9 cpp_demangle\u27e821\u27e9 0.4+alloc\u27e822\u27e9\n  *  optional \u27e823\u27e9 ruzstd\u27e824\u27e9 0.7.3 not win not msvc or uwp\n  * serialize-serde?\u27e825\u27e9 serde\u27e826\u27e9+derive\u27e827\u27e9\n  * windows-targets\u27e828\u27e9 win cygwin\n\n\n  * dev  libloading\u27e829\u27e9 0.8\n\n\n#### Other features\u27e830\u27e9\n  * coresymbolication\u27e831\u27e9\n  * dbghelp\u27e832\u27e9\n  * dl_iterate_phdr\u27e833\u27e9\n  * dladdr\u27e834\u27e9\n  * kernel32\u27e835\u27e9\n  * libunwind\u27e836\u27e9\n  * std\u27e837\u27e9\n  * unix-backtrace\u27e838\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/backtrace/versions: 86 releases\n\u27e82\u27e9 https://lib.rs/development-tools/debugging: Crates to help you figure out what is going on with your code such as logging, tracing, or assertions. - Debugging\n\u27e83\u27e9 https://lib.rs/crates/backtrace/rev: **43,348** crates (515 directly)\n\u27e84\u27e9 https://docs.rs/backtrace: Documentation\n\u27e85\u27e9 https://github.com/rust-lang/backtrace-rs/blob/e09b86e75343365642d1adb568dde589308b0d07/LICENSE-APACHE: LICENSE-APACHE\n\u27e86\u27e9 https://github.com/rust-lang/backtrace-rs/blob/e09b86e75343365642d1adb568dde589308b0d07/LICENSE-MIT: LICENSE-MIT\n\u27e87\u27e9 https://lib.rs/crates/addr2line: 0.24.0 - addr2line\n\u27e88\u27e9 https://lib.rs/crates/cfg-if: 1.0 - cfg-if\n\u27e89\u27e9 https://lib.rs/crates/libc: 0.2.156 - libc\n\u27e810\u27e9 https://lib.rs/crates/miniz_oxide: 0.8 - miniz_oxide\n\u27e811\u27e9 https://lib.rs/crates/object: 0.36.0 - object\n\u27e812\u27e9 https://lib.rs/crates/object/features#feature-read_core: +read_core\n\u27e813\u27e9 https://lib.rs/crates/object/features#feature-elf: +elf\n\u27e814\u27e9 https://lib.rs/crates/object/features#feature-macho: +macho\n\u27e815\u27e9 https://lib.rs/crates/object/features#feature-pe: +pe\n\u27e816\u27e9 https://lib.rs/crates/object/features#feature-xcoff: +xcoff\n\u27e817\u27e9 https://lib.rs/crates/object/features#feature-unaligned: +unaligned\n\u27e818\u27e9 https://lib.rs/crates/object/features#feature-archive: +archive\n\u27e819\u27e9 https://lib.rs/crates/rustc-demangle: 0.1.24 - rustc-demangle\n\u27e820\u27e9 https://lib.rs/crates/backtrace/features#feature-cpp_demangle: cpp_demangle is optional feature -  optional \n\u27e821\u27e9 https://lib.rs/crates/cpp_demangle: new - cpp_demangle\n\u27e822\u27e9 https://lib.rs/crates/cpp_demangle/features#feature-alloc: +alloc\n\u27e823\u27e9 https://lib.rs/crates/backtrace/features#feature-ruzstd: ruzstd is optional feature -  optional \n\u27e824\u27e9 https://lib.rs/crates/ruzstd: outdated - ruzstd\n\u27e825\u27e9 https://lib.rs/crates/backtrace/features#feature-serialize-serde: optional feature - serialize-serde?\n\u27e826\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e827\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e828\u27e9 https://lib.rs/crates/windows-targets: 0.52.6 - windows-targets\n\u27e829\u27e9 https://lib.rs/crates/libloading: new - libloading\n\u27e830\u27e9 https://lib.rs/crates/backtrace/features: Other features\n\u27e831\u27e9 https://lib.rs/crates/backtrace/features#feature-coresymbolication: coresymbolication\n\u27e832\u27e9 https://lib.rs/crates/backtrace/features#feature-dbghelp: dbghelp\n\u27e833\u27e9 https://lib.rs/crates/backtrace/features#feature-dl_iterate_phdr: dl_iterate_phdr\n\u27e834\u27e9 https://lib.rs/crates/backtrace/features#feature-dladdr: dladdr\n\u27e835\u27e9 https://lib.rs/crates/backtrace/features#feature-kernel32: kernel32\n\u27e836\u27e9 https://lib.rs/crates/backtrace/features#feature-libunwind: libunwind\n\u27e837\u27e9 https://lib.rs/crates/backtrace/features#feature-std: std\n\u27e838\u27e9 https://lib.rs/crates/backtrace/features#feature-unix-backtrace: unix-backtrace\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6146,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113659.2343918"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.24\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\librustc_demangle-68f4fddebde2bfb7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libbacktrace-6a3a772dd3bd97d8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc-demangle@0.1.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_demangle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc-demangle-0.1.24\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\librustc_demangle-68f4fddebde2bfb7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n  --> src\\backtrace\\mod.rs:65:1\n   |\n65 | pub unsafe fn trace_unsynchronized<F: FnMut(&Frame) -> bool>(mut cb: F) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n   = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_safety_doc)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 2365,
                    "byte_start": 2294,
                    "column_end": 72,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\backtrace\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 1,
                        "text": "pub unsafe fn trace_unsynchronized<F: FnMut(&Frame) -> bool>(mut cb: F) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: this public function might dereference a raw pointer but is not marked `unsafe`\n  --> src\\symbolize\\mod.rs:63:37\n   |\n63 |     unsafe { resolve_unsynchronized(addr, cb) }\n   |                                     ^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n   = note: `#[deny(clippy::not_unsafe_ptr_arg_deref)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::not_unsafe_ptr_arg_deref)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::not_unsafe_ptr_arg_deref",
                  "explanation": null
                },
                "level": "error",
                "message": "this public function might dereference a raw pointer but is not marked `unsafe`",
                "spans": [
                  {
                    "byte_end": 1960,
                    "byte_start": 1956,
                    "column_end": 41,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\symbolize\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 37,
                        "text": "    unsafe { resolve_unsynchronized(addr, cb) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\symbolize\\mod.rs:158:1\n    |\n158 | / pub unsafe fn resolve_unsynchronized<F>(addr: *mut c_void, mut cb: F)\n159 | | where\n160 | |     F: FnMut(&Symbol),\n    | |______________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 5282,
                    "byte_start": 5184,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\symbolize\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 160,
                    "line_start": 158,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 1,
                        "text": "pub unsafe fn resolve_unsynchronized<F>(addr: *mut c_void, mut cb: F)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "where"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "    F: FnMut(&Symbol),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\symbolize\\mod.rs:174:1\n    |\n174 | / pub unsafe fn resolve_frame_unsynchronized<F>(frame: &Frame, mut cb: F)\n175 | | where\n176 | |     F: FnMut(&Symbol),\n    | |______________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 5823,
                    "byte_start": 5723,
                    "column_end": 23,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\symbolize\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 176,
                    "line_start": 174,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 1,
                        "text": "pub unsafe fn resolve_frame_unsynchronized<F>(frame: &Frame, mut cb: F)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "where"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "    F: FnMut(&Symbol),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: length comparison to zero\n   --> src\\symbolize\\mod.rs:349:11\n    |\n349 |     while bytes.len() > 0 {\n    |           ^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!bytes.is_empty()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n    = note: `#[warn(clippy::len_zero)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::len_zero)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using `!is_empty` is clearer and more explicit",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11522,
                        "byte_start": 11507,
                        "column_end": 26,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\symbolize\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 349,
                        "line_start": 349,
                        "suggested_replacement": "!bytes.is_empty()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 26,
                            "highlight_start": 11,
                            "text": "    while bytes.len() > 0 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::len_zero",
                  "explanation": null
                },
                "level": "warning",
                "message": "length comparison to zero",
                "spans": [
                  {
                    "byte_end": 11522,
                    "byte_start": 11507,
                    "column_end": 26,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\symbolize\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 349,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 11,
                        "text": "    while bytes.len() > 0 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: casting to the same type is unnecessary (`u32` -> `u32`)\n   --> src\\symbolize\\dbghelp.rs:228:23\n    |\n228 |     info.MaxNameLen = MAX_SYM_NAME as u32;\n    |                       ^^^^^^^^^^^^^^^^^^^ help: try: `MAX_SYM_NAME`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n    = note: `#[warn(clippy::unnecessary_cast)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unnecessary_cast)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7655,
                        "byte_start": 7636,
                        "column_end": 42,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\symbolize\\dbghelp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 228,
                        "line_start": 228,
                        "suggested_replacement": "MAX_SYM_NAME",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 23,
                            "text": "    info.MaxNameLen = MAX_SYM_NAME as u32;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_cast",
                  "explanation": null
                },
                "level": "warning",
                "message": "casting to the same type is unnecessary (`u32` -> `u32`)",
                "spans": [
                  {
                    "byte_end": 7655,
                    "byte_start": 7636,
                    "column_end": 42,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\symbolize\\dbghelp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 228,
                    "line_start": 228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 23,
                        "text": "    info.MaxNameLen = MAX_SYM_NAME as u32;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdav9nuah/backtrace-0.3.75#backtrace@0.3.75",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "backtrace",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdav9nuah\\backtrace-0.3.75\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: slow zero-filling initialization\n   --> src\\dbghelp.rs:364:35\n    |\n364 |           let mut search_path_buf = Vec::new();\n    |  ___________________________________^\n365 | |         search_path_buf.resize(1024, 0);\n    | |_______________________________________^ help: consider replacing this with: `vec![0; 1024]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n    = note: `#[warn(clippy::slow_vector_initialization)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::slow_vector_initialization)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider replacing this with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15146,
                        "byte_start": 15095,
                        "column_end": 40,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\dbghelp.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 365,
                        "line_start": 364,
                        "suggested_replacement": "vec![0; 1024]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 35,
                            "text": "        let mut search_path_buf = Vec::new();"
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "        search_path_buf.resize(1024, 0);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::slow_vector_initialization",
                  "explanation": null
                },
                "level": "warning",
                "message": "slow zero-filling initialization",
                "spans": [
                  {
                    "byte_end": 15146,
                    "byte_start": 15095,
                    "column_end": 40,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\dbghelp.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 365,
                    "line_start": 364,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 35,
                        "text": "        let mut search_path_buf = Vec::new();"
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "        search_path_buf.resize(1024, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 28
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "backtrace",
          "version": "0.3.75",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\n[Settings](https://docs.rs/backtrace/latest/settings.html)\n[Help](https://docs.rs/backtrace/latest/help.html)\nSummary[Source](https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251)\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#usage)Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy)Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs[\u00a7](https://docs.rs/backtrace/latest/backtrace/#structs)\n\n[Backtrace](https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html \"struct backtrace::Backtrace\")\n    Representation of an owned and self-contained backtrace.\n\n[BacktraceFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html \"struct backtrace::BacktraceFmt\")\n    A formatter for backtraces.\n\n[BacktraceFrame](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html \"struct backtrace::BacktraceFrame\")\n    Captured version of a frame in a backtrace.\n\n[BacktraceFrameFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html \"struct backtrace::BacktraceFrameFmt\")\n    A formatter for just one frame of a backtrace.\n\n[BacktraceSymbol](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html \"struct backtrace::BacktraceSymbol\")\n    Captured version of a symbol in a backtrace.\n\n[Frame](https://docs.rs/backtrace/latest/backtrace/struct.Frame.html \"struct backtrace::Frame\")\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\n[Symbol](https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html \"struct backtrace::Symbol\")\n    A trait representing the resolution of a symbol in a file.\n\n[SymbolName](https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html \"struct backtrace::SymbolName\")\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums[\u00a7](https://docs.rs/backtrace/latest/backtrace/#enums)\n\n[BytesOrWideString](https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html \"enum backtrace::BytesOrWideString\")\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\n[PrintFmt](https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html \"enum backtrace::PrintFmt\")\n    The styles of printing that we can print\n## Functions[\u00a7](https://docs.rs/backtrace/latest/backtrace/#functions)\n\n[clear_symbol_cache](https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html \"fn backtrace::clear_symbol_cache\")\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\n[resolve](https://docs.rs/backtrace/latest/backtrace/fn.resolve.html \"fn backtrace::resolve\")\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html \"fn backtrace::resolve_frame\")\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html \"fn backtrace::resolve_frame_unsynchronized\")\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\n[resolve_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html \"fn backtrace::resolve_unsynchronized\")\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\n[trace](https://docs.rs/backtrace/latest/backtrace/fn.trace.html \"fn backtrace::trace\")\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\n[trace_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html \"fn backtrace::trace_unsynchronized\")\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
            "markdown_with_citations": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## \u00a7\u27e84\u27e9Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## \u00a7\u27e85\u27e9Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs\u00a7\u27e86\u27e9\n\nBacktrace\u27e87\u27e9\n    Representation of an owned and self-contained backtrace.\n\nBacktraceFmt\u27e88\u27e9\n    A formatter for backtraces.\n\nBacktraceFrame\u27e89\u27e9\n    Captured version of a frame in a backtrace.\n\nBacktraceFrameFmt\u27e810\u27e9\n    A formatter for just one frame of a backtrace.\n\nBacktraceSymbol\u27e811\u27e9\n    Captured version of a symbol in a backtrace.\n\nFrame\u27e812\u27e9\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\nSymbol\u27e813\u27e9\n    A trait representing the resolution of a symbol in a file.\n\nSymbolName\u27e814\u27e9\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums\u00a7\u27e815\u27e9\n\nBytesOrWideString\u27e816\u27e9\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\nPrintFmt\u27e817\u27e9\n    The styles of printing that we can print\n## Functions\u00a7\u27e818\u27e9\n\nclear_symbol_cache\u27e819\u27e9\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\nresolve\u27e820\u27e9\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\nresolve_frame\u27e821\u27e9\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\nresolve_frame_unsynchronized\u27e822\u27e9\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\nresolve_unsynchronized\u27e823\u27e9\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\ntrace\u27e824\u27e9\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\ntrace_unsynchronized\u27e825\u27e9\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/backtrace/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/backtrace/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251: Source\n\u27e84\u27e9 https://docs.rs/backtrace/latest/backtrace/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy: \u00a7\n\u27e86\u27e9 https://docs.rs/backtrace/latest/backtrace/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html: struct backtrace::Backtrace - Backtrace\n\u27e88\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html: struct backtrace::BacktraceFmt - BacktraceFmt\n\u27e89\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html: struct backtrace::BacktraceFrame - BacktraceFrame\n\u27e810\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html: struct backtrace::BacktraceFrameFmt - BacktraceFrameFmt\n\u27e811\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html: struct backtrace::BacktraceSymbol - BacktraceSymbol\n\u27e812\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Frame.html: struct backtrace::Frame - Frame\n\u27e813\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html: struct backtrace::Symbol - Symbol\n\u27e814\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html: struct backtrace::SymbolName - SymbolName\n\u27e815\u27e9 https://docs.rs/backtrace/latest/backtrace/#enums: \u00a7\n\u27e816\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html: enum backtrace::BytesOrWideString - BytesOrWideString\n\u27e817\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html: enum backtrace::PrintFmt - PrintFmt\n\u27e818\u27e9 https://docs.rs/backtrace/latest/backtrace/#functions: \u00a7\n\u27e819\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html: fn backtrace::clear_symbol_cache - clear_symbol_cache\n\u27e820\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve.html: fn backtrace::resolve - resolve\n\u27e821\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html: fn backtrace::resolve_frame - resolve_frame\n\u27e822\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html: fn backtrace::resolve_frame_unsynchronized - resolve_frame_unsynchronized\n\u27e823\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html: fn backtrace::resolve_unsynchronized - resolve_unsynchronized\n\u27e824\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace.html: fn backtrace::trace - trace\n\u27e825\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html: fn backtrace::trace_unsynchronized - trace_unsynchronized\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "backtrace",
          "version": "0.3.75",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\n[Settings](https://docs.rs/backtrace/latest/settings.html)\n[Help](https://docs.rs/backtrace/latest/help.html)\nSummary[Source](https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251)\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#usage)Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## [\u00a7](https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy)Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs[\u00a7](https://docs.rs/backtrace/latest/backtrace/#structs)\n\n[Backtrace](https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html \"struct backtrace::Backtrace\")\n    Representation of an owned and self-contained backtrace.\n\n[BacktraceFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html \"struct backtrace::BacktraceFmt\")\n    A formatter for backtraces.\n\n[BacktraceFrame](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html \"struct backtrace::BacktraceFrame\")\n    Captured version of a frame in a backtrace.\n\n[BacktraceFrameFmt](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html \"struct backtrace::BacktraceFrameFmt\")\n    A formatter for just one frame of a backtrace.\n\n[BacktraceSymbol](https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html \"struct backtrace::BacktraceSymbol\")\n    Captured version of a symbol in a backtrace.\n\n[Frame](https://docs.rs/backtrace/latest/backtrace/struct.Frame.html \"struct backtrace::Frame\")\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\n[Symbol](https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html \"struct backtrace::Symbol\")\n    A trait representing the resolution of a symbol in a file.\n\n[SymbolName](https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html \"struct backtrace::SymbolName\")\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums[\u00a7](https://docs.rs/backtrace/latest/backtrace/#enums)\n\n[BytesOrWideString](https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html \"enum backtrace::BytesOrWideString\")\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\n[PrintFmt](https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html \"enum backtrace::PrintFmt\")\n    The styles of printing that we can print\n## Functions[\u00a7](https://docs.rs/backtrace/latest/backtrace/#functions)\n\n[clear_symbol_cache](https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html \"fn backtrace::clear_symbol_cache\")\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\n[resolve](https://docs.rs/backtrace/latest/backtrace/fn.resolve.html \"fn backtrace::resolve\")\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html \"fn backtrace::resolve_frame\")\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\n[resolve_frame_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html \"fn backtrace::resolve_frame_unsynchronized\")\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\n[resolve_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html \"fn backtrace::resolve_unsynchronized\")\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\n[trace](https://docs.rs/backtrace/latest/backtrace/fn.trace.html \"fn backtrace::trace\")\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\n[trace_unsynchronized](https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html \"fn backtrace::trace_unsynchronized\")\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
            "markdown_with_citations": "[](https://docs.rs/backtrace/latest/backtrace/all.html \"show sidebar\")\n# Crate backtraceCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA library for acquiring a backtrace at runtime\nThis library is meant to supplement the `RUST_BACKTRACE=1` support of the standard library by allowing an acquisition of a backtrace at runtime programmatically. The backtraces generated by this library do not need to be parsed, for example, and expose the functionality of multiple backend implementations.\n## \u00a7\u27e84\u27e9Usage\nFirst, add this to your Cargo.toml\n```\n[dependencies]\nbacktrace = \"0.3\"\n```\n\nNext:\n```\nbacktrace::trace(|frame| {\n  let ip = frame.ip();\n  let symbol_address = frame.symbol_address();\n  // Resolve this instruction pointer to a symbol name\n  backtrace::resolve_frame(frame, |symbol| {\n    if let Some(name) = symbol.name() {\n      // ...\n    }\n    if let Some(filename) = symbol.filename() {\n      // ...\n    }\n  });\n  true // keep going to the next frame\n});\n```\n\n## \u00a7\u27e85\u27e9Backtrace accuracy\nThis crate implements best-effort attempts to get the native backtrace. This is not always guaranteed to work, and some platforms don\u2019t return any backtrace at all. If your application requires accurate backtraces then it\u2019s recommended to closely evaluate this crate to see whether it\u2019s suitable for your use case on your target platforms.\nEven on supported platforms, there\u2019s a number of reasons that backtraces may be less-than-accurate, including but not limited to:\n  * Unwind information may not be available. This crate primarily implements backtraces by unwinding the stack, but not all functions may have unwinding information (e.g. DWARF unwinding information).\n  * Rust code may be compiled without unwinding information for some functions. This can also happen for Rust code compiled with `-Cpanic=abort`. You can remedy this, however, with `-Cforce-unwind-tables` as a compiler option.\n  * Unwind information may be inaccurate or corrupt. In the worst case inaccurate unwind information can lead this library to segfault. In the best case inaccurate information will result in a truncated stack trace.\n  * Backtraces may not report filenames/line numbers correctly due to missing or corrupt debug information. This won\u2019t lead to segfaults unlike corrupt unwinding information, but missing or malformed debug information will mean that filenames and line numbers will not be available. This may be because debug information wasn\u2019t generated by the compiler, or it\u2019s just missing on the filesystem.\n  * Not all platforms are supported. For example there\u2019s no way to get a backtrace on WebAssembly at the moment.\n  * Crate features may be disabled. Currently this crate supports using Gimli libbacktrace on non-Windows platforms for reading debuginfo for backtraces. If both crate features are disabled, however, then these platforms will generate a backtrace but be unable to generate symbols for it.\n\n\nIn most standard workflows for most standard platforms you generally don\u2019t need to worry about these caveats. We\u2019ll try to fix ones where we can over time, but otherwise it\u2019s important to be aware of the limitations of unwinding-based backtraces!\n## Structs\u00a7\u27e86\u27e9\n\nBacktrace\u27e87\u27e9\n    Representation of an owned and self-contained backtrace.\n\nBacktraceFmt\u27e88\u27e9\n    A formatter for backtraces.\n\nBacktraceFrame\u27e89\u27e9\n    Captured version of a frame in a backtrace.\n\nBacktraceFrameFmt\u27e810\u27e9\n    A formatter for just one frame of a backtrace.\n\nBacktraceSymbol\u27e811\u27e9\n    Captured version of a symbol in a backtrace.\n\nFrame\u27e812\u27e9\n    A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.\n\nSymbol\u27e813\u27e9\n    A trait representing the resolution of a symbol in a file.\n\nSymbolName\u27e814\u27e9\n    A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.\n## Enums\u00a7\u27e815\u27e9\n\nBytesOrWideString\u27e816\u27e9\n    A platform independent representation of a string. When working with `std` enabled it is recommended to the convenience methods for providing conversions to `std` types.\n\nPrintFmt\u27e817\u27e9\n    The styles of printing that we can print\n## Functions\u00a7\u27e818\u27e9\n\nclear_symbol_cache\u27e819\u27e9\n    Attempt to reclaim that cached memory used to symbolicate addresses.\n\nresolve\u27e820\u27e9\n    Resolve an address to a symbol, passing the symbol to the specified closure.\n\nresolve_frame\u27e821\u27e9\n    Resolve a previously captured frame to a symbol, passing the symbol to the specified closure.\n\nresolve_frame_unsynchronized\u27e822\u27e9\u26a0\n    Same as `resolve_frame`, only unsafe as it\u2019s unsynchronized.\n\nresolve_unsynchronized\u27e823\u27e9\u26a0\n    Same as `resolve`, only unsafe as it\u2019s unsynchronized.\n\ntrace\u27e824\u27e9\n    Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.\n\ntrace_unsynchronized\u27e825\u27e9\u26a0\n    Same as `trace`, only unsafe as it\u2019s unsynchronized.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/backtrace/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/backtrace/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/backtrace/latest/src/backtrace/lib.rs.html#1-251: Source\n\u27e84\u27e9 https://docs.rs/backtrace/latest/backtrace/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/backtrace/latest/backtrace/#backtrace-accuracy: \u00a7\n\u27e86\u27e9 https://docs.rs/backtrace/latest/backtrace/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Backtrace.html: struct backtrace::Backtrace - Backtrace\n\u27e88\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFmt.html: struct backtrace::BacktraceFmt - BacktraceFmt\n\u27e89\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrame.html: struct backtrace::BacktraceFrame - BacktraceFrame\n\u27e810\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceFrameFmt.html: struct backtrace::BacktraceFrameFmt - BacktraceFrameFmt\n\u27e811\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.BacktraceSymbol.html: struct backtrace::BacktraceSymbol - BacktraceSymbol\n\u27e812\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Frame.html: struct backtrace::Frame - Frame\n\u27e813\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.Symbol.html: struct backtrace::Symbol - Symbol\n\u27e814\u27e9 https://docs.rs/backtrace/latest/backtrace/struct.SymbolName.html: struct backtrace::SymbolName - SymbolName\n\u27e815\u27e9 https://docs.rs/backtrace/latest/backtrace/#enums: \u00a7\n\u27e816\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.BytesOrWideString.html: enum backtrace::BytesOrWideString - BytesOrWideString\n\u27e817\u27e9 https://docs.rs/backtrace/latest/backtrace/enum.PrintFmt.html: enum backtrace::PrintFmt - PrintFmt\n\u27e818\u27e9 https://docs.rs/backtrace/latest/backtrace/#functions: \u00a7\n\u27e819\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.clear_symbol_cache.html: fn backtrace::clear_symbol_cache - clear_symbol_cache\n\u27e820\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve.html: fn backtrace::resolve - resolve\n\u27e821\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame.html: fn backtrace::resolve_frame - resolve_frame\n\u27e822\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_frame_unsynchronized.html: fn backtrace::resolve_frame_unsynchronized - resolve_frame_unsynchronized\n\u27e823\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.resolve_unsynchronized.html: fn backtrace::resolve_unsynchronized - resolve_unsynchronized\n\u27e824\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace.html: fn backtrace::trace - trace\n\u27e825\u27e9 https://docs.rs/backtrace/latest/backtrace/fn.trace_unsynchronized.html: fn backtrace::trace_unsynchronized - trace_unsynchronized\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `backtrace` crate provides programmatic access to runtime stack traces in Rust, supplementing the standard library's `RUST_BACKTRACE=1` functionality. It supports capturing, resolving, and formatting backtrace frames and symbols, with features like customizable symbol resolution and multiple backend implementations. While it offers best-effort accuracy, limitations exist due to platform support, missing debug/unwind information, or disabled crate features.",
          "feature_summary": null,
          "use_case": "DevTools",
          "score": 6.5,
          "factual_counterfactual": "### Pair 1: Backtrace Generation  \n\u2705 **Factual:** The `backtrace` crate allows programmatic acquisition of backtraces at runtime, supplementing the `RUST_BACKTRACE=1` feature of the standard library.  \n\u274c **Counterfactual:** The `backtrace` crate requires `RUST_BACKTRACE=1` to be enabled in order to generate backtraces programmatically.  \n\n---\n\n### Pair 2: Platform Support  \n\u2705 **Factual:** The `backtrace` crate does not support generating backtraces on WebAssembly due to platform limitations.  \n\u274c **Counterfactual:** The `backtrace` crate provides full support for generating backtraces on WebAssembly, including symbol resolution.  \n\n---\n\n### Pair 3: Debug Information  \n\u2705 **Factual:** The accuracy of backtraces generated by the `backtrace` crate can be affected by missing or corrupt debug information, leading to filenames and line numbers being unavailable.  \n\u274c **Counterfactual:** The `backtrace` crate guarantees accurate filenames and line numbers in backtraces, even if debug information is missing or corrupt.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-265ee18a-4097edd4-1751259868",
      "timestamp": "2025-06-30T05:04:28.167466+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]