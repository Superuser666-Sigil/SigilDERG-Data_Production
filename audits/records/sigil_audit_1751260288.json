[
  {
    "execution_id": "exec-9fce1f6e-075f6de9-1751260280",
    "timestamp": "2025-06-30T05:11:20.045182+00:00",
    "sacred_chain": {
      "input_data": "termcolor",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'termcolor' -> 'termcolor'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "termcolor",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/termcolor",
            "title": "termcolor v1.4.1",
            "content": {
              "raw_markdown": "#  termcolor v1.4.1\nA simple cross platform library for writing colored text to a terminal. \n  * [ #color ](https://crates.io/keywords/color)\n  * [ #win ](https://crates.io/keywords/win)\n  * [ #windows ](https://crates.io/keywords/windows)\n  * [ #ansi ](https://crates.io/keywords/ansi)\n  * [ #console ](https://crates.io/keywords/console)\n\n\n  * [ Readme ](https://crates.io/crates/termcolor)\n  * [ 24 Versions ](https://crates.io/crates/termcolor/versions)\n  * [ Dependencies ](https://crates.io/crates/termcolor/dependencies)\n  * [ Dependents ](https://crates.io/crates/termcolor/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \n2018 edition \n[ Unlicense ](https://choosealicense.com/licenses/unlicense) OR [ MIT ](https://choosealicense.com/licenses/mit)\n18.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add termcolor\nOr add the following line to your Cargo.toml:\ntermcolor = \"1.4.1\"\n## Documentation\n[ docs.rs/termcolor ](https://docs.rs/termcolor)\n## Repository\n[ github.com/BurntSushi/termcolor ](https://github.com/BurntSushi/termcolor)\n## Owners\n[ Report crate ](https://crates.io/support?crate=termcolor&inquire=crate-violation)\n### Stats Overview\n257,995,835 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  termcolor v1.4.1\nA simple cross platform library for writing colored text to a terminal. \n  *  #color \u27e81\u27e9\n  *  #win \u27e82\u27e9\n  *  #windows \u27e83\u27e9\n  *  #ansi \u27e84\u27e9\n  *  #console \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  24 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 1 year ago \n2018 edition \n Unlicense \u27e810\u27e9 OR  MIT \u27e811\u27e9\n18.3 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add termcolor\nOr add the following line to your Cargo.toml:\ntermcolor = \"1.4.1\"\n## Documentation\n docs.rs/termcolor \u27e812\u27e9\n## Repository\n github.com/BurntSushi/termcolor \u27e813\u27e9\n## Owners\n Report crate \u27e814\u27e9\n### Stats Overview\n257,995,835 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/color:  #color \n\u27e82\u27e9 https://crates.io/keywords/win:  #win \n\u27e83\u27e9 https://crates.io/keywords/windows:  #windows \n\u27e84\u27e9 https://crates.io/keywords/ansi:  #ansi \n\u27e85\u27e9 https://crates.io/keywords/console:  #console \n\u27e86\u27e9 https://crates.io/crates/termcolor:  Readme \n\u27e87\u27e9 https://crates.io/crates/termcolor/versions:  24 Versions \n\u27e88\u27e9 https://crates.io/crates/termcolor/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/termcolor/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/unlicense:  Unlicense \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://docs.rs/termcolor:  docs.rs/termcolor \n\u27e813\u27e9 https://github.com/BurntSushi/termcolor:  github.com/BurntSushi/termcolor \n\u27e814\u27e9 https://crates.io/support?crate=termcolor&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1348,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114069.909348"
          },
          "docs_rs": {
            "url": "https://docs.rs/termcolor",
            "title": "Crate termcolorCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\n[Settings](https://docs.rs/termcolor/latest/settings.html)\n[Help](https://docs.rs/termcolor/latest/help.html)\nSummary[Source](https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572)\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#organization)Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream)Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling [`WriteColor::set_color`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color), and this may include calling [`WriteColor::reset`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset) before the program exits to a shell.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter)Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal)Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s [`isatty`](https://man7.org/linux/man-pages/man3/isatty.3.html) function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n[\u24d8](https://docs.rs/termcolor/latest/termcolor/ \"This example is not tested\")```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs[\u00a7](https://docs.rs/termcolor/latest/termcolor/#structs)\n\n[Ansi](https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html \"struct termcolor::Ansi\")\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\n[Buffer](https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html \"struct termcolor::Buffer\")\n    Write colored text to memory.\n\n[BufferWriter](https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html \"struct termcolor::BufferWriter\")\n    Writes colored buffers to stdout or stderr.\n\n[BufferedStandardStream](https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html \"struct termcolor::BufferedStandardStream\")\n    Like `StandardStream`, but does buffered writing.\n\n[ColorChoiceParseError](https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html \"struct termcolor::ColorChoiceParseError\")\n    An error that occurs when parsing a `ColorChoice` fails.\n\n[ColorSpec](https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html \"struct termcolor::ColorSpec\")\n    A color specification.\n\n[HyperlinkSpec](https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html \"struct termcolor::HyperlinkSpec\")\n    A hyperlink specification.\n\n[NoColor](https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html \"struct termcolor::NoColor\")\n    Satisfies `WriteColor` but ignores all color options.\n\n[ParseColorError](https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html \"struct termcolor::ParseColorError\")\n    An error from parsing an invalid color specification.\n\n[StandardStream](https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html \"struct termcolor::StandardStream\")\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\n[StandardStreamLock](https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html \"struct termcolor::StandardStreamLock\")\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums[\u00a7](https://docs.rs/termcolor/latest/termcolor/#enums)\n\n[Color](https://docs.rs/termcolor/latest/termcolor/enum.Color.html \"enum termcolor::Color\")\n    The set of available colors for the terminal foreground/background.\n\n[ColorChoice](https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html \"enum termcolor::ColorChoice\")\n    ColorChoice represents the color preferences of an end user.\n## Traits[\u00a7](https://docs.rs/termcolor/latest/termcolor/#traits)\n\n[WriteColor](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html \"trait termcolor::WriteColor\")\n    This trait describes the behavior of writers that support colored output.\n",
              "markdown_with_citations": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## \u00a7\u27e84\u27e9Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## \u00a7\u27e85\u27e9Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling `WriteColor::set_color`\u27e86\u27e9, and this may include calling `WriteColor::reset`\u27e87\u27e9 before the program exits to a shell.\n## \u00a7\u27e88\u27e9Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## \u00a7\u27e89\u27e9Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s `isatty`\u27e810\u27e9 function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s `IsTerminal`\u27e811\u27e9 trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n\u24d8\u27e812\u27e9```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs\u00a7\u27e813\u27e9\n\nAnsi\u27e814\u27e9\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\nBuffer\u27e815\u27e9\n    Write colored text to memory.\n\nBufferWriter\u27e816\u27e9\n    Writes colored buffers to stdout or stderr.\n\nBufferedStandardStream\u27e817\u27e9\n    Like `StandardStream`, but does buffered writing.\n\nColorChoiceParseError\u27e818\u27e9\n    An error that occurs when parsing a `ColorChoice` fails.\n\nColorSpec\u27e819\u27e9\n    A color specification.\n\nHyperlinkSpec\u27e820\u27e9\n    A hyperlink specification.\n\nNoColor\u27e821\u27e9\n    Satisfies `WriteColor` but ignores all color options.\n\nParseColorError\u27e822\u27e9\n    An error from parsing an invalid color specification.\n\nStandardStream\u27e823\u27e9\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\nStandardStreamLock\u27e824\u27e9\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums\u00a7\u27e825\u27e9\n\nColor\u27e826\u27e9\n    The set of available colors for the terminal foreground/background.\n\nColorChoice\u27e827\u27e9\n    ColorChoice represents the color preferences of an end user.\n## Traits\u00a7\u27e828\u27e9\n\nWriteColor\u27e829\u27e9\n    This trait describes the behavior of writers that support colored output.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/termcolor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/termcolor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572: Source\n\u27e84\u27e9 https://docs.rs/termcolor/latest/termcolor/#organization: \u00a7\n\u27e85\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream: \u00a7\n\u27e86\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color: `WriteColor::set_color`\n\u27e87\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset: `WriteColor::reset`\n\u27e88\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter: \u00a7\n\u27e89\u27e9 https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal: \u00a7\n\u27e810\u27e9 https://man7.org/linux/man-pages/man3/isatty.3.html: `isatty`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.IsTerminal.html: `IsTerminal`\n\u27e812\u27e9 https://docs.rs/termcolor/latest/termcolor/: This example is not tested - \u24d8\n\u27e813\u27e9 https://docs.rs/termcolor/latest/termcolor/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html: struct termcolor::Ansi - Ansi\n\u27e815\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html: struct termcolor::Buffer - Buffer\n\u27e816\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html: struct termcolor::BufferWriter - BufferWriter\n\u27e817\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html: struct termcolor::BufferedStandardStream - BufferedStandardStream\n\u27e818\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html: struct termcolor::ColorChoiceParseError - ColorChoiceParseError\n\u27e819\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html: struct termcolor::ColorSpec - ColorSpec\n\u27e820\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html: struct termcolor::HyperlinkSpec - HyperlinkSpec\n\u27e821\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html: struct termcolor::NoColor - NoColor\n\u27e822\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html: struct termcolor::ParseColorError - ParseColorError\n\u27e823\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html: struct termcolor::StandardStream - StandardStream\n\u27e824\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html: struct termcolor::StandardStreamLock - StandardStreamLock\n\u27e825\u27e9 https://docs.rs/termcolor/latest/termcolor/#enums: \u00a7\n\u27e826\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.Color.html: enum termcolor::Color - Color\n\u27e827\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html: enum termcolor::ColorChoice - ColorChoice\n\u27e828\u27e9 https://docs.rs/termcolor/latest/termcolor/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html: trait termcolor::WriteColor - WriteColor\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7907,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114070.7289818"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/termcolor",
            "title": "Untitled",
            "content": {
              "raw_markdown": "### Owner of this crate does not want it to be on lib.rs\n> lib.rs calls cryptocurrencies a magic beans scam, etc. BurntSushi doesn't want to be a party to what he sees as sneering or similar editorializing on a web site that he perceives to be a crate index. (Even if he agrees with the substance of the editorial.)[*](https://gitlab.com/crates.rs/crates.rs/-/issues/121#note_1178288733)\n[See this crate on crates.io](https://crates.io/crates/termcolor)\n",
              "markdown_with_citations": "### Owner of this crate does not want it to be on lib.rs\n> lib.rs calls cryptocurrencies a magic beans scam, etc. BurntSushi doesn't want to be a party to what he sees as sneering or similar editorializing on a web site that he perceives to be a crate index. (Even if he agrees with the substance of the editorial.)*\u27e81\u27e9\nSee this crate on crates.io\u27e82\u27e9\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://gitlab.com/crates.rs/crates.rs/-/issues/121#note_1178288733: *\n\u27e82\u27e9 https://crates.io/crates/termcolor: See this crate on crates.io\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 1.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 454,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114071.1166311"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_System_SystemInformation",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_sys-ca3765a6a78db6f3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-util@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwinapi_util-676cbaa0bf34af31.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libtermcolor-7071bc89907f2a00.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Win32",
                "Win32_Foundation",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_Console",
                "Win32_System_SystemInformation",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwindows_sys-ca3765a6a78db6f3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-util@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-util-0.1.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\target\\debug\\deps\\libwinapi_util-676cbaa0bf34af31.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\lib.rs:383:1\n    |\n383 | / /// some simple internal enum types to work around this.\n384 | |\n    | |_^\n385 |   enum StandardStreamType {\n    |   ----------------------- the comment documents this enum\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_doc_comments)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13725,
                        "byte_start": 13724,
                        "column_end": 1,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 384,
                        "line_start": 383,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 57,
                            "text": "/// some simple internal enum types to work around this."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 13749,
                    "byte_start": 13726,
                    "column_end": 24,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": false,
                    "label": "the comment documents this enum",
                    "line_end": 385,
                    "line_start": 385,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "enum StandardStreamType {"
                      }
                    ]
                  },
                  {
                    "byte_end": 13725,
                    "byte_start": 13668,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 384,
                    "line_start": 383,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "/// some simple internal enum types to work around this."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\lib.rs:201:6\n    |\n201 | impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {\n    |      ^^                                          ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n201 - impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {\n201 + impl<T: ?Sized + WriteColor> WriteColor for &mut T {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7753,
                        "byte_start": 7749,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 201,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {"
                          }
                        ]
                      },
                      {
                        "byte_end": 7796,
                        "byte_start": 7793,
                        "column_end": 53,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 201,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 50,
                            "text": "impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 7751,
                    "byte_start": 7749,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {"
                      }
                    ]
                  },
                  {
                    "byte_end": 7795,
                    "byte_start": 7793,
                    "column_end": 52,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 50,
                        "text": "impl<'a, T: ?Sized + WriteColor> WriteColor for &'a mut T {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:203:9\n    |\n203 |         (&**self).supports_color()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7860,
                        "byte_start": 7851,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 203,
                        "line_start": 203,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).supports_color()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 7860,
                    "byte_start": 7851,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 203,
                    "line_start": 203,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).supports_color()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:206:9\n    |\n206 |         (&**self).supports_hyperlinks()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7945,
                        "byte_start": 7936,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 206,
                        "line_start": 206,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).supports_hyperlinks()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 7945,
                    "byte_start": 7936,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).supports_hyperlinks()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:209:9\n    |\n209 |         (&mut **self).set_color(spec)\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8061,
                        "byte_start": 8048,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 209,
                        "line_start": 209,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).set_color(spec)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8061,
                    "byte_start": 8048,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 209,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).set_color(spec)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:212:9\n    |\n212 |         (&mut **self).set_hyperlink(link)\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8179,
                        "byte_start": 8166,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 212,
                        "line_start": 212,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).set_hyperlink(link)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8179,
                    "byte_start": 8166,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 212,
                    "line_start": 212,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).set_hyperlink(link)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:215:9\n    |\n215 |         (&mut **self).reset()\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8271,
                        "byte_start": 8258,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 215,
                        "line_start": 215,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).reset()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8271,
                    "byte_start": 8258,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 215,
                    "line_start": 215,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).reset()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:218:9\n    |\n218 |         (&**self).is_synchronous()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8342,
                        "byte_start": 8333,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 218,
                        "line_start": 218,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).is_synchronous()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8342,
                    "byte_start": 8333,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 218,
                    "line_start": 218,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).is_synchronous()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:224:9\n    |\n224 |         (&**self).supports_color()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8478,
                        "byte_start": 8469,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 224,
                        "line_start": 224,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).supports_color()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8478,
                    "byte_start": 8469,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 224,
                    "line_start": 224,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).supports_color()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:227:9\n    |\n227 |         (&**self).supports_hyperlinks()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8563,
                        "byte_start": 8554,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 227,
                        "line_start": 227,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).supports_hyperlinks()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8563,
                    "byte_start": 8554,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 227,
                    "line_start": 227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).supports_hyperlinks()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:230:9\n    |\n230 |         (&mut **self).set_color(spec)\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8679,
                        "byte_start": 8666,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 230,
                        "line_start": 230,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).set_color(spec)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8679,
                    "byte_start": 8666,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 230,
                    "line_start": 230,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).set_color(spec)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:233:9\n    |\n233 |         (&mut **self).set_hyperlink(link)\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8797,
                        "byte_start": 8784,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 233,
                        "line_start": 233,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).set_hyperlink(link)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8797,
                    "byte_start": 8784,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 233,
                    "line_start": 233,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).set_hyperlink(link)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:236:9\n    |\n236 |         (&mut **self).reset()\n    |         ^^^^^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8889,
                        "byte_start": 8876,
                        "column_end": 22,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 236,
                        "line_start": 236,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 9,
                            "text": "        (&mut **self).reset()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8889,
                    "byte_start": 8876,
                    "column_end": 22,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 236,
                    "line_start": 236,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 9,
                        "text": "        (&mut **self).reset()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\lib.rs:239:9\n    |\n239 |         (&**self).is_synchronous()\n    |         ^^^^^^^^^ help: change this to: `(**self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8960,
                        "byte_start": 8951,
                        "column_end": 18,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 239,
                        "line_start": 239,
                        "suggested_replacement": "(**self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 9,
                            "text": "        (&**self).is_synchronous()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 8960,
                    "byte_start": 8951,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 239,
                    "line_start": 239,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        (&**self).is_synchronous()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: deref which would be done by auto-deref\n   --> src\\lib.rs:886:36\n    |\n886 |                 spec.write_console(&mut *console)\n    |                                    ^^^^^^^^^^^^^ help: try: `&mut console`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n    = note: `#[warn(clippy::explicit_auto_deref)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::explicit_auto_deref)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 29364,
                        "byte_start": 29351,
                        "column_end": 49,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 886,
                        "line_start": 886,
                        "suggested_replacement": "&mut console",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 36,
                            "text": "                spec.write_console(&mut *console)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::explicit_auto_deref",
                  "explanation": null
                },
                "level": "warning",
                "message": "deref which would be done by auto-deref",
                "spans": [
                  {
                    "byte_end": 29364,
                    "byte_start": 29351,
                    "column_end": 49,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 886,
                    "line_start": 886,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 36,
                        "text": "                spec.write_console(&mut *console)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\n   --> src\\lib.rs:907:25\n    |\n907 |                 console.lock().unwrap().reset()?;\n    |                         ^^^^ help: change this to: `get_mut`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mut_mutex_lock\n    = note: `#[warn(clippy::mut_mutex_lock)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mut_mutex_lock",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mut_mutex_lock)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 30078,
                        "byte_start": 30074,
                        "column_end": 29,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 907,
                        "line_start": 907,
                        "suggested_replacement": "get_mut",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 25,
                            "text": "                console.lock().unwrap().reset()?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mut_mutex_lock",
                  "explanation": null
                },
                "level": "warning",
                "message": "calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference",
                "spans": [
                  {
                    "byte_end": 30078,
                    "byte_start": 30074,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 907,
                    "line_start": 907,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "                console.lock().unwrap().reset()?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: deref which would be done by auto-deref\n    --> src\\lib.rs:1163:25\n     |\n1163 |                 b.print(&mut *console, &mut stream)?;\n     |                         ^^^^^^^^^^^^^ help: try: `&mut console`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 39409,
                        "byte_start": 39396,
                        "column_end": 38,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1163,
                        "line_start": 1163,
                        "suggested_replacement": "&mut console",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 25,
                            "text": "                b.print(&mut *console, &mut stream)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::explicit_auto_deref",
                  "explanation": null
                },
                "level": "warning",
                "message": "deref which would be done by auto-deref",
                "spans": [
                  {
                    "byte_end": 39409,
                    "byte_start": 39396,
                    "column_end": 38,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1163,
                    "line_start": 1163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 25,
                        "text": "                b.print(&mut *console, &mut stream)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n    --> src\\lib.rs:2137:17\n     |\n2137 |             use std::u8;\n     |                 ^^^^^^^\n     |\n     = help: remove this import\n     = note: then `u8::<CONST>` will resolve to the respective associated constant\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n     = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `u8::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 68823,
                    "byte_start": 68816,
                    "column_end": 24,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2137,
                    "line_start": 2137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "            use std::u8;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: stripping a prefix manually\n    --> src\\lib.rs:2140:36\n     |\n2140 |                 u8::from_str_radix(&s[2..], 16).ok()\n     |                                    ^^^^^^^\n     |\nnote: the prefix was tested here\n    --> src\\lib.rs:2139:13\n     |\n2139 |             if s.starts_with(\"0x\") {\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\n     = note: `#[warn(clippy::manual_strip)]` on by default\nhelp: try using the `strip_prefix` method\n     |\n2139 ~             if let Some(<stripped>) = s.strip_prefix(\"0x\") {\n2140 ~                 u8::from_str_radix(<stripped>, 16).ok()\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the prefix was tested here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 68861,
                        "byte_start": 68838,
                        "column_end": 36,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2139,
                        "line_start": 2139,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 13,
                            "text": "            if s.starts_with(\"0x\") {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_strip)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using the `strip_prefix` method",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 68861,
                        "byte_start": 68838,
                        "column_end": 36,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2139,
                        "line_start": 2139,
                        "suggested_replacement": "if let Some(<stripped>) = s.strip_prefix(\"0x\") ",
                        "suggestion_applicability": "HasPlaceholders",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 13,
                            "text": "            if s.starts_with(\"0x\") {"
                          }
                        ]
                      },
                      {
                        "byte_end": 68905,
                        "byte_start": 68898,
                        "column_end": 43,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2140,
                        "line_start": 2140,
                        "suggested_replacement": "<stripped>",
                        "suggestion_applicability": "HasPlaceholders",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 36,
                            "text": "                u8::from_str_radix(&s[2..], 16).ok()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_strip",
                  "explanation": null
                },
                "level": "warning",
                "message": "stripping a prefix manually",
                "spans": [
                  {
                    "byte_end": 68905,
                    "byte_start": 68898,
                    "column_end": 43,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2140,
                    "line_start": 2140,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 36,
                        "text": "                u8::from_str_radix(&s[2..], 16).ok()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this call to `from_str_radix` can be replaced with a call to `str::parse`\n    --> src\\lib.rs:2142:17\n     |\n2142 |                 u8::from_str_radix(s, 10).ok()\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `s.parse::<u8>()`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n     = note: `#[warn(clippy::from_str_radix_10)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::from_str_radix_10)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 68978,
                        "byte_start": 68953,
                        "column_end": 42,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2142,
                        "line_start": 2142,
                        "suggested_replacement": "s.parse::<u8>()",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 17,
                            "text": "                u8::from_str_radix(s, 10).ok()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::from_str_radix_10",
                  "explanation": null
                },
                "level": "warning",
                "message": "this call to `from_str_radix` can be replaced with a call to `str::parse`",
                "spans": [
                  {
                    "byte_end": 68978,
                    "byte_start": 68953,
                    "column_end": 42,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2142,
                    "line_start": 2142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 17,
                        "text": "                u8::from_str_radix(s, 10).ok()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `else { if .. }` block can be collapsed\n    --> src\\lib.rs:2150:20\n     |\n2150 |               } else {\n     |  ____________________^\n2151 | |                 if s.chars().all(|c| c.is_digit(16)) {\n2152 | |                     Err(ParseColorError {\n2153 | |                         kind: ParseColorErrorKind::InvalidAnsi256,\n...    |\n2162 | |             }\n     | |_____________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n     = note: `#[warn(clippy::collapsible_else_if)]` on by default\nhelp: collapse nested if block\n     |\n2150 ~             } else if s.chars().all(|c| c.is_digit(16)) {\n2151 +                 Err(ParseColorError {\n2152 +                     kind: ParseColorErrorKind::InvalidAnsi256,\n2153 +                     given: s.to_string(),\n2154 +                 })\n2155 +             } else {\n2156 +                 Err(ParseColorError {\n2157 +                     kind: ParseColorErrorKind::InvalidName,\n2158 +                     given: s.to_string(),\n2159 +                 })\n2160 +             }\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::collapsible_else_if)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "collapse nested if block",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 69672,
                        "byte_start": 69206,
                        "column_end": 14,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2162,
                        "line_start": 2150,
                        "suggested_replacement": "if s.chars().all(|c| c.is_digit(16)) {\n                Err(ParseColorError {\n                    kind: ParseColorErrorKind::InvalidAnsi256,\n                    given: s.to_string(),\n                })\n            } else {\n                Err(ParseColorError {\n                    kind: ParseColorErrorKind::InvalidName,\n                    given: s.to_string(),\n                })\n            }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 20,
                            "text": "            } else {"
                          },
                          {
                            "highlight_end": 55,
                            "highlight_start": 1,
                            "text": "                if s.chars().all(|c| c.is_digit(16)) {"
                          },
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "                    Err(ParseColorError {"
                          },
                          {
                            "highlight_end": 67,
                            "highlight_start": 1,
                            "text": "                        kind: ParseColorErrorKind::InvalidAnsi256,"
                          },
                          {
                            "highlight_end": 46,
                            "highlight_start": 1,
                            "text": "                        given: s.to_string(),"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "                    })"
                          },
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "                } else {"
                          },
                          {
                            "highlight_end": 42,
                            "highlight_start": 1,
                            "text": "                    Err(ParseColorError {"
                          },
                          {
                            "highlight_end": 64,
                            "highlight_start": 1,
                            "text": "                        kind: ParseColorErrorKind::InvalidName,"
                          },
                          {
                            "highlight_end": 46,
                            "highlight_start": 1,
                            "text": "                        given: s.to_string(),"
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "                    })"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                }"
                          },
                          {
                            "highlight_end": 14,
                            "highlight_start": 1,
                            "text": "            }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::collapsible_else_if",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `else { if .. }` block can be collapsed",
                "spans": [
                  {
                    "byte_end": 69672,
                    "byte_start": 69206,
                    "column_end": 14,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2162,
                    "line_start": 2150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 20,
                        "text": "            } else {"
                      },
                      {
                        "highlight_end": 55,
                        "highlight_start": 1,
                        "text": "                if s.chars().all(|c| c.is_digit(16)) {"
                      },
                      {
                        "highlight_end": 42,
                        "highlight_start": 1,
                        "text": "                    Err(ParseColorError {"
                      },
                      {
                        "highlight_end": 67,
                        "highlight_start": 1,
                        "text": "                        kind: ParseColorErrorKind::InvalidAnsi256,"
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "                        given: s.to_string(),"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "                    })"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                } else {"
                      },
                      {
                        "highlight_end": 42,
                        "highlight_start": 1,
                        "text": "                    Err(ParseColorError {"
                      },
                      {
                        "highlight_end": 64,
                        "highlight_start": 1,
                        "text": "                        kind: ParseColorErrorKind::InvalidName,"
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "                        given: s.to_string(),"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "                    })"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                }"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n    --> src\\lib.rs:2148:43\n     |\n2148 |             if let Some(n) = parse_number(&codes[0]) {\n     |                                           ^^^^^^^^^ help: change this to: `codes[0]`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 69145,
                        "byte_start": 69136,
                        "column_end": 52,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2148,
                        "line_start": 2148,
                        "suggested_replacement": "codes[0]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 43,
                            "text": "            if let Some(n) = parse_number(&codes[0]) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 69145,
                    "byte_start": 69136,
                    "column_end": 52,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2148,
                    "line_start": 2148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 43,
                        "text": "            if let Some(n) = parse_number(&codes[0]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: use of `char::is_digit` with literal radix of 16\n    --> src\\lib.rs:2151:38\n     |\n2151 |                 if s.chars().all(|c| c.is_digit(16)) {\n     |                                      ^^^^^^^^^^^^^^ help: try: `c.is_ascii_hexdigit()`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix\n     = note: `#[warn(clippy::is_digit_ascii_radix)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::is_digit_ascii_radix)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 69259,
                        "byte_start": 69245,
                        "column_end": 52,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2151,
                        "line_start": 2151,
                        "suggested_replacement": "c.is_ascii_hexdigit()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 38,
                            "text": "                if s.chars().all(|c| c.is_digit(16)) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::is_digit_ascii_radix",
                  "explanation": null
                },
                "level": "warning",
                "message": "use of `char::is_digit` with literal radix of 16",
                "spans": [
                  {
                    "byte_end": 69259,
                    "byte_start": 69245,
                    "column_end": 52,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2151,
                    "line_start": 2151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 38,
                        "text": "                if s.chars().all(|c| c.is_digit(16)) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: written amount is not handled\n    --> src\\lib.rs:2371:13\n     |\n2371 |             w.write(b\"\\xEF\\xBF\\xBD\")?;\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = help: use `Write::write_all` instead, or handle partial writes\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n     = note: `#[deny(clippy::unused_io_amount)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use `Write::write_all` instead, or handle partial writes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::unused_io_amount)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::unused_io_amount",
                  "explanation": null
                },
                "level": "error",
                "message": "written amount is not handled",
                "spans": [
                  {
                    "byte_end": 75509,
                    "byte_start": 75484,
                    "column_end": 38,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2371,
                    "line_start": 2371,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 13,
                        "text": "            w.write(b\"\\xEF\\xBF\\xBD\")?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp1fxg05tp/termcolor-1.4.1#termcolor@1.4.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "termcolor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp1fxg05tp\\termcolor-1.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this seems like a manual implementation of the non-exhaustive pattern\n    --> src\\lib.rs:2071:1\n     |\n2071 | / pub enum Color {\n2072 | |     Black,\n2073 | |     Blue,\n2074 | |     Green,\n...    |\n2083 | |     __Nonexhaustive,\n2084 | | }\n     | |_^\n     |\nhelp: remove this variant\n    --> src\\lib.rs:2083:5\n     |\n2083 |     __Nonexhaustive,\n     |     ^^^^^^^^^^^^^^^\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n     = note: `#[warn(clippy::manual_non_exhaustive)]` on by default\nhelp: use the `#[non_exhaustive]` attribute instead\n     |\n2071 + #[non_exhaustive]\n2072 | pub enum Color {\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 66244,
                        "byte_start": 66229,
                        "column_end": 20,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2083,
                        "line_start": 2083,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 5,
                            "text": "    __Nonexhaustive,"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_non_exhaustive)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the `#[non_exhaustive]` attribute instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 66064,
                        "byte_start": 66064,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 2071,
                        "line_start": 2071,
                        "suggested_replacement": "#[non_exhaustive]\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub enum Color {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_non_exhaustive",
                  "explanation": null
                },
                "level": "warning",
                "message": "this seems like a manual implementation of the non-exhaustive pattern",
                "spans": [
                  {
                    "byte_end": 66247,
                    "byte_start": 66064,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 2084,
                    "line_start": 2071,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "pub enum Color {"
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "    Black,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "    Blue,"
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "    Green,"
                      },
                      {
                        "highlight_end": 9,
                        "highlight_start": 1,
                        "text": "    Red,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "    Cyan,"
                      },
                      {
                        "highlight_end": 13,
                        "highlight_start": 1,
                        "text": "    Magenta,"
                      },
                      {
                        "highlight_end": 12,
                        "highlight_start": 1,
                        "text": "    Yellow,"
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "    White,"
                      },
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "    Ansi256(u8),"
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "    Rgb(u8, u8, u8),"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "    #[doc(hidden)]"
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "    __Nonexhaustive,"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 12
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "termcolor",
          "version": "1.4.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\n[Settings](https://docs.rs/termcolor/latest/settings.html)\n[Help](https://docs.rs/termcolor/latest/help.html)\nSummary[Source](https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572)\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#organization)Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream)Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling [`WriteColor::set_color`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color), and this may include calling [`WriteColor::reset`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset) before the program exits to a shell.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter)Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal)Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s [`isatty`](https://man7.org/linux/man-pages/man3/isatty.3.html) function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n[\u24d8](https://docs.rs/termcolor/latest/termcolor/ \"This example is not tested\")```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs[\u00a7](https://docs.rs/termcolor/latest/termcolor/#structs)\n\n[Ansi](https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html \"struct termcolor::Ansi\")\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\n[Buffer](https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html \"struct termcolor::Buffer\")\n    Write colored text to memory.\n\n[BufferWriter](https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html \"struct termcolor::BufferWriter\")\n    Writes colored buffers to stdout or stderr.\n\n[BufferedStandardStream](https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html \"struct termcolor::BufferedStandardStream\")\n    Like `StandardStream`, but does buffered writing.\n\n[ColorChoiceParseError](https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html \"struct termcolor::ColorChoiceParseError\")\n    An error that occurs when parsing a `ColorChoice` fails.\n\n[ColorSpec](https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html \"struct termcolor::ColorSpec\")\n    A color specification.\n\n[HyperlinkSpec](https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html \"struct termcolor::HyperlinkSpec\")\n    A hyperlink specification.\n\n[NoColor](https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html \"struct termcolor::NoColor\")\n    Satisfies `WriteColor` but ignores all color options.\n\n[ParseColorError](https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html \"struct termcolor::ParseColorError\")\n    An error from parsing an invalid color specification.\n\n[StandardStream](https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html \"struct termcolor::StandardStream\")\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\n[StandardStreamLock](https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html \"struct termcolor::StandardStreamLock\")\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums[\u00a7](https://docs.rs/termcolor/latest/termcolor/#enums)\n\n[Color](https://docs.rs/termcolor/latest/termcolor/enum.Color.html \"enum termcolor::Color\")\n    The set of available colors for the terminal foreground/background.\n\n[ColorChoice](https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html \"enum termcolor::ColorChoice\")\n    ColorChoice represents the color preferences of an end user.\n## Traits[\u00a7](https://docs.rs/termcolor/latest/termcolor/#traits)\n\n[WriteColor](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html \"trait termcolor::WriteColor\")\n    This trait describes the behavior of writers that support colored output.\n",
            "markdown_with_citations": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## \u00a7\u27e84\u27e9Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## \u00a7\u27e85\u27e9Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling `WriteColor::set_color`\u27e86\u27e9, and this may include calling `WriteColor::reset`\u27e87\u27e9 before the program exits to a shell.\n## \u00a7\u27e88\u27e9Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## \u00a7\u27e89\u27e9Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s `isatty`\u27e810\u27e9 function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s `IsTerminal`\u27e811\u27e9 trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n\u24d8\u27e812\u27e9```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs\u00a7\u27e813\u27e9\n\nAnsi\u27e814\u27e9\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\nBuffer\u27e815\u27e9\n    Write colored text to memory.\n\nBufferWriter\u27e816\u27e9\n    Writes colored buffers to stdout or stderr.\n\nBufferedStandardStream\u27e817\u27e9\n    Like `StandardStream`, but does buffered writing.\n\nColorChoiceParseError\u27e818\u27e9\n    An error that occurs when parsing a `ColorChoice` fails.\n\nColorSpec\u27e819\u27e9\n    A color specification.\n\nHyperlinkSpec\u27e820\u27e9\n    A hyperlink specification.\n\nNoColor\u27e821\u27e9\n    Satisfies `WriteColor` but ignores all color options.\n\nParseColorError\u27e822\u27e9\n    An error from parsing an invalid color specification.\n\nStandardStream\u27e823\u27e9\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\nStandardStreamLock\u27e824\u27e9\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums\u00a7\u27e825\u27e9\n\nColor\u27e826\u27e9\n    The set of available colors for the terminal foreground/background.\n\nColorChoice\u27e827\u27e9\n    ColorChoice represents the color preferences of an end user.\n## Traits\u00a7\u27e828\u27e9\n\nWriteColor\u27e829\u27e9\n    This trait describes the behavior of writers that support colored output.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/termcolor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/termcolor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572: Source\n\u27e84\u27e9 https://docs.rs/termcolor/latest/termcolor/#organization: \u00a7\n\u27e85\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream: \u00a7\n\u27e86\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color: `WriteColor::set_color`\n\u27e87\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset: `WriteColor::reset`\n\u27e88\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter: \u00a7\n\u27e89\u27e9 https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal: \u00a7\n\u27e810\u27e9 https://man7.org/linux/man-pages/man3/isatty.3.html: `isatty`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.IsTerminal.html: `IsTerminal`\n\u27e812\u27e9 https://docs.rs/termcolor/latest/termcolor/: This example is not tested - \u24d8\n\u27e813\u27e9 https://docs.rs/termcolor/latest/termcolor/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html: struct termcolor::Ansi - Ansi\n\u27e815\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html: struct termcolor::Buffer - Buffer\n\u27e816\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html: struct termcolor::BufferWriter - BufferWriter\n\u27e817\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html: struct termcolor::BufferedStandardStream - BufferedStandardStream\n\u27e818\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html: struct termcolor::ColorChoiceParseError - ColorChoiceParseError\n\u27e819\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html: struct termcolor::ColorSpec - ColorSpec\n\u27e820\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html: struct termcolor::HyperlinkSpec - HyperlinkSpec\n\u27e821\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html: struct termcolor::NoColor - NoColor\n\u27e822\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html: struct termcolor::ParseColorError - ParseColorError\n\u27e823\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html: struct termcolor::StandardStream - StandardStream\n\u27e824\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html: struct termcolor::StandardStreamLock - StandardStreamLock\n\u27e825\u27e9 https://docs.rs/termcolor/latest/termcolor/#enums: \u00a7\n\u27e826\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.Color.html: enum termcolor::Color - Color\n\u27e827\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html: enum termcolor::ColorChoice - ColorChoice\n\u27e828\u27e9 https://docs.rs/termcolor/latest/termcolor/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html: trait termcolor::WriteColor - WriteColor\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "termcolor",
          "version": "1.4.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\n[Settings](https://docs.rs/termcolor/latest/settings.html)\n[Help](https://docs.rs/termcolor/latest/help.html)\nSummary[Source](https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572)\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#organization)Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream)Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling [`WriteColor::set_color`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color), and this may include calling [`WriteColor::reset`](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset) before the program exits to a shell.\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter)Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## [\u00a7](https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal)Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s [`isatty`](https://man7.org/linux/man-pages/man3/isatty.3.html) function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n[\u24d8](https://docs.rs/termcolor/latest/termcolor/ \"This example is not tested\")```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs[\u00a7](https://docs.rs/termcolor/latest/termcolor/#structs)\n\n[Ansi](https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html \"struct termcolor::Ansi\")\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\n[Buffer](https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html \"struct termcolor::Buffer\")\n    Write colored text to memory.\n\n[BufferWriter](https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html \"struct termcolor::BufferWriter\")\n    Writes colored buffers to stdout or stderr.\n\n[BufferedStandardStream](https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html \"struct termcolor::BufferedStandardStream\")\n    Like `StandardStream`, but does buffered writing.\n\n[ColorChoiceParseError](https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html \"struct termcolor::ColorChoiceParseError\")\n    An error that occurs when parsing a `ColorChoice` fails.\n\n[ColorSpec](https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html \"struct termcolor::ColorSpec\")\n    A color specification.\n\n[HyperlinkSpec](https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html \"struct termcolor::HyperlinkSpec\")\n    A hyperlink specification.\n\n[NoColor](https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html \"struct termcolor::NoColor\")\n    Satisfies `WriteColor` but ignores all color options.\n\n[ParseColorError](https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html \"struct termcolor::ParseColorError\")\n    An error from parsing an invalid color specification.\n\n[StandardStream](https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html \"struct termcolor::StandardStream\")\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\n[StandardStreamLock](https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html \"struct termcolor::StandardStreamLock\")\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums[\u00a7](https://docs.rs/termcolor/latest/termcolor/#enums)\n\n[Color](https://docs.rs/termcolor/latest/termcolor/enum.Color.html \"enum termcolor::Color\")\n    The set of available colors for the terminal foreground/background.\n\n[ColorChoice](https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html \"enum termcolor::ColorChoice\")\n    ColorChoice represents the color preferences of an end user.\n## Traits[\u00a7](https://docs.rs/termcolor/latest/termcolor/#traits)\n\n[WriteColor](https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html \"trait termcolor::WriteColor\")\n    This trait describes the behavior of writers that support colored output.\n",
            "markdown_with_citations": "[](https://docs.rs/termcolor/latest/termcolor/all.html \"show sidebar\")\n# Crate termcolorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.\nThis crate also provides platform independent support for writing colored text to an in memory buffer. While this is easy to do with ANSI escape sequences (because they are in the buffer themselves), it is trickier to do with the Windows console API, which requires synchronous communication.\nIn ANSI mode, this crate also provides support for writing hyperlinks.\n## \u00a7\u27e84\u27e9Organization\nThe `WriteColor` trait extends the `io::Write` trait with methods for setting colors or resetting them.\n`StandardStream` and `StandardStreamLock` both satisfy `WriteColor` and are analogous to `std::io::Stdout` and `std::io::StdoutLock`, or `std::io::Stderr` and `std::io::StderrLock`.\n`Buffer` is an in memory buffer that supports colored text. In a parallel program, each thread might write to its own buffer. A buffer can be printed to using a `BufferWriter`. The advantage of this design is that each thread can work in parallel on a buffer without having to synchronize access to global resources such as the Windows console. Moreover, this design also prevents interleaving of buffer output.\n`Ansi` and `NoColor` both satisfy `WriteColor` for arbitrary implementors of `io::Write`. These types are useful when you know exactly what you need. An analogous type for the Windows console is not provided since it cannot exist.\n## \u00a7\u27e85\u27e9Example: using `StandardStream`\nThe `StandardStream` type in this crate works similarly to `std::io::Stdout`, except it is augmented with methods for coloring by the `WriteColor` trait. For example, to write some green text:\n```\nuse std::io::Write;\nuse termcolor::{Color, ColorChoice, ColorSpec, StandardStream, WriteColor};\nlet mut stdout = StandardStream::stdout(ColorChoice::Always);\nstdout.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut stdout, \"green text!\")?;\n```\n\nNote that any text written to the terminal now will be colored green when using ANSI escape sequences, even if it is written via stderr, and even if stderr had previously been set to `Color::Red`. Users will need to manage any color changes themselves by calling `WriteColor::set_color`\u27e86\u27e9, and this may include calling `WriteColor::reset`\u27e87\u27e9 before the program exits to a shell.\n## \u00a7\u27e88\u27e9Example: using `BufferWriter`\nA `BufferWriter` can create buffers and write buffers to stdout or stderr. It does _not_ implement `io::Write` or `WriteColor` itself. Instead, `Buffer` implements `io::Write` and `io::WriteColor`.\nThis example shows how to print some green text to stderr.\n```\nuse std::io::Write;\nuse termcolor::{BufferWriter, Color, ColorChoice, ColorSpec, WriteColor};\nlet mut bufwtr = BufferWriter::stderr(ColorChoice::Always);\nlet mut buffer = bufwtr.buffer();\nbuffer.set_color(ColorSpec::new().set_fg(Some(Color::Green)))?;\nwriteln!(&mut buffer, \"green text!\")?;\nbufwtr.print(&buffer)?;\n```\n\n## \u00a7\u27e89\u27e9Detecting presence of a terminal\nIn many scenarios when using color, one often wants to enable colors automatically when writing to a terminal and disable colors automatically when writing to anything else. The typical way to achieve this in Unix environments is via libc\u2019s `isatty`\u27e810\u27e9 function. Unfortunately, this notoriously does not work well in Windows environments. To work around that, the recommended solution is to use the standard library\u2019s `IsTerminal`\u27e811\u27e9 trait. It goes out of its way to get it as right as possible in Windows environments.\nFor example, in a command line application that exposes a `--color` flag, your logic for how to enable colors might look like this:\n\u24d8\u27e812\u27e9```\nuse std::io::IsTerminal;\nuse termcolor::{ColorChoice, StandardStream};\nlet preference = argv.get_flag(\"color\").unwrap_or(\"auto\");\nlet mut choice = preference.parse::<ColorChoice>()?;\nif choice == ColorChoice::Auto && !std::io::stdin().is_terminal() {\n  choice = ColorChoice::Never;\n}\nlet stdout = StandardStream::stdout(choice);\n// ... write to stdout\n```\n\nCurrently, `termcolor` does not provide anything to do this for you.\n## Structs\u00a7\u27e813\u27e9\n\nAnsi\u27e814\u27e9\n    Satisfies `WriteColor` using standard ANSI escape sequences.\n\nBuffer\u27e815\u27e9\n    Write colored text to memory.\n\nBufferWriter\u27e816\u27e9\n    Writes colored buffers to stdout or stderr.\n\nBufferedStandardStream\u27e817\u27e9\n    Like `StandardStream`, but does buffered writing.\n\nColorChoiceParseError\u27e818\u27e9\n    An error that occurs when parsing a `ColorChoice` fails.\n\nColorSpec\u27e819\u27e9\n    A color specification.\n\nHyperlinkSpec\u27e820\u27e9\n    A hyperlink specification.\n\nNoColor\u27e821\u27e9\n    Satisfies `WriteColor` but ignores all color options.\n\nParseColorError\u27e822\u27e9\n    An error from parsing an invalid color specification.\n\nStandardStream\u27e823\u27e9\n    Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.\n\nStandardStreamLock\u27e824\u27e9\n    `StandardStreamLock` is a locked reference to a `StandardStream`.\n## Enums\u00a7\u27e825\u27e9\n\nColor\u27e826\u27e9\n    The set of available colors for the terminal foreground/background.\n\nColorChoice\u27e827\u27e9\n    ColorChoice represents the color preferences of an end user.\n## Traits\u00a7\u27e828\u27e9\n\nWriteColor\u27e829\u27e9\n    This trait describes the behavior of writers that support colored output.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/termcolor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/termcolor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/termcolor/latest/src/termcolor/lib.rs.html#1-2572: Source\n\u27e84\u27e9 https://docs.rs/termcolor/latest/termcolor/#organization: \u00a7\n\u27e85\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-standardstream: \u00a7\n\u27e86\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.set_color: `WriteColor::set_color`\n\u27e87\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html#tymethod.reset: `WriteColor::reset`\n\u27e88\u27e9 https://docs.rs/termcolor/latest/termcolor/#example-using-bufferwriter: \u00a7\n\u27e89\u27e9 https://docs.rs/termcolor/latest/termcolor/#detecting-presence-of-a-terminal: \u00a7\n\u27e810\u27e9 https://man7.org/linux/man-pages/man3/isatty.3.html: `isatty`\n\u27e811\u27e9 https://doc.rust-lang.org/std/io/trait.IsTerminal.html: `IsTerminal`\n\u27e812\u27e9 https://docs.rs/termcolor/latest/termcolor/: This example is not tested - \u24d8\n\u27e813\u27e9 https://docs.rs/termcolor/latest/termcolor/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Ansi.html: struct termcolor::Ansi - Ansi\n\u27e815\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.Buffer.html: struct termcolor::Buffer - Buffer\n\u27e816\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferWriter.html: struct termcolor::BufferWriter - BufferWriter\n\u27e817\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.BufferedStandardStream.html: struct termcolor::BufferedStandardStream - BufferedStandardStream\n\u27e818\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorChoiceParseError.html: struct termcolor::ColorChoiceParseError - ColorChoiceParseError\n\u27e819\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ColorSpec.html: struct termcolor::ColorSpec - ColorSpec\n\u27e820\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.HyperlinkSpec.html: struct termcolor::HyperlinkSpec - HyperlinkSpec\n\u27e821\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.NoColor.html: struct termcolor::NoColor - NoColor\n\u27e822\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.ParseColorError.html: struct termcolor::ParseColorError - ParseColorError\n\u27e823\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStream.html: struct termcolor::StandardStream - StandardStream\n\u27e824\u27e9 https://docs.rs/termcolor/latest/termcolor/struct.StandardStreamLock.html: struct termcolor::StandardStreamLock - StandardStreamLock\n\u27e825\u27e9 https://docs.rs/termcolor/latest/termcolor/#enums: \u00a7\n\u27e826\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.Color.html: enum termcolor::Color - Color\n\u27e827\u27e9 https://docs.rs/termcolor/latest/termcolor/enum.ColorChoice.html: enum termcolor::ColorChoice - ColorChoice\n\u27e828\u27e9 https://docs.rs/termcolor/latest/termcolor/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/termcolor/latest/termcolor/trait.WriteColor.html: trait termcolor::WriteColor - WriteColor\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `termcolor` crate provides a cross-platform abstraction for writing colored text to terminals using ANSI escape sequences or the Windows console API. It supports both direct terminal output and in-memory buffers for parallelized, non-interleaved colored text rendering. Key features include the `WriteColor` trait for color manipulation, `StandardStream` for terminal output, `BufferWriter` for buffered writing, and utilities for detecting terminal presence and managing color preferences.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Cross-platform support for colored text  \n\u2705 Factual: The `termcolor` crate provides a cross-platform abstraction for writing colored text to terminals, using ANSI escape sequences on Unix-like systems and the Windows console API on Windows.  \n\u274c Counterfactual: The `termcolor` crate exclusively supports ANSI escape sequences for colored text and does not provide compatibility with the Windows console API.  \n\n---\n\n### Pair 2: Buffer-based colored output  \n\u2705 Factual: The `BufferWriter` in `termcolor` allows threads to write colored text to separate in-memory buffers, enabling parallelism and preventing interleaving of output.  \n\u274c Counterfactual: The `BufferWriter` in `termcolor` directly implements `WriteColor`, allowing it to write colored text to a terminal without requiring intermediate buffers.  \n\n---\n\n### Pair 3: Detecting terminal presence  \n\u2705 Factual: The `termcolor` crate recommends using the standard library's `IsTerminal` trait to detect whether output is being written to a terminal, ensuring compatibility across Unix and Windows environments.  \n\u274c Counterfactual: The `termcolor` crate includes built-in functionality for detecting terminal presence, eliminating the need to use external traits like `IsTerminal`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9fce1f6e-075f6de9-1751260280",
      "timestamp": "2025-06-30T05:11:20.045182+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]